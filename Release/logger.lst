
C:\Users\nilad\AppData\Local\Temp\VMBuilds\logger\teensy40\Release/logger.ino.elf:     file format elf32-littlearm


Disassembly of section .text.code:

60001030 <ResetHandler>:
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001030:	4b76      	ldr	r3, [pc, #472]	; (6000120c <ResetHandler+0x1dc>)
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001032:	f44f 012a 	mov.w	r1, #11141120	; 0xaa0000
void ResetHandler(void)
{
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
60001036:	4a76      	ldr	r2, [pc, #472]	; (60001210 <ResetHandler+0x1e0>)
	IOMUXC_GPR_GPR16 = 0x00200007;
60001038:	4876      	ldr	r0, [pc, #472]	; (60001214 <ResetHandler+0x1e4>)
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
void startup_late_hook(void)		__attribute__ ((weak, alias("startup_default_late_hook")));
__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
void ResetHandler(void)
{
6000103a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
6000103e:	645a      	str	r2, [r3, #68]	; 0x44
	IOMUXC_GPR_GPR16 = 0x00200007;
60001040:	6418      	str	r0, [r3, #64]	; 0x40
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001042:	4a75      	ldr	r2, [pc, #468]	; (60001218 <ResetHandler+0x1e8>)
	unsigned int i;

#if defined(__IMXRT1062__)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
60001044:	6399      	str	r1, [r3, #56]	; 0x38
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
60001046:	4695      	mov	sp, r2
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001048:	4a74      	ldr	r2, [pc, #464]	; (6000121c <ResetHandler+0x1ec>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
6000104a:	f503 3330 	add.w	r3, r3, #180224	; 0x2c000
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000104e:	4974      	ldr	r1, [pc, #464]	; (60001220 <ResetHandler+0x1f0>)
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001050:	2008      	movs	r0, #8
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001052:	428a      	cmp	r2, r1
	IOMUXC_GPR_GPR17 = (uint32_t)&_flexram_bank_config;
	IOMUXC_GPR_GPR16 = 0x00200007;
	IOMUXC_GPR_GPR14 = 0x00AA0000;
	__asm__ volatile("mov sp, %0" : : "r" ((uint32_t)&_estack) : );
#endif
	PMU_MISC0_SET = 1<<3; //Use bandgap-based bias currents for best performance (Page 1175)
60001054:	f8c3 0154 	str.w	r0, [r3, #340]	; 0x154
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
60001058:	d00f      	beq.n	6000107a <ResetHandler+0x4a>
	while (dest < dest_end) {
6000105a:	4b72      	ldr	r3, [pc, #456]	; (60001224 <ResetHandler+0x1f4>)
6000105c:	429a      	cmp	r2, r3
6000105e:	d20c      	bcs.n	6000107a <ResetHandler+0x4a>
60001060:	43d4      	mvns	r4, r2
60001062:	4608      	mov	r0, r1
60001064:	4423      	add	r3, r4
60001066:	f023 0303 	bic.w	r3, r3, #3
6000106a:	3304      	adds	r3, #4
6000106c:	440b      	add	r3, r1
		*dest++ = *src++;
6000106e:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001072:	4298      	cmp	r0, r3
		*dest++ = *src++;
60001074:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
60001078:	d1f9      	bne.n	6000106e <ResetHandler+0x3e>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
6000107a:	4a6b      	ldr	r2, [pc, #428]	; (60001228 <ResetHandler+0x1f8>)
6000107c:	496b      	ldr	r1, [pc, #428]	; (6000122c <ResetHandler+0x1fc>)
6000107e:	428a      	cmp	r2, r1
60001080:	d00f      	beq.n	600010a2 <ResetHandler+0x72>
	while (dest < dest_end) {
60001082:	4b6b      	ldr	r3, [pc, #428]	; (60001230 <ResetHandler+0x200>)
60001084:	429a      	cmp	r2, r3
60001086:	d20c      	bcs.n	600010a2 <ResetHandler+0x72>
60001088:	43d4      	mvns	r4, r2
6000108a:	4608      	mov	r0, r1
6000108c:	4423      	add	r3, r4
6000108e:	f023 0303 	bic.w	r3, r3, #3
60001092:	3304      	adds	r3, #4
60001094:	440b      	add	r3, r1
		*dest++ = *src++;
60001096:	f850 1b04 	ldr.w	r1, [r0], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
6000109a:	4298      	cmp	r0, r3
		*dest++ = *src++;
6000109c:	f842 1b04 	str.w	r1, [r2], #4

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_copy(uint32_t *dest, const uint32_t *src, uint32_t *dest_end)
{
	if (dest == src) return;
	while (dest < dest_end) {
600010a0:	d1f9      	bne.n	60001096 <ResetHandler+0x66>
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010a2:	4a64      	ldr	r2, [pc, #400]	; (60001234 <ResetHandler+0x204>)
600010a4:	4b64      	ldr	r3, [pc, #400]	; (60001238 <ResetHandler+0x208>)
600010a6:	429a      	cmp	r2, r3
600010a8:	d20b      	bcs.n	600010c2 <ResetHandler+0x92>
600010aa:	43d0      	mvns	r0, r2
600010ac:	4611      	mov	r1, r2
		*dest++ = 0;
600010ae:	2400      	movs	r4, #0
600010b0:	4403      	add	r3, r0
600010b2:	f023 0303 	bic.w	r3, r3, #3
600010b6:	3304      	adds	r3, #4
600010b8:	4413      	add	r3, r2
600010ba:	f841 4b04 	str.w	r4, [r1], #4
}

__attribute__((section(".startup"), optimize("no-tree-loop-distribute-patterns")))
static void memory_clear(uint32_t *dest, uint32_t *dest_end)
{
	while (dest < dest_end) {
600010be:	428b      	cmp	r3, r1
600010c0:	d1fb      	bne.n	600010ba <ResetHandler+0x8a>
	memory_copy(&_stext, &_stextload, &_etext);
	memory_copy(&_sdata, &_sdataload, &_edata);
	memory_clear(&_sbss, &_ebss);

	// enable FPU
	SCB_CPACR = 0x00F00000;
600010c2:	4a5e      	ldr	r2, [pc, #376]	; (6000123c <ResetHandler+0x20c>)
600010c4:	f44f 0170 	mov.w	r1, #15728640	; 0xf00000
600010c8:	4b5d      	ldr	r3, [pc, #372]	; (60001240 <ResetHandler+0x210>)
600010ca:	6011      	str	r1, [r2, #0]
600010cc:	f503 7130 	add.w	r1, r3, #704	; 0x2c0
600010d0:	4a5c      	ldr	r2, [pc, #368]	; (60001244 <ResetHandler+0x214>)

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
600010d2:	f843 2f04 	str.w	r2, [r3, #4]!
600010d6:	4299      	cmp	r1, r3
600010d8:	d1fb      	bne.n	600010d2 <ResetHandler+0xa2>
600010da:	4b5b      	ldr	r3, [pc, #364]	; (60001248 <ResetHandler+0x218>)
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
600010dc:	2180      	movs	r1, #128	; 0x80
600010de:	4a5b      	ldr	r2, [pc, #364]	; (6000124c <ResetHandler+0x21c>)
600010e0:	f803 1b01 	strb.w	r1, [r3], #1
600010e4:	4293      	cmp	r3, r2
600010e6:	d1fb      	bne.n	600010e0 <ResetHandler+0xb0>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
600010e8:	4c59      	ldr	r4, [pc, #356]	; (60001250 <ResetHandler+0x220>)
600010ea:	f04f 3780 	mov.w	r7, #2155905152	; 0x80808080
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
600010ee:	4e59      	ldr	r6, [pc, #356]	; (60001254 <ResetHandler+0x224>)
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
600010f0:	f04f 32ff 	mov.w	r2, #4294967295
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010f4:	f8df a19c 	ldr.w	sl, [pc, #412]	; 60001294 <ResetHandler+0x264>
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
600010f8:	2500      	movs	r5, #0
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
600010fa:	4b57      	ldr	r3, [pc, #348]	; (60001258 <ResetHandler+0x228>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
600010fc:	f8df 9198 	ldr.w	r9, [pc, #408]	; 60001298 <ResetHandler+0x268>
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001100:	f8df 8198 	ldr.w	r8, [pc, #408]	; 6000129c <ResetHandler+0x26c>
	SCB_CPACR = 0x00F00000;

	// set up blank interrupt & exception vector table
	for (i=0; i < NVIC_NUM_INTERRUPTS + 16; i++) _VectorsRam[i] = &unused_interrupt_vector;
	for (i=0; i < NVIC_NUM_INTERRUPTS; i++) NVIC_SET_PRIORITY(i, 128);
	SCB_VTOR = (uint32_t)_VectorsRam;
60001104:	f8c3 a000 	str.w	sl, [r3]
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001108:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
6000110c:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
60001110:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
60001114:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
60001118:	69f3      	ldr	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
6000111a:	493c      	ldr	r1, [pc, #240]	; (6000120c <ResetHandler+0x1dc>)
	reset_PFD();
	
	// Configure clocks
	// TODO: make sure all affected peripherals are turned off!
	// PIT & GPT timers to run from 24 MHz clock (independent of CPU speed)
	CCM_CSCMR1 = (CCM_CSCMR1 & ~CCM_CSCMR1_PERCLK_PODF(0x3F)) | CCM_CSCMR1_PERCLK_CLK_SEL;
6000111c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
60001120:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001124:	61f3      	str	r3, [r6, #28]
	// UARTs run from 24 MHz clock (works if PLL3 off or bypassed)
	CCM_CSCDR1 = (CCM_CSCDR1 & ~CCM_CSCDR1_UART_CLK_PODF(0x3F)) | CCM_CSCDR1_UART_CLK_SEL;
60001126:	6a73      	ldr	r3, [r6, #36]	; 0x24
60001128:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
6000112c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
60001130:	6273      	str	r3, [r6, #36]	; 0x24

#if defined(__IMXRT1062__)
	// Use fast GPIO6, GPIO7, GPIO8, GPIO9
	IOMUXC_GPR_GPR26 = 0xFFFFFFFF;
60001132:	668a      	str	r2, [r1, #104]	; 0x68
	IOMUXC_GPR_GPR27 = 0xFFFFFFFF;
60001134:	66ca      	str	r2, [r1, #108]	; 0x6c
	IOMUXC_GPR_GPR28 = 0xFFFFFFFF;
60001136:	670a      	str	r2, [r1, #112]	; 0x70
	IOMUXC_GPR_GPR29 = 0xFFFFFFFF;
60001138:	674a      	str	r2, [r1, #116]	; 0x74
	// must enable PRINT_DEBUG_STUFF in debug/print.h
	printf_debug_init();
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
6000113a:	f000 f8b1 	bl	600012a0 <configure_cache>
extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
6000113e:	4a47      	ldr	r2, [pc, #284]	; (6000125c <ResetHandler+0x22c>)
60001140:	2063      	movs	r0, #99	; 0x63
	SYST_CVR = 0;
60001142:	4b47      	ldr	r3, [pc, #284]	; (60001260 <ResetHandler+0x230>)
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
60001144:	4947      	ldr	r1, [pc, #284]	; (60001264 <ResetHandler+0x234>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
60001146:	6010      	str	r0, [r2, #0]
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001148:	2203      	movs	r2, #3
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
6000114a:	601d      	str	r5, [r3, #0]
#define SYSTICK_EXT_FREQ 100000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
6000114c:	f8ca 1038 	str.w	r1, [sl, #56]	; 0x38
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
60001150:	f843 2c08 	str.w	r2, [r3, #-8]
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001154:	4944      	ldr	r1, [pc, #272]	; (60001268 <ResetHandler+0x238>)
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
60001156:	4a45      	ldr	r2, [pc, #276]	; (6000126c <ResetHandler+0x23c>)

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001158:	4845      	ldr	r0, [pc, #276]	; (60001270 <ResetHandler+0x240>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
6000115a:	f8c3 2d08 	str.w	r2, [r3, #3336]	; 0xd08
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000115e:	680b      	ldr	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001160:	4a44      	ldr	r2, [pc, #272]	; (60001274 <ResetHandler+0x244>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
60001162:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000

extern volatile uint32_t systick_cycle_count;
static void configure_systick(void)
{
	_VectorsRam[14] = pendablesrvreq_isr;
	_VectorsRam[15] = systick_isr;
60001166:	f8ca 003c 	str.w	r0, [sl, #60]	; 0x3c
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
6000116a:	4843      	ldr	r0, [pc, #268]	; (60001278 <ResetHandler+0x248>)
	_VectorsRam[15] = systick_isr;
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
6000116c:	600b      	str	r3, [r1, #0]
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
6000116e:	6813      	ldr	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001170:	4942      	ldr	r1, [pc, #264]	; (6000127c <ResetHandler+0x24c>)
	SYST_RVR = (SYSTICK_EXT_FREQ / 1000) - 1;
	SYST_CVR = 0;
	SYST_CSR = SYST_CSR_TICKINT | SYST_CSR_ENABLE;
	SCB_SHPR3 = 0x20200000;  // Systick, pendablesrvreq_isr = priority 32;
	ARM_DEMCR |= ARM_DEMCR_TRCENA;
	ARM_DWT_CTRL |= ARM_DWT_CTRL_CYCCNTENA; // turn on cycle counter
60001172:	f043 0301 	orr.w	r3, r3, #1
60001176:	6013      	str	r3, [r2, #0]
	systick_cycle_count = ARM_DWT_CYCCNT; // compiled 0, corrected w/1st systick
60001178:	6803      	ldr	r3, [r0, #0]
6000117a:	600b      	str	r3, [r1, #0]
	printf("\n***********IMXRT Startup**********\n");
	printf("test %d %d %d\n", 1, -1234567, 3);

	configure_cache();
	configure_systick();
	usb_pll_start();	
6000117c:	f000 f902 	bl	60001384 <usb_pll_start>
}

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
60001180:	f8c4 7104 	str.w	r7, [r4, #260]	; 0x104
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001184:	483e      	ldr	r0, [pc, #248]	; (60001280 <ResetHandler+0x250>)

FLASHMEM void reset_PFD()
{	
	//Reset PLL2 PFDs, set default frequencies:
	CCM_ANALOG_PFD_528_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);
	CCM_ANALOG_PFD_528 = 0x2018101B; // PFD0:352, PFD1:594, PFD2:396, PFD3:297 MHz 	
60001186:	f8c4 9100 	str.w	r9, [r4, #256]	; 0x100
	//PLL3:
	CCM_ANALOG_PFD_480_SET = (1 << 31) | (1 << 23) | (1 << 15) | (1 << 7);	
6000118a:	f8c4 70f4 	str.w	r7, [r4, #244]	; 0xf4
	CCM_ANALOG_PFD_480 = 0x13110D0C; // PFD0:720, PFD1:664, PFD2:508, PFD3:454 MHz
6000118e:	f8c4 80f0 	str.w	r8, [r4, #240]	; 0xf0
	configure_cache();
	configure_systick();
	usb_pll_start();	
	reset_PFD(); //TODO: is this really needed?
#ifdef F_CPU
	set_arm_clock(F_CPU);
60001192:	f000 fa65 	bl	60001660 <__set_arm_clock_veneer>
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
60001196:	6ef1      	ldr	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
60001198:	4a3a      	ldr	r2, [pc, #232]	; (60001284 <ResetHandler+0x254>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
6000119a:	f441 5140 	orr.w	r1, r1, #12288	; 0x3000
	PIT_TCTRL1 = 0;
	PIT_TCTRL2 = 0;
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
6000119e:	4b3a      	ldr	r3, [pc, #232]	; (60001288 <ResetHandler+0x258>)
#ifdef F_CPU
	set_arm_clock(F_CPU);
#endif

	// Undo PIT timer usage by ROM startup
	CCM_CCGR1 |= CCM_CCGR1_PIT(CCM_CCGR_ON);
600011a0:	66f1      	str	r1, [r6, #108]	; 0x6c
	PIT_MCR = 0;
600011a2:	6015      	str	r5, [r2, #0]
	PIT_TCTRL0 = 0;
600011a4:	f8c2 5108 	str.w	r5, [r2, #264]	; 0x108
	PIT_TCTRL1 = 0;
600011a8:	f8c2 5118 	str.w	r5, [r2, #280]	; 0x118
	PIT_TCTRL2 = 0;
600011ac:	f8c2 5128 	str.w	r5, [r2, #296]	; 0x128
	PIT_TCTRL3 = 0;
600011b0:	f8c2 5138 	str.w	r5, [r2, #312]	; 0x138

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
600011b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011b6:	07d2      	lsls	r2, r2, #31
600011b8:	d408      	bmi.n	600011cc <ResetHandler+0x19c>
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011ba:	f642 6215 	movw	r2, #11797	; 0x2e15
	PIT_TCTRL3 = 0;

	// initialize RTC
	if (!(SNVS_LPCR & SNVS_LPCR_SRTC_ENV)) {
		// if SRTC isn't running, start it with default Jan 1, 2019
		SNVS_LPSRTCLR = 1546300800u << 15;
600011be:	4933      	ldr	r1, [pc, #204]	; (6000128c <ResetHandler+0x25c>)
600011c0:	6559      	str	r1, [r3, #84]	; 0x54
		SNVS_LPSRTCMR = 1546300800u >> 17;
600011c2:	651a      	str	r2, [r3, #80]	; 0x50
		SNVS_LPCR |= SNVS_LPCR_SRTC_ENV;
600011c4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
600011c6:	f042 0201 	orr.w	r2, r2, #1
600011ca:	639a      	str	r2, [r3, #56]	; 0x38
	}
	SNVS_HPCR |= SNVS_HPCR_RTC_EN | SNVS_HPCR_HP_TS;
600011cc:	4a2e      	ldr	r2, [pc, #184]	; (60001288 <ResetHandler+0x258>)
600011ce:	4c30      	ldr	r4, [pc, #192]	; (60001290 <ResetHandler+0x260>)
600011d0:	6893      	ldr	r3, [r2, #8]
600011d2:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
600011d6:	6093      	str	r3, [r2, #8]

#ifdef ARDUINO_TEENSY41
	configure_external_ram();
#endif
	startup_early_hook();
600011d8:	f000 fa56 	bl	60001688 <__startup_early_hook_veneer>
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
600011dc:	6823      	ldr	r3, [r4, #0]
	while (millis() < 20) ; // wait at least 20ms before starting USB
600011de:	2b13      	cmp	r3, #19
600011e0:	d9fc      	bls.n	600011dc <ResetHandler+0x1ac>
	usb_init();
600011e2:	f000 f98f 	bl	60001504 <usb_init>
	analog_init();
600011e6:	f000 fa03 	bl	600015f0 <analog_init>
	pwm_init();
600011ea:	f000 fa49 	bl	60001680 <__pwm_init_veneer>
	tempmon_init();
600011ee:	f000 f8fb 	bl	600013e8 <tempmon_init>

	startup_late_hook();
600011f2:	f000 fa3d 	bl	60001670 <__startup_late_hook_veneer>
600011f6:	6823      	ldr	r3, [r4, #0]
	while (millis() < 300) ; // wait at least 300ms before calling user code
600011f8:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
600011fc:	d3fb      	bcc.n	600011f6 <ResetHandler+0x1c6>
	//printf("before C++ constructors\n");
	__libc_init_array();
600011fe:	f000 fa2b 	bl	60001658 <____libc_init_array_veneer>
	//printf("after C++ constructors\n");
	//printf("before setup\n");
	main();
60001202:	f000 fa31 	bl	60001668 <__main_veneer>
	
	while (1) asm("WFI");
60001206:	bf30      	wfi
60001208:	e7fd      	b.n	60001206 <ResetHandler+0x1d6>
6000120a:	bf00      	nop
6000120c:	400ac000 	.word	0x400ac000
60001210:	aaaaaaaf 	.word	0xaaaaaaaf
60001214:	00200007 	.word	0x00200007
60001218:	20070000 	.word	0x20070000
6000121c:	00000000 	.word	0x00000000
60001220:	60001864 	.word	0x60001864
60001224:	0000e928 	.word	0x0000e928
60001228:	20000000 	.word	0x20000000
6000122c:	60010190 	.word	0x60010190
60001230:	20001b20 	.word	0x20001b20
60001234:	20001b20 	.word	0x20001b20
60001238:	20038300 	.word	0x20038300
6000123c:	e000ed88 	.word	0xe000ed88
60001240:	20036ffc 	.word	0x20036ffc
60001244:	000090ad 	.word	0x000090ad
60001248:	e000e400 	.word	0xe000e400
6000124c:	e000e4a0 	.word	0xe000e4a0
60001250:	400d8000 	.word	0x400d8000
60001254:	400fc000 	.word	0x400fc000
60001258:	e000ed08 	.word	0xe000ed08
6000125c:	e000e014 	.word	0xe000e014
60001260:	e000e018 	.word	0xe000e018
60001264:	0000a289 	.word	0x0000a289
60001268:	e000edfc 	.word	0xe000edfc
6000126c:	20200000 	.word	0x20200000
60001270:	0000a28d 	.word	0x0000a28d
60001274:	e0001000 	.word	0xe0001000
60001278:	e0001004 	.word	0xe0001004
6000127c:	20036c98 	.word	0x20036c98
60001280:	23c34600 	.word	0x23c34600
60001284:	40084000 	.word	0x40084000
60001288:	400d4000 	.word	0x400d4000
6000128c:	56c00000 	.word	0x56c00000
60001290:	20036ca0 	.word	0x20036ca0
60001294:	20037000 	.word	0x20037000
60001298:	2018101b 	.word	0x2018101b
6000129c:	13110d0c 	.word	0x13110d0c

600012a0 <configure_cache>:
#define SIZE_2G		(SCB_MPU_RASR_SIZE(30) | SCB_MPU_RASR_ENABLE)
#define SIZE_4G		(SCB_MPU_RASR_SIZE(31) | SCB_MPU_RASR_ENABLE)
#define REGION(n)	(SCB_MPU_RBAR_REGION(n) | SCB_MPU_RBAR_VALID)

FLASHMEM void configure_cache(void)
{
600012a0:	b5f0      	push	{r4, r5, r6, r7, lr}
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012a2:	4a24      	ldr	r2, [pc, #144]	; (60001334 <configure_cache+0x94>)
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012a4:	2000      	movs	r0, #0

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012a6:	4b24      	ldr	r3, [pc, #144]	; (60001338 <configure_cache+0x98>)
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012a8:	f04f 0c10 	mov.w	ip, #16
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012ac:	4c23      	ldr	r4, [pc, #140]	; (6000133c <configure_cache+0x9c>)

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012ae:	2611      	movs	r6, #17

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012b0:	f8df e0c8 	ldr.w	lr, [pc, #200]	; 6000137c <configure_cache+0xdc>
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012b4:	2712      	movs	r7, #18
	//printf("MPU_TYPE = %08lX\n", SCB_MPU_TYPE);
	//printf("CCR = %08lX\n", SCB_CCR);

	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU
600012b6:	6020      	str	r0, [r4, #0]
	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
600012b8:	2501      	movs	r5, #1
	// TODO: check if caches already active - skip?

	SCB_MPU_CTRL = 0; // turn off MPU

	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
600012ba:	f8c2 c000 	str.w	ip, [r2]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
600012be:	f8c3 e000 	str.w	lr, [r3]
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
600012c2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012c4:	f8df e0b8 	ldr.w	lr, [pc, #184]	; 60001380 <configure_cache+0xe0>

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012c8:	4e1d      	ldr	r6, [pc, #116]	; (60001340 <configure_cache+0xa0>)
	uint32_t i = 0;
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); //https://developer.arm.com/docs/146793866/10/why-does-the-cortex-m7-initiate-axim-read-accesses-to-memory-addresses-that-do-not-fall-under-a-defined-mpu-region
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_4G;
	
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;
600012ca:	f8c3 e000 	str.w	lr, [r3]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012ce:	491d      	ldr	r1, [pc, #116]	; (60001344 <configure_cache+0xa4>)
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // ITCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | SIZE_512K;

	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
600012d0:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;
600012d2:	601e      	str	r6, [r3, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012d4:	f041 0115 	orr.w	r1, r1, #21
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012d8:	4f1b      	ldr	r7, [pc, #108]	; (60001348 <configure_cache+0xa8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012da:	4e1c      	ldr	r6, [pc, #112]	; (6000134c <configure_cache+0xac>)
	// TODO: trap regions should be created last, because the hardware gives
	//  priority to the higher number ones.
	SCB_MPU_RBAR = 0x00000000 | REGION(i++); // trap NULL pointer deref
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
600012dc:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;
600012de:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e0:	4f1b      	ldr	r7, [pc, #108]	; (60001350 <configure_cache+0xb0>)
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012e2:	4e1c      	ldr	r6, [pc, #112]	; (60001354 <configure_cache+0xb4>)
	SCB_MPU_RASR =  DEV_NOCACHE | NOACCESS | SIZE_32B;

	SCB_MPU_RBAR = 0x00200000 | REGION(i++); // Boot ROM
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
600012e4:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
600012e6:	601e      	str	r6, [r3, #0]
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012e8:	4f1b      	ldr	r7, [pc, #108]	; (60001358 <configure_cache+0xb8>)
	SCB_MPU_RASR = MEM_CACHE_WT | READONLY | SIZE_128K;

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
600012ea:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012ec:	4e1b      	ldr	r6, [pc, #108]	; (6000135c <configure_cache+0xbc>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012ee:	491c      	ldr	r1, [pc, #112]	; (60001360 <configure_cache+0xc0>)

	SCB_MPU_RBAR = 0x20000000 | REGION(i++); // DTCM
	SCB_MPU_RASR = MEM_NOCACHE | READWRITE | NOEXEC | SIZE_512K;
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;
600012f0:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
600012f2:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600012f4:	4f1b      	ldr	r7, [pc, #108]	; (60001364 <configure_cache+0xc4>)
	
	SCB_MPU_RBAR = ((uint32_t)&_ebss) | REGION(i++); // trap stack overflow
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;
600012f6:	6019      	str	r1, [r3, #0]

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012f8:	4e1b      	ldr	r6, [pc, #108]	; (60001368 <configure_cache+0xc8>)

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
600012fa:	491c      	ldr	r1, [pc, #112]	; (6000136c <configure_cache+0xcc>)
	SCB_MPU_RASR = SCB_MPU_RASR_TEX(0) | NOACCESS | NOEXEC | SIZE_32B;

	SCB_MPU_RBAR = 0x20200000 | REGION(i++); // RAM (AXI bus)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
600012fc:	6017      	str	r7, [r2, #0]
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;
600012fe:	601e      	str	r6, [r3, #0]

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001300:	4f1b      	ldr	r7, [pc, #108]	; (60001370 <configure_cache+0xd0>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_1M;

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
60001302:	6011      	str	r1, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
60001304:	4e1b      	ldr	r6, [pc, #108]	; (60001374 <configure_cache+0xd4>)
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
60001306:	491c      	ldr	r1, [pc, #112]	; (60001378 <configure_cache+0xd8>)

	SCB_MPU_RBAR = 0x40000000 | REGION(i++); // Peripherals
	SCB_MPU_RASR = DEV_NOCACHE | READWRITE | NOEXEC | SIZE_64M;

	SCB_MPU_RBAR = 0x60000000 | REGION(i++); // QSPI Flash
	SCB_MPU_RASR = MEM_CACHE_WBWA | READONLY | SIZE_16M;
60001308:	601f      	str	r7, [r3, #0]

	SCB_MPU_RBAR = 0x70000000 | REGION(i++); // FlexSPI2
6000130a:	6016      	str	r6, [r2, #0]
	SCB_MPU_RASR = MEM_CACHE_WBWA | READWRITE | NOEXEC | SIZE_16M;
6000130c:	6019      	str	r1, [r3, #0]

	// TODO: protect access to power supply config

	SCB_MPU_CTRL = SCB_MPU_CTRL_ENABLE;
6000130e:	6025      	str	r5, [r4, #0]

	// cache enable, ARM DDI0403E, pg 628
	asm("dsb");
60001310:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001314:	f3bf 8f6f 	isb	sy
	SCB_CACHE_ICIALLU = 0;
60001318:	f8c3 01b0 	str.w	r0, [r3, #432]	; 0x1b0

	asm("dsb");
6000131c:	f3bf 8f4f 	dsb	sy
	asm("isb");
60001320:	f3bf 8f6f 	isb	sy
	SCB_CCR |= (SCB_CCR_IC | SCB_CCR_DC);
60001324:	f852 3c88 	ldr.w	r3, [r2, #-136]
60001328:	f443 3340 	orr.w	r3, r3, #196608	; 0x30000
6000132c:	f842 3c88 	str.w	r3, [r2, #-136]
60001330:	bdf0      	pop	{r4, r5, r6, r7, pc}
60001332:	bf00      	nop
60001334:	e000ed9c 	.word	0xe000ed9c
60001338:	e000eda0 	.word	0xe000eda0
6000133c:	e000ed94 	.word	0xe000ed94
60001340:	00100009 	.word	0x00100009
60001344:	20038300 	.word	0x20038300
60001348:	00200013 	.word	0x00200013
6000134c:	07020021 	.word	0x07020021
60001350:	20000014 	.word	0x20000014
60001354:	13080025 	.word	0x13080025
60001358:	10000009 	.word	0x10000009
6000135c:	20200016 	.word	0x20200016
60001360:	130b0027 	.word	0x130b0027
60001364:	40000017 	.word	0x40000017
60001368:	13100033 	.word	0x13100033
6000136c:	60000018 	.word	0x60000018
60001370:	070b002f 	.word	0x070b002f
60001374:	70000019 	.word	0x70000019
60001378:	130b002f 	.word	0x130b002f
6000137c:	1000003f 	.word	0x1000003f
60001380:	03080025 	.word	0x03080025

60001384 <usb_pll_start>:

#endif // ARDUINO_TEENSY41


FLASHMEM void usb_pll_start()
{
60001384:	b4f0      	push	{r4, r5, r6, r7}
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
60001386:	4a17      	ldr	r2, [pc, #92]	; (600013e4 <usb_pll_start+0x60>)
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
60001388:	2740      	movs	r7, #64	; 0x40
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
6000138a:	f44f 3180 	mov.w	r1, #65536	; 0x10000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
6000138e:	f44f 5680 	mov.w	r6, #4096	; 0x1000
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
60001392:	f44f 5500 	mov.w	r5, #8192	; 0x2000
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
60001396:	f44f 4440 	mov.w	r4, #49152	; 0xc000
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
6000139a:	f243 0042 	movw	r0, #12354	; 0x3042


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
6000139e:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013a0:	f013 0f02 	tst.w	r3, #2
600013a4:	d006      	beq.n	600013b4 <usb_pll_start+0x30>
			printf("  ERROR, 528 MHz mode!\n"); // never supposed to use this mode!
			CCM_ANALOG_PLL_USB1_CLR = 0xC000;			// bypass 24 MHz
600013a6:	6194      	str	r4, [r2, #24]
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_BYPASS;	// bypass
600013a8:	6151      	str	r1, [r2, #20]
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_POWER |	// power down
600013aa:	6190      	str	r0, [r2, #24]


FLASHMEM void usb_pll_start()
{
	while (1) {
		uint32_t n = CCM_ANALOG_PLL_USB1; // pg 759
600013ac:	6913      	ldr	r3, [r2, #16]
		printf("CCM_ANALOG_PLL_USB1=%08lX\n", n);
		if (n & CCM_ANALOG_PLL_USB1_DIV_SELECT) {
600013ae:	f013 0f02 	tst.w	r3, #2
600013b2:	d1f8      	bne.n	600013a6 <usb_pll_start+0x22>
				CCM_ANALOG_PLL_USB1_DIV_SELECT |		// use 480 MHz
				CCM_ANALOG_PLL_USB1_ENABLE |			// disable
				CCM_ANALOG_PLL_USB1_EN_USB_CLKS;		// disable usb
			continue;
		}
		if (!(n & CCM_ANALOG_PLL_USB1_ENABLE)) {
600013b4:	f413 5f00 	tst.w	r3, #8192	; 0x2000
600013b8:	d101      	bne.n	600013be <usb_pll_start+0x3a>
			printf("  enable PLL\n");
			// TODO: should this be done so early, or later??
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_ENABLE;
600013ba:	6155      	str	r5, [r2, #20]
			continue;
600013bc:	e7ef      	b.n	6000139e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_POWER)) {
600013be:	f413 5f80 	tst.w	r3, #4096	; 0x1000
600013c2:	d101      	bne.n	600013c8 <usb_pll_start+0x44>
			printf("  power up PLL\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_POWER;
600013c4:	6156      	str	r6, [r2, #20]
			continue;
600013c6:	e7ea      	b.n	6000139e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_LOCK)) {
600013c8:	2b00      	cmp	r3, #0
600013ca:	dae8      	bge.n	6000139e <usb_pll_start+0x1a>
			printf("  wait for lock\n");
			continue;
		}
		if (n & CCM_ANALOG_PLL_USB1_BYPASS) {
600013cc:	f413 3f80 	tst.w	r3, #65536	; 0x10000
600013d0:	d001      	beq.n	600013d6 <usb_pll_start+0x52>
			printf("  turn off bypass\n");
			CCM_ANALOG_PLL_USB1_CLR = CCM_ANALOG_PLL_USB1_BYPASS;
600013d2:	6191      	str	r1, [r2, #24]
			continue;
600013d4:	e7e3      	b.n	6000139e <usb_pll_start+0x1a>
		}
		if (!(n & CCM_ANALOG_PLL_USB1_EN_USB_CLKS)) {
600013d6:	065b      	lsls	r3, r3, #25
600013d8:	d401      	bmi.n	600013de <usb_pll_start+0x5a>
			printf("  enable USB clocks\n");
			CCM_ANALOG_PLL_USB1_SET = CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
600013da:	6157      	str	r7, [r2, #20]
			continue;
600013dc:	e7df      	b.n	6000139e <usb_pll_start+0x1a>
		}
		return; // everything is as it should be  :-)
	}
}
600013de:	bcf0      	pop	{r4, r5, r6, r7}
600013e0:	4770      	bx	lr
600013e2:	bf00      	nop
600013e4:	400d8000 	.word	0x400d8000

600013e8 <tempmon_init>:
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013e8:	4a3b      	ldr	r2, [pc, #236]	; (600014d8 <tempmon_init+0xf0>)
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
600013ea:	eef3 6a09 	vmov.f32	s13, #57	; 0x41c80000  25.0

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
600013ee:	493b      	ldr	r1, [pc, #236]	; (600014dc <tempmon_init+0xf4>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600013f0:	2000      	movs	r0, #0
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013f2:	6813      	ldr	r3, [r2, #0]
  asm volatile ("dsb":::"memory");
  while (1) asm ("wfi");
}

FLASHMEM void tempmon_init(void)
{
600013f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
600013f6:	f023 0301 	bic.w	r3, r3, #1

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
600013fa:	2403      	movs	r4, #3
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
600013fc:	f8df e100 	ldr.w	lr, [pc, #256]	; 60001500 <tempmon_init+0x118>
  uint32_t calibrationData;
  uint32_t roomCount;
  uint32_t tempCodeVal;
      
  //first power on the temperature sensor - no register change
  TEMPMON_TEMPSENSE0 &= ~0x1U;
60001400:	6013      	str	r3, [r2, #0]

  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
60001402:	f8c2 4090 	str.w	r4, [r2, #144]	; 0x90
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
60001406:	f8d1 30e0 	ldr.w	r3, [r1, #224]	; 0xe0
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
6000140a:	4f35      	ldr	r7, [pc, #212]	; (600014e0 <tempmon_init+0xf8>)
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
6000140c:	b2dd      	uxtb	r5, r3
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000140e:	f3c3 240b 	ubfx	r4, r3, #8, #12
60001412:	4e34      	ldr	r6, [pc, #208]	; (600014e4 <tempmon_init+0xfc>)
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001414:	ebc4 5313 	rsb	r3, r4, r3, lsr #20
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001418:	ee07 5a90 	vmov	s15, r5
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000141c:	f1a5 0155 	sub.w	r1, r5, #85	; 0x55
  //set monitoring frequency - no register change
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
60001420:	f8ce 5000 	str.w	r5, [lr]
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001424:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001428:	eb03 0583 	add.w	r5, r3, r3, lsl #2
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000142c:	ee07 4a90 	vmov	s15, r4
60001430:	fb03 f101 	mul.w	r1, r3, r1
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;
60001434:	603b      	str	r3, [r7, #0]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001436:	eb03 1383 	add.w	r3, r3, r3, lsl #6
    s_hot_ROOM = s_hotTemp - 25.0f;
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
6000143a:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000143e:	ee07 1a90 	vmov	s15, r1
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
60001442:	1b49      	subs	r1, r1, r5
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001444:	ee77 6a66 	vsub.f32	s13, s14, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001448:	eeb8 7a67 	vcvt.f32.u32	s14, s15
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
6000144c:	4d26      	ldr	r5, [pc, #152]	; (600014e8 <tempmon_init+0x100>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000144e:	ee07 1a90 	vmov	s15, r1
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
60001452:	440b      	add	r3, r1
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
    roomCount = (uint32_t)(calibrationData & 0xFFF00000U) >> 0x14U;
    s_hot_ROOM = s_hotTemp - 25.0f;
60001454:	edc5 6a00 	vstr	s13, [r5]
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001458:	eef8 7a67 	vcvt.f32.u32	s15, s15
  TEMPMON_TEMPSENSE1 = (((uint32_t)(((uint32_t)(frequency)) << 0U)) & 0xFFFFU);
  
  //read calibration data - this works
  calibrationData = HW_OCOTP_ANA1;
    s_hotTemp = (uint32_t)(calibrationData & 0xFFU) >> 0x00U;
    s_hotCount = (uint32_t)(calibrationData & 0xFFF00U) >> 0X08U;
6000145c:	6034      	str	r4, [r6, #0]
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
6000145e:	eec7 5a26 	vdiv.f32	s11, s14, s13
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
#else
extern void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(enum IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
60001462:	4e22      	ldr	r6, [pc, #136]	; (600014ec <tempmon_init+0x104>)
60001464:	6815      	ldr	r5, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001466:	4922      	ldr	r1, [pc, #136]	; (600014f0 <tempmon_init+0x108>)
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
60001468:	4c22      	ldr	r4, [pc, #136]	; (600014f4 <tempmon_init+0x10c>)
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000146a:	ee87 6aa6 	vdiv.f32	s12, s15, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000146e:	ee07 3a90 	vmov	s15, r3
60001472:	4b21      	ldr	r3, [pc, #132]	; (600014f8 <tempmon_init+0x110>)
60001474:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
60001478:	eef8 7a67 	vcvt.f32.u32	s15, s15
6000147c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001480:	ee75 5a85 	vadd.f32	s11, s11, s10
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001484:	ee76 6a05 	vadd.f32	s13, s12, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001488:	eefc 5ae5 	vcvt.u32.f32	s11, s11
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
6000148c:	eefc 6ae6 	vcvt.u32.f32	s13, s13
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
60001490:	ee15 3a90 	vmov	r3, s11
60001494:	ea45 5303 	orr.w	r3, r5, r3, lsl #20
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
60001498:	ee16 5a90 	vmov	r5, s13
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
6000149c:	ee77 7a05 	vadd.f32	s15, s14, s10
    s_roomC_hotC = roomCount - s_hotCount;

    //time to set alarm temperatures
  //Set High Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
600014a0:	6013      	str	r3, [r2, #0]
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014a2:	ea01 4105 	and.w	r1, r1, r5, lsl #16
600014a6:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014aa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - highAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE0 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 20U)) & 0xFFF00000U);
  
  //Set Panic Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - panicAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 16U)) & 0xFFF0000U);
600014ae:	430b      	orrs	r3, r1
600014b0:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  // Set Low Temp Alarm Temp
  tempCodeVal = (uint32_t)(s_hotCount + (s_hotTemp - lowAlarmTemp) * s_roomC_hotC / s_hot_ROOM);
    TEMPMON_TEMPSENSE2 |= (((uint32_t)(((uint32_t)(tempCodeVal)) << 0U)) & 0xFFFU);
600014b4:	ee17 3a90 	vmov	r3, s15
600014b8:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
600014bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
600014c0:	430b      	orrs	r3, r1
600014c2:	f8c2 3110 	str.w	r3, [r2, #272]	; 0x110
  
  //Start temp monitoring
  TEMPMON_TEMPSENSE0 |= 0x2U;   //starts temp monitoring
600014c6:	6813      	ldr	r3, [r2, #0]
600014c8:	f043 0302 	orr.w	r3, r3, #2
600014cc:	6013      	str	r3, [r2, #0]

  //PANIC shutdown:
  NVIC_SET_PRIORITY(IRQ_TEMPERATURE_PANIC, 0);
600014ce:	7020      	strb	r0, [r4, #0]
  attachInterruptVector(IRQ_TEMPERATURE_PANIC, &Panic_Temp_isr);
  NVIC_ENABLE_IRQ(IRQ_TEMPERATURE_PANIC);
600014d0:	4b0a      	ldr	r3, [pc, #40]	; (600014fc <tempmon_init+0x114>)
600014d2:	2201      	movs	r2, #1
600014d4:	601a      	str	r2, [r3, #0]
600014d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
600014d8:	400d8180 	.word	0x400d8180
600014dc:	401f4400 	.word	0x401f4400
600014e0:	20036cac 	.word	0x20036cac
600014e4:	20036cb0 	.word	0x20036cb0
600014e8:	20036ca8 	.word	0x20036ca8
600014ec:	20037000 	.word	0x20037000
600014f0:	0fff0000 	.word	0x0fff0000
600014f4:	e000e440 	.word	0xe000e440
600014f8:	00009189 	.word	0x00009189
600014fc:	e000e108 	.word	0xe000e108
60001500:	20036ca4 	.word	0x20036ca4

60001504 <usb_init>:
FLASHMEM void usb_init(void)
{
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
60001504:	4b30      	ldr	r3, [pc, #192]	; (600015c8 <usb_init+0xc4>)
60001506:	f640 7261 	movw	r2, #3937	; 0xf61

static void run_callbacks(endpoint_t *ep);


FLASHMEM void usb_init(void)
{
6000150a:	b570      	push	{r4, r5, r6, lr}
	// TODO: only enable when VBUS detected
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
6000150c:	f8c3 2120 	str.w	r2, [r3, #288]	; 0x120

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
60001510:	f240 4504 	movw	r5, #1028	; 0x404
	// TODO: return to low power mode when VBUS removed
	// TODO: protect PMU access with MPU
	PMU_REG_3P0 = PMU_REG_3P0_OUTPUT_TRG(0x0F) | PMU_REG_3P0_BO_OFFSET(6)
		| PMU_REG_3P0_ENABLE_LINREG;

	usb_init_serialnumber();
60001514:	f000 f8bc 	bl	60001690 <__usb_init_serialnumber_veneer>

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001518:	492c      	ldr	r1, [pc, #176]	; (600015cc <usb_init+0xc8>)
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000151a:	482d      	ldr	r0, [pc, #180]	; (600015d0 <usb_init+0xcc>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
6000151c:	f8d1 2080 	ldr.w	r2, [r1, #128]	; 0x80
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001520:	4c2c      	ldr	r4, [pc, #176]	; (600015d4 <usb_init+0xd0>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001522:	f042 0203 	orr.w	r2, r2, #3
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001526:	4b2c      	ldr	r3, [pc, #176]	; (600015d8 <usb_init+0xd4>)

	usb_init_serialnumber();

	// assume PLL3 is already running - already done by usb_pll_start() in main.c

	CCM_CCGR6 |= CCM_CCGR6_USBOH3(CCM_CCGR_ON); // turn on clocks to USB peripheral
60001528:	f8c1 2080 	str.w	r2, [r1, #128]	; 0x80
	
	printf("BURSTSIZE=%08lX\n", USB1_BURSTSIZE);
	//USB1_BURSTSIZE = USB_BURSTSIZE_TXPBURST(4) | USB_BURSTSIZE_RXPBURST(4);
	USB1_BURSTSIZE = 0x0404;
6000152c:	f8c0 5160 	str.w	r5, [r0, #352]	; 0x160
	//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);

	// turn on PLL3, wait for 480 MHz lock?
	// turn on CCM clock gates?  CCGR6[CG0]
#if 1
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
60001530:	6822      	ldr	r2, [r4, #0]
60001532:	4013      	ands	r3, r2
60001534:	b91b      	cbnz	r3, 6000153e <usb_init+0x3a>
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
60001536:	f8d0 31a8 	ldr.w	r3, [r0, #424]	; 0x1a8
6000153a:	079a      	lsls	r2, r3, #30
6000153c:	d01a      	beq.n	60001574 <usb_init+0x70>
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000153e:	4b24      	ldr	r3, [pc, #144]	; (600015d0 <usb_init+0xcc>)
	if ((USBPHY1_PWD & (USBPHY_PWD_RXPWDRX | USBPHY_PWD_RXPWDDIFF | USBPHY_PWD_RXPWD1PT1
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
60001540:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
60001544:	4a23      	ldr	r2, [pc, #140]	; (600015d4 <usb_init+0xd0>)
60001546:	6351      	str	r1, [r2, #52]	; 0x34
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001548:	461a      	mov	r2, r3
	  | USBPHY_PWD_RXPWDENV | USBPHY_PWD_TXPWDV2I | USBPHY_PWD_TXPWDIBIAS
	  | USBPHY_PWD_TXPWDFS)) || (USB1_USBMODE & USB_USBMODE_CM_MASK)) {
		// USB controller is turned on from previous use
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
6000154a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
6000154e:	f041 0102 	orr.w	r1, r1, #2
60001552:	f8c3 1140 	str.w	r1, [r3, #320]	; 0x140
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
60001556:	f8d2 3140 	ldr.w	r3, [r2, #320]	; 0x140
6000155a:	079b      	lsls	r3, r3, #30
6000155c:	d4fb      	bmi.n	60001556 <usb_init+0x52>
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000155e:	f44f 3000 	mov.w	r0, #131072	; 0x20000
60001562:	491e      	ldr	r1, [pc, #120]	; (600015dc <usb_init+0xd8>)
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
60001564:	4b1b      	ldr	r3, [pc, #108]	; (600015d4 <usb_init+0xd0>)
60001566:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
		// reset needed to turn it off & start from clean slate
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
6000156a:	6008      	str	r0, [r1, #0]
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
6000156c:	2019      	movs	r0, #25
		USBPHY1_CTRL_SET = USBPHY_CTRL_SFTRST; // USBPHY1_CTRL page 3292
		USB1_USBCMD |= USB_USBCMD_RST; // reset controller
		int count=0;
		while (USB1_USBCMD & USB_USBCMD_RST) count++;
		NVIC_CLEAR_PENDING(IRQ_USB1);
		USBPHY1_CTRL_CLR = USBPHY_CTRL_SFTRST; // reset PHY
6000156e:	639a      	str	r2, [r3, #56]	; 0x38
		//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
		//printf("USBPHY1_TX=%08lX\n", USBPHY1_TX);
		//printf("USBPHY1_RX=%08lX\n", USBPHY1_RX);
		//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);
		//printf("USB1_USBMODE=%08lX\n", USB1_USBMODE);
		delay(25);
60001570:	f000 f892 	bl	60001698 <__delay_veneer>
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001574:	4d1a      	ldr	r5, [pc, #104]	; (600015e0 <usb_init+0xdc>)
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001576:	2200      	movs	r2, #0
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001578:	4b16      	ldr	r3, [pc, #88]	; (600015d4 <usb_init+0xd0>)
6000157a:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000157e:	4c14      	ldr	r4, [pc, #80]	; (600015d0 <usb_init+0xcc>)
60001580:	260a      	movs	r6, #10
	// ENDPTFLUSH	pg 3247
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
60001582:	6399      	str	r1, [r3, #56]	; 0x38
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001584:	4628      	mov	r0, r5
	// ENDPTSTAT	pg 3247
	// ENDPTCOMPLETE   3248
	// ENDPTCTRL0	pg 3249

	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
60001586:	601a      	str	r2, [r3, #0]
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
60001588:	4611      	mov	r1, r2
	USBPHY1_CTRL_CLR = USBPHY_CTRL_CLKGATE;
	USBPHY1_PWD = 0;
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
6000158a:	f8c4 61a8 	str.w	r6, [r4, #424]	; 0x1a8
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
6000158e:	f44f 7220 	mov.w	r2, #640	; 0x280
60001592:	f000 f871 	bl	60001678 <__memset_veneer>
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
60001596:	f44f 0681 	mov.w	r6, #4227072	; 0x408000
	endpoint_queue_head[1].config = (64 << 16);
6000159a:	f44f 0080 	mov.w	r0, #4194304	; 0x400000
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
6000159e:	f240 1343 	movw	r3, #323	; 0x143
600015a2:	4a10      	ldr	r2, [pc, #64]	; (600015e4 <usb_init+0xe0>)
600015a4:	4910      	ldr	r1, [pc, #64]	; (600015e8 <usb_init+0xe4>)
	//printf("USBPHY1_PWD=%08lX\n", USBPHY1_PWD);
	//printf("USBPHY1_CTRL=%08lX\n", USBPHY1_CTRL);

	USB1_USBMODE = USB_USBMODE_CM(2) | USB_USBMODE_SLOM;
	memset(endpoint_queue_head, 0, sizeof(endpoint_queue_head));
	endpoint_queue_head[0].config = (64 << 16) | (1 << 15);
600015a6:	602e      	str	r6, [r5, #0]
	endpoint_queue_head[1].config = (64 << 16);
600015a8:	6428      	str	r0, [r5, #64]	; 0x40
	USB1_ENDPOINTLISTADDR = (uint32_t)&endpoint_queue_head;
600015aa:	f8c4 5158 	str.w	r5, [r4, #344]	; 0x158
600015ae:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
	//  Recommended: enable all device interrupts including: USBINT, USBERRINT,
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
600015b2:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015b6:	4a0d      	ldr	r2, [pc, #52]	; (600015ec <usb_init+0xe8>)
600015b8:	f44f 3100 	mov.w	r1, #131072	; 0x20000
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015bc:	2301      	movs	r3, #1
	// Port Change Detect, USB Reset Received, DCSuspend.
	USB1_USBINTR = USB_USBINTR_UE | USB_USBINTR_UEE | /* USB_USBINTR_PCE | */
		USB_USBINTR_URE | USB_USBINTR_SLE;
	//_VectorsRam[IRQ_USB1+16] = &isr;
	attachInterruptVector(IRQ_USB1, &isr);
	NVIC_ENABLE_IRQ(IRQ_USB1);
600015be:	6011      	str	r1, [r2, #0]
	//printf("USB1_ENDPTCTRL0=%08lX\n", USB1_ENDPTCTRL0);
	//printf("USB1_ENDPTCTRL1=%08lX\n", USB1_ENDPTCTRL1);
	//printf("USB1_ENDPTCTRL2=%08lX\n", USB1_ENDPTCTRL2);
	//printf("USB1_ENDPTCTRL3=%08lX\n", USB1_ENDPTCTRL3);
	USB1_USBCMD = USB_USBCMD_RS;
600015c0:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
600015c4:	bd70      	pop	{r4, r5, r6, pc}
600015c6:	bf00      	nop
600015c8:	400d8000 	.word	0x400d8000
600015cc:	400fc000 	.word	0x400fc000
600015d0:	402e0000 	.word	0x402e0000
600015d4:	400d9000 	.word	0x400d9000
600015d8:	001e1c00 	.word	0x001e1c00
600015dc:	e000e28c 	.word	0xe000e28c
600015e0:	20038000 	.word	0x20038000
600015e4:	20037000 	.word	0x20037000
600015e8:	000092f5 	.word	0x000092f5
600015ec:	e000e10c 	.word	0xe000e10c

600015f0 <analog_init>:
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015f0:	4b11      	ldr	r3, [pc, #68]	; (60001638 <analog_init+0x48>)
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
600015f2:	4912      	ldr	r1, [pc, #72]	; (6000163c <analog_init+0x4c>)
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015f4:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
600015f6:	460a      	mov	r2, r1
{
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015f8:	f440 3040 	orr.w	r0, r0, #196608	; 0x30000
}

#define MAX_ADC_CLOCK 20000000

FLASHMEM void analog_init(void)
{
600015fc:	b430      	push	{r4, r5}
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
600015fe:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
60001600:	f240 6537 	movw	r5, #1591	; 0x637
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001604:	6ed8      	ldr	r0, [r3, #108]	; 0x6c
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001606:	24a0      	movs	r4, #160	; 0xa0
	uint32_t mode, avg=0;

	printf("analogInit\n");

	CCM_CCGR1 |= CCM_CCGR1_ADC1(CCM_CCGR_ON);
	CCM_CCGR1 |= CCM_CCGR1_ADC2(CCM_CCGR_ON);
60001608:	f440 7040 	orr.w	r0, r0, #768	; 0x300
6000160c:	66d8      	str	r0, [r3, #108]	; 0x6c
	} else {
		mode |= ADC_CFG_ADIV(0) | ADC_CFG_ADICLK(0); // use IPG
	}
#endif
	//ADC1
	ADC1_CFG = mode | ADC_CFG_ADHSC;
6000160e:	644d      	str	r5, [r1, #68]	; 0x44
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
60001610:	648c      	str	r4, [r1, #72]	; 0x48
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
60001612:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001614:	061b      	lsls	r3, r3, #24
60001616:	d4fc      	bmi.n	60001612 <analog_init+0x22>
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001618:	4b09      	ldr	r3, [pc, #36]	; (60001640 <analog_init+0x50>)
6000161a:	f240 6037 	movw	r0, #1591	; 0x637
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
6000161e:	21a0      	movs	r1, #160	; 0xa0
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001620:	461a      	mov	r2, r3
	ADC1_GC = avg | ADC_GC_CAL;		// begin cal
	calibrating = 1;
	while (ADC1_GC & ADC_GC_CAL) ;
	calibrating = 0;
	//ADC2
	ADC2_CFG = mode | ADC_CFG_ADHSC;
60001622:	6458      	str	r0, [r3, #68]	; 0x44
	ADC2_GC = avg | ADC_GC_CAL;		// begin cal
60001624:	6499      	str	r1, [r3, #72]	; 0x48
	calibrating = 1;
	while (ADC2_GC & ADC_GC_CAL) ;
60001626:	6c93      	ldr	r3, [r2, #72]	; 0x48
60001628:	f013 0380 	ands.w	r3, r3, #128	; 0x80
6000162c:	d1fb      	bne.n	60001626 <analog_init+0x36>
	calibrating = 0;
6000162e:	4a05      	ldr	r2, [pc, #20]	; (60001644 <analog_init+0x54>)
60001630:	7013      	strb	r3, [r2, #0]
}
60001632:	bc30      	pop	{r4, r5}
60001634:	4770      	bx	lr
60001636:	bf00      	nop
60001638:	400fc000 	.word	0x400fc000
6000163c:	400c4000 	.word	0x400c4000
60001640:	400c8000 	.word	0x400c8000
60001644:	20036ed2 	.word	0x20036ed2

60001648 <_init>:
60001648:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
6000164a:	bf00      	nop
6000164c:	bcf8      	pop	{r3, r4, r5, r6, r7}
6000164e:	bc08      	pop	{r3}
60001650:	469e      	mov	lr, r3
60001652:	4770      	bx	lr
60001654:	0000      	movs	r0, r0
	...

60001658 <____libc_init_array_veneer>:
60001658:	f85f f000 	ldr.w	pc, [pc]	; 6000165c <____libc_init_array_veneer+0x4>
6000165c:	0000ac4d 	.word	0x0000ac4d

60001660 <__set_arm_clock_veneer>:
60001660:	f85f f000 	ldr.w	pc, [pc]	; 60001664 <__set_arm_clock_veneer+0x4>
60001664:	00008b89 	.word	0x00008b89

60001668 <__main_veneer>:
60001668:	f85f f000 	ldr.w	pc, [pc]	; 6000166c <__main_veneer+0x4>
6000166c:	0000a2ad 	.word	0x0000a2ad

60001670 <__startup_late_hook_veneer>:
60001670:	f85f f000 	ldr.w	pc, [pc]	; 60001674 <__startup_late_hook_veneer+0x4>
60001674:	000090c9 	.word	0x000090c9

60001678 <__memset_veneer>:
60001678:	f85f f000 	ldr.w	pc, [pc]	; 6000167c <__memset_veneer+0x4>
6000167c:	0000b42d 	.word	0x0000b42d

60001680 <__pwm_init_veneer>:
60001680:	f85f f000 	ldr.w	pc, [pc]	; 60001684 <__pwm_init_veneer+0x4>
60001684:	0000a655 	.word	0x0000a655

60001688 <__startup_early_hook_veneer>:
60001688:	f85f f000 	ldr.w	pc, [pc]	; 6000168c <__startup_early_hook_veneer+0x4>
6000168c:	000090c5 	.word	0x000090c5

60001690 <__usb_init_serialnumber_veneer>:
60001690:	f85f f000 	ldr.w	pc, [pc]	; 60001694 <__usb_init_serialnumber_veneer+0x4>
60001694:	00009aad 	.word	0x00009aad

60001698 <__delay_veneer>:
60001698:	f85f f000 	ldr.w	pc, [pc]	; 6000169c <__delay_veneer+0x4>
6000169c:	00008e4d 	.word	0x00008e4d

600016a0 <__init_array_start>:
600016a0:	00000045 	.word	0x00000045
600016a4:	00002a69 	.word	0x00002a69

Disassembly of section .text.itcm:

00000000 <_stext>:
	...

00000020 <__do_global_dtors_aux>:
#include "FatVolume.h"
FatVolume* FatVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FatVolume::chdir(const char *path) {
  FatFile dir;
  if (!dir.open(vwd(), path, O_RDONLY)) {
      20:	4c05b510 	.word	0x4c05b510
      24:	7823      	ldrb	r3, [r4, #0]
    goto fail;
  }
  if (!dir.isDir()) {
      26:	b933      	cbnz	r3, 36 <_teensy_model_identifier+0x12>
      28:	4b04      	ldr	r3, [pc, #16]	; (3c <_teensy_model_identifier+0x18>)
      2a:	b113      	cbz	r3, 32 <_teensy_model_identifier+0xe>
      2c:	4804      	ldr	r0, [pc, #16]	; (40 <_teensy_model_identifier+0x1c>)
      2e:	f3af 8000 	nop.w
    goto fail;
  }
  m_vwd = dir;
      32:	2301      	movs	r3, #1
      34:	bd107023 	.word	0xbd107023
      38:	1b20      	subs	r0, r4, r4
      3a:	2000      	movs	r0, #0
      3c:	0000      	movs	r0, r0
  return true;

 fail:
  return false;
}
      3e:	0000      	movs	r0, r0
      40:	e924 0000 	stmdb	r4!, {}

00000044 <frame_dummy>:
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      44:	4b08      	ldr	r3, [pc, #32]	; (68 <frame_dummy+0x24>)
}
      46:	b510      	push	{r4, lr}
      48:	b11b      	cbz	r3, 52 <frame_dummy+0xe>
      4a:	4908      	.short	0x4908
    nmeas = (TEMPMON_TEMPSENSE0 & 0xFFF00U) >> 8U;
    /* Calculate temperature */
    tmeas = s_hotTemp - (float)((nmeas - s_hotCount) * s_hot_ROOM / s_roomC_hotC);

    return tmeas;
}
      4c:	4808      	ldr	r0, [pc, #32]	; (70 <frame_dummy+0x2c>)
      4e:	f3af      	.short	0xf3af
      50:	8000      	strh	r0, [r0, #0]
      52:	4808      	.short	0x4808
      54:	6803      	ldr	r3, [r0, #0]
      56:	b903      	.short	0xb903
      58:	bd10      	pop	{r4, pc}
      5a:	4b07      	.short	0x4b07
  }
  m_vwd = dir;
  return true;

 fail:
  return false;
      5c:	2b00      	cmp	r3, #0
}
      5e:	d0fb      	.short	0xd0fb
      60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
	if (mult < 1 || mult > 3) return;
	uint32_t config = (packet_size << 16) | (mult << 30);
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
      64:	bf004718 	.word	0xbf004718
      mode |= ADC_CFG_AVGS(2);
      mode1 |= ADC_CFG_AVGS(2);

    } else if (num >= 8) {
      mode |= ADC_CFG_AVGS(1);
      mode1 |= ADC_CFG_AVGS(1);
      68:	0000      	movs	r0, r0
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      6a:	0000      	movs	r0, r0
  ADC2_CFG = mode1;
  
  if(num >= 4){
      6c:	20001b24 	.word	0x20001b24
    } else {
      mode |= 0;
      mode1 |= 0;
    }

  ADC1_CFG = mode;
      70:	e924 0000 	stmdb	r4!, {}
  ADC2_CFG = mode1;
  
  if(num >= 4){
      74:	1b20      	subs	r0, r4, r4
      ADC1_GC |= ADC_GC_AVGE;// turns on averaging
      ADC2_GC |= ADC_GC_AVGE;// turns on averaging
  }
}
      76:	2000      	.short	0x2000
      78:	0000      	movs	r0, r0
	...

0000007c <Print::availableForWrite()>:
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
	virtual size_t write(const uint8_t *buffer, size_t size);
	virtual int availableForWrite(void)		{ return 0; }
      7c:	47702000 	.word	0x47702000

00000080 <Print::flush()>:
	virtual void flush()				{ }
      80:	4770      	bx	lr
      82:	bf00      	.short	0xbf00

00000084 <flexcan_isr_can2()>:
static void flexcan_isr_can1() {
  if ( _CAN1 ) _CAN1->flexcan_interrupt();
}

static void flexcan_isr_can2() {
  if ( _CAN2 ) _CAN2->flexcan_interrupt();
      84:	4b03      	ldr	r3, [pc, #12]	; (94 <flexcan_isr_can2()+0x10>)
      86:	6818      	.short	0x6818
      88:	b110      	cbz	r0, 90 <flexcan_isr_can2()+0xc>
      8a:	6803      	.short	0x6803
      8c:	681b      	ldr	r3, [r3, #0]
      8e:	4718      	.short	0x4718
      90:	4770      	bx	lr
      92:	bf00      	.short	0xbf00
      94:	6354      	str	r4, [r2, #52]	; 0x34
      96:	2003      	movs	r0, #3

00000098 <SdCardInterface::status()>:
   * \return The number of 512 byte data sectors in the card
   *         or zero if an error occurs.
   */
  virtual uint32_t sectorCount() = 0;
  /** \return card status. */
  virtual uint32_t status() {return 0XFFFFFFFF;}
      98:	f04f 30ff 	mov.w	r0, #4294967295
      9c:	4770      	bx	lr
	}
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
      9e:	bf00      	.short	0xbf00

000000a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>:
      a0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
}
      a4:	63ccf242 	.word	0x63ccf242
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
      a8:	4c5d      	ldr	r4, [pc, #372]	; (220 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x180>)
		i = sizeof(buf) - 1;
      aa:	b091      	sub	sp, #68	; 0x44
      ac:	e184f8df 	.word	0xe184f8df
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
      b0:	50c1      	str	r1, [r0, r3]
      b2:	4616      	mov	r6, r2
size_t Print::printNumber64(uint64_t n, uint8_t base, uint8_t sign)
{
	uint8_t buf[66];
	uint8_t digit, i;

	if (base < 2) return 0;
      b4:	6820      	ldr	r0, [r4, #0]
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
      b6:	ac10      	add	r4, sp, #64	; 0x40
      b8:	4b5a      	ldr	r3, [pc, #360]	; (224 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x184>)
      ba:	9000      	str	r0, [sp, #0]
			break;
		}
		// are we done yet?
		if (rxBufferLength >= length && tx_state >= 3) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
      bc:	6a1b      	ldr	r3, [r3, #32]
      be:	485a      	ldr	r0, [pc, #360]	; (228 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x188>)
      c0:	2301f3c3 	.word	0x2301f3c3
      c4:	6805      	ldr	r5, [r0, #0]
      c6:	4602      	.short	0x4602
      c8:	4423      	add	r3, r4
				break;
			}
		}
		yield();
      ca:	6804      	.short	0x6804
      cc:	f005 7580 	and.w	r5, r5, #16777216	; 0x1000000
	rxBufferLength = 0;
	uint32_t tx_state = 0; // 0=begin, 1=start, 2=data, 3=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
      d0:	7c40f813 	.word	0x7c40f813
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
      d4:	f044 43a0 	orr.w	r3, r4, #1342177280	; 0x50000000
      d8:	fe07fb0e 	.word	0xfe07fb0e
			while (tx_fifo < 4 && tx_state < 3) {
      dc:	6003      	str	r3, [r0, #0]
      de:	fbbe      	.short	0xfbbe
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
      e0:	f0f1 fbbe 	bl	f1860 <_flashimagelen+0xdefb8>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
      e4:	f7f0 1bcf 			; <UNDEFINED> instruction: 0xf7f01bcf
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
      e8:	6813      	ldr	r3, [r2, #0]
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
      ea:	01dc      	lsls	r4, r3, #7
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
      ec:	d5fc      	bpl.n	e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x48>
      ee:	2805      	cmp	r0, #5
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
				}
				tx_state++;
				tx_fifo--;
      f0:	f240 8093 	bls.w	21a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x17a>
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_state < 3) {
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
      f4:	46142200 	.word	0x46142200
      f8:	1c93      	adds	r3, r2, #2
      fa:	3201      	adds	r2, #1
      fc:	fcf3fbb0 	.word	0xfcf3fbb0
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
     100:	f1bc 0f19 	cmp.w	ip, #25
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
     104:	fb0c f303 	mul.w	r3, ip, r3
     108:	d8f6      	bhi.n	f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x58>
     10a:	f04f 0801 	mov.w	r8, #1
			uint32_t tx_fifo = port->MFSR & 0x07; // pg 2914
			while (tx_fifo < 4 && tx_state < 3) {
				if (tx_state == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | 1 | address;
				} else if (tx_state == 1) {
					port->MTDR = LPI2C_MTDR_CMD_RECEIVE | (length - 1);
     10e:	fbbe f3f3 	udiv	r3, lr, r3
			}
		}
		// monitor status, check for error conditions
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
     112:	1acb      	subs	r3, r1, r3
     114:	2b00      	cmp	r3, #0
     116:	bfb8      	it	lt
     118:	425b      	neglt	r3, r3
     11a:	42bb      	.short	0x42bb
     11c:	db6c      	blt.n	1f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x158>
     11e:	bf18      	it	ne
    divisor++;
    result = clockFreq / baud / (divisor + 1);
    if (result <= 25) {
      error = baud - (clockFreq / (result * (divisor + 1)));
      if (error < 0) error *= -1;
      if (error < bestError) {
     120:	f04f 0800 	movne.w	r8, #0
        bestError = error;
        bestDivisor = divisor;
      }
      if ((error == bestError) && (result > 11) && (result < 19)) {
     124:	030cf1ac 	.word	0x030cf1ac
     128:	2b06      	cmp	r3, #6
     12a:	d803      	bhi.n	134 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x94>
        bestError = error;
        bestDivisor = divisor;
     12c:	f1b8 0f00 	cmp.w	r8, #0
     130:	4614bf18 	.word	0x4614bf18
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;

  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();

  while (result > 5) {
     134:	f1bc 0f05 	cmp.w	ip, #5
     138:	d8de      	bhi.n	f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x58>
     13a:	1c63      	.short	0x1c63
  }

  divisor = bestDivisor;
  result = clockFreq / baud / (divisor + 1);

  if ((result < 5) || (result > 25) || (bestError > 300)) {
     13c:	f5b7 7f96 	cmp.w	r7, #300	; 0x12c
     140:	f0f3fbb0 	.word	0xf0f3fbb0
     144:	f1a0 0e05 	sub.w	lr, r0, #5
     148:	f1bedc59 	.word	0xf1bedc59
     14c:	0f14      	lsrs	r4, r2, #28
     14e:	d856      	.short	0xd856
    {4, 7, 6}, //21
    {5, 7, 6}, //22
    {6, 7, 6}, //23
    {6, 7, 7}, //24
    {7, 7, 7}, //25
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     150:	4f36      	ldr	r7, [pc, #216]	; (22c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x18c>)
     152:	46e8      	.short	0x46e8
     154:	f107 0930 	add.w	r9, r7, #48	; 0x30
     158:	6838      	ldr	r0, [r7, #0]
     15a:	3710      	.short	0x3710
     15c:	f857 1c0c 	ldr.w	r1, [r7, #-12]
     160:	f85746c4 	.word	0xf85746c4
     164:	2c08      	cmp	r4, #8
     166:	f108      	.short	0xf108
     168:	0810      	lsrs	r0, r2, #32
     16a:	f857      	.short	0xf857
     16c:	3c04      	subs	r4, #4
     16e:	454f      	.short	0x454f
     170:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
     174:	d1f0      	bne.n	158 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0xb8>
     176:	eb0e      	.short	0xeb0e
     178:	0e4e      	lsrs	r6, r1, #25
     17a:	ab10      	.short	0xab10
     17c:	6838      	ldr	r0, [r7, #0]
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     17e:	2e02      	.short	0x2e02
    {4, 7, 6}, //21
    {5, 7, 6}, //22
    {6, 7, 6}, //23
    {6, 7, 7}, //24
    {7, 7, 7}, //25
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
     180:	4473      	add	r3, lr
     182:	6879      	.short	0x6879
     184:	68ba      	ldr	r2, [r7, #8]
     186:	f8b7      	.short	0xf8b7
     188:	e00c      	b.n	1a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x104>
     18a:	7bbf      	ldrb	r7, [r7, #14]
     18c:	0007e8a8 	.word	0x0007e8a8
     190:	f8a8 e000 	strh.w	lr, [r8]
     194:	7002f888 	.word	0x7002f888
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
     198:	f813 0c40 	ldrb.w	r0, [r3, #-64]
     19c:	f813 1c3f 	ldrb.w	r1, [r3, #-63]
     1a0:	0007f000 	.word	0x0007f000
     1a4:	f813 3c3e 	ldrb.w	r3, [r3, #-62]
     1a8:	41c1ea4f 	.word	0x41c1ea4f
     1ac:	4a20      	ldr	r2, [pc, #128]	; (230 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x190>)
     1ae:	f440      	.short	0xf440
     1b0:	0080      	lsls	r0, r0, #2
     1b2:	ea4f      	.short	0xea4f
     1b4:	4303      	orrs	r3, r0
     1b6:	f401      	.short	0xf401
     1b8:	1160      	asrs	r0, r4, #5
     1ba:	f403      	.short	0xf403
     1bc:	23e0      	movs	r3, #224	; 0xe0
     1be:	ea41 0100 	orr.w	r1, r1, r0
     1c2:	ea43      	.short	0xea43
     1c4:	0301      	lsls	r1, r0, #12
     1c6:	f443      	.short	0xf443
     1c8:	4380      	bics	r0, r0
     1ca:	ea43      	.short	0xea43
     1cc:	6404      	str	r4, [r0, #64]	; 0x40
     1ce:	6014      	.short	0x6014
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
     1d0:	6813      	ldr	r3, [r2, #0]
     1d2:	bf14      	ite	ne
     1d4:	f023 0308 	bicne.w	r3, r3, #8
     1d8:	f043 0308 	orreq.w	r3, r3, #8
     1dc:	b9456013 	.word	0xb9456013
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     1e0:	4b11      	ldr	r3, [pc, #68]	; (228 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x188>)
     1e2:	6819      	.short	0x6819
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     1e4:	461a      	mov	r2, r3
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     1e6:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
     1ea:	6019      	str	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     1ec:	01db6813 	.word	0x01db6813
     1f0:	d4fc      	bmi.n	1ec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x14c>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
}
     1f2:	b011      	.short	0xb011
     1f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
     1f8:	4614461f 	.word	0x4614461f
    if (result <= 25) {
      error = baud - (clockFreq / (result * (divisor + 1)));
      if (error < 0) error *= -1;
      if (error < bestError) {
        bestError = error;
        bestDivisor = divisor;
     1fc:	e792      	b.n	124 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x84>

  divisor = bestDivisor;
  result = clockFreq / baud / (divisor + 1);

  if ((result < 5) || (result > 25) || (bestError > 300)) {
    if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
     1fe:	2d00      	.short	0x2d00
     200:	d1f7      	bne.n	1f2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x152>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     202:	4b09      	.short	0x4b09
     204:	6819      	ldr	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     206:	461a      	mov	r2, r3
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
     208:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
     20c:	6019      	str	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     20e:	6813      	ldr	r3, [r2, #0]
     210:	01d9      	lsls	r1, r3, #7
     212:	d4fc      	bmi.n	20e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x16e>
  }, propSeg = bitTimingTable[result][0], pSeg1 = bitTimingTable[result][1], pSeg2 = bitTimingTable[result][2];
  FLEXCANb_CTRL1(_bus) = (FLEXCAN_CTRL_PROPSEG(propSeg) | FLEXCAN_CTRL_RJW(1) | FLEXCAN_CTRL_PSEG1(pSeg1) |
                    FLEXCAN_CTRL_PSEG2(pSeg2) | FLEXCAN_CTRL_ERR_MSK | FLEXCAN_CTRL_PRESDIV(divisor));
  ( listen_only != LISTEN_ONLY ) ? FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_LOM : FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen-only mode */
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
}
     214:	b011      	add	sp, #68	; 0x44
     216:	e8bd      	.short	0xe8bd
     218:	83f0      	strh	r0, [r6, #30]
  int error = baud - (clockFreq / (result * (divisor + 1))), bestError = error;

  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();

  while (result > 5) {
     21a:	2301      	.short	0x2301
     21c:	2400      	movs	r4, #0
     21e:	e78d      	b.n	13c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)+0x9c>
     220:	00b4      	lsls	r4, r6, #2
     222:	2000      	.short	0x2000
     224:	c000      	stmia	r0!, {}
     226:	400f      	ands	r7, r1
     228:	4000      	ands	r0, r0
     22a:	401d      	ands	r5, r3
     22c:	200000b8 	.word	0x200000b8
     230:	4004      	ands	r4, r0
     232:	401d      	.short	0x401d
     234:	4240      	negs	r0, r0
     236:	000f      	movs	r7, r1

00000238 <SdFs::~SdFs()>:
//------------------------------------------------------------------------------
/**
 * \class SdFs
 * \brief SD file system class for FAT16, FAT32, and exFAT volumes.
 */
class SdFs : public SdBase<FsVolume> {
     238:	4770      	bx	lr
}


void HardwareSerial::addToSerialEventsList() {
	for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
		if (s_serials_with_serial_events[i] == this) return; // already in the list.
     23a:	bf00      	nop

0000023c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CANFD_message_t const&)>:
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3); /* input 3 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4); /* input 4 ID's to be filtered */
    bool setMBFilter(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2, uint32_t id3, uint32_t id4, uint32_t id5); /* input 5 ID's to be filtered */
    bool setMBFilterRange(FLEXCAN_MAILBOX mb_num, uint32_t id1, uint32_t id2); /* filter a range of ids */
    int write(const CAN_message_t &msg); /* use any available mailbox for transmitting */
    int write(const CANFD_message_t &msg) { return 0; } /* to satisfy base class for external pointers */
     23c:	47702000 	.word	0x47702000

00000240 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::isFD()>:
};

FCTP_CLASS class FlexCAN_T4 : public FlexCAN_T4_Base {
  public:
    FlexCAN_T4();
    bool isFD() { return 0; }
     240:	2000      	movs	r0, #0
     242:	4770      	.short	0x4770

00000244 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBoxSize()>:
#endif
    void enhanceFilter(FLEXCAN_MAILBOX mb_num);
    void distribute(bool state = 1) { distribution = state; }
    void enableDMA(bool state = 1);
    void disableDMA() { enableDMA(0); }
    uint8_t getFirstTxBoxSize(){ return 8; }
     244:	2008      	movs	r0, #8
     246:	4770      	bx	lr

00000248 <U8G2::write(unsigned char)>:
    /* SH1122, LD7032, ST7920, ST7986, LC7981, T6963, SED1330, RA8835, MAX7219, LS0 */ 
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
     248:	b538      	push	{r3, r4, r5, lr}
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
     24a:	f100 0508 	add.w	r5, r0, #8
     24e:	f8d0 30b4 	ldr.w	r3, [r0, #180]	; 0xb4
    /* SH1122, LD7032, ST7920, ST7986, LC7981, T6963, SED1330, RA8835, MAX7219, LS0 */ 
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
     252:	4604      	mov	r4, r0
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
     254:	47984628 	.word	0x47984628
      
      if ( e < 0x0fffe )
     258:	f64f 73fd 	movw	r3, #65533	; 0xfffd
     25c:	d9014298 	.word	0xd9014298
	
	
	
      }
      return 1;
     }
     260:	2001      	movs	r0, #1
     262:	bd38      	pop	{r3, r4, r5, pc}
    size_t write(uint8_t v) {
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
      
      if ( e < 0x0fffe )
      {
	u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
     264:	4603      	mov	r3, r0
     266:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
     26a:	4628      	mov	r0, r5
     26c:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	; 0xb8
     270:	f003 faaa 	bl	37c8 <u8g2_DrawGlyph>
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
     274:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
     278:	2b03      	cmp	r3, #3
     27a:	d8f1      	bhi.n	260 <U8G2::write(unsigned char)+0x18>
     27c:	e8df f003 	tbb	[pc, r3]
     280:	02080e14 	.word	0x02080e14
	    break;
	  case 2:
	    tx -= delta;
	    break;
	  case 3:
	    ty -= delta;
     284:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
     288:	f8a41a18 	.word	0xf8a41a18
     28c:	00ba      	lsls	r2, r7, #2
	    break;
     28e:	e7e7      	.short	0xe7e7
	    break;
	  case 1:
	    ty += delta;
	    break;
	  case 2:
	    tx -= delta;
     290:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
     294:	f8a41a18 	.word	0xf8a41a18
     298:	00b8      	lsls	r0, r7, #2
	    break;
     29a:	e7e1      	.short	0xe7e1
	{
	  case 0:
	    tx += delta;
	    break;
	  case 1:
	    ty += delta;
     29c:	f8b4 30ba 	ldrh.w	r3, [r4, #186]	; 0xba
     2a0:	f8a44418 	.word	0xf8a44418
     2a4:	00ba      	lsls	r2, r7, #2
	    break;
     2a6:	e7db      	.short	0xe7db
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
	{
	  case 0:
	    tx += delta;
     2a8:	f8b4 30b8 	ldrh.w	r3, [r4, #184]	; 0xb8
     2ac:	f8a44418 	.word	0xf8a44418
     2b0:	00b8      	lsls	r0, r7, #2
	    break;
     2b2:	e7d5      	.short	0xe7d5

000002b4 <RingBuf<FsFile, 204800u>::write(unsigned char const*, unsigned int)>:
   *
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const uint8_t* buf, size_t count) override {
     2b4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     2b8:	460f4682 	.word	0x460f4682
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     2bc:	b672      	cpsid	i
    count = m_count;
     2be:	4b1f      	.short	0x4b1f
     2c0:	58c3      	ldr	r3, [r0, r3]
    interrupts();
     2c2:	b662      	.short	0xb662
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     2c4:	f5c3 3348 	rsb	r3, r3, #204800	; 0x32000
     2c8:	d901429a 	.word	0xd901429a
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     2cc:	2301      	movs	r3, #1
     2ce:	7103      	.short	0x7103
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     2d0:	4b1a      	ldr	r3, [pc, #104]	; (33c <RingBuf<FsFile, 204800u>::write(unsigned char const*, unsigned int)+0x88>)
     2d2:	f85a      	.short	0xf85a
     2d4:	3003      	adds	r0, #3
     2d6:	f5c3      	.short	0xf5c3
     2d8:	3348      	adds	r3, #72	; 0x48
     2da:	429a      	.short	0x429a
     2dc:	bf28      	it	cs
     2de:	461a      	.short	0x461a
     2e0:	4616      	mov	r6, r2
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     2e2:	b30a      	.short	0xb30a
     2e4:	4b16      	ldr	r3, [pc, #88]	; (340 <RingBuf<FsFile, 204800u>::write(unsigned char const*, unsigned int)+0x8c>)
     2e6:	f10a      	.short	0xf10a
     2e8:	0908      	lsrs	r0, r1, #4
     2ea:	2500      	.short	0x2500
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
    return index < Size ? index : index - Size;
     2ec:	f8df 8054 	ldr.w	r8, [pc, #84]	; 344 <RingBuf<FsFile, 204800u>::write(unsigned char const*, unsigned int)+0x90>
     2f0:	f85a469b 	.word	0xf85a469b
     2f4:	0003      	movs	r3, r0
     2f6:	44d3      	.short	0x44d3
     2f8:	f5c0 3348 	rsb	r3, r0, #204800	; 0x32000
     2fc:	19791b74 	.word	0x19791b74
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     300:	4448      	add	r0, r9
     302:	429c      	.short	0x429c
     304:	bf28      	it	cs
     306:	461c      	movcs	r4, r3
     308:	44254622 	.word	0x44254622
     30c:	f008 fba2 	bl	8a54 <memcpy>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     310:	3000f8db 	.word	0x3000f8db
     314:	4423      	add	r3, r4
    return index < Size ? index : index - Size;
     316:	4543      	cmp	r3, r8
     318:	bf884618 	.word	0xbf884618
     31c:	f5a3 3048 	subhi.w	r0, r3, #204800	; 0x32000
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     320:	f8cb42b5 	.word	0xf8cb42b5
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     324:	0000      	movs	r0, r0
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     326:	d1e7      	.short	0xd1e7
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     328:	4b04      	ldr	r3, [pc, #16]	; (33c <RingBuf<FsFile, 204800u>::write(unsigned char const*, unsigned int)+0x88>)
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const uint8_t* buf, size_t count) override {
    return write((const void*)buf, count);
  }
     32a:	4630      	.short	0x4630
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     32c:	f85a 2003 	ldr.w	r2, [sl, r3]
     330:	f84a4416 	.word	0xf84a4416
     334:	6003      	str	r3, [r0, #0]
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const uint8_t* buf, size_t count) override {
    return write((const void*)buf, count);
  }
     336:	e8bd      	.short	0xe8bd
     338:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
     33a:	bf00      	.short	0xbf00
     33c:	200c      	movs	r0, #12
     33e:	0003      	.short	0x0003
     340:	2010      	movs	r0, #16
     342:	0003      	.short	0x0003
     344:	1fff      	subs	r7, r7, #7
     346:	0003      	.short	0x0003

00000348 <getTeensy3Time()>:
}

class teensy3_clock_class
{
public:
        static unsigned long get(void) __attribute__((always_inline)) { return rtc_get(); }
     348:	f008 be98 	b.w	907c <rtc_get>

0000034c <FsFile::~FsFile()>:
/**
 * \class StreamFile
 * \brief StreamFile class.
 */
template<class BaseFile, typename PosType>
class StreamFile : public stream_t, public BaseFile {
     34c:	b5104b04 	.word	0xb5104b04
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     350:	4604      	mov	r4, r0
     352:	f840      	.short	0xf840
     354:	3b10      	subs	r3, #16
   */
  FsBaseFile(const char* path, oflag_t oflag) {
    open(path, oflag);
  }

  ~FsBaseFile() {close();}
     356:	f006      	.short	0xf006
     358:	fdc5 4620 	stc2l	6, cr4, [r5, #128]	; 0x80
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
     35c:	bf00bd10 	.word	0xbf00bd10
     360:	0038      	movs	r0, r7
     362:	2000      	.short	0x2000

00000364 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]>:
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
     364:	4a10      	ldr	r2, [pc, #64]	; (3a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]+0x44>)
     366:	4911      	ldr	r1, [pc, #68]	; (3ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]+0x48>)
     368:	6813      	ldr	r3, [r2, #0]
     36a:	6808      	ldr	r0, [r1, #0]
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     36c:	6812      	ldr	r2, [r2, #0]
     36e:	6809      	ldr	r1, [r1, #0]
     370:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     374:	f3c1 6103 	ubfx	r1, r1, #24, #4
     378:	3201      	adds	r2, #1
     37a:	3104      	adds	r1, #4
     37c:	0f41ebb2 	.word	0x0f41ebb2
     380:	d310      	bcc.n	3a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]+0x40>
     382:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     386:	f3c0      	.short	0xf3c0
     388:	6003      	str	r3, [r0, #0]
     38a:	3b05      	subs	r3, #5
     38c:	eba33001 	.word	0xeba33001
     390:	0040      	lsls	r0, r0, #1
     392:	b2c3      	uxtb	r3, r0
  return (FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes); /* otherwise return offset MB position after FIFO area */
     394:	4a04      	ldr	r2, [pc, #16]	; (3a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]+0x44>)
     396:	6810      	ldr	r0, [r2, #0]
     398:	f000 007f 	and.w	r0, r0, #127	; 0x7f
     39c:	3001      	adds	r0, #1
     39e:	1ac0      	subs	r0, r0, r3
}
     3a0:	b2c0      	uxtb	r0, r0
     3a2:	4770      	bx	lr
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
  uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
  if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
     3a4:	2300      	movs	r3, #0
     3a6:	e7f5      	b.n	394 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]+0x30>
     3a8:	4000      	ands	r0, r0
     3aa:	401d      	ands	r5, r3
     3ac:	4034      	ands	r4, r6
     3ae:	401d      	.short	0x401d

000003b0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]>:
    if ( filter_match((FLEXCAN_MAILBOX)msg.mb, msg.id) ) return 1;
  }
  return 0; /* message not available */
}

FCTP_FUNC int FCTP_OPT::getFirstTxBox() {
     3b0:	b510      	push	{r4, lr}
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
     3b2:	4c17      	ldr	r4, [pc, #92]	; (410 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x60>)
     3b4:	f0136823 	.word	0xf0136823
     3b8:	5300      	strh	r0, [r0, r4]
     3ba:	d11d      	bne.n	3f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x48>
  }
  return 0; /* message not available */
}

FCTP_FUNC int FCTP_OPT::getFirstTxBox() {
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     3bc:	6822      	ldr	r2, [r4, #0]
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
     3be:	4a15      	ldr	r2, [pc, #84]	; (414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x64>)
     3c0:	4618      	mov	r0, r3
     3c2:	441a      	add	r2, r3
     3c4:	68120112 	.word	0x68120112
     3c8:	0111      	lsls	r1, r2, #4
     3ca:	d41f      	bmi.n	40c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x5c>
  }
  return 0; /* message not available */
}

FCTP_FUNC int FCTP_OPT::getFirstTxBox() {
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     3cc:	4c10      	ldr	r4, [pc, #64]	; (410 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x60>)
     3ce:	e002      	b.n	3d6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x26>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
     3d0:	680a      	ldr	r2, [r1, #0]
     3d2:	0112      	lsls	r2, r2, #4
     3d4:	d40f      	bmi.n	3f6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x46>
  }
  return 0; /* message not available */
}

FCTP_FUNC int FCTP_OPT::getFirstTxBox() {
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     3d6:	6822      	ldr	r2, [r4, #0]
     3d8:	3301      	adds	r3, #1
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
     3da:	490e      	ldr	r1, [pc, #56]	; (414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x64>)
  }
  return 0; /* message not available */
}

FCTP_FUNC int FCTP_OPT::getFirstTxBox() {
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     3dc:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     3e0:	3201b2db 	.word	0x3201b2db
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
     3e4:	4419      	add	r1, r3
     3e6:	4618      	mov	r0, r3
  }
  return 0; /* message not available */
}

FCTP_FUNC int FCTP_OPT::getFirstTxBox() {
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     3e8:	4293      	cmp	r3, r2
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
     3ea:	ea4f 1101 	mov.w	r1, r1, lsl #4
  }
  return 0; /* message not available */
}

FCTP_FUNC int FCTP_OPT::getFirstTxBox() {
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     3ee:	d3ef      	bcc.n	3d0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x20>
    if ( (FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) >> 3) ) return i; // if TX
  }
  return -1;
     3f0:	30fff04f 	.word	0x30fff04f
     3f4:	bd10      	pop	{r4, pc}
     3f6:	bd10      	pop	{r4, pc}
     3f8:	f7ff ffb4 	bl	364 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]>
  }
  return 0; /* message not available */
}

FCTP_FUNC int FCTP_OPT::getFirstTxBox() {
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
     3fc:	6822      	ldr	r2, [r4, #0]
     3fe:	4603      	.short	0x4603
     400:	f002 027f 	and.w	r2, r2, #127	; 0x7f
     404:	42823201 	.word	0x42823201
     408:	d8d9      	bhi.n	3be <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0xe>
     40a:	e7f1      	b.n	3f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]+0x40>
     40c:	bd10      	pop	{r4, pc}
     40e:	bf00      	nop
     410:	401d4000 	.word	0x401d4000
     414:	d408      	bmi.n	428 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]+0x10>
     416:	0401      	lsls	r1, r0, #16

00000418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]>:
#endif
  FLEXCANb_IFLAG1(_bus) = value;
}

FCTP_FUNC void FCTP_OPT::writeIFLAGBit(uint8_t mb_num) {
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
     418:	4903      	ldr	r1, [pc, #12]	; (428 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]+0x10>)
     41a:	2201      	movs	r2, #1
     41c:	680b      	ldr	r3, [r1, #0]
     41e:	fa02 f000 	lsl.w	r0, r2, r0
     422:	4303      	orrs	r3, r0
     424:	4770600b 	.word	0x4770600b
     428:	4030      	ands	r0, r6
     42a:	401d      	.short	0x401d

0000042c <StreamFile<FsBaseFile, unsigned long long>::flush()>:
   */
  int available() {
    return BaseFile::available();
  }
  /** Ensure that any bytes written to the file are saved to the SD card. */
  void flush() {
     42c:	6c83      	ldr	r3, [r0, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool sync() {
    return m_fFile ? m_fFile->sync() :
           m_xFile ? m_xFile->sync() : false;
     42e:	b113      	.short	0xb113
     430:	4618      	mov	r0, r3
     432:	f005      	.short	0xf005
     434:	becd      	bkpt	0x00cd
     436:	6cc0      	.short	0x6cc0
     438:	b108      	cbz	r0, 43e <StreamFile<FsBaseFile, unsigned long long>::flush()+0x12>
     43a:	f004 be81 	b.w	5140 <ExFatFile::sync()>
     43e:	4770      	bx	lr

00000440 <StreamFile<FsBaseFile, unsigned long long>::peek()>:
  const char* name() const {return "use getName()";}
  /** Return the next available byte without consuming it.
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
     440:	6c83      	ldr	r3, [r0, #72]	; 0x48
   *
   * \return The byte if no error and not at eof else -1;
   */
  int peek() {
    return m_fFile ? m_fFile->peek() :
           m_xFile ? m_xFile->peek() : -1;
     442:	b113      	cbz	r3, 44a <StreamFile<FsBaseFile, unsigned long long>::peek()+0xa>
     444:	4618      	mov	r0, r3
     446:	f005 bdc9 	b.w	5fdc <FatFile::peek()>
     44a:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
     44c:	b108      	cbz	r0, 452 <StreamFile<FsBaseFile, unsigned long long>::peek()+0x12>
     44e:	f004      	.short	0xf004
     450:	ba67      	rev16	r7, r4
    return BaseFile::peek();
  }
     452:	f04f      	.short	0xf04f
     454:	30ff      	adds	r0, #255	; 0xff
     456:	4770      	.short	0x4770

00000458 <StreamFile<FsBaseFile, unsigned long long>::available()>:
  StreamFile() {}

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() {
     458:	b1626c82 	.word	0xb1626c82
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint32_t available32() const {
    return isFile() ? fileSize() - curPosition() : 0;
     45c:	7813      	ldrb	r3, [r2, #0]
     45e:	f003 0308 	and.w	r3, r3, #8
     462:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     466:	b30b      	cbz	r3, 4ac <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
   * Zero is returned for directory files.
   *
   */
  int available() const {
    uint32_t n = available32();
    return n > INT_MAX ? INT_MAX : n;
     468:	69d3      	ldr	r3, [r2, #28]
     46a:	6950      	ldr	r0, [r2, #20]
     46c:	1a18      	subs	r0, r3, r0
     46e:	bf48      	it	mi
     470:	4000f06f 	.word	0x4000f06f
     474:	4770      	bx	lr	; unpredictable branch in IT block

  /** \return number of bytes available from the current position to EOF
   *   or INT_MAX if more than INT_MAX bytes are available.
   */
  int available() const {
    return m_fFile ? m_fFile->available() :
           m_xFile ? m_xFile->available() : 0;
     476:	6cc1      	.short	0x6cc1
     478:	b1c9      	cbz	r1, 4ae <StreamFile<FsBaseFile, unsigned long long>::available()+0x56>
  }
  /** \return The number of bytes available from the current position
   * to EOF for normal files.  Zero is returned for directory files.
   */
  uint64_t available64() {
    return isFile() ? fileSize() - curPosition() : 0;
     47a:	f891 3031 	ldrbmi.w	r3, [r1, #49]	; 0x31
     47e:	f003 0308 	and.w	r3, r3, #8
     482:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     486:	b18b      	cbz	r3, 4ac <StreamFile<FsBaseFile, unsigned long long>::available()+0x54>
     488:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     48c:	e9d1 0100 	ldrd	r0, r1, [r1]
     490:	b430      	push	{r4, r5}
     492:	1a10      	subs	r0, r2, r0
     494:	f04f 0500 	mov.w	r5, #0
     498:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
     49c:	eb63 0101 	sbc.w	r1, r3, r1
     4a0:	428d      	cmp	r5, r1
     4a2:	bf08      	it	eq
     4a4:	4284      	cmpeq	r4, r0
     4a6:	d200      	bcs.n	4aa <StreamFile<FsBaseFile, unsigned long long>::available()+0x52>
     4a8:	4620      	mov	r0, r4
    return BaseFile::available();
  }
     4aa:	bc30      	pop	{r4, r5}
     4ac:	4770      	bx	lr
     4ae:	4608      	mov	r0, r1
     4b0:	4770      	bx	lr
     4b2:	bf00      	nop

000004b4 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char)>:
  /** Write a byte to a file. Required by the Arduino Print class.
   * \param[in] b the byte to be written.
   * Use getWriteError to check for errors.
   * \return 1 for success and 0 for failure.
   */
  size_t write(uint8_t b) {
     4b4:	b500      	push	{lr}
     4b6:	6c83      	ldr	r3, [r0, #72]	; 0x48
     4b8:	b083      	sub	sp, #12
     4ba:	f88d 1007 	strb.w	r1, [sp, #7]
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     4be:	b143      	.short	0xb143
     4c0:	4618      	mov	r0, r3
     4c2:	2201      	movs	r2, #1
     4c4:	0107f10d 	.word	0x0107f10d
     4c8:	f005 fec4 	bl	6254 <FatFile::write(void const*, unsigned int)>
    return BaseFile::write(b);
  }
     4cc:	b003      	add	sp, #12
     4ce:	f85d      	.short	0xf85d
     4d0:	fb04 6cc0 			; <UNDEFINED> instruction: 0xfb046cc0
     4d4:	2800      	cmp	r0, #0
     4d6:	d0f9      	.short	0xd0f9
     4d8:	2201      	movs	r2, #1
     4da:	f10d 0107 	add.w	r1, sp, #7
     4de:	f004 ff8b 	bl	53f8 <ExFatFile::write(void const*, unsigned int)>
     4e2:	b003      	.short	0xb003
     4e4:	f85d fb04 	ldr.w	pc, [sp], #4

000004e8 <StreamFile<FsBaseFile, unsigned long long>::read()>:
  /** Read the next byte from a file.
   *
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
     4e8:	6c83      	ldr	r3, [r0, #72]	; 0x48
     4ea:	b500      	push	{lr}
     4ec:	b083      	sub	sp, #12
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     4ee:	b163      	cbz	r3, 50a <StreamFile<FsBaseFile, unsigned long long>::read()+0x22>
     4f0:	4618      	mov	r0, r3
     4f2:	2201      	movs	r2, #1
     4f4:	f10d 0107 	add.w	r1, sp, #7
     4f8:	f005 fca2 	bl	5e40 <FatFile::read(void*, unsigned int)>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     4fc:	d10c2801 	.word	0xd10c2801
     500:	f89d 0007 	ldrb.w	r0, [sp, #7]
    return BaseFile::read();
  }
     504:	f85db003 	.word	0xf85db003
     508:	fb04 6cc0 			; <UNDEFINED> instruction: 0xfb046cc0
   * read() called before a file has been opened, corrupt file system
   * or an I/O error occurred.
   */
  int read(void* buf, size_t count) {
    return m_fFile ? m_fFile->read(buf, count) :
           m_xFile ? m_xFile->read(buf, count) : -1;
     50c:	b128      	cbz	r0, 51a <StreamFile<FsBaseFile, unsigned long long>::read()+0x32>
     50e:	2201      	movs	r2, #1
     510:	f10d 0107 	add.w	r1, sp, #7
     514:	f004 f92a 	bl	476c <ExFatFile::read(void*, unsigned int)>
     518:	e7f0      	b.n	4fc <StreamFile<FsBaseFile, unsigned long long>::read()+0x14>
   * \return For success return the next byte in the file as an int.
   * If an error occurs or end of file is reached return -1.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
     51a:	f04f 30ff 	mov.w	r0, #4294967295
     51e:	e7f1      	b.n	504 <StreamFile<FsBaseFile, unsigned long long>::read()+0x1c>

00000520 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)>:
   * \param[in] size Number of bytes to write.
   *
   * \return For success write() returns the number of bytes written, always
   * \a size.
   */
  size_t write(const uint8_t* buffer, size_t size) {
     520:	b1136c83 	.word	0xb1136c83
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     524:	4618      	mov	r0, r3
     526:	f005      	.short	0xf005
     528:	6cc0be95 	.word	0x6cc0be95
     52c:	b108      	cbz	r0, 532 <StreamFile<FsBaseFile, unsigned long long>::write(unsigned char const*, unsigned int)+0x12>
     52e:	f004 bf63 	b.w	53f8 <ExFatFile::write(void const*, unsigned int)>
    return BaseFile::write(buffer, size);
  }
     532:	4770      	.short	0x4770

00000534 <RingBuf<FsFile, 204800u>::write(unsigned char)>:
   * Required function for Print.
   * \param[in] data Byte to be written.
   * \return Number of bytes actually written.
   */
  size_t write(uint8_t data) override {
    return write(&data, 1);
     534:	6803      	ldr	r3, [r0, #0]
     536:	4a24      	.short	0x4a24
     538:	685b      	ldr	r3, [r3, #4]
  /**
   * Required function for Print.
   * \param[in] data Byte to be written.
   * \return Number of bytes actually written.
   */
  size_t write(uint8_t data) override {
     53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
     53e:	4293      	.short	0x4293
     540:	b082      	sub	sp, #8
     542:	f88d      	.short	0xf88d
     544:	1007      	asrs	r7, r0, #32
     546:	d138      	.short	0xd138
     548:	4680      	mov	r8, r0
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     54a:	b672      	.short	0xb672
    count = m_count;
     54c:	4b1f      	ldr	r3, [pc, #124]	; (5cc <RingBuf<FsFile, 204800u>::write(unsigned char)+0x98>)
     54e:	58c3      	.short	0x58c3
    interrupts();
     550:	b662      	cpsie	i
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     552:	f5b3      	.short	0xf5b3
     554:	3f48      	subs	r7, #72	; 0x48
     556:	d101      	.short	0xd101
     558:	2301      	movs	r3, #1
     55a:	7103      	.short	0x7103
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     55c:	4b1b      	ldr	r3, [pc, #108]	; (5cc <RingBuf<FsFile, 204800u>::write(unsigned char)+0x98>)
     55e:	f858      	.short	0xf858
     560:	3003      	adds	r0, #3
    if (count > n) {
     562:	f5b3      	.short	0xf5b3
     564:	3f48      	subs	r7, #72	; 0x48
     566:	d10a      	.short	0xd10a
      count = n;
    }
    size_t nread = 0;
     568:	2400      	movs	r4, #0
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     56a:	4a18      	.short	0x4a18
     56c:	4620      	mov	r0, r4
     56e:	f858      	.short	0xf858
     570:	3002      	adds	r0, #2
     572:	441c      	.short	0x441c
     574:	f848 4002 	str.w	r4, [r8, r2]
   * \param[in] data Byte to be written.
   * \return Number of bytes actually written.
   */
  size_t write(uint8_t data) override {
    return write(&data, 1);
  }
     578:	e8bdb002 	.word	0xe8bdb002
     57c:	81f0      	strh	r0, [r6, #14]
     57e:	4b14      	.short	0x4b14
     580:	f108 0708 	add.w	r7, r8, #8
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
    return index < Size ? index : index - Size;
     584:	461d4e13 	.word	0x461d4e13
     588:	f858 0003 	ldr.w	r0, [r8, r3]
     58c:	f5c04445 	.word	0xf5c04445
     590:	3448      	adds	r4, #72	; 0x48
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     592:	f10d 0107 	add.w	r1, sp, #7
     596:	4438      	.short	0x4438
     598:	2c01      	cmp	r4, #1
     59a:	bf28      	.short	0xbf28
     59c:	2401      	movcs	r4, #1
     59e:	4622      	mov	r2, r4
     5a0:	fa58f008 	.word	0xfa58f008
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     5a4:	682b      	ldr	r3, [r5, #0]
     5a6:	4423      	.short	0x4423
    return index < Size ? index : index - Size;
     5a8:	42b3      	cmp	r3, r6
     5aa:	4618      	.short	0x4618
     5ac:	bf88      	it	hi
     5ae:	f5a3      	.short	0xf5a3
     5b0:	3048      	adds	r0, #72	; 0x48
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     5b2:	2c01      	.short	0x2c01
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     5b4:	6028      	str	r0, [r5, #0]
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     5b6:	d1ea      	.short	0xd1ea
     5b8:	e7d7      	b.n	56a <RingBuf<FsFile, 204800u>::write(unsigned char)+0x36>	; unpredictable branch in IT block

   * Required function for Print.
   * \param[in] data Byte to be written.
   * \return Number of bytes actually written.
   */
  size_t write(uint8_t data) override {
    return write(&data, 1);
     5ba:	2201      	.short	0x2201
     5bc:	f10d 0107 	add.w	r1, sp, #7
     5c0:	b0024798 	.word	0xb0024798
  }
     5c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
     5c8:	000002b5 	.word	0x000002b5
     5cc:	200c      	movs	r0, #12
     5ce:	0003      	.short	0x0003
     5d0:	2010      	movs	r0, #16
     5d2:	0003      	.short	0x0003
     5d4:	1fff      	subs	r7, r7, #7
     5d6:	0003      	.short	0x0003

000005d8 <U8G2::write(unsigned char const*, unsigned int)>:
	
      }
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
     5d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
      size_t cnt = 0;
      while( size > 0 ) {
     5dc:	2a004615 	.word	0x2a004615
     5e0:	d04f      	beq.n	682 <U8G2::write(unsigned char const*, unsigned int)+0xaa>
     5e2:	4604      	.short	0x4604
     5e4:	460f      	mov	r7, r1
     5e6:	2600      	.short	0x2600
     5e8:	f8df 909c 	ldr.w	r9, [pc, #156]	; 688 <U8G2::write(unsigned char const*, unsigned int)+0xb0>
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
     5ec:	0808f100 	.word	0x0808f100
      
      if ( e < 0x0fffe )
     5f0:	f64f 7afd 	movw	sl, #65533	; 0xfffd
     5f4:	2301e003 	.word	0x2301e003
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
     5f8:	3d01      	subs	r5, #1
	cnt += write(*buffer++); 
     5fa:	441e      	.short	0x441e
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
     5fc:	d025      	beq.n	64a <U8G2::write(unsigned char const*, unsigned int)+0x72>
	cnt += write(*buffer++); 
     5fe:	6823      	.short	0x6823
     600:	f817 1b01 	ldrb.w	r1, [r7], #1
     604:	454b681b 	.word	0x454b681b
     608:	d137      	bne.n	67a <U8G2::write(unsigned char const*, unsigned int)+0xa2>
    void writeBufferPBM2(Print &p);
    void writeBufferXBM2(Print &p);

    /* virtual function for print base class */    
    size_t write(uint8_t v) {
      uint16_t e = cpp_next_cb(&(u8g2.u8x8), v);
     60a:	f8d4      	.short	0xf8d4
     60c:	30b4      	adds	r0, #180	; 0xb4
     60e:	4640      	movhi	r0, r8
     610:	4798      	blx	r3
      
      if ( e < 0x0fffe )
     612:	4550      	cmp	r0, sl
     614:	d8ef      	bhi.n	5f6 <U8G2::write(unsigned char const*, unsigned int)+0x1e>
      {
	u8g2_uint_t delta = u8g2_DrawGlyph(&u8g2, tx, ty, e);
     616:	4603      	mov	r3, r0
     618:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
     61c:	f8b4 10b8 	ldrh.w	r1, [r4, #184]	; 0xb8
     620:	4640      	mov	r0, r8
     622:	f003 f8d1 	bl	37c8 <u8g2_DrawGlyph>
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
     626:	f894 3090 	ldrb.w	r3, [r4, #144]	; 0x90
     62a:	2b03      	cmp	r3, #3
     62c:	d8e3      	bhi.n	5f6 <U8G2::write(unsigned char const*, unsigned int)+0x1e>
     62e:	e8df f003 	tbb	[pc, r3]
     632:	161d      	.short	0x161d
     634:	020f      	.short	0x020f
	    break;
	  case 2:
	    tx -= delta;
	    break;
	  case 3:
	    ty -= delta;
     636:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
     63a:	2301      	movs	r3, #1
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
     63c:	3d01      	subs	r5, #1
	    break;
	  case 2:
	    tx -= delta;
	    break;
	  case 3:
	    ty -= delta;
     63e:	eba2 0000 	sub.w	r0, r2, r0
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
	cnt += write(*buffer++); 
     642:	441e      	add	r6, r3
	    break;
	  case 2:
	    tx -= delta;
	    break;
	  case 3:
	    ty -= delta;
     644:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
     648:	d1d9      	bne.n	5fe <U8G2::write(unsigned char const*, unsigned int)+0x26>
	cnt += write(*buffer++); 
	size--;
      }
      return cnt;
    }
     64a:	4630      	mov	r0, r6
     64c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	    break;
	  case 1:
	    ty += delta;
	    break;
	  case 2:
	    tx -= delta;
     650:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
     654:	2301      	movs	r3, #1
     656:	1a10      	subs	r0, r2, r0
     658:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
     65c:	e7cc      	b.n	5f8 <U8G2::write(unsigned char const*, unsigned int)+0x20>
	{
	  case 0:
	    tx += delta;
	    break;
	  case 1:
	    ty += delta;
     65e:	f8b4 20ba 	ldrh.w	r2, [r4, #186]	; 0xba
     662:	2301      	movs	r3, #1
     664:	4410      	add	r0, r2
     666:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
     66a:	e7c5      	b.n	5f8 <U8G2::write(unsigned char const*, unsigned int)+0x20>
	
#ifdef U8G2_WITH_FONT_ROTATION
	switch(u8g2.font_decode.dir)
	{
	  case 0:
	    tx += delta;
     66c:	f8b4 20b8 	ldrh.w	r2, [r4, #184]	; 0xb8
     670:	2301      	movs	r3, #1
     672:	4410      	add	r0, r2
     674:	f8a4 00b8 	strh.w	r0, [r4, #184]	; 0xb8
     678:	e7be      	b.n	5f8 <U8G2::write(unsigned char const*, unsigned int)+0x20>
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
      while( size > 0 ) {
	cnt += write(*buffer++); 
     67a:	4620      	mov	r0, r4
     67c:	4798      	blx	r3
     67e:	4603      	mov	r3, r0
     680:	e7ba      	b.n	5f8 <U8G2::write(unsigned char const*, unsigned int)+0x20>
      }
      return 1;
     }

    size_t write(const uint8_t *buffer, size_t size) {
      size_t cnt = 0;
     682:	4616      	mov	r6, r2
     684:	e7e1      	b.n	64a <U8G2::write(unsigned char const*, unsigned int)+0x72>
     686:	bf00      	nop
     688:	00000249 	.word	0x00000249
     68c:	00000000 	.word	0x00000000

00000690 <canSniff(CAN_message_t const&)>:
	}
	// initialize the RingBuf.
	rb.begin(&file);
}

void canSniff(const CAN_message_t& msg) {
     690:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
     694:	2101      	movs	r1, #1
     696:	4604      	mov	r4, r0
     698:	4845      	ldr	r0, [pc, #276]	; (7b0 <canSniff(CAN_message_t const&)+0x120>)
     69a:	ed2d 8b02 	vpush	{d8}
     69e:	f009 fd4f 	bl	a140 <usb_serial_write>
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
	elapsedMicros(const elapsedMicros &orig) { us = orig.us; }
	operator unsigned long () const { return micros() - us; }
     6a2:	f008 fc39 	bl	8f18 <micros>
     6a6:	4b43      	ldr	r3, [pc, #268]	; (7b4 <canSniff(CAN_message_t const&)+0x124>)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     6a8:	2106      	movs	r1, #6
	//Serial.print("MB "); Serial.print(msg.mb);
	//Serial.print("  OVERRUN: "); Serial.print(msg.flags.overrun);
	//Serial.print(" EXT: "); Serial.print(msg.flags.extended);
	//Serial.print(" TS: "); Serial.print(msg.timestamp);
	Serial.print(" ");
	double timeStamp = double((double)elapselogtime / 1000000);  //micros()
     6aa:	681b      	ldr	r3, [r3, #0]
     6ac:	1ac3      	subs	r3, r0, r3
     6ae:	4842      	ldr	r0, [pc, #264]	; (7b8 <canSniff(CAN_message_t const&)+0x128>)
     6b0:	ee07 3a90 	vmov	s15, r3
     6b4:	ed9f 6b3a 	vldr	d6, [pc, #232]	; 7a0 <canSniff(CAN_message_t const&)+0x110>
     6b8:	eeb8 7b67 	vcvt.f64.u32	d7, s15
     6bc:	ee87 8b06 	vdiv.f64	d8, d7, d6
     6c0:	eeb0 0b48 	vmov.f64	d0, d8
     6c4:	f009 fe58 	bl	a378 <Print::printFloat(double, unsigned char)>
     6c8:	2102      	movs	r1, #2
     6ca:	483c      	ldr	r0, [pc, #240]	; (7bc <canSniff(CAN_message_t const&)+0x12c>)
     6cc:	f009 fd38 	bl	a140 <usb_serial_write>
     6d0:	2101      	movs	r1, #1
     6d2:	483b      	ldr	r0, [pc, #236]	; (7c0 <canSniff(CAN_message_t const&)+0x130>)
     6d4:	f009 fd34 	bl	a140 <usb_serial_write>
     6d8:	2106      	movs	r1, #6
     6da:	483a      	ldr	r0, [pc, #232]	; (7c4 <canSniff(CAN_message_t const&)+0x134>)
     6dc:	f009 fd30 	bl	a140 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     6e0:	2300      	movs	r3, #0
     6e2:	2210      	movs	r2, #16
     6e4:	6821      	ldr	r1, [r4, #0]
     6e6:	4834      	ldr	r0, [pc, #208]	; (7b8 <canSniff(CAN_message_t const&)+0x128>)
     6e8:	f009 fdfa 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     6ec:	2107      	movs	r1, #7
     6ee:	4836      	ldr	r0, [pc, #216]	; (7c8 <canSniff(CAN_message_t const&)+0x138>)
     6f0:	f009 fd26 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     6f4:	2300      	movs	r3, #0
     6f6:	7ae1      	ldrb	r1, [r4, #11]
     6f8:	220a      	movs	r2, #10
     6fa:	482f      	ldr	r0, [pc, #188]	; (7b8 <canSniff(CAN_message_t const&)+0x128>)
     6fc:	f009 fdf0 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     700:	2101      	movs	r1, #1
     702:	482b      	ldr	r0, [pc, #172]	; (7b0 <canSniff(CAN_message_t const&)+0x120>)
     704:	f009 fd1c 	bl	a140 <usb_serial_write>
	Serial.print("      ");
	Serial.print(msg.id, HEX);
	Serial.print("  Rx d ");
	Serial.print(msg.len);
	Serial.print(" ");
	for (uint8_t i = 0; i < msg.len; i++) {
     708:	7ae3      	ldrb	r3, [r4, #11]
     70a:	b1a3      	cbz	r3, 736 <canSniff(CAN_message_t const&)+0xa6>
     70c:	2500      	movs	r5, #0
		Serial.print(msg.buf[i], HEX); Serial.print(" ");
     70e:	1961      	adds	r1, r4, r5
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     710:	2300      	movs	r3, #0
     712:	2210      	movs	r2, #16
     714:	4828      	ldr	r0, [pc, #160]	; (7b8 <canSniff(CAN_message_t const&)+0x128>)
     716:	7b09      	ldrb	r1, [r1, #12]
	Serial.print("      ");
	Serial.print(msg.id, HEX);
	Serial.print("  Rx d ");
	Serial.print(msg.len);
	Serial.print(" ");
	for (uint8_t i = 0; i < msg.len; i++) {
     718:	3501      	adds	r5, #1
     71a:	f009 fde1 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
     71e:	2101      	movs	r1, #1
     720:	4823      	ldr	r0, [pc, #140]	; (7b0 <canSniff(CAN_message_t const&)+0x120>)
     722:	b2ed      	uxtb	r5, r5
     724:	f009 fd0c 	bl	a140 <usb_serial_write>
     728:	2101      	movs	r1, #1
     72a:	4821      	ldr	r0, [pc, #132]	; (7b0 <canSniff(CAN_message_t const&)+0x120>)
     72c:	f009 fd08 	bl	a140 <usb_serial_write>
     730:	7ae3      	ldrb	r3, [r4, #11]
     732:	42ab      	cmp	r3, r5
     734:	d8eb      	bhi.n	70e <canSniff(CAN_message_t const&)+0x7e>
		Serial.print(msg.buf[i], HEX); Serial.print(" ");
		Serial.print(" ");
	}
	Serial.println();
     736:	4820      	ldr	r0, [pc, #128]	; (7b8 <canSniff(CAN_message_t const&)+0x128>)
     738:	f009 fdc2 	bl	a2c0 <Print::println()>
  /**
   * \return the RingBuf used space in bytes. Not ISR callable.
   */
  size_t bytesUsed() const {
    size_t count;
    noInterrupts();
     73c:	b672      	cpsid	i
    count = m_count;
     73e:	f8df 809c 	ldr.w	r8, [pc, #156]	; 7dc <canSniff(CAN_message_t const&)+0x14c>
     742:	4b22      	ldr	r3, [pc, #136]	; (7cc <canSniff(CAN_message_t const&)+0x13c>)
     744:	f858 1003 	ldr.w	r1, [r8, r3]
    interrupts();
     748:	b662      	cpsie	i
     74a:	4d21      	ldr	r5, [pc, #132]	; (7d0 <canSniff(CAN_message_t const&)+0x140>)
     74c:	6ca8      	ldr	r0, [r5, #72]	; 0x48
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     74e:	2800      	cmp	r0, #0
     750:	f000 8293 	beq.w	c7a <canSniff(CAN_message_t const&)+0x5ea>
     754:	6942      	ldr	r2, [r0, #20]

	size_t n = rb.bytesUsed();
	logFileSize = (uint32_t)n + (uint32_t)file.curPosition();
	if ((n + file.curPosition()) > (LOG_FILE_SIZE - 20)) {
     756:	460e      	mov	r6, r1
		Serial.print(" ");
	}
	Serial.println();

	size_t n = rb.bytesUsed();
	logFileSize = (uint32_t)n + (uint32_t)file.curPosition();
     758:	f8df e084 	ldr.w	lr, [pc, #132]	; 7e0 <canSniff(CAN_message_t const&)+0x150>
	if ((n + file.curPosition()) > (LOG_FILE_SIZE - 20)) {
     75c:	2700      	movs	r7, #0
		Serial.print(" ");
	}
	Serial.println();

	size_t n = rb.bytesUsed();
	logFileSize = (uint32_t)n + (uint32_t)file.curPosition();
     75e:	eb02 0c01 	add.w	ip, r2, r1
     762:	2300      	movs	r3, #0
     764:	f8ce c000 	str.w	ip, [lr]
	if ((n + file.curPosition()) > (LOG_FILE_SIZE - 20)) {
     768:	1992      	adds	r2, r2, r6
     76a:	417b      	adcs	r3, r7
     76c:	a70e      	add	r7, pc, #56	; (adr r7, 7a8 <canSniff(CAN_message_t const&)+0x118>)
     76e:	e9d7 6700 	ldrd	r6, r7, [r7]
     772:	429f      	cmp	r7, r3
     774:	bf08      	it	eq
     776:	4296      	cmpeq	r6, r2
     778:	f0c0 824b 	bcc.w	c12 <canSniff(CAN_message_t const&)+0x582>
		Serial.println("File full - quiting.");
		return;
	}
	if (n > maxUsed) {
     77c:	4b15      	ldr	r3, [pc, #84]	; (7d4 <canSniff(CAN_message_t const&)+0x144>)
     77e:	681a      	ldr	r2, [r3, #0]
     780:	428a      	cmp	r2, r1
		maxUsed = n;
     782:	bf38      	it	cc
     784:	6019      	strcc	r1, [r3, #0]
	}
	if (n >= 512 && !file.isBusy()) {
     786:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
     78a:	f080 81e8 	bcs.w	b5e <canSniff(CAN_message_t const&)+0x4ce>
			Serial.println("writeOut failed");
			return;
		}
	}

	if (!log_enable)
     78e:	4b12      	ldr	r3, [pc, #72]	; (7d8 <canSniff(CAN_message_t const&)+0x148>)
     790:	781b      	ldrb	r3, [r3, #0]
     792:	bb3b      	cbnz	r3, 7e4 <canSniff(CAN_message_t const&)+0x154>
	if (rb.getWriteError()) {
		// Error caused by too few free bytes in RingBuf.
		Serial.println("WriteError");
		return;
	}
}
     794:	ecbd 8b02 	vpop	{d8}
     798:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
     79c:	f3af 8000 	nop.w
     7a0:	00000000 	.word	0x00000000
     7a4:	412e8480 	.word	0x412e8480
     7a8:	08f0d16c 	.word	0x08f0d16c
     7ac:	00000000 	.word	0x00000000
     7b0:	200001b0 	.word	0x200001b0
     7b4:	20004210 	.word	0x20004210
     7b8:	20001160 	.word	0x20001160
     7bc:	20000100 	.word	0x20000100
     7c0:	200000f8 	.word	0x200000f8
     7c4:	200000fc 	.word	0x200000fc
     7c8:	20000104 	.word	0x20000104
     7cc:	0003200c 	.word	0x0003200c
     7d0:	20004228 	.word	0x20004228
     7d4:	20036810 	.word	0x20036810
     7d8:	20036814 	.word	0x20036814
     7dc:	20004280 	.word	0x20004280
     7e0:	2000427c 	.word	0x2000427c
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     7e4:	b672      	cpsid	i
    count = m_count;
     7e6:	4bcc      	ldr	r3, [pc, #816]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     7e8:	4acc      	ldr	r2, [pc, #816]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     7ea:	f858 3003 	ldr.w	r3, [r8, r3]
    interrupts();
     7ee:	b662      	cpsie	i
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     7f0:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
     7f4:	d101      	bne.n	7fa <canSniff(CAN_message_t const&)+0x16a>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     7f6:	2301      	movs	r3, #1
     7f8:	7113      	strb	r3, [r2, #4]
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     7fa:	4ac7      	ldr	r2, [pc, #796]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     7fc:	4bc7      	ldr	r3, [pc, #796]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     7fe:	f858 2002 	ldr.w	r2, [r8, r2]
    if (count > n) {
     802:	f5b2 3f48 	cmp.w	r2, #204800	; 0x32000
     806:	f040 820f 	bne.w	c28 <canSniff(CAN_message_t const&)+0x598>
      count = n;
    }
    size_t nread = 0;
     80a:	2700      	movs	r7, #0
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     80c:	4dc2      	ldr	r5, [pc, #776]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int64_t n, int base)		{ return (base == 10) ? print(n) : printNumber64(n, base, 0); }
	size_t print(uint64_t n, int base)		{ return printNumber64(n, base, 0); }

	size_t print(double n, int digits = 2)		{ return printFloat(n, digits); }
     80e:	2106      	movs	r1, #6
     810:	4ec2      	ldr	r6, [pc, #776]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     812:	eeb0 0b48 	vmov.f64	d0, d8
     816:	f858 3005 	ldr.w	r3, [r8, r5]
     81a:	4630      	mov	r0, r6
     81c:	441f      	add	r7, r3
     81e:	f848 7005 	str.w	r7, [r8, r5]
     822:	f009 fda9 	bl	a378 <Print::printFloat(double, unsigned char)>
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     826:	b672      	cpsid	i
    count = m_count;
     828:	f858 3005 	ldr.w	r3, [r8, r5]
    interrupts();
     82c:	b662      	cpsie	i
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     82e:	f5c3 3348 	rsb	r3, r3, #204800	; 0x32000
     832:	2b01      	cmp	r3, #1
     834:	d801      	bhi.n	83a <canSniff(CAN_message_t const&)+0x1aa>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     836:	2301      	movs	r3, #1
     838:	7133      	strb	r3, [r6, #4]
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     83a:	4bb7      	ldr	r3, [pc, #732]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     83c:	f858 3003 	ldr.w	r3, [r8, r3]
     840:	f5c3 3348 	rsb	r3, r3, #204800	; 0x32000
    if (count > n) {
     844:	2b01      	cmp	r3, #1
     846:	f200 8232 	bhi.w	cae <canSniff(CAN_message_t const&)+0x61e>
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     84a:	2b00      	cmp	r3, #0
     84c:	f000 8235 	beq.w	cba <canSniff(CAN_message_t const&)+0x62a>
     850:	f04f 0a01 	mov.w	sl, #1
     854:	4ab2      	ldr	r2, [pc, #712]	; (b20 <canSniff(CAN_message_t const&)+0x490>)
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
    if (count > n) {
     856:	f04f 0900 	mov.w	r9, #0
     85a:	4eb2      	ldr	r6, [pc, #712]	; (b24 <canSniff(CAN_message_t const&)+0x494>)
     85c:	f858 0002 	ldr.w	r0, [r8, r2]
     860:	4db1      	ldr	r5, [pc, #708]	; (b28 <canSniff(CAN_message_t const&)+0x498>)
     862:	f8df b2d4 	ldr.w	fp, [pc, #724]	; b38 <canSniff(CAN_message_t const&)+0x4a8>
     866:	f5c0 3348 	rsb	r3, r0, #204800	; 0x32000
     86a:	ebc9 070a 	rsb	r7, r9, sl
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     86e:	eb0b 0109 	add.w	r1, fp, r9
     872:	4430      	add	r0, r6
     874:	429f      	cmp	r7, r3
     876:	bf28      	it	cs
     878:	461f      	movcs	r7, r3
     87a:	463a      	mov	r2, r7
    size_t nread = 0;
    while (nread != count) {
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
     87c:	44b9      	add	r9, r7
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     87e:	f008 f8e9 	bl	8a54 <memcpy>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     882:	682b      	ldr	r3, [r5, #0]
    return index < Size ? index : index - Size;
     884:	4aa9      	ldr	r2, [pc, #676]	; (b2c <canSniff(CAN_message_t const&)+0x49c>)
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     886:	443b      	add	r3, r7
    return index < Size ? index : index - Size;
     888:	4293      	cmp	r3, r2
     88a:	4618      	mov	r0, r3
     88c:	bf88      	it	hi
     88e:	f5a3 3048 	subhi.w	r0, r3, #204800	; 0x32000
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     892:	45d1      	cmp	r9, sl
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     894:	6028      	str	r0, [r5, #0]
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     896:	d1e6      	bne.n	866 <canSniff(CAN_message_t const&)+0x1d6>
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     898:	4a9f      	ldr	r2, [pc, #636]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     89a:	48a0      	ldr	r0, [pc, #640]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     89c:	f858 1002 	ldr.w	r1, [r8, r2]
     8a0:	eb0a 0301 	add.w	r3, sl, r1
     8a4:	f848 3002 	str.w	r3, [r8, r2]
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     8a8:	b672      	cpsid	i
    count = m_count;
     8aa:	f858 3002 	ldr.w	r3, [r8, r2]
    interrupts();
     8ae:	b662      	cpsie	i
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     8b0:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
     8b4:	d101      	bne.n	8ba <canSniff(CAN_message_t const&)+0x22a>
     8b6:	2301      	movs	r3, #1
     8b8:	7103      	strb	r3, [r0, #4]
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     8ba:	4a97      	ldr	r2, [pc, #604]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     8bc:	4b97      	ldr	r3, [pc, #604]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     8be:	f858 2002 	ldr.w	r2, [r8, r2]
    if (count > n) {
     8c2:	f5b2 3f48 	cmp.w	r2, #204800	; 0x32000
     8c6:	f000 81ea 	beq.w	c9e <canSniff(CAN_message_t const&)+0x60e>
     8ca:	4a95      	ldr	r2, [pc, #596]	; (b20 <canSniff(CAN_message_t const&)+0x490>)
     8cc:	f103 0608 	add.w	r6, r3, #8
     8d0:	4d95      	ldr	r5, [pc, #596]	; (b28 <canSniff(CAN_message_t const&)+0x498>)
     8d2:	5898      	ldr	r0, [r3, r2]
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
    return index < Size ? index : index - Size;
     8d4:	f8df 9254 	ldr.w	r9, [pc, #596]	; b2c <canSniff(CAN_message_t const&)+0x49c>
     8d8:	f5c0 3748 	rsb	r7, r0, #204800	; 0x32000
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     8dc:	4994      	ldr	r1, [pc, #592]	; (b30 <canSniff(CAN_message_t const&)+0x4a0>)
     8de:	4430      	add	r0, r6
     8e0:	2f01      	cmp	r7, #1
     8e2:	bf28      	it	cs
     8e4:	2701      	movcs	r7, #1
     8e6:	463a      	mov	r2, r7
     8e8:	f008 f8b4 	bl	8a54 <memcpy>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     8ec:	682b      	ldr	r3, [r5, #0]
     8ee:	443b      	add	r3, r7
    return index < Size ? index : index - Size;
     8f0:	454b      	cmp	r3, r9
     8f2:	4618      	mov	r0, r3
     8f4:	bf88      	it	hi
     8f6:	f5a3 3048 	subhi.w	r0, r3, #204800	; 0x32000
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     8fa:	2f01      	cmp	r7, #1
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     8fc:	6028      	str	r0, [r5, #0]
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     8fe:	d1eb      	bne.n	8d8 <canSniff(CAN_message_t const&)+0x248>
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     900:	4b85      	ldr	r3, [pc, #532]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     902:	4986      	ldr	r1, [pc, #536]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     904:	f858 2003 	ldr.w	r2, [r8, r3]
     908:	4417      	add	r7, r2
     90a:	f848 7003 	str.w	r7, [r8, r3]
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     90e:	b672      	cpsid	i
    count = m_count;
     910:	f858 3003 	ldr.w	r3, [r8, r3]
    interrupts();
     914:	b662      	cpsie	i
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     916:	f5c3 3348 	rsb	r3, r3, #204800	; 0x32000
     91a:	2b05      	cmp	r3, #5
     91c:	d801      	bhi.n	922 <canSniff(CAN_message_t const&)+0x292>
     91e:	2301      	movs	r3, #1
     920:	710b      	strb	r3, [r1, #4]
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     922:	4b7d      	ldr	r3, [pc, #500]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     924:	f858 3003 	ldr.w	r3, [r8, r3]
     928:	f5c3 3a48 	rsb	sl, r3, #204800	; 0x32000
    if (count > n) {
     92c:	f1ba 0f05 	cmp.w	sl, #5
     930:	f200 81ba 	bhi.w	ca8 <canSniff(CAN_message_t const&)+0x618>
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     934:	f1ba 0f00 	cmp.w	sl, #0
     938:	f000 81c1 	beq.w	cbe <canSniff(CAN_message_t const&)+0x62e>
     93c:	4a78      	ldr	r2, [pc, #480]	; (b20 <canSniff(CAN_message_t const&)+0x490>)
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
    if (count > n) {
     93e:	f04f 0900 	mov.w	r9, #0
     942:	4e78      	ldr	r6, [pc, #480]	; (b24 <canSniff(CAN_message_t const&)+0x494>)
     944:	f858 0002 	ldr.w	r0, [r8, r2]
     948:	4d77      	ldr	r5, [pc, #476]	; (b28 <canSniff(CAN_message_t const&)+0x498>)
     94a:	f8df b1f0 	ldr.w	fp, [pc, #496]	; b3c <canSniff(CAN_message_t const&)+0x4ac>
     94e:	f5c0 3348 	rsb	r3, r0, #204800	; 0x32000
     952:	ebc9 070a 	rsb	r7, r9, sl
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     956:	eb0b 0109 	add.w	r1, fp, r9
     95a:	4430      	add	r0, r6
     95c:	429f      	cmp	r7, r3
     95e:	bf28      	it	cs
     960:	461f      	movcs	r7, r3
     962:	463a      	mov	r2, r7
    size_t nread = 0;
    while (nread != count) {
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
     964:	44b9      	add	r9, r7
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     966:	f008 f875 	bl	8a54 <memcpy>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     96a:	682b      	ldr	r3, [r5, #0]
    return index < Size ? index : index - Size;
     96c:	4a6f      	ldr	r2, [pc, #444]	; (b2c <canSniff(CAN_message_t const&)+0x49c>)
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     96e:	443b      	add	r3, r7
    return index < Size ? index : index - Size;
     970:	4293      	cmp	r3, r2
     972:	4618      	mov	r0, r3
     974:	bf88      	it	hi
     976:	f5a3 3048 	subhi.w	r0, r3, #204800	; 0x32000
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     97a:	45ca      	cmp	sl, r9
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     97c:	6028      	str	r0, [r5, #0]
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     97e:	d1e6      	bne.n	94e <canSniff(CAN_message_t const&)+0x2be>
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     980:	4d65      	ldr	r5, [pc, #404]	; (b18 <canSniff(CAN_message_t const&)+0x488>)

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
     982:	2300      	movs	r3, #0
     984:	4f65      	ldr	r7, [pc, #404]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     986:	2210      	movs	r2, #16
     988:	f858 6005 	ldr.w	r6, [r8, r5]
     98c:	6821      	ldr	r1, [r4, #0]
     98e:	4638      	mov	r0, r7
     990:	444e      	add	r6, r9
     992:	f848 6005 	str.w	r6, [r8, r5]
     996:	f009 fca3 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     99a:	b672      	cpsid	i
    count = m_count;
     99c:	f858 3005 	ldr.w	r3, [r8, r5]
    interrupts();
     9a0:	b662      	cpsie	i
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     9a2:	f5c3 3348 	rsb	r3, r3, #204800	; 0x32000
     9a6:	2b06      	cmp	r3, #6
     9a8:	d801      	bhi.n	9ae <canSniff(CAN_message_t const&)+0x31e>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     9aa:	2301      	movs	r3, #1
     9ac:	713b      	strb	r3, [r7, #4]
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     9ae:	4b5a      	ldr	r3, [pc, #360]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     9b0:	f858 3003 	ldr.w	r3, [r8, r3]
     9b4:	f5c3 3948 	rsb	r9, r3, #204800	; 0x32000
    if (count > n) {
     9b8:	f1b9 0f06 	cmp.w	r9, #6
     9bc:	f200 8171 	bhi.w	ca2 <canSniff(CAN_message_t const&)+0x612>
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     9c0:	f1b9 0f00 	cmp.w	r9, #0
     9c4:	d021      	beq.n	a0a <canSniff(CAN_message_t const&)+0x37a>
     9c6:	4a56      	ldr	r2, [pc, #344]	; (b20 <canSniff(CAN_message_t const&)+0x490>)
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
    if (count > n) {
     9c8:	f04f 0a00 	mov.w	sl, #0
     9cc:	4e55      	ldr	r6, [pc, #340]	; (b24 <canSniff(CAN_message_t const&)+0x494>)
     9ce:	f858 0002 	ldr.w	r0, [r8, r2]
     9d2:	4d55      	ldr	r5, [pc, #340]	; (b28 <canSniff(CAN_message_t const&)+0x498>)
     9d4:	f8df b168 	ldr.w	fp, [pc, #360]	; b40 <canSniff(CAN_message_t const&)+0x4b0>
     9d8:	f5c0 3348 	rsb	r3, r0, #204800	; 0x32000
     9dc:	ebca 0709 	rsb	r7, sl, r9
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     9e0:	eb0b 010a 	add.w	r1, fp, sl
     9e4:	4430      	add	r0, r6
     9e6:	429f      	cmp	r7, r3
     9e8:	bf28      	it	cs
     9ea:	461f      	movcs	r7, r3
     9ec:	463a      	mov	r2, r7
    size_t nread = 0;
    while (nread != count) {
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
     9ee:	44ba      	add	sl, r7
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     9f0:	f008 f830 	bl	8a54 <memcpy>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     9f4:	682b      	ldr	r3, [r5, #0]
    return index < Size ? index : index - Size;
     9f6:	4a4d      	ldr	r2, [pc, #308]	; (b2c <canSniff(CAN_message_t const&)+0x49c>)
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     9f8:	443b      	add	r3, r7
    return index < Size ? index : index - Size;
     9fa:	4293      	cmp	r3, r2
     9fc:	4618      	mov	r0, r3
     9fe:	bf88      	it	hi
     a00:	f5a3 3048 	subhi.w	r0, r3, #204800	; 0x32000
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     a04:	45ca      	cmp	sl, r9
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     a06:	6028      	str	r0, [r5, #0]
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     a08:	d1e6      	bne.n	9d8 <canSniff(CAN_message_t const&)+0x348>
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     a0a:	4d43      	ldr	r5, [pc, #268]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
     a0c:	2300      	movs	r3, #0
     a0e:	4e43      	ldr	r6, [pc, #268]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     a10:	220a      	movs	r2, #10
     a12:	f858 1005 	ldr.w	r1, [r8, r5]
     a16:	4630      	mov	r0, r6
     a18:	4449      	add	r1, r9
     a1a:	f848 1005 	str.w	r1, [r8, r5]
     a1e:	7ae1      	ldrb	r1, [r4, #11]
     a20:	f009 fc5e 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     a24:	b672      	cpsid	i
    count = m_count;
     a26:	f858 3005 	ldr.w	r3, [r8, r5]
    interrupts();
     a2a:	b662      	cpsie	i
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     a2c:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
     a30:	d101      	bne.n	a36 <canSniff(CAN_message_t const&)+0x3a6>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     a32:	2301      	movs	r3, #1
     a34:	7133      	strb	r3, [r6, #4]
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     a36:	4a38      	ldr	r2, [pc, #224]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     a38:	4b38      	ldr	r3, [pc, #224]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     a3a:	f858 2002 	ldr.w	r2, [r8, r2]
    if (count > n) {
     a3e:	f5b2 3f48 	cmp.w	r2, #204800	; 0x32000
     a42:	f000 812a 	beq.w	c9a <canSniff(CAN_message_t const&)+0x60a>
     a46:	4a36      	ldr	r2, [pc, #216]	; (b20 <canSniff(CAN_message_t const&)+0x490>)
     a48:	f103 0608 	add.w	r6, r3, #8
     a4c:	4d36      	ldr	r5, [pc, #216]	; (b28 <canSniff(CAN_message_t const&)+0x498>)
     a4e:	5898      	ldr	r0, [r3, r2]
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
    return index < Size ? index : index - Size;
     a50:	f8df 90d8 	ldr.w	r9, [pc, #216]	; b2c <canSniff(CAN_message_t const&)+0x49c>
     a54:	f5c0 3748 	rsb	r7, r0, #204800	; 0x32000
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     a58:	4936      	ldr	r1, [pc, #216]	; (b34 <canSniff(CAN_message_t const&)+0x4a4>)
     a5a:	4430      	add	r0, r6
     a5c:	2f01      	cmp	r7, #1
     a5e:	bf28      	it	cs
     a60:	2701      	movcs	r7, #1
     a62:	463a      	mov	r2, r7
     a64:	f007 fff6 	bl	8a54 <memcpy>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     a68:	682b      	ldr	r3, [r5, #0]
     a6a:	443b      	add	r3, r7
    return index < Size ? index : index - Size;
     a6c:	454b      	cmp	r3, r9
     a6e:	4618      	mov	r0, r3
     a70:	bf88      	it	hi
     a72:	f5a3 3048 	subhi.w	r0, r3, #204800	; 0x32000
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     a76:	2f01      	cmp	r7, #1
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     a78:	6028      	str	r0, [r5, #0]
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     a7a:	d1eb      	bne.n	a54 <canSniff(CAN_message_t const&)+0x3c4>
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     a7c:	4a26      	ldr	r2, [pc, #152]	; (b18 <canSniff(CAN_message_t const&)+0x488>)
     a7e:	f858 3002 	ldr.w	r3, [r8, r2]
     a82:	441f      	add	r7, r3
     a84:	f848 7002 	str.w	r7, [r8, r2]
	rb.print("      ");
	rb.print(msg.id, HEX);
	rb.print("  Rx d ");
	rb.print(msg.len);
	rb.print(" ");
	for (uint8_t i = 0; i < msg.len; i++) {
     a88:	7ae3      	ldrb	r3, [r4, #11]
     a8a:	2b00      	cmp	r3, #0
     a8c:	d05c      	beq.n	b48 <canSniff(CAN_message_t const&)+0x4b8>
     a8e:	2700      	movs	r7, #0
     a90:	f8df 90b0 	ldr.w	r9, [pc, #176]	; b44 <canSniff(CAN_message_t const&)+0x4b4>
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
    return index < Size ? index : index - Size;
     a94:	4e25      	ldr	r6, [pc, #148]	; (b2c <canSniff(CAN_message_t const&)+0x49c>)
     a96:	46a2      	mov	sl, r4
		rb.print(msg.buf[i], HEX);
     a98:	eb0a 0107 	add.w	r1, sl, r7
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
     a9c:	2300      	movs	r3, #0
     a9e:	2210      	movs	r2, #16
     aa0:	481e      	ldr	r0, [pc, #120]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     aa2:	7b09      	ldrb	r1, [r1, #12]
     aa4:	f009 fc1c 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
   *
   * \return the RingBuf free space in bytes. Not ISR callable.
   */
  size_t bytesFree() const {
    size_t count;
    noInterrupts();
     aa8:	b672      	cpsid	i
    count = m_count;
     aaa:	f8d9 3000 	ldr.w	r3, [r9]
    interrupts();
     aae:	b662      	cpsie	i
   * \param[in] buf Location of data to be written.
   * \param[in] count number of bytes to be written.
   * \return Number of bytes actually written.
   */
  size_t write(const void* buf, size_t count) {
    if (count > bytesFree()) {
     ab0:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
     ab4:	d102      	bne.n	abc <canSniff(CAN_message_t const&)+0x42c>
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
     ab6:	2301      	movs	r3, #1
     ab8:	4a18      	ldr	r2, [pc, #96]	; (b1c <canSniff(CAN_message_t const&)+0x48c>)
     aba:	7113      	strb	r3, [r2, #4]
   * \param[in] count number of bytes to be copied.
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
     abc:	f8d9 3000 	ldr.w	r3, [r9]
    if (count > n) {
     ac0:	f5b3 3f48 	cmp.w	r3, #204800	; 0x32000
     ac4:	f000 80d3 	beq.w	c6e <canSniff(CAN_message_t const&)+0x5de>
     ac8:	f8df b05c 	ldr.w	fp, [pc, #92]	; b28 <canSniff(CAN_message_t const&)+0x498>
     acc:	4c15      	ldr	r4, [pc, #84]	; (b24 <canSniff(CAN_message_t const&)+0x494>)
     ace:	f8db 0000 	ldr.w	r0, [fp]
     ad2:	f5c0 3548 	rsb	r5, r0, #204800	; 0x32000
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     ad6:	4917      	ldr	r1, [pc, #92]	; (b34 <canSniff(CAN_message_t const&)+0x4a4>)
     ad8:	4420      	add	r0, r4
     ada:	2d01      	cmp	r5, #1
     adc:	bf28      	it	cs
     ade:	2501      	movcs	r5, #1
     ae0:	462a      	mov	r2, r5
     ae2:	f007 ffb7 	bl	8a54 <memcpy>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     ae6:	f8db 3000 	ldr.w	r3, [fp]
     aea:	442b      	add	r3, r5
    return index < Size ? index : index - Size;
     aec:	42b3      	cmp	r3, r6
     aee:	4618      	mov	r0, r3
     af0:	bf88      	it	hi
     af2:	f5a3 3048 	subhi.w	r0, r3, #204800	; 0x32000
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     af6:	2d01      	cmp	r5, #1
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     af8:	f8cb 0000 	str.w	r0, [fp]
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     afc:	d1e9      	bne.n	ad2 <canSniff(CAN_message_t const&)+0x442>
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
        nread += n;
    }
    m_count += nread;
     afe:	f8d9 3000 	ldr.w	r3, [r9]
	rb.print("      ");
	rb.print(msg.id, HEX);
	rb.print("  Rx d ");
	rb.print(msg.len);
	rb.print(" ");
	for (uint8_t i = 0; i < msg.len; i++) {
     b02:	3701      	adds	r7, #1
     b04:	441d      	add	r5, r3
     b06:	b2ff      	uxtb	r7, r7
     b08:	f8c9 5000 	str.w	r5, [r9]
     b0c:	f89a 300b 	ldrb.w	r3, [sl, #11]
     b10:	42bb      	cmp	r3, r7
     b12:	d8c1      	bhi.n	a98 <canSniff(CAN_message_t const&)+0x408>
     b14:	e018      	b.n	b48 <canSniff(CAN_message_t const&)+0x4b8>
     b16:	bf00      	nop
     b18:	0003200c 	.word	0x0003200c
     b1c:	20004280 	.word	0x20004280
     b20:	00032010 	.word	0x00032010
     b24:	20004288 	.word	0x20004288
     b28:	20036290 	.word	0x20036290
     b2c:	00031fff 	.word	0x00031fff
     b30:	200000f8 	.word	0x200000f8
     b34:	200001b0 	.word	0x200001b0
     b38:	20000100 	.word	0x20000100
     b3c:	200000fc 	.word	0x200000fc
     b40:	20000104 	.word	0x20000104
     b44:	2003628c 	.word	0x2003628c
		rb.print(msg.buf[i], HEX);
		rb.print(" ");
	}
	rb.println();
     b48:	4863      	ldr	r0, [pc, #396]	; (cd8 <canSniff(CAN_message_t const&)+0x648>)
     b4a:	f009 fbb9 	bl	a2c0 <Print::println()>
	if (rb.getWriteError()) {
     b4e:	f898 3004 	ldrb.w	r3, [r8, #4]
     b52:	2b00      	cmp	r3, #0
     b54:	f43f ae1e 	beq.w	794 <canSniff(CAN_message_t const&)+0x104>
     b58:	210a      	movs	r1, #10
     b5a:	4860      	ldr	r0, [pc, #384]	; (cdc <canSniff(CAN_message_t const&)+0x64c>)
     b5c:	e05b      	b.n	c16 <canSniff(CAN_message_t const&)+0x586>
   *
   * \return true if busy else false.
   */
  bool isBusy() {
    return m_fFile ? m_fFile->isBusy() :
           m_xFile ? m_xFile->isBusy() : true;
     b5e:	2800      	cmp	r0, #0
     b60:	d07e      	beq.n	c60 <canSniff(CAN_message_t const&)+0x5d0>
     b62:	f005 f8cd 	bl	5d00 <FatFile::isBusy()>
		return;
	}
	if (n > maxUsed) {
		maxUsed = n;
	}
	if (n >= 512 && !file.isBusy()) {
     b66:	2800      	cmp	r0, #0
     b68:	f47f ae11 	bne.w	78e <canSniff(CAN_message_t const&)+0xfe>
  /**
   * \return the RingBuf used space in bytes. Not ISR callable.
   */
  size_t bytesUsed() const {
    size_t count;
    noInterrupts();
     b6c:	b672      	cpsid	i
    count = m_count;
     b6e:	4b5c      	ldr	r3, [pc, #368]	; (ce0 <canSniff(CAN_message_t const&)+0x650>)
     b70:	f858 9003 	ldr.w	r9, [r8, r3]
    interrupts();
     b74:	b662      	cpsie	i
   *
   * \return Number of bytes actually written.
   */
  size_t writeOut(size_t count) {
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
     b76:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
     b7a:	f080 809b 	bcs.w	cb4 <canSniff(CAN_message_t const&)+0x624>
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
     b7e:	f1b9 0f00 	cmp.w	r9, #0
     b82:	f000 80a7 	beq.w	cd4 <canSniff(CAN_message_t const&)+0x644>
     b86:	f8df a180 	ldr.w	sl, [pc, #384]	; d08 <canSniff(CAN_message_t const&)+0x678>
   *
   * \return Number of bytes actually written.
   */
  size_t writeOut(size_t count) {
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
     b8a:	2700      	movs	r7, #0
     b8c:	4b55      	ldr	r3, [pc, #340]	; (ce4 <canSniff(CAN_message_t const&)+0x654>)
     b8e:	f5aa 3648 	sub.w	r6, sl, #204800	; 0x32000
    while (nwrite != count) {
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
        break;
      }
      m_tail = advance(m_tail, n);
     b92:	f10a 0b0c 	add.w	fp, sl, #12
     b96:	f858 1003 	ldr.w	r1, [r8, r3]
     b9a:	e011      	b.n	bc0 <canSniff(CAN_message_t const&)+0x530>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     b9c:	462a      	mov	r2, r5
     b9e:	f005 fb59 	bl	6254 <FatFile::write(void const*, unsigned int)>
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
     ba2:	42a8      	cmp	r0, r5
     ba4:	d126      	bne.n	bf4 <canSniff(CAN_message_t const&)+0x564>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     ba6:	f8db 1000 	ldr.w	r1, [fp]
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
        break;
      }
      m_tail = advance(m_tail, n);
      nwrite += n;
     baa:	4407      	add	r7, r0
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
    return index < Size ? index : index - Size;
     bac:	4b4e      	ldr	r3, [pc, #312]	; (ce8 <canSniff(CAN_message_t const&)+0x658>)
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     bae:	4401      	add	r1, r0
    return index < Size ? index : index - Size;
     bb0:	4299      	cmp	r1, r3
     bb2:	bf88      	it	hi
     bb4:	f5a1 3148 	subhi.w	r1, r1, #204800	; 0x32000
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
     bb8:	454f      	cmp	r7, r9
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
        break;
      }
      m_tail = advance(m_tail, n);
     bba:	f8cb 1000 	str.w	r1, [fp]
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
     bbe:	d019      	beq.n	bf4 <canSniff(CAN_message_t const&)+0x564>
     bc0:	f5c1 3048 	rsb	r0, r1, #204800	; 0x32000
     bc4:	ebc7 0509 	rsb	r5, r7, r9
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
     bc8:	f8da 2000 	ldr.w	r2, [sl]
     bcc:	4431      	add	r1, r6
     bce:	4285      	cmp	r5, r0
     bd0:	6813      	ldr	r3, [r2, #0]
     bd2:	bf28      	it	cs
     bd4:	4605      	movcs	r5, r0
     bd6:	4845      	ldr	r0, [pc, #276]	; (cec <canSniff(CAN_message_t const&)+0x65c>)
     bd8:	685b      	ldr	r3, [r3, #4]
     bda:	4283      	cmp	r3, r0
     bdc:	d149      	bne.n	c72 <canSniff(CAN_message_t const&)+0x5e2>
     bde:	6c90      	ldr	r0, [r2, #72]	; 0x48
     be0:	2800      	cmp	r0, #0
     be2:	d1db      	bne.n	b9c <canSniff(CAN_message_t const&)+0x50c>
     be4:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
     be6:	2800      	cmp	r0, #0
     be8:	d0db      	beq.n	ba2 <canSniff(CAN_message_t const&)+0x512>
     bea:	462a      	mov	r2, r5
     bec:	f004 fc04 	bl	53f8 <ExFatFile::write(void const*, unsigned int)>
     bf0:	42a8      	cmp	r0, r5
     bf2:	d0d8      	beq.n	ba6 <canSniff(CAN_message_t const&)+0x516>
        break;
      }
      m_tail = advance(m_tail, n);
      nwrite += n;
    }
    noInterrupts();
     bf4:	b672      	cpsid	i
    m_count -= nwrite;
     bf6:	4a3a      	ldr	r2, [pc, #232]	; (ce0 <canSniff(CAN_message_t const&)+0x650>)
     bf8:	f858 3002 	ldr.w	r3, [r8, r2]
     bfc:	1bdb      	subs	r3, r3, r7
     bfe:	f848 3002 	str.w	r3, [r8, r2]
    interrupts();
     c02:	b662      	cpsie	i
		// Not busy only allows one sector before possible busy wait.
		// Write one sector from RingBuf to file.
		if (512 != rb.writeOut(512)) {
     c04:	f5b7 7f00 	cmp.w	r7, #512	; 0x200
     c08:	f43f adc1 	beq.w	78e <canSniff(CAN_message_t const&)+0xfe>
     c0c:	210f      	movs	r1, #15
     c0e:	4838      	ldr	r0, [pc, #224]	; (cf0 <canSniff(CAN_message_t const&)+0x660>)
     c10:	e001      	b.n	c16 <canSniff(CAN_message_t const&)+0x586>
     c12:	2114      	movs	r1, #20
     c14:	4837      	ldr	r0, [pc, #220]	; (cf4 <canSniff(CAN_message_t const&)+0x664>)
     c16:	f009 fa93 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     c1a:	4837      	ldr	r0, [pc, #220]	; (cf8 <canSniff(CAN_message_t const&)+0x668>)
	if (rb.getWriteError()) {
		// Error caused by too few free bytes in RingBuf.
		Serial.println("WriteError");
		return;
	}
}
     c1c:	ecbd 8b02 	vpop	{d8}
     c20:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     c24:	f009 bb4c 	b.w	a2c0 <Print::println()>
     c28:	4a34      	ldr	r2, [pc, #208]	; (cfc <canSniff(CAN_message_t const&)+0x66c>)
     c2a:	f103 0608 	add.w	r6, r3, #8
     c2e:	4d34      	ldr	r5, [pc, #208]	; (d00 <canSniff(CAN_message_t const&)+0x670>)
     c30:	5898      	ldr	r0, [r3, r2]
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
    return index < Size ? index : index - Size;
     c32:	f8df 90b4 	ldr.w	r9, [pc, #180]	; ce8 <canSniff(CAN_message_t const&)+0x658>
     c36:	f5c0 3748 	rsb	r7, r0, #204800	; 0x32000
    }
  }
}
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
inline void memcpyBuf(void* dst, const void* src, size_t len) {
  memcpy(dst, src, len);
     c3a:	4932      	ldr	r1, [pc, #200]	; (d04 <canSniff(CAN_message_t const&)+0x674>)
     c3c:	4430      	add	r0, r6
     c3e:	2f01      	cmp	r7, #1
     c40:	bf28      	it	cs
     c42:	2701      	movcs	r7, #1
     c44:	463a      	mov	r2, r7
     c46:	f007 ff05 	bl	8a54 <memcpy>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     c4a:	682b      	ldr	r3, [r5, #0]
     c4c:	443b      	add	r3, r7
    return index < Size ? index : index - Size;
     c4e:	454b      	cmp	r3, r9
     c50:	4618      	mov	r0, r3
     c52:	bf88      	it	hi
     c54:	f5a3 3048 	subhi.w	r0, r3, #204800	; 0x32000
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     c58:	2f01      	cmp	r7, #1
        n = minSize(Size - m_head, count - nread);
        memcpyBuf(m_buf + m_head, src + nread, n);
        m_head = advance(m_head, n);
     c5a:	6028      	str	r0, [r5, #0]
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
    while (nread != count) {
     c5c:	d1eb      	bne.n	c36 <canSniff(CAN_message_t const&)+0x5a6>
     c5e:	e5d5      	b.n	80c <canSniff(CAN_message_t const&)+0x17c>
   *
   * \return true if busy else false.
   */
  bool isBusy() {
    return m_fFile ? m_fFile->isBusy() :
           m_xFile ? m_xFile->isBusy() : true;
     c60:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
     c62:	2800      	cmp	r0, #0
     c64:	f43f ad93 	beq.w	78e <canSniff(CAN_message_t const&)+0xfe>
     c68:	f003 fce8 	bl	463c <ExFatFile::isBusy()>
     c6c:	e77b      	b.n	b66 <canSniff(CAN_message_t const&)+0x4d6>
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
     c6e:	2500      	movs	r5, #0
     c70:	e745      	b.n	afe <canSniff(CAN_message_t const&)+0x46e>
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
     c72:	4610      	mov	r0, r2
     c74:	462a      	mov	r2, r5
     c76:	4798      	blx	r3
     c78:	e793      	b.n	ba2 <canSniff(CAN_message_t const&)+0x512>
           m_xFile ? m_xFile->contiguousRange(bgnSector, endSector) : false;
  }
  /** \return The current position for a file or directory. */
  uint64_t curPosition() const {
    return m_fFile ? m_fFile->curPosition() :
           m_xFile ? m_xFile->curPosition() : 0;
     c7a:	6cee      	ldr	r6, [r5, #76]	; 0x4c
     c7c:	b30e      	cbz	r6, cc2 <canSniff(CAN_message_t const&)+0x632>
     c7e:	f8d6 e000 	ldr.w	lr, [r6]
	}
	Serial.println();

	size_t n = rb.bytesUsed();
	logFileSize = (uint32_t)n + (uint32_t)file.curPosition();
	if ((n + file.curPosition()) > (LOG_FILE_SIZE - 20)) {
     c82:	2700      	movs	r7, #0
     c84:	f8d6 c004 	ldr.w	ip, [r6, #4]
     c88:	460e      	mov	r6, r1
     c8a:	4672      	mov	r2, lr
		Serial.print(" ");
	}
	Serial.println();

	size_t n = rb.bytesUsed();
	logFileSize = (uint32_t)n + (uint32_t)file.curPosition();
     c8c:	448e      	add	lr, r1
     c8e:	4663      	mov	r3, ip
     c90:	f8df c078 	ldr.w	ip, [pc, #120]	; d0c <canSniff(CAN_message_t const&)+0x67c>
     c94:	f8cc e000 	str.w	lr, [ip]
     c98:	e566      	b.n	768 <canSniff(CAN_message_t const&)+0xd8>
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
     c9a:	2700      	movs	r7, #0
     c9c:	e6ee      	b.n	a7c <canSniff(CAN_message_t const&)+0x3ec>
     c9e:	2700      	movs	r7, #0
     ca0:	e62e      	b.n	900 <canSniff(CAN_message_t const&)+0x270>
   * \return Number of bytes actually copied.
   */
  size_t memcpyIn(const void* buf, size_t count) {
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
    if (count > n) {
     ca2:	f04f 0907 	mov.w	r9, #7
     ca6:	e68e      	b.n	9c6 <canSniff(CAN_message_t const&)+0x336>
     ca8:	f04f 0a06 	mov.w	sl, #6
     cac:	e646      	b.n	93c <canSniff(CAN_message_t const&)+0x2ac>
     cae:	f04f 0a02 	mov.w	sl, #2
     cb2:	e5cf      	b.n	854 <canSniff(CAN_message_t const&)+0x1c4>
   *
   * \return Number of bytes actually written.
   */
  size_t writeOut(size_t count) {
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
     cb4:	f44f 7900 	mov.w	r9, #512	; 0x200
     cb8:	e765      	b.n	b86 <canSniff(CAN_message_t const&)+0x4f6>
    const uint8_t* src = (const uint8_t*)buf;
    size_t n = Size - m_count;
    if (count > n) {
      count = n;
    }
    size_t nread = 0;
     cba:	469a      	mov	sl, r3
     cbc:	e5ec      	b.n	898 <canSniff(CAN_message_t const&)+0x208>
     cbe:	46d1      	mov	r9, sl
     cc0:	e65e      	b.n	980 <canSniff(CAN_message_t const&)+0x2f0>
     cc2:	f8df e048 	ldr.w	lr, [pc, #72]	; d0c <canSniff(CAN_message_t const&)+0x67c>
	if ((n + file.curPosition()) > (LOG_FILE_SIZE - 20)) {
     cc6:	460e      	mov	r6, r1
     cc8:	2700      	movs	r7, #0
     cca:	2200      	movs	r2, #0
     ccc:	2300      	movs	r3, #0
		Serial.print(" ");
	}
	Serial.println();

	size_t n = rb.bytesUsed();
	logFileSize = (uint32_t)n + (uint32_t)file.curPosition();
     cce:	f8ce 1000 	str.w	r1, [lr]
     cd2:	e549      	b.n	768 <canSniff(CAN_message_t const&)+0xd8>
  size_t writeOut(size_t count) {
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
      count = n;
    }
    size_t nwrite = 0;
     cd4:	4607      	mov	r7, r0
     cd6:	e78d      	b.n	bf4 <canSniff(CAN_message_t const&)+0x564>
     cd8:	20004280 	.word	0x20004280
     cdc:	20000134 	.word	0x20000134
     ce0:	0003200c 	.word	0x0003200c
     ce4:	00032014 	.word	0x00032014
     ce8:	00031fff 	.word	0x00031fff
     cec:	00000521 	.word	0x00000521
     cf0:	20000124 	.word	0x20000124
     cf4:	2000010c 	.word	0x2000010c
     cf8:	20001160 	.word	0x20001160
     cfc:	00032010 	.word	0x00032010
     d00:	20036290 	.word	0x20036290
     d04:	200001b0 	.word	0x200001b0
     d08:	20036288 	.word	0x20036288
     d0c:	2000427c 	.word	0x2000427c

00000d10 <printDisplay()>:
	Can0.mailboxStatus();

}

void printDisplay()
{
     d10:	b510      	push	{r4, lr}
    u8g2_uint_t getDisplayWidth(void) { return u8g2_GetDisplayWidth(&u8g2); }

    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
     d12:	4c15      	ldr	r4, [pc, #84]	; (d68 <printDisplay()+0x58>)
     d14:	4620      	mov	r0, r4
     d16:	f002 fa65 	bl	31e4 <u8g2_ClearBuffer>
    /* u8log_u8g2.c */
    void drawLog(u8g2_uint_t x, u8g2_uint_t y, class U8G2LOG &u8g2log);
    
    /* u8g2_font.c */

    void setFont(const uint8_t  *font) {u8g2_SetFont(&u8g2, font); }
     d1a:	4620      	mov	r0, r4
     d1c:	4913      	ldr	r1, [pc, #76]	; (d6c <printDisplay()+0x5c>)
     d1e:	f002 fdfd 	bl	391c <u8g2_SetFont>
u8g2_uint_t u8g2_GetStrWidth(u8g2_t *u8g2, const char *s);
u8g2_uint_t u8g2_GetUTF8Width(u8g2_t *u8g2, const char *str);
*/
    
    u8g2_uint_t drawGlyph(u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding) { return u8g2_DrawGlyph(&u8g2, x, y, encoding); }    
    u8g2_uint_t drawStr(u8g2_uint_t x, u8g2_uint_t y, const char *s) { return u8g2_DrawStr(&u8g2, x, y, s); }
     d22:	4620      	mov	r0, r4
     d24:	4b12      	ldr	r3, [pc, #72]	; (d70 <printDisplay()+0x60>)
     d26:	220c      	movs	r2, #12
     d28:	2102      	movs	r1, #2
     d2a:	f002 fdb9 	bl	38a0 <u8g2_DrawStr>
     d2e:	4620      	mov	r0, r4
     d30:	4b10      	ldr	r3, [pc, #64]	; (d74 <printDisplay()+0x64>)
     d32:	2218      	movs	r2, #24
     d34:	2102      	movs	r1, #2
     d36:	f002 fdb3 	bl	38a0 <u8g2_DrawStr>
     d3a:	4620      	mov	r0, r4
     d3c:	4b0e      	ldr	r3, [pc, #56]	; (d78 <printDisplay()+0x68>)
     d3e:	2224      	movs	r2, #36	; 0x24
     d40:	2102      	movs	r1, #2
     d42:	f002 fdad 	bl	38a0 <u8g2_DrawStr>
     d46:	4620      	mov	r0, r4
     d48:	4b0c      	ldr	r3, [pc, #48]	; (d7c <printDisplay()+0x6c>)
     d4a:	2230      	movs	r2, #48	; 0x30
     d4c:	2102      	movs	r1, #2
     d4e:	f002 fda7 	bl	38a0 <u8g2_DrawStr>
     d52:	4620      	mov	r0, r4
     d54:	4b0a      	ldr	r3, [pc, #40]	; (d80 <printDisplay()+0x70>)
     d56:	223c      	movs	r2, #60	; 0x3c
     d58:	2102      	movs	r1, #2
     d5a:	f002 fda1 	bl	38a0 <u8g2_DrawStr>
    u8g2_uint_t getDisplayHeight(void) { return u8g2_GetDisplayHeight(&u8g2); }
    u8g2_uint_t getDisplayWidth(void) { return u8g2_GetDisplayWidth(&u8g2); }

    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
     d5e:	4620      	mov	r0, r4
	u8g2.drawStr(2, 24, (const char*)disp_msg_2);
	u8g2.drawStr(2, 36, (const char*)disp_msg_3);
	u8g2.drawStr(2, 48, (const char*)disp_msg_4);
	u8g2.drawStr(2, 60, (const char*)disp_msg_5);
	u8g2.sendBuffer();          // transfer internal memory to the display
}
     d60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
     d64:	f002 ba4a 	b.w	31fc <u8g2_SendBuffer>
     d68:	200362a0 	.word	0x200362a0
     d6c:	200004a0 	.word	0x200004a0
     d70:	20001048 	.word	0x20001048
     d74:	20001074 	.word	0x20001074
     d78:	20001088 	.word	0x20001088
     d7c:	2000105c 	.word	0x2000105c
     d80:	2000109c 	.word	0x2000109c

00000d84 <digitalClockDisplay()>:

void digitalClockDisplay()
{
     d84:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
     d88:	b085      	sub	sp, #20
	sprintf(disp_msg_1, "%02d:%02d:%02d %02d/%02d/%04d", hour(), minute(), second(), day(), month(), year());
     d8a:	4c16      	ldr	r4, [pc, #88]	; (de4 <digitalClockDisplay()+0x60>)
     d8c:	f002 f846 	bl	2e1c <hour()>
     d90:	4607      	mov	r7, r0
     d92:	f002 f853 	bl	2e3c <minute()>
     d96:	4680      	mov	r8, r0
     d98:	f002 f860 	bl	2e5c <second()>
     d9c:	4681      	mov	r9, r0
     d9e:	f002 f86d 	bl	2e7c <day()>
     da2:	4605      	mov	r5, r0
     da4:	f002 f87a 	bl	2e9c <month()>
     da8:	4606      	mov	r6, r0
     daa:	f002 f887 	bl	2ebc <year()>
     dae:	4643      	mov	r3, r8
     db0:	463a      	mov	r2, r7
     db2:	9003      	str	r0, [sp, #12]
     db4:	490c      	ldr	r1, [pc, #48]	; (de8 <digitalClockDisplay()+0x64>)
     db6:	4620      	mov	r0, r4
     db8:	f8cd 9000 	str.w	r9, [sp]
     dbc:	9602      	str	r6, [sp, #8]
     dbe:	9501      	str	r5, [sp, #4]
     dc0:	f00a fd88 	bl	b8d4 <sprintf>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
     dc4:	4620      	mov	r0, r4
     dc6:	f00a fdbb 	bl	b940 <strlen>
     dca:	4601      	mov	r1, r0
     dcc:	4620      	mov	r0, r4
     dce:	f009 f9b7 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
     dd2:	4806      	ldr	r0, [pc, #24]	; (dec <digitalClockDisplay()+0x68>)
     dd4:	f009 fa74 	bl	a2c0 <Print::println()>
	Serial.println(disp_msg_1);
	printDisplay();
}
     dd8:	b005      	add	sp, #20
     dda:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}

void digitalClockDisplay()
{
	sprintf(disp_msg_1, "%02d:%02d:%02d %02d/%02d/%04d", hour(), minute(), second(), day(), month(), year());
	Serial.println(disp_msg_1);
	printDisplay();
     dde:	f7ff bf97 	b.w	d10 <printDisplay()>
     de2:	bf00      	nop
     de4:	20001048 	.word	0x20001048
     de8:	20000140 	.word	0x20000140
     dec:	20001160 	.word	0x20001160

00000df0 <stopLogging()>:
		return;
	}
}

void stopLogging()
{
     df0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
     df4:	4e59      	ldr	r6, [pc, #356]	; (f5c <stopLogging()+0x16c>)
	log_enable = false;
     df6:	2500      	movs	r5, #0
     df8:	4b59      	ldr	r3, [pc, #356]	; (f60 <stopLogging()+0x170>)
     dfa:	210c      	movs	r1, #12
     dfc:	4630      	mov	r0, r6
	Serial.println("Stop Logging");
	strcpy(disp_msg_2, "Stop Logging");
     dfe:	4c59      	ldr	r4, [pc, #356]	; (f64 <stopLogging()+0x174>)
	}
}

void stopLogging()
{
	log_enable = false;
     e00:	701d      	strb	r5, [r3, #0]
     e02:	f009 f99d 	bl	a140 <usb_serial_write>
     e06:	4858      	ldr	r0, [pc, #352]	; (f68 <stopLogging()+0x178>)
     e08:	f009 fa5a 	bl	a2c0 <Print::println()>
	Serial.println("Stop Logging");
	strcpy(disp_msg_2, "Stop Logging");
     e0c:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
     e10:	c407      	stmia	r4!, {r0, r1, r2}
	digitalWrite(LED_PIN, LOW);
     e12:	4629      	mov	r1, r5
     e14:	200d      	movs	r0, #13

void stopLogging()
{
	log_enable = false;
	Serial.println("Stop Logging");
	strcpy(disp_msg_2, "Stop Logging");
     e16:	7023      	strb	r3, [r4, #0]
	digitalWrite(LED_PIN, LOW);
     e18:	f008 f8e4 	bl	8fe4 <digitalWrite>
  /**
   * \return the RingBuf used space in bytes. Not ISR callable.
   */
  size_t bytesUsed() const {
    size_t count;
    noInterrupts();
     e1c:	b672      	cpsid	i
    count = m_count;
     e1e:	4b53      	ldr	r3, [pc, #332]	; (f6c <stopLogging()+0x17c>)
     e20:	4a53      	ldr	r2, [pc, #332]	; (f70 <stopLogging()+0x180>)
     e22:	58d2      	ldr	r2, [r2, r3]
    interrupts();
     e24:	b662      	cpsie	i
  /**
   * \return the RingBuf used space in bytes. Not ISR callable.
   */
  size_t bytesUsed() const {
    size_t count;
    noInterrupts();
     e26:	b672      	cpsid	i
    count = m_count;
     e28:	4951      	ldr	r1, [pc, #324]	; (f70 <stopLogging()+0x180>)
     e2a:	58ce      	ldr	r6, [r1, r3]
    interrupts();
     e2c:	b662      	cpsie	i
     e2e:	4296      	cmp	r6, r2
     e30:	bf28      	it	cs
     e32:	4616      	movcs	r6, r2
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
     e34:	2e00      	cmp	r6, #0
     e36:	f000 808f 	beq.w	f58 <stopLogging()+0x168>
     e3a:	3308      	adds	r3, #8
     e3c:	f8df 9154 	ldr.w	r9, [pc, #340]	; f94 <stopLogging()+0x1a4>
     e40:	f101 0808 	add.w	r8, r1, #8
     e44:	4f4b      	ldr	r7, [pc, #300]	; (f74 <stopLogging()+0x184>)
     e46:	58c9      	ldr	r1, [r1, r3]
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
        break;
      }
      m_tail = advance(m_tail, n);
     e48:	f109 0b0c 	add.w	fp, r9, #12
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
    return index < Size ? index : index - Size;
     e4c:	f8df a148 	ldr.w	sl, [pc, #328]	; f98 <stopLogging()+0x1a8>
     e50:	e010      	b.n	e74 <stopLogging()+0x84>
   * for a read-only file, device is full, a corrupt file system or an
   * I/O error.
   */
  size_t write(const void* buf, size_t count) {
    return m_fFile ? m_fFile->write(buf, count) :
           m_xFile ? m_xFile->write(buf, count) : 0;
     e52:	4622      	mov	r2, r4
     e54:	f005 f9fe 	bl	6254 <FatFile::write(void const*, unsigned int)>
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
     e58:	42a0      	cmp	r0, r4
     e5a:	d123      	bne.n	ea4 <stopLogging()+0xb4>
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     e5c:	f8db 1000 	ldr.w	r1, [fp]
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
        break;
      }
      m_tail = advance(m_tail, n);
      nwrite += n;
     e60:	4405      	add	r5, r0
  volatile size_t m_count;
  size_t m_head;
  size_t m_tail;

  size_t advance(size_t index, size_t n) {
    index += n;
     e62:	4401      	add	r1, r0
    return index < Size ? index : index - Size;
     e64:	4551      	cmp	r1, sl
     e66:	bf88      	it	hi
     e68:	f5a1 3148 	subhi.w	r1, r1, #204800	; 0x32000
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
     e6c:	42ae      	cmp	r6, r5
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
        break;
      }
      m_tail = advance(m_tail, n);
     e6e:	f8cb 1000 	str.w	r1, [fp]
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
     e72:	d017      	beq.n	ea4 <stopLogging()+0xb4>
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
     e74:	f8d9 2000 	ldr.w	r2, [r9]
     e78:	f5c1 3048 	rsb	r0, r1, #204800	; 0x32000
     e7c:	1b74      	subs	r4, r6, r5
     e7e:	4441      	add	r1, r8
     e80:	6813      	ldr	r3, [r2, #0]
     e82:	4284      	cmp	r4, r0
     e84:	685b      	ldr	r3, [r3, #4]
     e86:	bf28      	it	cs
     e88:	4604      	movcs	r4, r0
     e8a:	42bb      	cmp	r3, r7
     e8c:	d150      	bne.n	f30 <stopLogging()+0x140>
     e8e:	6c90      	ldr	r0, [r2, #72]	; 0x48
     e90:	2800      	cmp	r0, #0
     e92:	d1de      	bne.n	e52 <stopLogging()+0x62>
     e94:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
     e96:	2800      	cmp	r0, #0
     e98:	d0de      	beq.n	e58 <stopLogging()+0x68>
     e9a:	4622      	mov	r2, r4
     e9c:	f004 faac 	bl	53f8 <ExFatFile::write(void const*, unsigned int)>
     ea0:	42a0      	cmp	r0, r4
     ea2:	d0db      	beq.n	e5c <stopLogging()+0x6c>
        break;
      }
      m_tail = advance(m_tail, n);
      nwrite += n;
    }
    noInterrupts();
     ea4:	b672      	cpsid	i
    m_count -= nwrite;
     ea6:	4a31      	ldr	r2, [pc, #196]	; (f6c <stopLogging()+0x17c>)
     ea8:	4b31      	ldr	r3, [pc, #196]	; (f70 <stopLogging()+0x180>)
     eaa:	589b      	ldr	r3, [r3, r2]
     eac:	1b5d      	subs	r5, r3, r5
     eae:	4b30      	ldr	r3, [pc, #192]	; (f70 <stopLogging()+0x180>)
     eb0:	509d      	str	r5, [r3, r2]
    interrupts();
     eb2:	b662      	cpsie	i
     eb4:	4c30      	ldr	r4, [pc, #192]	; (f78 <stopLogging()+0x188>)
     eb6:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     eb8:	2800      	cmp	r0, #0
     eba:	d03d      	beq.n	f38 <stopLogging()+0x148>
     ebc:	f005 f98e 	bl	61dc <FatFile::truncate()>
     ec0:	6ca0      	ldr	r0, [r4, #72]	; 0x48
     ec2:	4d2d      	ldr	r5, [pc, #180]	; (f78 <stopLogging()+0x188>)
    return m_fFile ? m_fFile->rename(dirFile->m_fFile, newPath) :
           m_xFile ? m_xFile->rename(dirFile->m_xFile, newPath) : false;
  }
  /** Set the file's current position to zero. */
  void rewind() {
    if (m_fFile) m_fFile->rewind();
     ec4:	b110      	cbz	r0, ecc <stopLogging()+0xdc>
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     ec6:	2100      	movs	r1, #0
     ec8:	f005 f8be 	bl	6048 <FatFile::seekSet(unsigned long)>
     ecc:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
    if (m_xFile) m_xFile->rewind();
     ece:	b118      	cbz	r0, ed8 <stopLogging()+0xe8>
   * \return true for success or false for failure.
   */
  bool rename(ExFatFile* dirFile, const ExChar_t* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
     ed0:	2200      	movs	r2, #0
     ed2:	2300      	movs	r3, #0
     ed4:	f003 fd3a 	bl	494c <ExFatFile::seekSet(unsigned long long)>
     ed8:	210a      	movs	r1, #10
     eda:	4828      	ldr	r0, [pc, #160]	; (f7c <stopLogging()+0x18c>)
     edc:	f009 f930 	bl	a140 <usb_serial_write>
     ee0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     ee2:	4a25      	ldr	r2, [pc, #148]	; (f78 <stopLogging()+0x188>)
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     ee4:	2b00      	cmp	r3, #0
     ee6:	d032      	beq.n	f4e <stopLogging()+0x15e>
     ee8:	69d9      	ldr	r1, [r3, #28]

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
     eea:	2300      	movs	r3, #0
     eec:	220a      	movs	r2, #10
     eee:	481e      	ldr	r0, [pc, #120]	; (f68 <stopLogging()+0x178>)
     ef0:	f009 f9f6 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
     ef4:	481c      	ldr	r0, [pc, #112]	; (f68 <stopLogging()+0x178>)
     ef6:	f009 f9e3 	bl	a2c0 <Print::println()>
     efa:	210e      	movs	r1, #14
     efc:	4820      	ldr	r0, [pc, #128]	; (f80 <stopLogging()+0x190>)
     efe:	f009 f91f 	bl	a140 <usb_serial_write>
	file.truncate();
	file.rewind();
	Serial.print("fileSize: ");
	Serial.println((uint32_t)file.fileSize());
	Serial.print("maxBytesUsed: ");
	Serial.println(maxUsed);
     f02:	4920      	ldr	r1, [pc, #128]	; (f84 <stopLogging()+0x194>)
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
     f04:	2300      	movs	r3, #0
     f06:	220a      	movs	r2, #10
     f08:	6809      	ldr	r1, [r1, #0]
     f0a:	4817      	ldr	r0, [pc, #92]	; (f68 <stopLogging()+0x178>)
     f0c:	f009 f9e8 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
     f10:	4815      	ldr	r0, [pc, #84]	; (f68 <stopLogging()+0x178>)
     f12:	f009 f9d5 	bl	a2c0 <Print::println()>
     f16:	6ca3      	ldr	r3, [r4, #72]	; 0x48
     f18:	4a17      	ldr	r2, [pc, #92]	; (f78 <stopLogging()+0x188>)
     f1a:	b19b      	cbz	r3, f44 <stopLogging()+0x154>
     f1c:	69da      	ldr	r2, [r3, #28]
	sprintf(disp_msg_4, "FileSize: %ld", (uint32_t)file.fileSize());
     f1e:	491a      	ldr	r1, [pc, #104]	; (f88 <stopLogging()+0x198>)
     f20:	481a      	ldr	r0, [pc, #104]	; (f8c <stopLogging()+0x19c>)
     f22:	f00a fcd7 	bl	b8d4 <sprintf>
	file.close();
     f26:	481a      	ldr	r0, [pc, #104]	; (f90 <stopLogging()+0x1a0>)
}
     f28:	e8bd 4ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	Serial.print("fileSize: ");
	Serial.println((uint32_t)file.fileSize());
	Serial.print("maxBytesUsed: ");
	Serial.println(maxUsed);
	sprintf(disp_msg_4, "FileSize: %ld", (uint32_t)file.fileSize());
	file.close();
     f2c:	f005 bfda 	b.w	6ee4 <FsBaseFile::close()>
      count = n;
    }
    size_t nwrite = 0;
    while (nwrite != count) {
      n = minSize(Size - m_tail, count - nwrite);
      if (m_file->write(m_buf + m_tail, n) != n) {
     f30:	4610      	mov	r0, r2
     f32:	4622      	mov	r2, r4
     f34:	4798      	blx	r3
     f36:	e78f      	b.n	e58 <stopLogging()+0x68>
   *
   * \return true for success or false for failure.
   */
  bool truncate() {
    return m_fFile ? m_fFile->truncate() :
           m_xFile ? m_xFile->truncate() : false;
     f38:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
     f3a:	2800      	cmp	r0, #0
     f3c:	d0cc      	beq.n	ed8 <stopLogging()+0xe8>
     f3e:	f004 f9e9 	bl	5314 <ExFatFile::truncate()>
     f42:	e7bd      	b.n	ec0 <stopLogging()+0xd0>
           m_xFile ? m_xFile->fgets(str, num, delim) : -1;
  }
  /** \return The total number of bytes in a file. */
  uint64_t fileSize() const {
    return m_fFile ? m_fFile->fileSize() :
           m_xFile ? m_xFile->fileSize() : 0;
     f44:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
     f46:	2a00      	cmp	r2, #0
     f48:	d0e9      	beq.n	f1e <stopLogging()+0x12e>
     f4a:	6912      	ldr	r2, [r2, #16]
     f4c:	e7e7      	b.n	f1e <stopLogging()+0x12e>
     f4e:	6cd1      	ldr	r1, [r2, #76]	; 0x4c
     f50:	2900      	cmp	r1, #0
     f52:	d0ca      	beq.n	eea <stopLogging()+0xfa>
     f54:	6909      	ldr	r1, [r1, #16]
     f56:	e7c8      	b.n	eea <stopLogging()+0xfa>
  size_t writeOut(size_t count) {
    size_t n = bytesUsed();  // Protected from interrupts;
     if (count > n) {
      count = n;
    }
    size_t nwrite = 0;
     f58:	4635      	mov	r5, r6
     f5a:	e7a3      	b.n	ea4 <stopLogging()+0xb4>
     f5c:	20000164 	.word	0x20000164
     f60:	20036814 	.word	0x20036814
     f64:	20001074 	.word	0x20001074
     f68:	20001160 	.word	0x20001160
     f6c:	0003200c 	.word	0x0003200c
     f70:	20004280 	.word	0x20004280
     f74:	00000521 	.word	0x00000521
     f78:	20004228 	.word	0x20004228
     f7c:	20000174 	.word	0x20000174
     f80:	20000180 	.word	0x20000180
     f84:	20036810 	.word	0x20036810
     f88:	20000190 	.word	0x20000190
     f8c:	2000105c 	.word	0x2000105c
     f90:	20004238 	.word	0x20004238
     f94:	20036288 	.word	0x20036288
     f98:	00031fff 	.word	0x00031fff

00000f9c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)>:
  disableFIFO(); /* clears all data and layout to legacy mailbox mode */
  FLEXCAN_ExitFreezeMode();
  NVIC_ENABLE_IRQ(nvicIrq);
}

FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
     f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     f9e:	4b52      	ldr	r3, [pc, #328]	; (10e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x14c>)
     fa0:	681d      	ldr	r5, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_EnterFreezeMode() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     fa2:	4618      	mov	r0, r3
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_EnterFreezeMode() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     fa4:	681a      	ldr	r2, [r3, #0]
  FLEXCAN_ExitFreezeMode();
  NVIC_ENABLE_IRQ(nvicIrq);
}

FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
     fa6:	f005 7580 	and.w	r5, r5, #16777216	; 0x1000000
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_EnterFreezeMode() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
     faa:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
     fae:	601a      	str	r2, [r3, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
     fb0:	6803      	ldr	r3, [r0, #0]
     fb2:	4a4d      	ldr	r2, [pc, #308]	; (10e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x14c>)
     fb4:	01dc      	lsls	r4, r3, #7
     fb6:	d5fb      	bpl.n	fb0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x14>
}

FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     fb8:	6814      	ldr	r4, [r2, #0]
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
}

FCTP_FUNC void FCTP_OPT::writeIMASK(uint64_t value) {
#if defined(__IMXRT1062__)
  FLEXCANb_IMASK2(_bus) = value >> 32;
     fba:	2300      	movs	r3, #0
     fbc:	4f4b      	ldr	r7, [pc, #300]	; (10ec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x150>)
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     fbe:	4696      	mov	lr, r2
}

FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     fc0:	f024 5400 	bic.w	r4, r4, #536870912	; 0x20000000

FCTP_FUNC void FCTP_OPT::writeIMASK(uint64_t value) {
#if defined(__IMXRT1062__)
  FLEXCANb_IMASK2(_bus) = value >> 32;
#endif
  FLEXCANb_IMASK1(_bus) = value;
     fc4:	4e4a      	ldr	r6, [pc, #296]	; (10f0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x154>)
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     fc6:	4618      	mov	r0, r3
}

FCTP_FUNC void FCTP_OPT::enableFIFO(bool status) {
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
     fc8:	6014      	str	r4, [r2, #0]
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     fca:	461c      	mov	r4, r3
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
}

FCTP_FUNC void FCTP_OPT::writeIMASK(uint64_t value) {
#if defined(__IMXRT1062__)
  FLEXCANb_IMASK2(_bus) = value >> 32;
     fcc:	603b      	str	r3, [r7, #0]
#endif
  FLEXCANb_IMASK1(_bus) = value;
     fce:	6033      	str	r3, [r6, #0]
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     fd0:	6813      	ldr	r3, [r2, #0]
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     fd2:	4b48      	ldr	r3, [pc, #288]	; (10f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x158>)
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     fd4:	f100 0c01 	add.w	ip, r0, #1
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     fd8:	4a47      	ldr	r2, [pc, #284]	; (10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x15c>)
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     fda:	2700      	movs	r7, #0
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     fdc:	4403      	add	r3, r0
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     fde:	4e42      	ldr	r6, [pc, #264]	; (10e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x14c>)
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     fe0:	4402      	add	r2, r0
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     fe2:	fa5f f08c 	uxtb.w	r0, ip
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
     fe6:	011b      	lsls	r3, r3, #4
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     fe8:	0092      	lsls	r2, r2, #2
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
     fea:	60dc      	str	r4, [r3, #12]
     fec:	609c      	str	r4, [r3, #8]
     fee:	605c      	str	r4, [r3, #4]
     ff0:	601c      	str	r4, [r3, #0]
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
     ff2:	6014      	str	r4, [r2, #0]
  bool frz_flag_negate = !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_FEN; // Disable FIFO if already enabled for cleanup.
  writeIMASK(0ULL); // disable all FIFO/MB Interrupts

  for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
     ff4:	f8de 3000 	ldr.w	r3, [lr]
     ff8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
     ffc:	3301      	adds	r3, #1
     ffe:	4298      	cmp	r0, r3
    1000:	d3e7      	bcc.n	fd2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x36>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
  }

  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
    1002:	483e      	ldr	r0, [pc, #248]	; (10fc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x160>)
    1004:	f8df e100 	ldr.w	lr, [pc, #256]	; 1108 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x16c>
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    1008:	4c3d      	ldr	r4, [pc, #244]	; (1100 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x164>)
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    mbxAddr[0] = mbxAddr[1] = mbxAddr[2] = mbxAddr[3] = 0; // code, id, word0, word1
    FLEXCANb_RXIMR(_bus, i) = 0UL; // CLEAR MAILBOX MASKS (RXIMR)
  }

  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
    100a:	f8ce 7000 	str.w	r7, [lr]
    100e:	6007      	str	r7, [r0, #0]
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    1010:	f8d4 e000 	ldr.w	lr, [r4]
    1014:	4673      	mov	r3, lr
    1016:	f8d0 e020 	ldr.w	lr, [r0, #32]
    101a:	ea47 020e 	orr.w	r2, r7, lr
  return FLEXCANb_IFLAG1(_bus);
}

FCTP_FUNC void FCTP_OPT::writeIFLAG(uint64_t value) {
#if defined(__IMXRT1062__)
  FLEXCANb_IFLAG2(_bus) = value >> 32;
    101e:	6023      	str	r3, [r4, #0]
#endif
  FLEXCANb_IFLAG1(_bus) = value;
    1020:	6202      	str	r2, [r0, #32]
  }

  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
  writeIFLAG(readIFLAG()); // (all bits reset when written back)

  if ( status ) {
    1022:	bb91      	cbnz	r1, 108a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0xee>
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  } 
  else { // FIFO disabled default setup of mailboxes, 0-7 RX, 8-15 TX
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
    1024:	468e      	mov	lr, r1
    1026:	6833      	ldr	r3, [r6, #0]
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
      }
      else {
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1028:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
  else { // FIFO disabled default setup of mailboxes, 0-7 RX, 8-15 TX
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
    102c:	4f35      	ldr	r7, [pc, #212]	; (1104 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x168>)
  if ( status ) {
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  } 
  else { // FIFO disabled default setup of mailboxes, 0-7 RX, 8-15 TX
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
    102e:	4673      	mov	r3, lr
    1030:	e01b      	b.n	106a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0xce>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
    1032:	6832      	ldr	r2, [r6, #0]
    1034:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1038:	3201      	adds	r2, #1
    103a:	ebbe 0f92 	cmp.w	lr, r2, lsr #2
    103e:	bf2c      	ite	cs
    1040:	f04f 628c 	movcs.w	r2, #73400320	; 0x4600000
    1044:	f04f 6280 	movcc.w	r2, #67108864	; 0x4000000
    1048:	6002      	str	r2, [r0, #0]
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
    104a:	683a      	ldr	r2, [r7, #0]
    104c:	f412 3280 	ands.w	r2, r2, #65536	; 0x10000
    1050:	bf18      	it	ne
    1052:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
    1056:	6022      	str	r2, [r4, #0]
  if ( status ) {
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  } 
  else { // FIFO disabled default setup of mailboxes, 0-7 RX, 8-15 TX
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
    1058:	6832      	ldr	r2, [r6, #0]
    105a:	3301      	adds	r3, #1
    105c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1060:	b2db      	uxtb	r3, r3
    1062:	3201      	adds	r2, #1
    1064:	469e      	mov	lr, r3
    1066:	4293      	cmp	r3, r2
    1068:	d21f      	bcs.n	10aa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x10e>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
    106a:	6832      	ldr	r2, [r6, #0]
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  } 
  else { // FIFO disabled default setup of mailboxes, 0-7 RX, 8-15 TX
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    106c:	4821      	ldr	r0, [pc, #132]	; (10f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x158>)
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
    106e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
    1072:	4c21      	ldr	r4, [pc, #132]	; (10f8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x15c>)
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  } 
  else { // FIFO disabled default setup of mailboxes, 0-7 RX, 8-15 TX
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    1074:	4418      	add	r0, r3
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
    1076:	3201      	adds	r2, #1
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
    1078:	441c      	add	r4, r3
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  } 
  else { // FIFO disabled default setup of mailboxes, 0-7 RX, 8-15 TX
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
    107a:	0100      	lsls	r0, r0, #4
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
    107c:	ebbe 0f52 	cmp.w	lr, r2, lsr #1
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
    1080:	ea4f 0484 	mov.w	r4, r4, lsl #2
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  } 
  else { // FIFO disabled default setup of mailboxes, 0-7 RX, 8-15 TX
    for (uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) { // clear all mailboxes
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (i * 0x10)));
      if ( i < (FLEXCANb_MAXMB_SIZE(_bus) / 2) ) {
    1084:	d3d5      	bcc.n	1032 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x96>
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((i < (FLEXCANb_MAXMB_SIZE(_bus) / 4)) ? 0 : FLEXCAN_MB_CS_IDE | FLEXCAN_MB_CS_SRR);
        FLEXCANb_RXIMR(_bus, i) = 0UL | ((FLEXCANb_CTRL2(_bus) & FLEXCAN_CTRL2_EACEN) ? (1UL << 30) : 0); // (RXIMR)
      }
      else {
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1086:	6001      	str	r1, [r0, #0]
    1088:	e7e6      	b.n	1058 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0xbc>

  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
  writeIFLAG(readIFLAG()); // (all bits reset when written back)

  if ( status ) {
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    108a:	6833      	ldr	r3, [r6, #0]
    108c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
    1090:	6033      	str	r3, [r6, #0]
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1092:	6830      	ldr	r0, [r6, #0]
    1094:	f010 5000 	ands.w	r0, r0, #536870912	; 0x20000000
    1098:	d012      	beq.n	10c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x124>
    109a:	f7ff f963 	bl	364 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]>
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
  writeIFLAG(readIFLAG()); // (all bits reset when written back)

  if ( status ) {
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    109e:	6833      	ldr	r3, [r6, #0]
    10a0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    10a4:	3301      	adds	r3, #1
    10a6:	4283      	cmp	r3, r0
    10a8:	d80b      	bhi.n	10c2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x126>
      else {
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
      }
    }
  }
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
    10aa:	b9dd      	cbnz	r5, 10e4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x148>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    10ac:	4b0e      	ldr	r3, [pc, #56]	; (10e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x14c>)
    10ae:	6819      	ldr	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    10b0:	461a      	mov	r2, r3
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    10b2:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    10b6:	6019      	str	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    10b8:	6813      	ldr	r3, [r2, #0]
    10ba:	01db      	lsls	r3, r3, #7
    10bc:	d4fc      	bmi.n	10b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x11c>
    10be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  FLEXCANb_RXMGMASK(_bus) = FLEXCANb_RXFGMASK(_bus) = 0;
  writeIFLAG(readIFLAG()); // (all bits reset when written back)

  if ( status ) {
    FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FEN;
    for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) FLEXCANb_MBn_CS(_bus,i) = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    10c0:	6833      	ldr	r3, [r6, #0]
    10c2:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
    10c6:	4908      	ldr	r1, [pc, #32]	; (10e8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x14c>)
    10c8:	4b0a      	ldr	r3, [pc, #40]	; (10f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x158>)
    10ca:	1c42      	adds	r2, r0, #1
    10cc:	4403      	add	r3, r0
    10ce:	b2d0      	uxtb	r0, r2
    10d0:	011b      	lsls	r3, r3, #4
    10d2:	601c      	str	r4, [r3, #0]
    10d4:	680b      	ldr	r3, [r1, #0]
    10d6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    10da:	3301      	adds	r3, #1
    10dc:	4298      	cmp	r0, r3
    10de:	d3f3      	bcc.n	10c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x12c>
      else {
        mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
      }
    }
  }
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
    10e0:	2d00      	cmp	r5, #0
    10e2:	d0e3      	beq.n	10ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)+0x110>
    10e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    10e6:	bf00      	nop
    10e8:	401d4000 	.word	0x401d4000
    10ec:	401d4024 	.word	0x401d4024
    10f0:	401d4028 	.word	0x401d4028
    10f4:	0401d408 	.word	0x0401d408
    10f8:	10075220 	.word	0x10075220
    10fc:	401d4010 	.word	0x401d4010
    1100:	401d402c 	.word	0x401d402c
    1104:	401d4034 	.word	0x401d4034
    1108:	401d4048 	.word	0x401d4048

0000110c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>:
  if ( _CAN2 ) _CAN2->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
  if ( _CAN3 ) _CAN3->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
}

FCTP_FUNC uint32_t FCTP_OPT::getClock() {
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
    110c:	4b57      	ldr	r3, [pc, #348]	; (126c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x160>)
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
    110e:	4a58      	ldr	r2, [pc, #352]	; (1270 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x164>)
}
#endif

FCTP_FUNC void FCTP_OPT::begin() {
    1110:	b5f0      	push	{r4, r5, r6, r7, lr}
    1112:	4605      	mov	r5, r0
    1114:	b083      	sub	sp, #12
  if ( _CAN2 ) _CAN2->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
  if ( _CAN3 ) _CAN3->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
}

FCTP_FUNC uint32_t FCTP_OPT::getClock() {
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
    1116:	6818      	ldr	r0, [r3, #0]
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
    1118:	a902      	add	r1, sp, #8
  if ( _CAN2 ) _CAN2->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
  if ( _CAN3 ) _CAN3->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
}

FCTP_FUNC uint32_t FCTP_OPT::getClock() {
  const uint8_t clocksrc[4] = {60, 24, 80, 0};
    111a:	9001      	str	r0, [sp, #4]
  return clocksrc[(CCM_CSCMR2 & 0x300) >> 8];
    111c:	6a13      	ldr	r3, [r2, #32]
    111e:	f3c3 2301 	ubfx	r3, r3, #8, #2
    1122:	440b      	add	r3, r1
    1124:	f813 3c04 	ldrb.w	r3, [r3, #-4]
}
#endif

FCTP_FUNC void FCTP_OPT::begin() {
#if defined(__IMXRT1062__)
  if ( !getClock() ) setClock(CLK_24MHz); /* no clock enabled, enable osc clock */
    1128:	2b00      	cmp	r3, #0
    112a:	f000 8085 	beq.w	1238 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x12c>
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    CCM_CCGR0 |= 0x3C0000;
    112e:	4950      	ldr	r1, [pc, #320]	; (1270 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x164>)
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can3;
    CCM_CCGR7 |= 0x3C0;
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    1130:	f242 63c8 	movw	r3, #9928	; 0x26c8
    1134:	2225      	movs	r2, #37	; 0x25
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36 = 0x10B0; // pin31 T3B2
    }
  }
  if ( _bus == CAN2 ) {
    if ( pin == DEF ) {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 0x10; // pin 1 T4B1+B2
    1136:	2410      	movs	r4, #16
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02 = 0x10B0; // pin 1 T4B1+B2
    1138:	f241 00b0 	movw	r0, #4272	; 0x10b0
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    CCM_CCGR0 |= 0x3C0000;
    busNumber = 2;
    113c:	f242 6ed1 	movw	lr, #9937	; 0x26d1
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can3;
    CCM_CCGR7 |= 0x3C0;
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    1140:	50ea      	str	r2, [r5, r3]
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    CCM_CCGR0 |= 0x3C0000;
    busNumber = 2;
    1142:	f04f 0c02 	mov.w	ip, #2
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    CCM_CCGR0 |= 0x3C0000;
    1146:	6e8b      	ldr	r3, [r1, #104]	; 0x68
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37 = 0x10B0; // pin30 T3B2
    }
  }
  if ( _bus == CAN2 ) {
    if ( pin == DEF ) {
      IOMUXC_FLEXCAN2_RX_SELECT_INPUT = 0x01;
    1148:	2701      	movs	r7, #1
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36 = 0x10B0; // pin31 T3B2
    }
  }
  if ( _bus == CAN2 ) {
    if ( pin == DEF ) {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 0x10; // pin 1 T4B1+B2
    114a:	4a4a      	ldr	r2, [pc, #296]	; (1274 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x168>)
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    CCM_CCGR0 |= 0x3C0000;
    114c:	f443 1370 	orr.w	r3, r3, #3932160	; 0x3c0000
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37 = 0x10B0; // pin30 T3B2
    }
  }
  if ( _bus == CAN2 ) {
    if ( pin == DEF ) {
      IOMUXC_FLEXCAN2_RX_SELECT_INPUT = 0x01;
    1150:	4e49      	ldr	r6, [pc, #292]	; (1278 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x16c>)
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    CCM_CCGR0 |= 0x3C0000;
    1152:	668b      	str	r3, [r1, #104]	; 0x68
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
#endif

  setTX(); setRX();

  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
    1154:	4b49      	ldr	r3, [pc, #292]	; (127c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x170>)
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    CCM_CCGR0 |= 0x3C0000;
    busNumber = 2;
    1156:	f805 c00e 	strb.w	ip, [r5, lr]
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_36 = 0x10B0; // pin31 T3B2
    }
  }
  if ( _bus == CAN2 ) {
    if ( pin == DEF ) {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 0x10; // pin 1 T4B1+B2
    115a:	f8c2 40c4 	str.w	r4, [r2, #196]	; 0xc4
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_EnterFreezeMode() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    115e:	4619      	mov	r1, r3
    }
  }
  if ( _bus == CAN2 ) {
    if ( pin == DEF ) {
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_02 = 0x10; // pin 1 T4B1+B2
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_02 = 0x10B0; // pin 1 T4B1+B2
    1160:	f8c2 02b4 	str.w	r0, [r2, #692]	; 0x2b4
      IOMUXC_SW_PAD_CTL_PAD_GPIO_EMC_37 = 0x10B0; // pin30 T3B2
    }
  }
  if ( _bus == CAN2 ) {
    if ( pin == DEF ) {
      IOMUXC_FLEXCAN2_RX_SELECT_INPUT = 0x01;
    1164:	6537      	str	r7, [r6, #80]	; 0x50
      IOMUXC_SW_MUX_CTL_PAD_GPIO_AD_B0_03 = 0x10; // pin 0 T4B1+B2
    1166:	f8c2 40c8 	str.w	r4, [r2, #200]	; 0xc8
      IOMUXC_SW_PAD_CTL_PAD_GPIO_AD_B0_03 = 0x10B0; // pin 0 T4B1+B2
    116a:	f8c2 02b8 	str.w	r0, [r2, #696]	; 0x2b8
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
#endif

  setTX(); setRX();

  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
    116e:	681a      	ldr	r2, [r3, #0]
    CCM_CCGR7 |= 0x3C0;
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    1170:	4843      	ldr	r0, [pc, #268]	; (1280 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x174>)
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
#endif

  setTX(); setRX();

  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
    1172:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
    CCM_CCGR7 |= 0x3C0;
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    1176:	4c43      	ldr	r4, [pc, #268]	; (1284 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x178>)
  FLEXCANb_CTRL1(_bus) &= ~FLEXCAN_CTRL_CLK_SRC;
#endif

  setTX(); setRX();

  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
    1178:	601a      	str	r2, [r3, #0]
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_EnterFreezeMode() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    117a:	681a      	ldr	r2, [r3, #0]
    CCM_CCGR7 |= 0x3C0;
    busNumber = 3;
  }
  if ( _bus == CAN2 ) {
    nvicIrq = IRQ_CAN2;
    _VectorsRam[16 + nvicIrq] = flexcan_isr_can2;
    117c:	f8c0 40d4 	str.w	r4, [r0, #212]	; 0xd4
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_EnterFreezeMode() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    1180:	f042 42a0 	orr.w	r2, r2, #1342177280	; 0x50000000
    1184:	601a      	str	r2, [r3, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    1186:	680b      	ldr	r3, [r1, #0]
    1188:	4a3c      	ldr	r2, [pc, #240]	; (127c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x170>)
    118a:	01de      	lsls	r6, r3, #7
    118c:	d5fb      	bpl.n	1186 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x7a>

  setTX(); setRX();

  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
    118e:	483e      	ldr	r0, [pc, #248]	; (1288 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x17c>)
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
    1190:	4611      	mov	r1, r2

  setTX(); setRX();

  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_MDIS; /* enable module */
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
    1192:	6803      	ldr	r3, [r0, #0]
    1194:	f043 0308 	orr.w	r3, r3, #8
    1198:	6003      	str	r3, [r0, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
    119a:	6813      	ldr	r3, [r2, #0]
    119c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
    11a0:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
    11a2:	680b      	ldr	r3, [r1, #0]
    11a4:	4a35      	ldr	r2, [pc, #212]	; (127c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x170>)
    11a6:	02dc      	lsls	r4, r3, #11
    11a8:	d4fb      	bmi.n	11a2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x96>
  if ( fifo_was_cleared ) enableFIFO();
  FLEXCAN_ExitFreezeMode();
}

FCTP_FUNC void FCTP_OPT::softReset() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
    11aa:	6813      	ldr	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
    11ac:	4611      	mov	r1, r2
  if ( fifo_was_cleared ) enableFIFO();
  FLEXCAN_ExitFreezeMode();
}

FCTP_FUNC void FCTP_OPT::softReset() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
    11ae:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
    11b2:	6013      	str	r3, [r2, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
    11b4:	680b      	ldr	r3, [r1, #0]
    11b6:	0198      	lsls	r0, r3, #6
    11b8:	d4fc      	bmi.n	11b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xa8>
  FLEXCAN_EnterFreezeMode();
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
  softReset(); /* reset bus */
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    11ba:	4a30      	ldr	r2, [pc, #192]	; (127c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x170>)
    11bc:	6813      	ldr	r3, [r2, #0]
    11be:	4c2f      	ldr	r4, [pc, #188]	; (127c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x170>)
    11c0:	01d9      	lsls	r1, r3, #7
    11c2:	d5fb      	bpl.n	11bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0xb0>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
    11c4:	6823      	ldr	r3, [r4, #0]
    void setRX(FLEXCAN_PINS pin = DEF);
    void setBaudRate(uint32_t baud = 1000000, FLEXCAN_RXTX listen_only = TX);
    void reset() { softReset(); } /* reset flexcan controller (needs register restore capabilities...) */
    void setMaxMB(uint8_t last);
    void enableFIFO(bool status = 1);
    void disableFIFO() { enableFIFO(0); }
    11c6:	2100      	movs	r1, #0
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
    11c8:	4a30      	ldr	r2, [pc, #192]	; (128c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x180>)
    11ca:	4628      	mov	r0, r5
  FLEXCANb_CTRL1(_bus) |= FLEXCAN_CTRL_LOM; /* listen only mode */
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ; /* enable freeze bit */
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_LPM_ACK);
  softReset(); /* reset bus */
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SRX_DIS; /* Disable self-reception */
    11cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
    11d0:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_IRMQ; // individual mailbox masking
    11d2:	6823      	ldr	r3, [r4, #0]
    11d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    11d8:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_AEN; // TX ABORT FEATURE
    11da:	6823      	ldr	r3, [r4, #0]
    11dc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    11e0:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_LPRIO_EN; // TX PRIORITY FEATURE
    11e2:	6823      	ldr	r3, [r4, #0]
    11e4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    11e8:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) &= ~0x8800; // disable DMA and FD (valid bits are reserved in legacy controllers)
    11ea:	6823      	ldr	r3, [r4, #0]
    11ec:	f423 4308 	bic.w	r3, r3, #34816	; 0x8800
    11f0:	6023      	str	r3, [r4, #0]
  FLEXCANb_CTRL2(_bus) |= FLEXCAN_CTRL2_RRS | // store remote frames
    11f2:	6813      	ldr	r3, [r2, #0]
    11f4:	f443 23e0 	orr.w	r3, r3, #458752	; 0x70000
    11f8:	6013      	str	r3, [r2, #0]
                                  FLEXCAN_CTRL2_EACEN | /* handles the way filtering works. Library adjusts to whether you use this or not */ 
                                  FLEXCAN_CTRL2_MRP; // mailbox > FIFO priority.
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
    11fa:	6823      	ldr	r3, [r4, #0]
    11fc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
    1200:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;
    1202:	6823      	ldr	r3, [r4, #0]
    1204:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
    1208:	6023      	str	r3, [r4, #0]
    120a:	f7ff fec7 	bl	f9c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    120e:	6823      	ldr	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    1210:	4622      	mov	r2, r4
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    1212:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
    1216:	6023      	str	r3, [r4, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    1218:	6813      	ldr	r3, [r2, #0]
    121a:	01db      	lsls	r3, r3, #7
    121c:	d4fc      	bmi.n	1218 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x10c>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WRN_EN;
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_WAK_MSK;

  disableFIFO(); /* clears all data and layout to legacy mailbox mode */
  FLEXCAN_ExitFreezeMode();
  NVIC_ENABLE_IRQ(nvicIrq);
    121e:	f242 63c8 	movw	r3, #9928	; 0x26c8
    1222:	2201      	movs	r2, #1
    1224:	491a      	ldr	r1, [pc, #104]	; (1290 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x184>)
    1226:	58eb      	ldr	r3, [r5, r3]
    1228:	f003 001f 	and.w	r0, r3, #31
    122c:	095b      	lsrs	r3, r3, #5
    122e:	4082      	lsls	r2, r0
    1230:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
    1234:	b003      	add	sp, #12
    1236:	bdf0      	pop	{r4, r5, r6, r7, pc}
#if defined(__IMXRT1062__)
FCTP_FUNC void FCTP_OPT::setClock(FLEXCAN_CLOCK clock) {
  if ( clock == CLK_OFF ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(3) | CCM_CSCMR2_CAN_CLK_PODF(0);
  if ( clock == CLK_8MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(9);
  if ( clock == CLK_16MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(4);
  if ( clock == CLK_24MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(1) | CCM_CSCMR2_CAN_CLK_PODF(0);
    1238:	6a13      	ldr	r3, [r2, #32]
  if ( clock == CLK_40MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(1);
  if ( clock == CLK_60MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(0) | CCM_CSCMR2_CAN_CLK_PODF(0);
  if ( clock == CLK_80MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(0);

  if ( _CAN1 ) _CAN1->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
  if ( _CAN2 ) _CAN2->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
    123a:	4916      	ldr	r1, [pc, #88]	; (1294 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x188>)
#if defined(__IMXRT1062__)
FCTP_FUNC void FCTP_OPT::setClock(FLEXCAN_CLOCK clock) {
  if ( clock == CLK_OFF ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(3) | CCM_CSCMR2_CAN_CLK_PODF(0);
  if ( clock == CLK_8MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(9);
  if ( clock == CLK_16MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(4);
  if ( clock == CLK_24MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(1) | CCM_CSCMR2_CAN_CLK_PODF(0);
    123c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  if ( clock == CLK_40MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(1);
  if ( clock == CLK_60MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(0) | CCM_CSCMR2_CAN_CLK_PODF(0);
  if ( clock == CLK_80MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(0);

  if ( _CAN1 ) _CAN1->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
  if ( _CAN2 ) _CAN2->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
    1240:	6808      	ldr	r0, [r1, #0]
#if defined(__IMXRT1062__)
FCTP_FUNC void FCTP_OPT::setClock(FLEXCAN_CLOCK clock) {
  if ( clock == CLK_OFF ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(3) | CCM_CSCMR2_CAN_CLK_PODF(0);
  if ( clock == CLK_8MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(9);
  if ( clock == CLK_16MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(4);
  if ( clock == CLK_24MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(1) | CCM_CSCMR2_CAN_CLK_PODF(0);
    1242:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    1246:	6213      	str	r3, [r2, #32]
  if ( clock == CLK_40MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(1);
  if ( clock == CLK_60MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(0) | CCM_CSCMR2_CAN_CLK_PODF(0);
  if ( clock == CLK_80MHz ) CCM_CSCMR2 = (CCM_CSCMR2 & 0xFFFFFC03) | CCM_CSCMR2_CAN_CLK_SEL(2) | CCM_CSCMR2_CAN_CLK_PODF(0);

  if ( _CAN1 ) _CAN1->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
  if ( _CAN2 ) _CAN2->setBaudRate(currentBitrate, (( FLEXCANb_CTRL1(_bus) & FLEXCAN_CTRL_LOM ) ? LISTEN_ONLY : TX));
    1248:	2800      	cmp	r0, #0
    124a:	f43f af70 	beq.w	112e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x22>
    124e:	490e      	ldr	r1, [pc, #56]	; (1288 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x17c>)
    1250:	f242 62cc 	movw	r2, #9932	; 0x26cc
    1254:	6803      	ldr	r3, [r0, #0]
    1256:	6809      	ldr	r1, [r1, #0]
    1258:	685b      	ldr	r3, [r3, #4]
    125a:	f011 0f08 	tst.w	r1, #8
    125e:	58a9      	ldr	r1, [r5, r2]
    1260:	bf14      	ite	ne
    1262:	2202      	movne	r2, #2
    1264:	2200      	moveq	r2, #0
    1266:	4798      	blx	r3
    1268:	e761      	b.n	112e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()+0x22>
    126a:	bf00      	nop
    126c:	200000b4 	.word	0x200000b4
    1270:	400fc000 	.word	0x400fc000
    1274:	401f8000 	.word	0x401f8000
    1278:	401f8400 	.word	0x401f8400
    127c:	401d4000 	.word	0x401d4000
    1280:	20037000 	.word	0x20037000
    1284:	00000085 	.word	0x00000085
    1288:	401d4004 	.word	0x401d4004
    128c:	401d4034 	.word	0x401d4034
    1290:	e000e100 	.word	0xe000e100
    1294:	20036354 	.word	0x20036354

00001298 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()>:
  writeIFLAGBit(mb_num); /* clear mailbox reception flag */
  mb_filter_table[mb_num][0] = ( ((FLEXCANb_MBn_CS(_bus, mb_num) & 0x600000) ? 1UL : 0UL) << 27); /* extended flag check */
  return 1;
}

FCTP_FUNC void FCTP_OPT::mailboxStatus() {
    1298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    129a:	4db7      	ldr	r5, [pc, #732]	; (1578 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2e0>)
    129c:	682e      	ldr	r6, [r5, #0]
    129e:	f016 5600 	ands.w	r6, r6, #536870912	; 0x20000000
    12a2:	d07f      	beq.n	13a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x10c>
    12a4:	2111      	movs	r1, #17
    12a6:	48b5      	ldr	r0, [pc, #724]	; (157c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2e4>)
    12a8:	f008 ff4a 	bl	a140 <usb_serial_write>
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    12ac:	4bb4      	ldr	r3, [pc, #720]	; (1580 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2e8>)
    12ae:	681b      	ldr	r3, [r3, #0]
    12b0:	069e      	lsls	r6, r3, #26
    12b2:	f100 835a 	bmi.w	196a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x6d2>
    12b6:	2112      	movs	r1, #18
    12b8:	48b2      	ldr	r0, [pc, #712]	; (1584 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2ec>)
    12ba:	f008 ff41 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    12be:	48b2      	ldr	r0, [pc, #712]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    12c0:	f008 fffe 	bl	a2c0 <Print::println()>
    12c4:	2116      	movs	r1, #22
    12c6:	48b1      	ldr	r0, [pc, #708]	; (158c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f4>)
    12c8:	f008 ff3a 	bl	a140 <usb_serial_write>
    Serial.print("\tFIFO Filters in use: ");
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    12cc:	4baa      	ldr	r3, [pc, #680]	; (1578 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2e0>)
    12ce:	4ab0      	ldr	r2, [pc, #704]	; (1590 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f8>)
    12d0:	6818      	ldr	r0, [r3, #0]
    12d2:	6811      	ldr	r1, [r2, #0]
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    12d4:	681b      	ldr	r3, [r3, #0]
    12d6:	6812      	ldr	r2, [r2, #0]
    12d8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    12dc:	f3c2 6203 	ubfx	r2, r2, #24, #4
    12e0:	3301      	adds	r3, #1
    12e2:	3204      	adds	r2, #4
    12e4:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    12e8:	f0c0 8347 	bcc.w	197a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x6e2>

FCTP_FUNC void FCTP_OPT::mailboxStatus() {
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    Serial.print("\tFIFO Filters in use: ");
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    12ec:	f000 057f 	and.w	r5, r0, #127	; 0x7f
    12f0:	f3c1 6103 	ubfx	r1, r1, #24, #4
    12f4:	3d05      	subs	r5, #5
    12f6:	3101      	adds	r1, #1
    12f8:	eba5 0541 	sub.w	r5, r5, r1, lsl #1
    12fc:	b2ec      	uxtb	r4, r5
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    12fe:	4e9e      	ldr	r6, [pc, #632]	; (1578 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2e0>)
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
    1300:	48a1      	ldr	r0, [pc, #644]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    1302:	6831      	ldr	r1, [r6, #0]
    1304:	f001 017f 	and.w	r1, r1, #127	; 0x7f
    1308:	3101      	adds	r1, #1
    130a:	1b09      	subs	r1, r1, r4
    130c:	b2c9      	uxtb	r1, r1
    130e:	2920      	cmp	r1, #32
    1310:	bfa8      	it	ge
    1312:	2120      	movge	r1, #32
    1314:	f009 f824 	bl	a360 <Print::print(long)>
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
    1318:	489b      	ldr	r0, [pc, #620]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    131a:	f008 ffd1 	bl	a2c0 <Print::println()>
    131e:	2116      	movs	r1, #22
    1320:	489c      	ldr	r0, [pc, #624]	; (1594 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2fc>)
    1322:	f008 ff0d 	bl	a140 <usb_serial_write>
    Serial.print("\tRemaining Mailboxes: ");
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    1326:	4a9a      	ldr	r2, [pc, #616]	; (1590 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f8>)
    1328:	6833      	ldr	r3, [r6, #0]
    132a:	6812      	ldr	r2, [r2, #0]
    132c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1330:	f3c2 6203 	ubfx	r2, r2, #24, #4
    1334:	3301      	adds	r3, #1
    1336:	3204      	adds	r2, #4
    1338:	ebb3 0f42 	cmp.w	r3, r2, lsl #1
    133c:	d201      	bcs.n	1342 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0xaa>
    133e:	2400      	movs	r4, #0
    1340:	4625      	mov	r5, r4

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
	size_t print(int n)				{ return print((long)n); }
	size_t print(unsigned int n)			{ return printNumber(n, 10, 0); }
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
    1342:	2300      	movs	r3, #0
    1344:	220a      	movs	r2, #10
    1346:	4629      	mov	r1, r5
    1348:	488f      	ldr	r0, [pc, #572]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    134a:	f008 ffc9 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>

	size_t println(uint8_t b)			{ return print(b) + println(); }
	size_t println(int n)				{ return print(n) + println(); }
	size_t println(unsigned int n)			{ return print(n) + println(); }
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
    134e:	488e      	ldr	r0, [pc, #568]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    1350:	f008 ffb6 	bl	a2c0 <Print::println()>
    Serial.println(remaining_mailboxes); // 8 filters per 2 mailboxes
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    1354:	4a88      	ldr	r2, [pc, #544]	; (1578 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2e0>)
    1356:	6813      	ldr	r3, [r2, #0]
    1358:	6812      	ldr	r2, [r2, #0]
    135a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    135e:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    1362:	3301      	adds	r3, #1
    1364:	3201      	adds	r2, #1
    1366:	1b1c      	subs	r4, r3, r4
    1368:	b2e4      	uxtb	r4, r4
    136a:	4294      	cmp	r4, r2
    136c:	f080 80cd 	bcs.w	150a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x272>
      switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    1370:	4b89      	ldr	r3, [pc, #548]	; (1598 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x300>)
    1372:	4423      	add	r3, r4
    1374:	011d      	lsls	r5, r3, #4
    1376:	682b      	ldr	r3, [r5, #0]
    1378:	f3c3 6303 	ubfx	r3, r3, #24, #4
    137c:	2b0e      	cmp	r3, #14
    137e:	f200 81ac 	bhi.w	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    1382:	e8df f013 	tbh	[pc, r3, lsl #1]
    1386:	01e1      	.short	0x01e1
    1388:	01f301cf 	.word	0x01f301cf
    138c:	01b501aa 	.word	0x01b501aa
    1390:	023b01aa 	.word	0x023b01aa
    1394:	022901aa 	.word	0x022901aa
    1398:	02050217 	.word	0x02050217
    139c:	026901aa 	.word	0x026901aa
    13a0:	019901aa 	.word	0x019901aa
    13a4:	211a      	movs	r1, #26
    13a6:	487d      	ldr	r0, [pc, #500]	; (159c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x304>)
    13a8:	f008 feca 	bl	a140 <usb_serial_write>
    } // for loop
    return;
  } // fifo detected ends here

  Serial.print("FIFO Disabled\n\tMailboxes:\n");
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    13ac:	4634      	mov	r4, r6
    13ae:	682b      	ldr	r3, [r5, #0]
    switch ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) ) {
    13b0:	4b79      	ldr	r3, [pc, #484]	; (1598 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x300>)
    13b2:	4423      	add	r3, r4
    13b4:	011d      	lsls	r5, r3, #4
    13b6:	682b      	ldr	r3, [r5, #0]
    13b8:	f3c3 6303 	ubfx	r3, r3, #24, #4
    13bc:	2b0e      	cmp	r3, #14
    13be:	f200 8099 	bhi.w	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    13c2:	e8df f013 	tbh	[pc, r3, lsl #1]
    13c6:	0167      	.short	0x0167
    13c8:	01430155 	.word	0x01430155
    13cc:	01290097 	.word	0x01290097
    13d0:	01170097 	.word	0x01170097
    13d4:	01050097 	.word	0x01050097
    13d8:	00b500c7 	.word	0x00b500c7
    13dc:	000f0097 	.word	0x000f0097
    13e0:	00a30097 	.word	0x00a30097
    13e4:	2104      	movs	r1, #4
    13e6:	486e      	ldr	r0, [pc, #440]	; (15a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x308>)
    13e8:	f008 feaa 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    13ec:	2300      	movs	r3, #0
    13ee:	4631      	mov	r1, r6
    13f0:	220a      	movs	r2, #10
    13f2:	4865      	ldr	r0, [pc, #404]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    13f4:	f008 ff74 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    13f8:	211d      	movs	r1, #29
    13fa:	486a      	ldr	r0, [pc, #424]	; (15a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x30c>)
    13fc:	f008 fea0 	bl	a140 <usb_serial_write>
      case 0b1001: {
          Serial.print("\t\tMB"); Serial.print(i); Serial.println(" code: TX_ABORT"); break;
        }
      case 0b1100: {
          Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: TX_DATA (Transmitting)");
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    1400:	682b      	ldr	r3, [r5, #0]
    1402:	2110      	movs	r1, #16
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    1404:	029b      	lsls	r3, r3, #10
    1406:	f140 82bb 	bpl.w	1980 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x6e8>
    140a:	4867      	ldr	r0, [pc, #412]	; (15a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x310>)
    140c:	f008 fe98 	bl	a140 <usb_serial_write>
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1410:	4f66      	ldr	r7, [pc, #408]	; (15ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x314>)
    1412:	68ae      	ldr	r6, [r5, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1414:	686b      	ldr	r3, [r5, #4]
        }
      case 0b1100: {
          Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: TX_DATA (Transmitting)");
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1416:	442f      	add	r7, r5
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1418:	f023 4560 	bic.w	r5, r3, #3758096384	; 0xe0000000
    141c:	2107      	movs	r1, #7
    141e:	4864      	ldr	r0, [pc, #400]	; (15b0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x318>)
    1420:	f008 fe8e 	bl	a140 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1424:	2300      	movs	r3, #0
    1426:	2210      	movs	r2, #16
    1428:	4629      	mov	r1, r5
    142a:	4857      	ldr	r0, [pc, #348]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    142c:	f008 ff58 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1430:	2101      	movs	r1, #1
    1432:	4860      	ldr	r0, [pc, #384]	; (15b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x31c>)
    1434:	f008 fe84 	bl	a140 <usb_serial_write>
    1438:	210a      	movs	r1, #10
    143a:	485f      	ldr	r0, [pc, #380]	; (15b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x320>)
    143c:	f008 fe80 	bl	a140 <usb_serial_write>
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1440:	2300      	movs	r3, #0
    1442:	2210      	movs	r2, #16
    1444:	0e31      	lsrs	r1, r6, #24
    1446:	4850      	ldr	r0, [pc, #320]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    1448:	f008 ff4a 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    144c:	2101      	movs	r1, #1
    144e:	485b      	ldr	r0, [pc, #364]	; (15bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x324>)
    1450:	f008 fe76 	bl	a140 <usb_serial_write>
    1454:	2300      	movs	r3, #0
    1456:	2210      	movs	r2, #16
    1458:	f3c6 4107 	ubfx	r1, r6, #16, #8
    145c:	484a      	ldr	r0, [pc, #296]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    145e:	f008 ff3f 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1462:	2101      	movs	r1, #1
    1464:	4855      	ldr	r0, [pc, #340]	; (15bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x324>)
    1466:	f008 fe6b 	bl	a140 <usb_serial_write>
    146a:	2300      	movs	r3, #0
    146c:	2210      	movs	r2, #16
    146e:	f3c6 2107 	ubfx	r1, r6, #8, #8
    1472:	4845      	ldr	r0, [pc, #276]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    1474:	f008 ff34 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1478:	2101      	movs	r1, #1
    147a:	4850      	ldr	r0, [pc, #320]	; (15bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x324>)
    147c:	f008 fe60 	bl	a140 <usb_serial_write>
    1480:	2210      	movs	r2, #16
    1482:	2300      	movs	r3, #0
    1484:	b2f1      	uxtb	r1, r6
    1486:	4840      	ldr	r0, [pc, #256]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    1488:	f008 ff2a 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
          Serial.print("(ID: 0x"); Serial.print(id, HEX); Serial.print(")");
          Serial.print("(Payload: "); Serial.print((uint8_t)(dataIn >> 24), HEX);
          Serial.print(" "); Serial.print((uint8_t)(dataIn >> 16), HEX);
          Serial.print(" "); Serial.print((uint8_t)(dataIn >> 8), HEX);
          Serial.print(" "); Serial.print((uint8_t)dataIn, HEX);
          dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    148c:	4b4c      	ldr	r3, [pc, #304]	; (15c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x328>)
    148e:	2101      	movs	r1, #1
    1490:	484a      	ldr	r0, [pc, #296]	; (15bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x324>)
    1492:	443b      	add	r3, r7
    1494:	681d      	ldr	r5, [r3, #0]
    1496:	f008 fe53 	bl	a140 <usb_serial_write>
    149a:	2300      	movs	r3, #0
    149c:	2210      	movs	r2, #16
    149e:	0e29      	lsrs	r1, r5, #24
    14a0:	4839      	ldr	r0, [pc, #228]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    14a2:	f008 ff1d 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14a6:	2101      	movs	r1, #1
    14a8:	4844      	ldr	r0, [pc, #272]	; (15bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x324>)
    14aa:	f008 fe49 	bl	a140 <usb_serial_write>
    14ae:	2300      	movs	r3, #0
    14b0:	2210      	movs	r2, #16
    14b2:	f3c5 4107 	ubfx	r1, r5, #16, #8
    14b6:	4834      	ldr	r0, [pc, #208]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    14b8:	f008 ff12 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14bc:	2101      	movs	r1, #1
    14be:	483f      	ldr	r0, [pc, #252]	; (15bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x324>)
    14c0:	f008 fe3e 	bl	a140 <usb_serial_write>
    14c4:	2300      	movs	r3, #0
    14c6:	2210      	movs	r2, #16
    14c8:	f3c5 2107 	ubfx	r1, r5, #8, #8
    14cc:	482e      	ldr	r0, [pc, #184]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    14ce:	f008 ff07 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14d2:	2101      	movs	r1, #1
    14d4:	4839      	ldr	r0, [pc, #228]	; (15bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x324>)
    14d6:	f008 fe33 	bl	a140 <usb_serial_write>
    14da:	2300      	movs	r3, #0
    14dc:	b2e9      	uxtb	r1, r5
    14de:	2210      	movs	r2, #16
    14e0:	4829      	ldr	r0, [pc, #164]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    14e2:	f008 fefd 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    14e6:	2101      	movs	r1, #1
    14e8:	4832      	ldr	r0, [pc, #200]	; (15b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x31c>)
    14ea:	f008 fe29 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    14ee:	4826      	ldr	r0, [pc, #152]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    14f0:	f008 fee6 	bl	a2c0 <Print::println()>
    } // for loop
    return;
  } // fifo detected ends here

  Serial.print("FIFO Disabled\n\tMailboxes:\n");
  for ( uint8_t i = 0; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    14f4:	4b20      	ldr	r3, [pc, #128]	; (1578 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2e0>)
    14f6:	3401      	adds	r4, #1
    14f8:	681b      	ldr	r3, [r3, #0]
    14fa:	b2e4      	uxtb	r4, r4
    14fc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    1500:	4626      	mov	r6, r4
    1502:	3301      	adds	r3, #1
    1504:	429c      	cmp	r4, r3
    1506:	f4ff af53 	bcc.w	13b0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x118>
    150a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    150c:	2104      	movs	r1, #4
    150e:	4824      	ldr	r0, [pc, #144]	; (15a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x308>)
    1510:	f008 fe16 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1514:	4631      	mov	r1, r6
    1516:	2300      	movs	r3, #0
    1518:	220a      	movs	r2, #10
    151a:	481b      	ldr	r0, [pc, #108]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    151c:	f008 fee0 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1520:	2111      	movs	r1, #17
    1522:	4828      	ldr	r0, [pc, #160]	; (15c4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x32c>)
    1524:	f008 fe0c 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1528:	4817      	ldr	r0, [pc, #92]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    152a:	f008 fec9 	bl	a2c0 <Print::println()>
    152e:	e7e1      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    1530:	2104      	movs	r1, #4
    1532:	481b      	ldr	r0, [pc, #108]	; (15a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x308>)
    1534:	f008 fe04 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1538:	4631      	mov	r1, r6
    153a:	2300      	movs	r3, #0
    153c:	220a      	movs	r2, #10
    153e:	4812      	ldr	r0, [pc, #72]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    1540:	f008 fece 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1544:	2111      	movs	r1, #17
    1546:	4820      	ldr	r0, [pc, #128]	; (15c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x330>)
    1548:	f008 fdfa 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    154c:	480e      	ldr	r0, [pc, #56]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    154e:	f008 feb7 	bl	a2c0 <Print::println()>
    1552:	e7cf      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    1554:	2104      	movs	r1, #4
    1556:	4812      	ldr	r0, [pc, #72]	; (15a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x308>)
    1558:	f008 fdf2 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    155c:	4631      	mov	r1, r6
    155e:	2300      	movs	r3, #0
    1560:	220a      	movs	r2, #10
    1562:	4809      	ldr	r0, [pc, #36]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    1564:	f008 febc 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1568:	210f      	movs	r1, #15
    156a:	4818      	ldr	r0, [pc, #96]	; (15cc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x334>)
    156c:	f008 fde8 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1570:	4805      	ldr	r0, [pc, #20]	; (1588 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2f0>)
    1572:	f008 fea5 	bl	a2c0 <Print::println()>
    1576:	e7bd      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    1578:	401d4000 	.word	0x401d4000
    157c:	200001a0 	.word	0x200001a0
    1580:	401d4028 	.word	0x401d4028
    1584:	200001c8 	.word	0x200001c8
    1588:	20001160 	.word	0x20001160
    158c:	200001dc 	.word	0x200001dc
    1590:	401d4034 	.word	0x401d4034
    1594:	200001f4 	.word	0x200001f4
    1598:	0401d408 	.word	0x0401d408
    159c:	2000033c 	.word	0x2000033c
    15a0:	2000020c 	.word	0x2000020c
    15a4:	200002cc 	.word	0x200002cc
    15a8:	200002ec 	.word	0x200002ec
    15ac:	bfe2bf80 	.word	0xbfe2bf80
    15b0:	20000314 	.word	0x20000314
    15b4:	20000248 	.word	0x20000248
    15b8:	2000031c 	.word	0x2000031c
    15bc:	200001b0 	.word	0x200001b0
    15c0:	401d408c 	.word	0x401d408c
    15c4:	20000328 	.word	0x20000328
    15c8:	20000284 	.word	0x20000284
    15cc:	200002bc 	.word	0x200002bc
    15d0:	2104      	movs	r1, #4
    15d2:	4893      	ldr	r0, [pc, #588]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    15d4:	f008 fdb4 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    15d8:	4631      	mov	r1, r6
    15da:	2300      	movs	r3, #0
    15dc:	220a      	movs	r2, #10
    15de:	4891      	ldr	r0, [pc, #580]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    15e0:	f008 fe7e 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    15e4:	2112      	movs	r1, #18
    15e6:	4890      	ldr	r0, [pc, #576]	; (1828 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x590>)
    15e8:	f008 fdaa 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    15ec:	488d      	ldr	r0, [pc, #564]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    15ee:	f008 fe67 	bl	a2c0 <Print::println()>
    15f2:	e77f      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    15f4:	2104      	movs	r1, #4
    15f6:	488a      	ldr	r0, [pc, #552]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    15f8:	f008 fda2 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    15fc:	4631      	mov	r1, r6
    15fe:	2300      	movs	r3, #0
    1600:	220a      	movs	r2, #10
    1602:	4888      	ldr	r0, [pc, #544]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1604:	f008 fe6c 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1608:	2111      	movs	r1, #17
    160a:	4888      	ldr	r0, [pc, #544]	; (182c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x594>)
    160c:	f008 fd98 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1610:	4884      	ldr	r0, [pc, #528]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1612:	f008 fe55 	bl	a2c0 <Print::println()>
    1616:	e76d      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    1618:	2104      	movs	r1, #4
    161a:	4881      	ldr	r0, [pc, #516]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    161c:	f008 fd90 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1620:	220a      	movs	r2, #10
    1622:	4631      	mov	r1, r6
    1624:	2300      	movs	r3, #0
    1626:	487f      	ldr	r0, [pc, #508]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1628:	f008 fe5a 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    162c:	210f      	movs	r1, #15
    162e:	4880      	ldr	r0, [pc, #512]	; (1830 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x598>)
    1630:	f008 fd86 	bl	a140 <usb_serial_write>
      case 0b0000: {
          Serial.print("\t\tMB"); Serial.print(i); Serial.println(" code: RX_INACTIVE"); break;
        }
      case 0b0100: {
          Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: RX_EMPTY");
          (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    1634:	682b      	ldr	r3, [r5, #0]
    1636:	2111      	movs	r1, #17
    1638:	029a      	lsls	r2, r3, #10
    163a:	bf4c      	ite	mi
    163c:	487d      	ldrmi	r0, [pc, #500]	; (1834 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x59c>)
    163e:	487e      	ldrpl	r0, [pc, #504]	; (1838 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5a0>)
    1640:	f008 fd7e 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1644:	4877      	ldr	r0, [pc, #476]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1646:	f008 fe3b 	bl	a2c0 <Print::println()>
    164a:	e753      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    164c:	2104      	movs	r1, #4
    164e:	4874      	ldr	r0, [pc, #464]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    1650:	f008 fd76 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1654:	4631      	mov	r1, r6
    1656:	2300      	movs	r3, #0
    1658:	220a      	movs	r2, #10
    165a:	4872      	ldr	r0, [pc, #456]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    165c:	f008 fe40 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1660:	210e      	movs	r1, #14
    1662:	4876      	ldr	r0, [pc, #472]	; (183c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5a4>)
    1664:	f008 fd6c 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1668:	486e      	ldr	r0, [pc, #440]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    166a:	f008 fe29 	bl	a2c0 <Print::println()>
    166e:	e741      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    1670:	2104      	movs	r1, #4
    1672:	486b      	ldr	r0, [pc, #428]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    1674:	f008 fd64 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1678:	4631      	mov	r1, r6
    167a:	2300      	movs	r3, #0
    167c:	220a      	movs	r2, #10
    167e:	4869      	ldr	r0, [pc, #420]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1680:	f008 fe2e 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1684:	210e      	movs	r1, #14
    1686:	486e      	ldr	r0, [pc, #440]	; (1840 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5a8>)
    1688:	f008 fd5a 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    168c:	4865      	ldr	r0, [pc, #404]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    168e:	f008 fe17 	bl	a2c0 <Print::println()>
    1692:	e72f      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    1694:	2104      	movs	r1, #4
    1696:	4862      	ldr	r0, [pc, #392]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    1698:	f008 fd52 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    169c:	4631      	mov	r1, r6
    169e:	2300      	movs	r3, #0
    16a0:	220a      	movs	r2, #10
    16a2:	4860      	ldr	r0, [pc, #384]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    16a4:	f008 fe1c 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    16a8:	2112      	movs	r1, #18
    16aa:	4866      	ldr	r0, [pc, #408]	; (1844 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5ac>)
    16ac:	f008 fd48 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    16b0:	485c      	ldr	r0, [pc, #368]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    16b2:	f008 fe05 	bl	a2c0 <Print::println()>
    16b6:	e71d      	b.n	14f4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x25c>
    16b8:	2104      	movs	r1, #4
    16ba:	4859      	ldr	r0, [pc, #356]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    16bc:	f008 fd40 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    16c0:	2300      	movs	r3, #0
    16c2:	220a      	movs	r2, #10
    16c4:	4621      	mov	r1, r4
    16c6:	4857      	ldr	r0, [pc, #348]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    16c8:	f008 fe0a 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    16cc:	2111      	movs	r1, #17
    16ce:	485e      	ldr	r0, [pc, #376]	; (1848 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5b0>)
    16d0:	f008 fd36 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    16d4:	4853      	ldr	r0, [pc, #332]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    16d6:	f008 fdf3 	bl	a2c0 <Print::println()>
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    Serial.println(constrain((uint8_t)(FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes), 0, 32));
    Serial.print("\tRemaining Mailboxes: ");
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    Serial.println(remaining_mailboxes); // 8 filters per 2 mailboxes
    for ( uint8_t i = FLEXCANb_MAXMB_SIZE(_bus) - remaining_mailboxes; i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    16da:	4b5c      	ldr	r3, [pc, #368]	; (184c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5b4>)
    16dc:	3401      	adds	r4, #1
    16de:	681b      	ldr	r3, [r3, #0]
    16e0:	b2e4      	uxtb	r4, r4
    16e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    16e6:	3301      	adds	r3, #1
    16e8:	429c      	cmp	r4, r3
    16ea:	f4ff ae41 	bcc.w	1370 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0xd8>
    16ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    16f0:	2104      	movs	r1, #4
    16f2:	484b      	ldr	r0, [pc, #300]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    16f4:	f008 fd24 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    16f8:	220a      	movs	r2, #10
    16fa:	2300      	movs	r3, #0
    16fc:	4621      	mov	r1, r4
    16fe:	4849      	ldr	r0, [pc, #292]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1700:	f008 fdee 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1704:	210f      	movs	r1, #15
    1706:	484a      	ldr	r0, [pc, #296]	; (1830 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x598>)
    1708:	f008 fd1a 	bl	a140 <usb_serial_write>
        case 0b0000: {
            Serial.print("\t\tMB"); Serial.print(i); Serial.println(" code: RX_INACTIVE"); break;
          }
        case 0b0100: {
            Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: RX_EMPTY");
            (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE) ? Serial.println("\t(Extended Frame)") : Serial.println("\t(Standard Frame)");
    170c:	682b      	ldr	r3, [r5, #0]
    170e:	2111      	movs	r1, #17
    1710:	029d      	lsls	r5, r3, #10
    1712:	bf4c      	ite	mi
    1714:	4847      	ldrmi	r0, [pc, #284]	; (1834 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x59c>)
    1716:	4848      	ldrpl	r0, [pc, #288]	; (1838 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5a0>)
    1718:	f008 fd12 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    171c:	4841      	ldr	r0, [pc, #260]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    171e:	f008 fdcf 	bl	a2c0 <Print::println()>
    1722:	e7da      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    1724:	2104      	movs	r1, #4
    1726:	483e      	ldr	r0, [pc, #248]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    1728:	f008 fd0a 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    172c:	2300      	movs	r3, #0
    172e:	220a      	movs	r2, #10
    1730:	4621      	mov	r1, r4
    1732:	483c      	ldr	r0, [pc, #240]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1734:	f008 fdd4 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1738:	210e      	movs	r1, #14
    173a:	4841      	ldr	r0, [pc, #260]	; (1840 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5a8>)
    173c:	f008 fd00 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1740:	4838      	ldr	r0, [pc, #224]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1742:	f008 fdbd 	bl	a2c0 <Print::println()>
    1746:	e7c8      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    1748:	2104      	movs	r1, #4
    174a:	4835      	ldr	r0, [pc, #212]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    174c:	f008 fcf8 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1750:	2300      	movs	r3, #0
    1752:	220a      	movs	r2, #10
    1754:	4621      	mov	r1, r4
    1756:	4833      	ldr	r0, [pc, #204]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1758:	f008 fdc2 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    175c:	2112      	movs	r1, #18
    175e:	4839      	ldr	r0, [pc, #228]	; (1844 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5ac>)
    1760:	f008 fcee 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1764:	482f      	ldr	r0, [pc, #188]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    1766:	f008 fdab 	bl	a2c0 <Print::println()>
    176a:	e7b6      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    176c:	2104      	movs	r1, #4
    176e:	482c      	ldr	r0, [pc, #176]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    1770:	f008 fce6 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1774:	2300      	movs	r3, #0
    1776:	220a      	movs	r2, #10
    1778:	4621      	mov	r1, r4
    177a:	482a      	ldr	r0, [pc, #168]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    177c:	f008 fdb0 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1780:	210e      	movs	r1, #14
    1782:	482e      	ldr	r0, [pc, #184]	; (183c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5a4>)
    1784:	f008 fcdc 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1788:	4826      	ldr	r0, [pc, #152]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    178a:	f008 fd99 	bl	a2c0 <Print::println()>
    178e:	e7a4      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    1790:	2104      	movs	r1, #4
    1792:	4823      	ldr	r0, [pc, #140]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    1794:	f008 fcd4 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1798:	2300      	movs	r3, #0
    179a:	220a      	movs	r2, #10
    179c:	4621      	mov	r1, r4
    179e:	4821      	ldr	r0, [pc, #132]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    17a0:	f008 fd9e 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    17a4:	2111      	movs	r1, #17
    17a6:	482a      	ldr	r0, [pc, #168]	; (1850 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5b8>)
    17a8:	f008 fcca 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    17ac:	481d      	ldr	r0, [pc, #116]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    17ae:	f008 fd87 	bl	a2c0 <Print::println()>
    17b2:	e792      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    17b4:	2104      	movs	r1, #4
    17b6:	481a      	ldr	r0, [pc, #104]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    17b8:	f008 fcc2 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    17bc:	2300      	movs	r3, #0
    17be:	220a      	movs	r2, #10
    17c0:	4621      	mov	r1, r4
    17c2:	4818      	ldr	r0, [pc, #96]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    17c4:	f008 fd8c 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    17c8:	210f      	movs	r1, #15
    17ca:	4822      	ldr	r0, [pc, #136]	; (1854 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5bc>)
    17cc:	f008 fcb8 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    17d0:	4814      	ldr	r0, [pc, #80]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    17d2:	f008 fd75 	bl	a2c0 <Print::println()>
    17d6:	e780      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    17d8:	2104      	movs	r1, #4
    17da:	4811      	ldr	r0, [pc, #68]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    17dc:	f008 fcb0 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    17e0:	2300      	movs	r3, #0
    17e2:	220a      	movs	r2, #10
    17e4:	4621      	mov	r1, r4
    17e6:	480f      	ldr	r0, [pc, #60]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    17e8:	f008 fd7a 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    17ec:	2112      	movs	r1, #18
    17ee:	480e      	ldr	r0, [pc, #56]	; (1828 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x590>)
    17f0:	f008 fca6 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    17f4:	480b      	ldr	r0, [pc, #44]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    17f6:	f008 fd63 	bl	a2c0 <Print::println()>
    17fa:	e76e      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    17fc:	2104      	movs	r1, #4
    17fe:	4808      	ldr	r0, [pc, #32]	; (1820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x588>)
    1800:	f008 fc9e 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1804:	2300      	movs	r3, #0
    1806:	220a      	movs	r2, #10
    1808:	4621      	mov	r1, r4
    180a:	4806      	ldr	r0, [pc, #24]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    180c:	f008 fd68 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1810:	2111      	movs	r1, #17
    1812:	4806      	ldr	r0, [pc, #24]	; (182c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x594>)
    1814:	f008 fc94 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1818:	4802      	ldr	r0, [pc, #8]	; (1824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x58c>)
    181a:	f008 fd51 	bl	a2c0 <Print::println()>
    181e:	e75c      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    1820:	2000020c 	.word	0x2000020c
    1824:	20001160 	.word	0x20001160
    1828:	200002a8 	.word	0x200002a8
    182c:	20000270 	.word	0x20000270
    1830:	20000228 	.word	0x20000228
    1834:	20000238 	.word	0x20000238
    1838:	2000024c 	.word	0x2000024c
    183c:	20000260 	.word	0x20000260
    1840:	20000298 	.word	0x20000298
    1844:	20000214 	.word	0x20000214
    1848:	20000328 	.word	0x20000328
    184c:	401d4000 	.word	0x401d4000
    1850:	20000284 	.word	0x20000284
    1854:	200002bc 	.word	0x200002bc
    1858:	2104      	movs	r1, #4
    185a:	4853      	ldr	r0, [pc, #332]	; (19a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x710>)
    185c:	f008 fc70 	bl	a140 <usb_serial_write>
	size_t print(const String &s);
	size_t print(char c)				{ return write((uint8_t)c); }
	size_t print(const char s[])			{ return write(s); }
	size_t print(const __FlashStringHelper *f)	{ return write((const char *)f); }

	size_t print(uint8_t b)				{ return printNumber(b, 10, 0); }
    1860:	2300      	movs	r3, #0
    1862:	220a      	movs	r2, #10
    1864:	4621      	mov	r1, r4
    1866:	4851      	ldr	r0, [pc, #324]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    1868:	f008 fd3a 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    186c:	211d      	movs	r1, #29
    186e:	4850      	ldr	r0, [pc, #320]	; (19b0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x718>)
    1870:	f008 fc66 	bl	a140 <usb_serial_write>
        case 0b1001: {
            Serial.print("\t\tMB"); Serial.print(i); Serial.println(" code: TX_ABORT"); break;
          }
        case 0b1100: {
            Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: TX_DATA (Transmitting)");
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
    1874:	682b      	ldr	r3, [r5, #0]
    1876:	2110      	movs	r1, #16
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
    1878:	0298      	lsls	r0, r3, #10
    187a:	f140 808b 	bpl.w	1994 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x6fc>
    187e:	484d      	ldr	r0, [pc, #308]	; (19b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x71c>)
    1880:	f008 fc5e 	bl	a140 <usb_serial_write>
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1884:	4f4c      	ldr	r7, [pc, #304]	; (19b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x720>)
    1886:	68ae      	ldr	r6, [r5, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    1888:	686b      	ldr	r3, [r5, #4]
          }
        case 0b1100: {
            Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: TX_DATA (Transmitting)");
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    188a:	442f      	add	r7, r5
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    188c:	f023 4560 	bic.w	r5, r3, #3758096384	; 0xe0000000
    1890:	2107      	movs	r1, #7
    1892:	484a      	ldr	r0, [pc, #296]	; (19bc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x724>)
    1894:	f008 fc54 	bl	a140 <usb_serial_write>

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
	size_t print(int n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned int n, int base)		{ return printNumber(n, base, 0); }
	size_t print(long n, int base)			{ return (base == 10) ? print(n) : printNumber(n, base, 0); }
	size_t print(unsigned long n, int base)		{ return printNumber(n, base, 0); }
    1898:	2300      	movs	r3, #0
    189a:	2210      	movs	r2, #16
    189c:	4629      	mov	r1, r5
    189e:	4843      	ldr	r0, [pc, #268]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    18a0:	f008 fd1e 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18a4:	2101      	movs	r1, #1
    18a6:	4846      	ldr	r0, [pc, #280]	; (19c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x728>)
    18a8:	f008 fc4a 	bl	a140 <usb_serial_write>
    18ac:	210a      	movs	r1, #10
    18ae:	4845      	ldr	r0, [pc, #276]	; (19c4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x72c>)
    18b0:	f008 fc46 	bl	a140 <usb_serial_write>
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    18b4:	2300      	movs	r3, #0
    18b6:	2210      	movs	r2, #16
    18b8:	0e31      	lsrs	r1, r6, #24
    18ba:	483c      	ldr	r0, [pc, #240]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    18bc:	f008 fd10 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18c0:	2101      	movs	r1, #1
    18c2:	4841      	ldr	r0, [pc, #260]	; (19c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x730>)
    18c4:	f008 fc3c 	bl	a140 <usb_serial_write>
    18c8:	2300      	movs	r3, #0
    18ca:	2210      	movs	r2, #16
    18cc:	f3c6 4107 	ubfx	r1, r6, #16, #8
    18d0:	4836      	ldr	r0, [pc, #216]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    18d2:	f008 fd05 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18d6:	2101      	movs	r1, #1
    18d8:	483b      	ldr	r0, [pc, #236]	; (19c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x730>)
    18da:	f008 fc31 	bl	a140 <usb_serial_write>
    18de:	2300      	movs	r3, #0
    18e0:	2210      	movs	r2, #16
    18e2:	f3c6 2107 	ubfx	r1, r6, #8, #8
    18e6:	4831      	ldr	r0, [pc, #196]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    18e8:	f008 fcfa 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    18ec:	2101      	movs	r1, #1
    18ee:	4836      	ldr	r0, [pc, #216]	; (19c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x730>)
    18f0:	f008 fc26 	bl	a140 <usb_serial_write>
    18f4:	2210      	movs	r2, #16
    18f6:	b2f1      	uxtb	r1, r6
    18f8:	2300      	movs	r3, #0
    18fa:	482c      	ldr	r0, [pc, #176]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    18fc:	f008 fcf0 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
            Serial.print("(ID: 0x"); Serial.print(id, HEX); Serial.print(")");
            Serial.print("(Payload: "); Serial.print((uint8_t)(dataIn >> 24), HEX);
            Serial.print(" "); Serial.print((uint8_t)(dataIn >> 16), HEX);
            Serial.print(" "); Serial.print((uint8_t)(dataIn >> 8), HEX);
            Serial.print(" "); Serial.print((uint8_t)dataIn, HEX);
            dataIn = FLEXCANb_MBn_WORD1(_bus, i);
    1900:	4b32      	ldr	r3, [pc, #200]	; (19cc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x734>)
    1902:	2101      	movs	r1, #1
    1904:	4830      	ldr	r0, [pc, #192]	; (19c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x730>)
    1906:	443b      	add	r3, r7
    1908:	681d      	ldr	r5, [r3, #0]
    190a:	f008 fc19 	bl	a140 <usb_serial_write>
    190e:	2300      	movs	r3, #0
    1910:	2210      	movs	r2, #16
    1912:	0e29      	lsrs	r1, r5, #24
    1914:	4825      	ldr	r0, [pc, #148]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    1916:	f008 fce3 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    191a:	2101      	movs	r1, #1
    191c:	482a      	ldr	r0, [pc, #168]	; (19c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x730>)
    191e:	f008 fc0f 	bl	a140 <usb_serial_write>
    1922:	f3c5 4107 	ubfx	r1, r5, #16, #8
    1926:	2300      	movs	r3, #0
    1928:	2210      	movs	r2, #16
    192a:	4820      	ldr	r0, [pc, #128]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    192c:	f008 fcd8 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1930:	2101      	movs	r1, #1
    1932:	4825      	ldr	r0, [pc, #148]	; (19c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x730>)
    1934:	f008 fc04 	bl	a140 <usb_serial_write>
    1938:	f3c5 2107 	ubfx	r1, r5, #8, #8
    193c:	2300      	movs	r3, #0
    193e:	2210      	movs	r2, #16
    1940:	481a      	ldr	r0, [pc, #104]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    1942:	f008 fccd 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    1946:	2101      	movs	r1, #1
    1948:	481f      	ldr	r0, [pc, #124]	; (19c8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x730>)
    194a:	f008 fbf9 	bl	a140 <usb_serial_write>
    194e:	2300      	movs	r3, #0
    1950:	b2e9      	uxtb	r1, r5
    1952:	2210      	movs	r2, #16
    1954:	4815      	ldr	r0, [pc, #84]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    1956:	f008 fcc3 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    195a:	2101      	movs	r1, #1
    195c:	4818      	ldr	r0, [pc, #96]	; (19c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x728>)
    195e:	f008 fbef 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1962:	4812      	ldr	r0, [pc, #72]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    1964:	f008 fcac 	bl	a2c0 <Print::println()>
    1968:	e6b7      	b.n	16da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x442>
    196a:	2111      	movs	r1, #17
    196c:	4818      	ldr	r0, [pc, #96]	; (19d0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x738>)
    196e:	f008 fbe7 	bl	a140 <usb_serial_write>
    1972:	480e      	ldr	r0, [pc, #56]	; (19ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x714>)
    1974:	f008 fca4 	bl	a2c0 <Print::println()>
    1978:	e4a4      	b.n	12c4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x2c>
    197a:	2400      	movs	r4, #0
FCTP_FUNC void FCTP_OPT::mailboxStatus() {
  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    Serial.print("FIFO Enabled --> "); ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IFLAG1_BUF5I ) ? Serial.println("Interrupt Enabled") : Serial.println("Interrupt Disabled");
    Serial.print("\tFIFO Filters in use: ");
    uint32_t remaining_mailboxes = FLEXCANb_MAXMB_SIZE(_bus) - 6 /* MAXMB - FIFO */ - ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2);
    if ( FLEXCANb_MAXMB_SIZE(_bus) < (6 + ((((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 2))) remaining_mailboxes = 0;
    197c:	4625      	mov	r5, r4
    197e:	e4be      	b.n	12fe <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x66>
    1980:	4814      	ldr	r0, [pc, #80]	; (19d4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x73c>)
    1982:	f008 fbdd 	bl	a140 <usb_serial_write>
        }
      case 0b1100: {
          Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: TX_DATA (Transmitting)");
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    1986:	4f0c      	ldr	r7, [pc, #48]	; (19b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x720>)
    1988:	68ae      	ldr	r6, [r5, #8]
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    198a:	686b      	ldr	r3, [r5, #4]
        }
      case 0b1100: {
          Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: TX_DATA (Transmitting)");
          uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
          (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
          uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    198c:	442f      	add	r7, r5
          uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
          if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    198e:	f3c3 458a 	ubfx	r5, r3, #18, #11
    1992:	e543      	b.n	141c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x184>
    1994:	480f      	ldr	r0, [pc, #60]	; (19d4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x73c>)
    1996:	f008 fbd3 	bl	a140 <usb_serial_write>
          }
        case 0b1100: {
            Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: TX_DATA (Transmitting)");
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    199a:	4f07      	ldr	r7, [pc, #28]	; (19b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x720>)
    199c:	68ae      	ldr	r6, [r5, #8]
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
    199e:	686b      	ldr	r3, [r5, #4]
          }
        case 0b1100: {
            Serial.print("\t\tMB"); Serial.print(i); Serial.print(" code: TX_DATA (Transmitting)");
            uint32_t extid = (FLEXCANb_MBn_CS(_bus, i) & FLEXCAN_MB_CS_IDE);
            (extid) ? Serial.print("(Extended Frame)") : Serial.print("(Standard Frame)");
            uint32_t dataIn = FLEXCANb_MBn_WORD0(_bus, i);
    19a0:	442f      	add	r7, r5
            uint32_t id = (FLEXCANb_MBn_ID(_bus, i) & FLEXCAN_MB_ID_EXT_MASK);
            if (!extid) id >>= FLEXCAN_MB_ID_STD_BIT_NO;
    19a2:	f3c3 458a 	ubfx	r5, r3, #18, #11
    19a6:	e773      	b.n	1890 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()+0x5f8>
    19a8:	2000020c 	.word	0x2000020c
    19ac:	20001160 	.word	0x20001160
    19b0:	200002cc 	.word	0x200002cc
    19b4:	200002ec 	.word	0x200002ec
    19b8:	bfe2bf80 	.word	0xbfe2bf80
    19bc:	20000314 	.word	0x20000314
    19c0:	20000248 	.word	0x20000248
    19c4:	2000031c 	.word	0x2000031c
    19c8:	200001b0 	.word	0x200001b0
    19cc:	401d408c 	.word	0x401d408c
    19d0:	200001b4 	.word	0x200001b4
    19d4:	20000300 	.word	0x20000300

000019d8 <setup>:
char disp_msg_5[20] = { " " };

time_t getTeensy3Time();


void setup(void) {
    19d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}

	pinMode(LOG_BTN, INPUT_PULLUP);
    19da:	2102      	movs	r1, #2
    19dc:	2005      	movs	r0, #5
    19de:	f007 fb0d 	bl	8ffc <pinMode>
	pinMode(LED_PIN, OUTPUT);
    19e2:	2101      	movs	r1, #1
    19e4:	200d      	movs	r0, #13
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    19e6:	f240 26ee 	movw	r6, #750	; 0x2ee
    19ea:	f007 fb07 	bl	8ffc <pinMode>
	setSyncProvider(getTeensy3Time);
    19ee:	484c      	ldr	r0, [pc, #304]	; (1b20 <setup+0x148>)
    19f0:	f001 fa7e 	bl	2ef0 <setSyncProvider(long (*)())>
class usb_serial_class : public Stream
{
public:
	constexpr usb_serial_class() {}
        void begin(long) {
		uint32_t millis_begin = systick_millis_count;
    19f4:	484b      	ldr	r0, [pc, #300]	; (1b24 <setup+0x14c>)
    19f6:	4a4c      	ldr	r2, [pc, #304]	; (1b28 <setup+0x150>)
    19f8:	6804      	ldr	r4, [r0, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    19fa:	4d4c      	ldr	r5, [pc, #304]	; (1b2c <setup+0x154>)
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    19fc:	4f4c      	ldr	r7, [pc, #304]	; (1b30 <setup+0x158>)
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    19fe:	7813      	ldrb	r3, [r2, #0]
    1a00:	b13b      	cbz	r3, 1a12 <setup+0x3a>
    1a02:	782b      	ldrb	r3, [r5, #0]
    1a04:	07db      	lsls	r3, r3, #31
    1a06:	d504      	bpl.n	1a12 <setup+0x3a>
		((uint32_t)(systick_millis_count - usb_cdc_line_rtsdtr_millis) >= 15);
    1a08:	6803      	ldr	r3, [r0, #0]
    1a0a:	6839      	ldr	r1, [r7, #0]
        uint8_t stopbits(void) { uint8_t b = usb_cdc_line_coding[1]; if (!b) b = 1; return b; }
        uint8_t paritytype(void) { return usb_cdc_line_coding[1] >> 8; } // 0=none, 1=odd, 2=even
        uint8_t numbits(void) { return usb_cdc_line_coding[1] >> 16; }
        uint8_t dtr(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) ? 1 : 0; }
        uint8_t rts(void) { return (usb_cdc_line_rtsdtr & USB_SERIAL_RTS) ? 1 : 0; }
        operator bool() { return usb_configuration && (usb_cdc_line_rtsdtr & USB_SERIAL_DTR) &&
    1a0c:	1a5b      	subs	r3, r3, r1
    1a0e:	2b0e      	cmp	r3, #14
    1a10:	d807      	bhi.n	1a22 <setup+0x4a>
public:
	constexpr usb_serial_class() {}
        void begin(long) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
    1a12:	6803      	ldr	r3, [r0, #0]
			if (usb_configuration) {
    1a14:	7811      	ldrb	r1, [r2, #0]
public:
	constexpr usb_serial_class() {}
        void begin(long) {
		uint32_t millis_begin = systick_millis_count;
		while (!(*this)) {
			uint32_t elapsed = systick_millis_count - millis_begin;
    1a16:	1b1b      	subs	r3, r3, r4
			if (usb_configuration) {
    1a18:	2900      	cmp	r1, #0
    1a1a:	d077      	beq.n	1b0c <setup+0x134>
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
    1a1c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
    1a20:	d9ed      	bls.n	19fe <setup+0x26>

	Serial.begin(115200); delay(400);
    1a22:	f44f 70c8 	mov.w	r0, #400	; 0x190
    1a26:	f007 fa11 	bl	8e4c <delay>
    /* U8X8_MSG_GPIO_MENU_NEXT, U8X8_MSG_GPIO_MENU_PREV, */
    /* U8X8_MSG_GPIO_MENU_HOME */
    uint8_t getMenuEvent(void) { return u8x8_GetMenuEvent(u8g2_GetU8x8(&u8g2)); }

    void initDisplay(void) {
      u8g2_InitDisplay(&u8g2); }
    1a2a:	4842      	ldr	r0, [pc, #264]	; (1b34 <setup+0x15c>)
    1a2c:	f002 faaa 	bl	3f84 <u8x8_InitDisplay>
      
    void clearDisplay(void) {
      u8g2_ClearDisplay(&u8g2); }
    1a30:	4840      	ldr	r0, [pc, #256]	; (1b34 <setup+0x15c>)
    1a32:	f001 fc3b 	bl	32ac <u8g2_ClearDisplay>
      
    void setPowerSave(uint8_t is_enable) {
      u8g2_SetPowerSave(&u8g2, is_enable); }
    1a36:	2100      	movs	r1, #0
    1a38:	483e      	ldr	r0, [pc, #248]	; (1b34 <setup+0x15c>)
    1a3a:	f002 faad 	bl	3f98 <u8x8_SetPowerSave>
    u8g2_uint_t getDisplayWidth(void) { return u8g2_GetDisplayWidth(&u8g2); }

    
    /* u8g2_buffer.c */
    void sendBuffer(void) { u8g2_SendBuffer(&u8g2); }
    void clearBuffer(void) { u8g2_ClearBuffer(&u8g2); }    
    1a3e:	483d      	ldr	r0, [pc, #244]	; (1b34 <setup+0x15c>)
    1a40:	f001 fbd0 	bl	31e4 <u8g2_ClearBuffer>
	//u8x8.setPowerSave(0);

	u8g2.begin();
	u8g2.clearBuffer();          // clear the internal memory

	if (timeStatus() != timeSet) {
    1a44:	f001 fa4c 	bl	2ee0 <timeStatus()>
    1a48:	2802      	cmp	r0, #2
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1a4a:	f04f 011b 	mov.w	r1, #27
    1a4e:	bf14      	ite	ne
    1a50:	4839      	ldrne	r0, [pc, #228]	; (1b38 <setup+0x160>)
    1a52:	483a      	ldreq	r0, [pc, #232]	; (1b3c <setup+0x164>)
    1a54:	f008 fb74 	bl	a140 <usb_serial_write>
    1a58:	4839      	ldr	r0, [pc, #228]	; (1b40 <setup+0x168>)
    1a5a:	f008 fc31 	bl	a2c0 <Print::println()>
	}
	else {
		Serial.println("RTC has set the system time");
	}

	digitalClockDisplay();
    1a5e:	f7ff f991 	bl	d84 <digitalClockDisplay()>
	delay(1000);
    1a62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1a66:	f007 f9f1 	bl	8e4c <delay>

	Can0.begin();
    1a6a:	4836      	ldr	r0, [pc, #216]	; (1b44 <setup+0x16c>)
    1a6c:	f7ff fb4e 	bl	110c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::begin()>
	Can0.setBaudRate(500000);
    1a70:	2200      	movs	r2, #0
    1a72:	4935      	ldr	r1, [pc, #212]	; (1b48 <setup+0x170>)
    1a74:	4833      	ldr	r0, [pc, #204]	; (1b44 <setup+0x16c>)
    1a76:	f7fe fb13 	bl	a0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::setBaudRate(unsigned long, FLEXCAN_RXTX)>
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_EnterFreezeMode() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    1a7a:	4b34      	ldr	r3, [pc, #208]	; (1b4c <setup+0x174>)
    1a7c:	6819      	ldr	r1, [r3, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    1a7e:	461a      	mov	r2, r3
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_EnterFreezeMode() {
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_FRZ | FLEXCAN_MCR_HALT;
    1a80:	f041 41a0 	orr.w	r1, r1, #1342177280	; 0x50000000
    1a84:	6019      	str	r1, [r3, #0]
  while (!(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK));
    1a86:	6813      	ldr	r3, [r2, #0]
    1a88:	4c30      	ldr	r4, [pc, #192]	; (1b4c <setup+0x174>)
    1a8a:	01dd      	lsls	r5, r3, #7
    1a8c:	d5fb      	bpl.n	1a86 <setup+0xae>
    1a8e:	4d2d      	ldr	r5, [pc, #180]	; (1b44 <setup+0x16c>)
    1a90:	2100      	movs	r1, #0

FCTP_FUNC void FCTP_OPT::setMaxMB(uint8_t last) {
  last = constrain(last,1,64);
  last--;
  FLEXCAN_EnterFreezeMode();
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
    1a92:	6826      	ldr	r6, [r4, #0]
    1a94:	4628      	mov	r0, r5
    1a96:	f7ff fa81 	bl	f9c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)>
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    1a9a:	482d      	ldr	r0, [pc, #180]	; (1b50 <setup+0x178>)
    1a9c:	492d      	ldr	r1, [pc, #180]	; (1b54 <setup+0x17c>)
    1a9e:	2200      	movs	r2, #0
    1aa0:	f8d0 e000 	ldr.w	lr, [r0]
    1aa4:	680f      	ldr	r7, [r1, #0]
  return FLEXCANb_IFLAG1(_bus);
}

FCTP_FUNC void FCTP_OPT::writeIFLAG(uint64_t value) {
#if defined(__IMXRT1062__)
  FLEXCANb_IFLAG2(_bus) = value >> 32;
    1aa6:	f8c0 e000 	str.w	lr, [r0]
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    1aaa:	433a      	orrs	r2, r7

FCTP_FUNC void FCTP_OPT::writeIFLAG(uint64_t value) {
#if defined(__IMXRT1062__)
  FLEXCANb_IFLAG2(_bus) = value >> 32;
#endif
  FLEXCANb_IFLAG1(_bus) = value;
    1aac:	600a      	str	r2, [r1, #0]
  last--;
  FLEXCAN_EnterFreezeMode();
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
  disableFIFO();
  writeIFLAG(readIFLAG()); // (all bits reset when written back) (needed for MAXMB changes)
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
    1aae:	6823      	ldr	r3, [r4, #0]
    1ab0:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
    1ab4:	6023      	str	r3, [r4, #0]
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
    1ab6:	6823      	ldr	r3, [r4, #0]
    1ab8:	f043 030f 	orr.w	r3, r3, #15
    1abc:	6023      	str	r3, [r4, #0]
  if ( fifo_was_cleared ) enableFIFO();
    1abe:	00b4      	lsls	r4, r6, #2
    1ac0:	d428      	bmi.n	1b14 <setup+0x13c>
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    1ac2:	4b22      	ldr	r3, [pc, #136]	; (1b4c <setup+0x174>)
    1ac4:	6819      	ldr	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    1ac6:	461a      	mov	r2, r3
  FLEXCANb_MCR(_bus) |= FLEXCAN_MCR_SOFT_RST;
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_SOFT_RST);
}

FCTP_FUNC void FCTP_OPT::FLEXCAN_ExitFreezeMode() {
  FLEXCANb_MCR(_bus) &= ~FLEXCAN_MCR_HALT;
    1ac8:	f021 5180 	bic.w	r1, r1, #268435456	; 0x10000000
    1acc:	6019      	str	r1, [r3, #0]
  while (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FRZ_ACK);
    1ace:	6813      	ldr	r3, [r2, #0]
    1ad0:	4c1e      	ldr	r4, [pc, #120]	; (1b4c <setup+0x174>)
    1ad2:	01d8      	lsls	r0, r3, #7
    1ad4:	d4fb      	bmi.n	1ace <setup+0xf6>
	Can0.setMaxMB(16);
	Can0.enableFIFO();
    1ad6:	2101      	movs	r1, #1
    1ad8:	481a      	ldr	r0, [pc, #104]	; (1b44 <setup+0x16c>)
    1ada:	f7ff fa5f 	bl	f9c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)>
  }
  if ( frz_flag_negate ) FLEXCAN_ExitFreezeMode();
}

FCTP_FUNC void FCTP_OPT::enableFIFOInterrupt(bool status) {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) ) return; /* FIFO must be enabled first */
    1ade:	6823      	ldr	r3, [r4, #0]
    1ae0:	0099      	lsls	r1, r3, #2
    1ae2:	d50b      	bpl.n	1afc <setup+0x124>
  if ( FLEXCANb_IMASK1(_bus) & FLEXCAN_IMASK1_BUF5M ) return; /* FIFO interrupts already enabled */
    1ae4:	4b1c      	ldr	r3, [pc, #112]	; (1b58 <setup+0x180>)
    1ae6:	681a      	ldr	r2, [r3, #0]
    1ae8:	0692      	lsls	r2, r2, #26
    1aea:	d407      	bmi.n	1afc <setup+0x124>
  FLEXCANb_IMASK1(_bus) &= ~0xFF; /* disable FIFO interrupt flags */
    1aec:	681a      	ldr	r2, [r3, #0]
    1aee:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
    1af2:	601a      	str	r2, [r3, #0]
  if ( status ) FLEXCANb_IMASK1(_bus) |= FLEXCAN_IMASK1_BUF5M; /* enable FIFO interrupt */
    1af4:	681a      	ldr	r2, [r3, #0]
    1af6:	f042 0220 	orr.w	r2, r2, #32
    1afa:	601a      	str	r2, [r3, #0]
  }
  _mbHandlers[mb_num] = handler;
}

FCTP_FUNC void FCTP_OPT::onReceive(_MB_ptr handler) {
  _mainHandler = handler;
    1afc:	f242 63c4 	movw	r3, #9924	; 0x26c4
    1b00:	4a16      	ldr	r2, [pc, #88]	; (1b5c <setup+0x184>)
	Can0.enableFIFOInterrupt();
	Can0.onReceive(canSniff);
	Can0.mailboxStatus();
    1b02:	4810      	ldr	r0, [pc, #64]	; (1b44 <setup+0x16c>)
    1b04:	50ea      	str	r2, [r5, r3]
    1b06:	f7ff fbc7 	bl	1298 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxStatus()>

}
    1b0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				// Wait up to 2 seconds for Arduino Serial Monitor
				if (elapsed > 2000) break;
			} else {
				// But wait only 3/4 second if there is no sign the
				// USB host has begun the USB enumeration process.
				if (elapsed > 750) break;
    1b0c:	42b3      	cmp	r3, r6
    1b0e:	f67f af76 	bls.w	19fe <setup+0x26>
    1b12:	e786      	b.n	1a22 <setup+0x4a>
  bool fifo_was_cleared = FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN;
  disableFIFO();
  writeIFLAG(readIFLAG()); // (all bits reset when written back) (needed for MAXMB changes)
  FLEXCANb_MCR(_bus) &= ~0x7F; // clear current value
  FLEXCANb_MCR(_bus) |= last; // set mailbox max
  if ( fifo_was_cleared ) enableFIFO();
    1b14:	2101      	movs	r1, #1
    1b16:	4628      	mov	r0, r5
    1b18:	f7ff fa40 	bl	f9c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::enableFIFO(bool)>
    1b1c:	e7d1      	b.n	1ac2 <setup+0xea>
    1b1e:	bf00      	nop
    1b20:	00000349 	.word	0x00000349
    1b24:	20036ca0 	.word	0x20036ca0
    1b28:	20036ce8 	.word	0x20036ce8
    1b2c:	20036e28 	.word	0x20036e28
    1b30:	200382c0 	.word	0x200382c0
    1b34:	200362a0 	.word	0x200362a0
    1b38:	20000358 	.word	0x20000358
    1b3c:	20000374 	.word	0x20000374
    1b40:	20001160 	.word	0x20001160
    1b44:	20001b3c 	.word	0x20001b3c
    1b48:	0007a120 	.word	0x0007a120
    1b4c:	401d4000 	.word	0x401d4000
    1b50:	401d402c 	.word	0x401d402c
    1b54:	401d4030 	.word	0x401d4030
    1b58:	401d4028 	.word	0x401d4028
    1b5c:	00000691 	.word	0x00000691

00001b60 <SdBase<FsVolume>::initErrorPrint(Print*)>:
  //----------------------------------------------------------------------------
  /** Print error details after begin() fails.
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    1b60:	b538      	push	{r3, r4, r5, lr}
    1b62:	460c      	mov	r4, r1
    1b64:	4605      	mov	r5, r0
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1b66:	220e      	movs	r2, #14
    1b68:	493c      	ldr	r1, [pc, #240]	; (1c5c <SdBase<FsVolume>::initErrorPrint(Print*)+0xfc>)
    1b6a:	6823      	ldr	r3, [r4, #0]
    1b6c:	4620      	mov	r0, r4
    1b6e:	685b      	ldr	r3, [r3, #4]
    1b70:	4798      	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1b72:	4620      	mov	r0, r4
    1b74:	f008 fba4 	bl	a2c0 <Print::println()>
    1b78:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1b7c:	b1e8      	cbz	r0, 1bba <SdBase<FsVolume>::initErrorPrint(Print*)+0x5a>
      return m_card->errorCode();
    1b7e:	6803      	ldr	r3, [r0, #0]
    1b80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b82:	4798      	blx	r3
   *
   * \param[in] pr Print destination.
   */
  void initErrorPrint(Print* pr) {
    pr->println(F("begin() failed"));
    if (sdErrorCode()) {
    1b84:	b9c8      	cbnz	r0, 1bba <SdBase<FsVolume>::initErrorPrint(Print*)+0x5a>
    1b86:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1b8a:	2800      	cmp	r0, #0
    1b8c:	d030      	beq.n	1bf0 <SdBase<FsVolume>::initErrorPrint(Print*)+0x90>
      return m_card->errorCode();
    1b8e:	6803      	ldr	r3, [r0, #0]
    1b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1b92:	4798      	blx	r3
  /** %Print SD errorCode and errorData.
   *
   * \param[in] pr Print destination.
   */
  void errorPrint(print_t* pr) {
    if (sdErrorCode()) {
    1b94:	bb60      	cbnz	r0, 1bf0 <SdBase<FsVolume>::initErrorPrint(Print*)+0x90>
    1b96:	f8d5 3480 	ldr.w	r3, [r5, #1152]	; 0x480
  /** \return Partition type, FAT_TYPE_EXFAT, FAT_TYPE_FAT32,
   *          FAT_TYPE_FAT16, or zero for error.
   */
  uint8_t fatType() const {
    return m_fVol ? m_fVol->fatType() :
           m_xVol ? m_xVol->fatType() : 0;
    1b9a:	2b00      	cmp	r3, #0
    1b9c:	d051      	beq.n	1c42 <SdBase<FsVolume>::initErrorPrint(Print*)+0xe2>
    1b9e:	79db      	ldrb	r3, [r3, #7]
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1ba0:	b103      	cbz	r3, 1ba4 <SdBase<FsVolume>::initErrorPrint(Print*)+0x44>
    1ba2:	bd38      	pop	{r3, r4, r5, pc}
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1ba4:	6823      	ldr	r3, [r4, #0]
    1ba6:	4620      	mov	r0, r4
    1ba8:	2210      	movs	r2, #16
    1baa:	492d      	ldr	r1, [pc, #180]	; (1c60 <SdBase<FsVolume>::initErrorPrint(Print*)+0x100>)
    1bac:	685b      	ldr	r3, [r3, #4]
    1bae:	4798      	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1bb0:	4620      	mov	r0, r4
      if (sdErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or wiring error?"));
      }
    }
    errorPrint(pr);
  }
    1bb2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1bb6:	f008 bb83 	b.w	a2c0 <Print::println()>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1bba:	6823      	ldr	r3, [r4, #0]
    1bbc:	2217      	movs	r2, #23
    1bbe:	4929      	ldr	r1, [pc, #164]	; (1c64 <SdBase<FsVolume>::initErrorPrint(Print*)+0x104>)
    1bc0:	4620      	mov	r0, r4
    1bc2:	685b      	ldr	r3, [r3, #4]
    1bc4:	4798      	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1bc6:	4620      	mov	r0, r4
    1bc8:	f008 fb7a 	bl	a2c0 <Print::println()>
    1bcc:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1bd0:	b170      	cbz	r0, 1bf0 <SdBase<FsVolume>::initErrorPrint(Print*)+0x90>
      return m_card->errorCode();
    1bd2:	6803      	ldr	r3, [r0, #0]
    1bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1bd6:	4798      	blx	r3
   */
  void initErrorPrint(Print* pr) {
    pr->println(F("begin() failed"));
    if (sdErrorCode()) {
      pr->println(F("Do not reformat the SD."));
      if (sdErrorCode() == SD_CARD_ERROR_CMD0) {
    1bd8:	2801      	cmp	r0, #1
    1bda:	d1d4      	bne.n	1b86 <SdBase<FsVolume>::initErrorPrint(Print*)+0x26>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1bdc:	6823      	ldr	r3, [r4, #0]
    1bde:	2230      	movs	r2, #48	; 0x30
    1be0:	4921      	ldr	r1, [pc, #132]	; (1c68 <SdBase<FsVolume>::initErrorPrint(Print*)+0x108>)
    1be2:	4620      	mov	r0, r4
    1be4:	685b      	ldr	r3, [r3, #4]
    1be6:	4798      	blx	r3
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1be8:	4620      	mov	r0, r4
    1bea:	f008 fb69 	bl	a2c0 <Print::println()>
    1bee:	e7ca      	b.n	1b86 <SdBase<FsVolume>::initErrorPrint(Print*)+0x26>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1bf0:	6823      	ldr	r3, [r4, #0]
    1bf2:	220b      	movs	r2, #11
    1bf4:	491d      	ldr	r1, [pc, #116]	; (1c6c <SdBase<FsVolume>::initErrorPrint(Print*)+0x10c>)
    1bf6:	4620      	mov	r0, r4
    1bf8:	685b      	ldr	r3, [r3, #4]
    1bfa:	4798      	blx	r3
    1bfc:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1c00:	b340      	cbz	r0, 1c54 <SdBase<FsVolume>::initErrorPrint(Print*)+0xf4>
      return m_card->errorCode();
    1c02:	6803      	ldr	r3, [r0, #0]
    1c04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
    1c06:	4798      	blx	r3
    1c08:	4601      	mov	r1, r0
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1c0a:	2300      	movs	r3, #0
    1c0c:	2210      	movs	r2, #16
    1c0e:	4620      	mov	r0, r4
    1c10:	f008 fb66 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1c14:	6823      	ldr	r3, [r4, #0]
    1c16:	2203      	movs	r2, #3
    1c18:	4915      	ldr	r1, [pc, #84]	; (1c70 <SdBase<FsVolume>::initErrorPrint(Print*)+0x110>)
    1c1a:	685b      	ldr	r3, [r3, #4]
    1c1c:	4620      	mov	r0, r4
    1c1e:	4798      	blx	r3
    1c20:	f8d5 048c 	ldr.w	r0, [r5, #1164]	; 0x48c
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1c24:	b1c0      	cbz	r0, 1c58 <SdBase<FsVolume>::initErrorPrint(Print*)+0xf8>
    1c26:	6803      	ldr	r3, [r0, #0]
    1c28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1c2a:	4798      	blx	r3
    1c2c:	b2c1      	uxtb	r1, r0
	size_t print(long n);
	size_t print(unsigned long n)			{ return printNumber(n, 10, 0); }
	size_t print(int64_t n);
	size_t print(uint64_t n)			{ return printNumber64(n, 10, 0); }

	size_t print(unsigned char n, int base)		{ return printNumber(n, base, 0); }
    1c2e:	2300      	movs	r3, #0
    1c30:	4620      	mov	r0, r4
    1c32:	2210      	movs	r2, #16
    1c34:	f008 fb54 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
	size_t println(long n)				{ return print(n) + println(); }
	size_t println(unsigned long n)			{ return print(n) + println(); }
	size_t println(int64_t n)			{ return print(n) + println(); }
	size_t println(uint64_t n)			{ return print(n) + println(); }

	size_t println(unsigned char n, int base)	{ return print(n, base) + println(); }
    1c38:	4620      	mov	r0, r4
      if (sdErrorCode() == SD_CARD_ERROR_CMD0) {
        pr->println(F("No card, wrong chip select pin, or wiring error?"));
      }
    }
    errorPrint(pr);
  }
    1c3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    1c3e:	f008 bb3f 	b.w	a2c0 <Print::println()>
    1c42:	f8d5 3484 	ldr.w	r3, [r5, #1156]	; 0x484
    1c46:	2b00      	cmp	r3, #0
    1c48:	d0ac      	beq.n	1ba4 <SdBase<FsVolume>::initErrorPrint(Print*)+0x44>
    1c4a:	f893 3444 	ldrb.w	r3, [r3, #1092]	; 0x444
    if (sdErrorCode()) {
      pr->print(F("SdError: 0X"));
      pr->print(sdErrorCode(), HEX);
      pr->print(F(",0X"));
      pr->println(sdErrorData(), HEX);
    } else if (!Vol::fatType()) {
    1c4e:	2b00      	cmp	r3, #0
    1c50:	d1a7      	bne.n	1ba2 <SdBase<FsVolume>::initErrorPrint(Print*)+0x42>
    1c52:	e7a7      	b.n	1ba4 <SdBase<FsVolume>::initErrorPrint(Print*)+0x44>
    }
  }
  //----------------------------------------------------------------------------
  /** \return SD card error code. */
  uint8_t sdErrorCode() {
    if (m_card) {
    1c54:	212a      	movs	r1, #42	; 0x2a
    1c56:	e7d8      	b.n	1c0a <SdBase<FsVolume>::initErrorPrint(Print*)+0xaa>
    }
    return SD_CARD_ERROR_INVALID_CARD_CONFIG;
  }
  //----------------------------------------------------------------------------
  /** \return SD card error data. */
  uint8_t sdErrorData() {return m_card ? m_card->errorData() : 0;}
    1c58:	4601      	mov	r1, r0
    1c5a:	e7e8      	b.n	1c2e <SdBase<FsVolume>::initErrorPrint(Print*)+0xce>
    1c5c:	20000390 	.word	0x20000390
    1c60:	200003fc 	.word	0x200003fc
    1c64:	200003a0 	.word	0x200003a0
    1c68:	200003c4 	.word	0x200003c4
    1c6c:	200003b8 	.word	0x200003b8
    1c70:	200003f8 	.word	0x200003f8
    1c74:	00000000 	.word	0x00000000

00001c78 <initSD_card()>:
		Serial.print('0');
	Serial.print(digits);
}

void initSD_card()
{
    1c78:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   * \param[in] config SDIO configuration.
   * \return generic card pointer or nullptr if SDIO is not supported.
   */
  SdCard* newCard(SdioConfig config) {
#if HAS_SDIO_CLASS
    m_sdioCard.begin(config);
    1c7c:	4d4c      	ldr	r5, [pc, #304]	; (1db0 <initSD_card()+0x138>)
    1c7e:	b093      	sub	sp, #76	; 0x4c
    1c80:	f04f 0100 	mov.w	r1, #0
    1c84:	f505 6492 	add.w	r4, r5, #1168	; 0x490
    1c88:	4620      	mov	r0, r4
    1c8a:	f005 ff37 	bl	7afc <SdioCard::begin(SdioConfig)>
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    return m_card && !m_card->errorCode();
    1c8e:	4620      	mov	r0, r4
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool cardBegin(SdioConfig sdioConfig) {
    m_card = m_cardFactory.newCard(sdioConfig);
    1c90:	f8c5 448c 	str.w	r4, [r5, #1164]	; 0x48c
    return m_card && !m_card->errorCode();
    1c94:	f005 faa6 	bl	71e4 <SdioCard::errorCode() const>
    1c98:	b130      	cbz	r0, 1ca8 <initSD_card()+0x30>
  /** %Print error info and halt.
   *
   * \param[in] pr Print destination.
   */
  void initErrorHalt(print_t* pr) {
    initErrorPrint(pr);
    1c9a:	4946      	ldr	r1, [pc, #280]	; (1db4 <initSD_card()+0x13c>)
    1c9c:	4844      	ldr	r0, [pc, #272]	; (1db0 <initSD_card()+0x138>)
    1c9e:	f7ff ff5f 	bl	1b60 <SdBase<FsVolume>::initErrorPrint(Print*)>
  }
}
#elif defined(ARDUINO)
inline void SysCall::yield() {
  // Use the external Arduino yield() function.
  ::yield();
    1ca2:	f008 fc37 	bl	a514 <yield>
    1ca6:	e7fc      	b.n	1ca2 <initSD_card()+0x2a>
    1ca8:	4604      	mov	r4, r0
   *
   * \param[in] sdioConfig SDIO configuration.
   * \return true for success or false for failure.
   */
  bool begin(SdioConfig sdioConfig) {
    return cardBegin(sdioConfig) && Vol::begin(m_card);
    1caa:	f8d5 148c 	ldr.w	r1, [r5, #1164]	; 0x48c
    1cae:	4628      	mov	r0, r5
    1cb0:	f005 f96e 	bl	6f90 <FsVolume::begin(BlockDeviceInterface*)>
    1cb4:	2800      	cmp	r0, #0
    1cb6:	d0f0      	beq.n	1c9a <initSD_card()+0x22>
	// Initialize the SD.
	if (!sd.begin(SD_CONFIG)) {
		sd.initErrorHalt(&Serial);
	}
	// Open or create file - truncate existing file.
	char file_name[50] = { "" };
    1cb8:	222e      	movs	r2, #46	; 0x2e
    1cba:	4621      	mov	r1, r4
    1cbc:	a806      	add	r0, sp, #24
    1cbe:	9405      	str	r4, [sp, #20]
    1cc0:	f009 fbb4 	bl	b42c <memset>
	//String fileName = "CANLOG_" + String(hour()) + String(minute()) + String(second()) + String(day()) + String(month()) + String(year());
	sprintf(file_name, "log_%02d%02d%02d_%02d%02d%04d", hour(), minute(), second(), day(), month(), year());
    1cc4:	f001 f8aa 	bl	2e1c <hour()>
    1cc8:	4606      	mov	r6, r0
    1cca:	f001 f8b7 	bl	2e3c <minute()>
    1cce:	4680      	mov	r8, r0
    1cd0:	f001 f8c4 	bl	2e5c <second()>
    1cd4:	4681      	mov	r9, r0
    1cd6:	f001 f8d1 	bl	2e7c <day()>
    1cda:	4605      	mov	r5, r0
    1cdc:	f001 f8de 	bl	2e9c <month()>
    1ce0:	4607      	mov	r7, r0
    1ce2:	f001 f8eb 	bl	2ebc <year()>
    1ce6:	4643      	mov	r3, r8
    1ce8:	4632      	mov	r2, r6
    1cea:	9003      	str	r0, [sp, #12]
    1cec:	4932      	ldr	r1, [pc, #200]	; (1db8 <initSD_card()+0x140>)
    1cee:	a805      	add	r0, sp, #20
    1cf0:	f8cd 9000 	str.w	r9, [sp]
    1cf4:	9702      	str	r7, [sp, #8]
    1cf6:	9501      	str	r5, [sp, #4]
    1cf8:	f009 fdec 	bl	b8d4 <sprintf>
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    1cfc:	210a      	movs	r1, #10
    1cfe:	482f      	ldr	r0, [pc, #188]	; (1dbc <initSD_card()+0x144>)
    1d00:	f008 fa1e 	bl	a140 <usb_serial_write>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    1d04:	a805      	add	r0, sp, #20
    1d06:	f009 fe1b 	bl	b940 <strlen>
    1d0a:	4601      	mov	r1, r0
    1d0c:	a805      	add	r0, sp, #20
    1d0e:	f008 fa17 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1d12:	4828      	ldr	r0, [pc, #160]	; (1db4 <initSD_card()+0x13c>)
    1d14:	f008 fad4 	bl	a2c0 <Print::println()>
	Serial.print("FileName: ");
	Serial.println(file_name);
	strncpy(disp_msg_3, file_name, 19);
    1d18:	a905      	add	r1, sp, #20
    1d1a:	2213      	movs	r2, #19
    1d1c:	4828      	ldr	r0, [pc, #160]	; (1dc0 <initSD_card()+0x148>)
    1d1e:	f009 fecd 	bl	babc <strncpy>
   *                  bitwise-inclusive OR of open flags.
   *
   * \return true for success or false for failure.
   */
  bool open(const char* path, oflag_t oflag = O_RDONLY) {
    return FsVolume::m_cwv && open(FsVolume::m_cwv, path, oflag);
    1d22:	4a28      	ldr	r2, [pc, #160]	; (1dc4 <initSD_card()+0x14c>)
	disp_msg_4[0] = '\0';
    1d24:	4b28      	ldr	r3, [pc, #160]	; (1dc8 <initSD_card()+0x150>)
    1d26:	6811      	ldr	r1, [r2, #0]
    1d28:	701c      	strb	r4, [r3, #0]
    1d2a:	b1d9      	cbz	r1, 1d64 <initSD_card()+0xec>
    1d2c:	4c27      	ldr	r4, [pc, #156]	; (1dcc <initSD_card()+0x154>)
    1d2e:	aa05      	add	r2, sp, #20
    1d30:	f240 6302 	movw	r3, #1538	; 0x602
    1d34:	f104 0010 	add.w	r0, r4, #16
    1d38:	f005 f8e8 	bl	6f0c <FsBaseFile::open(FsVolume*, char const*, int)>
    1d3c:	b190      	cbz	r0, 1d64 <initSD_card()+0xec>
    1d3e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
           m_xFile ? m_xFile->preAllocate(length) : false;
    1d40:	b1d0      	cbz	r0, 1d78 <initSD_card()+0x100>
   *
   * \param[in] length size of the file in bytes.
   * \return true for success or false for failure.
   */
  bool preAllocate(uint64_t length) {
    return m_fFile ? length < (1ULL << 32) && m_fFile->preAllocate(length) :
    1d42:	4923      	ldr	r1, [pc, #140]	; (1dd0 <initSD_card()+0x158>)
    1d44:	f004 f854 	bl	5df0 <FatFile::preAllocate(unsigned long)>
    1d48:	bb00      	cbnz	r0, 1d8c <initSD_card()+0x114>
    1d4a:	2113      	movs	r1, #19
    1d4c:	4821      	ldr	r0, [pc, #132]	; (1dd4 <initSD_card()+0x15c>)
    1d4e:	f008 f9f7 	bl	a140 <usb_serial_write>
    1d52:	4818      	ldr	r0, [pc, #96]	; (1db4 <initSD_card()+0x13c>)
    1d54:	f008 fab4 	bl	a2c0 <Print::println()>
	}
	// File must be pre-allocated to avoid huge
	// delays searching for free clusters.
	if (!file.preAllocate(LOG_FILE_SIZE)) {
		Serial.println("preAllocate failed\n");
		file.close();
    1d58:	481f      	ldr	r0, [pc, #124]	; (1dd8 <initSD_card()+0x160>)
    1d5a:	f005 f8c3 	bl	6ee4 <FsBaseFile::close()>
		return;
	}
	// initialize the RingBuf.
	rb.begin(&file);
}
    1d5e:	b013      	add	sp, #76	; 0x4c
    1d60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1d64:	210c      	movs	r1, #12
    1d66:	481d      	ldr	r0, [pc, #116]	; (1ddc <initSD_card()+0x164>)
    1d68:	f008 f9ea 	bl	a140 <usb_serial_write>
    1d6c:	4811      	ldr	r0, [pc, #68]	; (1db4 <initSD_card()+0x13c>)
    1d6e:	f008 faa7 	bl	a2c0 <Print::println()>
    1d72:	b013      	add	sp, #76	; 0x4c
    1d74:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
           m_xFile ? m_xFile->preAllocate(length) : false;
    1d78:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
    1d7a:	2800      	cmp	r0, #0
    1d7c:	d0e5      	beq.n	1d4a <initSD_card()+0xd2>
    1d7e:	a30a      	add	r3, pc, #40	; (adr r3, 1da8 <initSD_card()+0x130>)
    1d80:	e9d3 2300 	ldrd	r2, r3, [r3]
    1d84:	f003 fa7e 	bl	5284 <ExFatFile::preAllocate(unsigned long long)>
		Serial.println("open failed\n");
		return;
	}
	// File must be pre-allocated to avoid huge
	// delays searching for free clusters.
	if (!file.preAllocate(LOG_FILE_SIZE)) {
    1d88:	2800      	cmp	r0, #0
    1d8a:	d0de      	beq.n	1d4a <initSD_card()+0xd2>
  /**
   * Initialize RingBuf.
   * \param[in] file Underlying file.
   */
  void begin(F* file) {
    m_file = file;
    1d8c:	4b14      	ldr	r3, [pc, #80]	; (1de0 <initSD_card()+0x168>)
    m_count = 0;
    1d8e:	2200      	movs	r2, #0
  /**
   * Initialize RingBuf.
   * \param[in] file Underlying file.
   */
  void begin(F* file) {
    m_file = file;
    1d90:	4e14      	ldr	r6, [pc, #80]	; (1de4 <initSD_card()+0x16c>)
    m_count = 0;
    1d92:	4d15      	ldr	r5, [pc, #84]	; (1de8 <initSD_card()+0x170>)
    m_head = 0;
    1d94:	4815      	ldr	r0, [pc, #84]	; (1dec <initSD_card()+0x174>)
    m_tail = 0;
    1d96:	4916      	ldr	r1, [pc, #88]	; (1df0 <initSD_card()+0x178>)
  /**
   * Initialize RingBuf.
   * \param[in] file Underlying file.
   */
  void begin(F* file) {
    m_file = file;
    1d98:	519c      	str	r4, [r3, r6]
    m_count = 0;
    1d9a:	515a      	str	r2, [r3, r5]
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    1d9c:	711a      	strb	r2, [r3, #4]
    m_head = 0;
    1d9e:	501a      	str	r2, [r3, r0]
    m_tail = 0;
    1da0:	505a      	str	r2, [r3, r1]
		file.close();
		return;
	}
	// initialize the RingBuf.
	rb.begin(&file);
}
    1da2:	b013      	add	sp, #76	; 0x4c
    1da4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    1da8:	08f0d180 	.word	0x08f0d180
    1dac:	00000000 	.word	0x00000000
    1db0:	20036358 	.word	0x20036358
    1db4:	20001160 	.word	0x20001160
    1db8:	20000420 	.word	0x20000420
    1dbc:	20000440 	.word	0x20000440
    1dc0:	20001088 	.word	0x20001088
    1dc4:	20036c48 	.word	0x20036c48
    1dc8:	2000105c 	.word	0x2000105c
    1dcc:	20004228 	.word	0x20004228
    1dd0:	08f0d180 	.word	0x08f0d180
    1dd4:	2000044c 	.word	0x2000044c
    1dd8:	20004238 	.word	0x20004238
    1ddc:	20000410 	.word	0x20000410
    1de0:	20004280 	.word	0x20004280
    1de4:	00032008 	.word	0x00032008
    1de8:	0003200c 	.word	0x0003200c
    1dec:	00032010 	.word	0x00032010
    1df0:	00032014 	.word	0x00032014

00001df4 <startLogging()>:
	sprintf(disp_msg_4, "FileSize: %ld", (uint32_t)file.fileSize());
	file.close();
}

void startLogging()
{
    1df4:	b570      	push	{r4, r5, r6, lr}
    1df6:	4d0e      	ldr	r5, [pc, #56]	; (1e30 <startLogging()+0x3c>)
	log_enable = true;
    1df8:	2601      	movs	r6, #1
    1dfa:	4b0e      	ldr	r3, [pc, #56]	; (1e34 <startLogging()+0x40>)
    1dfc:	210d      	movs	r1, #13
    1dfe:	4628      	mov	r0, r5
	Serial.println("Start Logging");
	strcpy(disp_msg_2, "Start Logging");
    1e00:	4c0d      	ldr	r4, [pc, #52]	; (1e38 <startLogging()+0x44>)
	file.close();
}

void startLogging()
{
	log_enable = true;
    1e02:	701e      	strb	r6, [r3, #0]
    1e04:	f008 f99c 	bl	a140 <usb_serial_write>
	size_t print(const Printable &obj)		{ return obj.printTo(*this); }
	size_t println(void);
	size_t println(const String &s)			{ return print(s) + println(); }
	size_t println(char c)				{ return print(c) + println(); }
	size_t println(const char s[])			{ return print(s) + println(); }
	size_t println(const __FlashStringHelper *f)	{ return print(f) + println(); }
    1e08:	480c      	ldr	r0, [pc, #48]	; (1e3c <startLogging()+0x48>)
    1e0a:	f008 fa59 	bl	a2c0 <Print::println()>
	Serial.println("Start Logging");
	strcpy(disp_msg_2, "Start Logging");
    1e0e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
    1e12:	c407      	stmia	r4!, {r0, r1, r2}
	digitalWrite(LED_PIN, HIGH);
    1e14:	4631      	mov	r1, r6
    1e16:	200d      	movs	r0, #13

void startLogging()
{
	log_enable = true;
	Serial.println("Start Logging");
	strcpy(disp_msg_2, "Start Logging");
    1e18:	8023      	strh	r3, [r4, #0]
	digitalWrite(LED_PIN, HIGH);
    1e1a:	f007 f8e3 	bl	8fe4 <digitalWrite>
	elapsedMicros & operator = (const elapsedMicros &rhs) { us = rhs.us; return *this; }
	elapsedMicros & operator = (unsigned long val) { us = micros() - val; return *this; }
    1e1e:	f007 f87b 	bl	8f18 <micros>
    1e22:	4b07      	ldr	r3, [pc, #28]	; (1e40 <startLogging()+0x4c>)
	elapselogtime = 0;
	initSD_card();
}
    1e24:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    1e28:	6018      	str	r0, [r3, #0]
	log_enable = true;
	Serial.println("Start Logging");
	strcpy(disp_msg_2, "Start Logging");
	digitalWrite(LED_PIN, HIGH);
	elapselogtime = 0;
	initSD_card();
    1e2a:	f7ff bf25 	b.w	1c78 <initSD_card()>
    1e2e:	bf00      	nop
    1e30:	20000460 	.word	0x20000460
    1e34:	20036814 	.word	0x20036814
    1e38:	20001074 	.word	0x20001074
    1e3c:	20001160 	.word	0x20001160
    1e40:	20004210 	.word	0x20004210

00001e44 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>:
#endif
  FLEXCANb_IFLAG1(_bus) = value;
}

FCTP_FUNC void FCTP_OPT::writeIFLAGBit(uint8_t mb_num) {
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1e44:	291f      	cmp	r1, #31
FCTP_FUNC void FCTP_OPT::writeIMASKBit(uint8_t mb_num, bool set) {
  if ( mb_num < 32 ) (( set ) ? FLEXCANb_IMASK1(_bus) |= (1UL << mb_num) : FLEXCANb_IMASK1(_bus) &= ~(1UL << mb_num));
  else (( set ) ? FLEXCANb_IMASK2(_bus) |= (1UL << (mb_num - 32)) : FLEXCANb_IMASK2(_bus) &= ~(1UL << (mb_num - 32)));
}

FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
    1e46:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    1e4a:	460e      	mov	r6, r1
    1e4c:	4690      	mov	r8, r2
#endif
  FLEXCANb_IFLAG1(_bus) = value;
}

FCTP_FUNC void FCTP_OPT::writeIFLAGBit(uint8_t mb_num) {
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1e4e:	d973      	bls.n	1f38 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0xf4>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    1e50:	493f      	ldr	r1, [pc, #252]	; (1f50 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x10c>)
    1e52:	f1a6 0020 	sub.w	r0, r6, #32
    1e56:	2301      	movs	r3, #1
    1e58:	680a      	ldr	r2, [r1, #0]
    1e5a:	4083      	lsls	r3, r0
    1e5c:	4313      	orrs	r3, r2
    1e5e:	600b      	str	r3, [r1, #0]
}

FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
  writeIFLAGBit(mb_num);
  uint32_t code = 0;
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1e60:	4f3c      	ldr	r7, [pc, #240]	; (1f54 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x110>)
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1e62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1e66:	f898 3007 	ldrb.w	r3, [r8, #7]
}

FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
  writeIFLAGBit(mb_num);
  uint32_t code = 0;
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1e6a:	4437      	add	r7, r6
    1e6c:	013f      	lsls	r7, r7, #4
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1e6e:	603a      	str	r2, [r7, #0]
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1e70:	2b00      	cmp	r3, #0
    1e72:	d052      	beq.n	1f1a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0xd6>
    1e74:	f8d8 3000 	ldr.w	r3, [r8]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1e78:	f898 1008 	ldrb.w	r1, [r8, #8]
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
  writeIFLAGBit(mb_num);
  uint32_t code = 0;
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1e7c:	f023 4360 	bic.w	r3, r3, #3758096384	; 0xe0000000
  if ( msg.flags.remote ) code |= (1UL << 20);
    1e80:	2900      	cmp	r1, #0
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
  writeIFLAGBit(mb_num);
  uint32_t code = 0;
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1e82:	607b      	str	r3, [r7, #4]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1e84:	bf14      	ite	ne
    1e86:	f44f 03e0 	movne.w	r3, #7340032	; 0x700000
    1e8a:	f44f 03c0 	moveq.w	r3, #6291456	; 0x600000
    1e8e:	f8d8 200c 	ldr.w	r2, [r8, #12]
    1e92:	ba12      	rev	r2, r2
  if ( msg.flags.extended ) code |= (3UL << 21);
  for ( uint8_t i = 0; i < (8 >> 2); i++ ) mbxAddr[2 + i] = (msg.buf[0 + i * 4] << 24) | (msg.buf[1 + i * 4] << 16) | (msg.buf[2 + i * 4] << 8) | msg.buf[3 + i * 4];
    1e94:	60ba      	str	r2, [r7, #8]
    1e96:	f8d8 2010 	ldr.w	r2, [r8, #16]
    1e9a:	ba12      	rev	r2, r2
    1e9c:	60fa      	str	r2, [r7, #12]
  code |= msg.len << 16;
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);
    1e9e:	f898 200b 	ldrb.w	r2, [r8, #11]
    1ea2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
    1ea6:	f043 6340 	orr.w	r3, r3, #201326592	; 0xc000000
    1eaa:	603b      	str	r3, [r7, #0]

  if ( msg.flags.remote ) {
    1eac:	b399      	cbz	r1, 1f16 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0xd2>
    1eae:	2301      	movs	r3, #1
    1eb0:	f1a6 0a20 	sub.w	sl, r6, #32
    1eb4:	f1c6 0220 	rsb	r2, r6, #32
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    1eb8:	f8df 80a0 	ldr.w	r8, [pc, #160]	; 1f5c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x118>
    1ebc:	fa03 f10a 	lsl.w	r1, r3, sl
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    1ec0:	f8df c08c 	ldr.w	ip, [pc, #140]	; 1f50 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x10c>
    1ec4:	fa23 f202 	lsr.w	r2, r3, r2
    1ec8:	f8d8 9000 	ldr.w	r9, [r8]
    1ecc:	f8df e090 	ldr.w	lr, [pc, #144]	; 1f60 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x11c>
    1ed0:	fa03 f006 	lsl.w	r0, r3, r6
    1ed4:	4311      	orrs	r1, r2
    1ed6:	f8dc 3000 	ldr.w	r3, [ip]
  code |= msg.len << 16;
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);

  if ( msg.flags.remote ) {
    uint32_t timeout = millis();
    while ( !(readIFLAG() & (1ULL << mb_num)) && (millis() - timeout < 20) );
    1eda:	2400      	movs	r4, #0
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    1edc:	f8de b000 	ldr.w	fp, [lr]
  code |= msg.len << 16;
  mbxAddr[0] = code | FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_ONCE);

  if ( msg.flags.remote ) {
    uint32_t timeout = millis();
    while ( !(readIFLAG() & (1ULL << mb_num)) && (millis() - timeout < 20) );
    1ee0:	400b      	ands	r3, r1
    1ee2:	ea44 020b 	orr.w	r2, r4, fp
    1ee6:	4002      	ands	r2, r0
    1ee8:	4313      	orrs	r3, r2
    1eea:	d105      	bne.n	1ef8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0xb4>
    1eec:	f8d8 3000 	ldr.w	r3, [r8]
    1ef0:	ebc9 0303 	rsb	r3, r9, r3
    1ef4:	2b13      	cmp	r3, #19
    1ef6:	d9ee      	bls.n	1ed6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x92>
#endif
  FLEXCANb_IFLAG1(_bus) = value;
}

FCTP_FUNC void FCTP_OPT::writeIFLAGBit(uint8_t mb_num) {
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    1ef8:	2e1f      	cmp	r6, #31
    1efa:	d921      	bls.n	1f40 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0xfc>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    1efc:	4914      	ldr	r1, [pc, #80]	; (1f50 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x10c>)
    1efe:	2301      	movs	r3, #1
    1f00:	680a      	ldr	r2, [r1, #0]
    1f02:	fa03 fa0a 	lsl.w	sl, r3, sl
    1f06:	ea4a 0302 	orr.w	r3, sl, r2
    1f0a:	600b      	str	r3, [r1, #0]

  if ( msg.flags.remote ) {
    uint32_t timeout = millis();
    while ( !(readIFLAG() & (1ULL << mb_num)) && (millis() - timeout < 20) );
    writeIFLAGBit(mb_num);
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1f0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    1f10:	603b      	str	r3, [r7, #0]
  }
}
    1f12:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f16:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
  writeIFLAGBit(mb_num);
  uint32_t code = 0;
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1f1a:	f8d8 3000 	ldr.w	r3, [r8]
  if ( msg.flags.remote ) code |= (1UL << 20);
    1f1e:	f898 1008 	ldrb.w	r1, [r8, #8]
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
  writeIFLAGBit(mb_num);
  uint32_t code = 0;
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1f22:	049b      	lsls	r3, r3, #18
    1f24:	4a0c      	ldr	r2, [pc, #48]	; (1f58 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x114>)
  if ( msg.flags.remote ) code |= (1UL << 20);
    1f26:	2900      	cmp	r1, #0
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
  writeIFLAGBit(mb_num);
  uint32_t code = 0;
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1f28:	ea02 0203 	and.w	r2, r2, r3
  if ( msg.flags.remote ) code |= (1UL << 20);
    1f2c:	bf0c      	ite	eq
    1f2e:	2300      	moveq	r3, #0
    1f30:	f44f 1380 	movne.w	r3, #1048576	; 0x100000
FCTP_FUNC void FCTP_OPT::writeTxMailbox(uint8_t mb_num, const CAN_message_t &msg) {
  writeIFLAGBit(mb_num);
  uint32_t code = 0;
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
  mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  mbxAddr[1] = (( msg.flags.extended ) ? ( msg.id & FLEXCAN_MB_ID_EXT_MASK ) : FLEXCAN_MB_ID_IDSTD(msg.id));
    1f34:	607a      	str	r2, [r7, #4]
    1f36:	e7aa      	b.n	1e8e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x4a>
    1f38:	4608      	mov	r0, r1
    1f3a:	f7fe fa6d 	bl	418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]>
    1f3e:	e78f      	b.n	1e60 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)+0x1c>
    1f40:	4630      	mov	r0, r6
    1f42:	f7fe fa69 	bl	418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]>

  if ( msg.flags.remote ) {
    uint32_t timeout = millis();
    while ( !(readIFLAG() & (1ULL << mb_num)) && (millis() - timeout < 20) );
    writeIFLAGBit(mb_num);
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
    1f46:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
    1f4a:	603b      	str	r3, [r7, #0]
  }
}
    1f4c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    1f50:	401d402c 	.word	0x401d402c
    1f54:	0401d408 	.word	0x0401d408
    1f58:	1ffc0000 	.word	0x1ffc0000
    1f5c:	20036ca0 	.word	0x20036ca0
    1f60:	401d4030 	.word	0x401d4030

00001f64 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)>:

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1f64:	4b1a      	ldr	r3, [pc, #104]	; (1fd0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x6c>)
    1f66:	681b      	ldr	r3, [r3, #0]
  uint8_t buf[sizeof(CAN_message_t)];
  memmove(buf, &msg, sizeof(msg));
  txBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC int FCTP_OPT::write(FLEXCAN_MAILBOX mb_num, const CAN_message_t &msg) {
    1f68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1f6c:	4690      	mov	r8, r2
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1f6e:	009a      	lsls	r2, r3, #2
  uint8_t buf[sizeof(CAN_message_t)];
  memmove(buf, &msg, sizeof(msg));
  txBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC int FCTP_OPT::write(FLEXCAN_MAILBOX mb_num, const CAN_message_t &msg) {
    1f70:	4606      	mov	r6, r0
    1f72:	460f      	mov	r7, r1
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    1f74:	d41c      	bmi.n	1fb0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x4c>
  txBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC int FCTP_OPT::write(FLEXCAN_MAILBOX mb_num, const CAN_message_t &msg) {
  if ( mb_num < mailboxOffset() ) return 0; /* FIFO doesn't transmit */
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    1f76:	4817      	ldr	r0, [pc, #92]	; (1fd4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x70>)
    1f78:	4438      	add	r0, r7
    1f7a:	0100      	lsls	r0, r0, #4
  if ( !((FLEXCAN_get_code(mbxAddr[0])) >> 3) ) return 0; /* not a transmit mailbox */
    1f7c:	6803      	ldr	r3, [r0, #0]
    1f7e:	011b      	lsls	r3, r3, #4
    1f80:	d51a      	bpl.n	1fb8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x54>
  if ( msg.seq && FLEXCAN_get_code(mbxAddr[0]) != FLEXCAN_MB_CODE_TX_INACTIVE ) return 0; /* non blocking resend sequential frames */
    1f82:	f898 3016 	ldrb.w	r3, [r8, #22]
    1f86:	b9d3      	cbnz	r3, 1fbe <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x5a>
    1f88:	4c13      	ldr	r4, [pc, #76]	; (1fd8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x74>)
    1f8a:	6825      	ldr	r5, [r4, #0]
    1f8c:	e003      	b.n	1f96 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x32>
    1f8e:	6823      	ldr	r3, [r4, #0]
  uint32_t timeout = millis();
  while ( FLEXCAN_get_code(mbxAddr[0]) != FLEXCAN_MB_CODE_TX_INACTIVE ) {
    if ( millis() - timeout > 100 ) return 0;
    1f90:	1b5b      	subs	r3, r3, r5
    1f92:	2b64      	cmp	r3, #100	; 0x64
    1f94:	d810      	bhi.n	1fb8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x54>
  if ( mb_num < mailboxOffset() ) return 0; /* FIFO doesn't transmit */
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
  if ( !((FLEXCAN_get_code(mbxAddr[0])) >> 3) ) return 0; /* not a transmit mailbox */
  if ( msg.seq && FLEXCAN_get_code(mbxAddr[0]) != FLEXCAN_MB_CODE_TX_INACTIVE ) return 0; /* non blocking resend sequential frames */
  uint32_t timeout = millis();
  while ( FLEXCAN_get_code(mbxAddr[0]) != FLEXCAN_MB_CODE_TX_INACTIVE ) {
    1f96:	6803      	ldr	r3, [r0, #0]
    1f98:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1f9c:	2b08      	cmp	r3, #8
    1f9e:	d1f6      	bne.n	1f8e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x2a>
    if ( millis() - timeout > 100 ) return 0;
  }
  writeTxMailbox(mb_num, msg);
    1fa0:	4630      	mov	r0, r6
    1fa2:	4642      	mov	r2, r8
    1fa4:	4639      	mov	r1, r7
    1fa6:	f7ff ff4d 	bl	1e44 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
  return 1; // transmit entry accepted //
    1faa:	2001      	movs	r0, #1
    1fac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fb0:	f7fe f9d8 	bl	364 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]>
  memmove(buf, &msg, sizeof(msg));
  txBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC int FCTP_OPT::write(FLEXCAN_MAILBOX mb_num, const CAN_message_t &msg) {
  if ( mb_num < mailboxOffset() ) return 0; /* FIFO doesn't transmit */
    1fb4:	4287      	cmp	r7, r0
    1fb6:	d2de      	bcs.n	1f76 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x12>
    1fb8:	2000      	movs	r0, #0
    1fba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
  if ( !((FLEXCAN_get_code(mbxAddr[0])) >> 3) ) return 0; /* not a transmit mailbox */
  if ( msg.seq && FLEXCAN_get_code(mbxAddr[0]) != FLEXCAN_MB_CODE_TX_INACTIVE ) return 0; /* non blocking resend sequential frames */
    1fbe:	6803      	ldr	r3, [r0, #0]
    1fc0:	f3c3 6303 	ubfx	r3, r3, #24, #4
    1fc4:	2b08      	cmp	r3, #8
    1fc6:	d0df      	beq.n	1f88 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)+0x24>
  memmove(buf, &msg, sizeof(msg));
  txBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC int FCTP_OPT::write(FLEXCAN_MAILBOX mb_num, const CAN_message_t &msg) {
  if ( mb_num < mailboxOffset() ) return 0; /* FIFO doesn't transmit */
    1fc8:	2000      	movs	r0, #0
    1fca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1fce:	bf00      	nop
    1fd0:	401d4000 	.word	0x401d4000
    1fd4:	0401d408 	.word	0x0401d408
    1fd8:	20036ca0 	.word	0x20036ca0

00001fdc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>:
        T readBytes(T *buffer, uint16_t length);
        void flush() { clear(); }
        void clear() { head = tail = _available = 0; }
        void print(const char *p);
        void println(const char *p);
        uint16_t size() { return _available; }
    1fdc:	8903      	ldrh	r3, [r0, #8]
    1fde:	b29b      	uxth	r3, r3

FCTP_FUNC void FCTP_OPT::onReceive(_MB_ptr handler) {
  _mainHandler = handler;
}

FCTP_FUNC uint64_t FCTP_OPT::events() {
    1fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1fe4:	4604      	mov	r4, r0
    1fe6:	b08c      	sub	sp, #48	; 0x30
  if ( rxBuffer.size() ) {
    1fe8:	2b00      	cmp	r3, #0
    1fea:	d149      	bne.n	2080 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xa4>
    1fec:	f641 350a 	movw	r5, #6922	; 0x1b0a
    1ff0:	46a8      	mov	r8, r5
    1ff2:	4425      	add	r5, r4
    1ff4:	88ab      	ldrh	r3, [r5, #4]
    1ff6:	b29b      	uxth	r3, r3
    uint8_t buf[sizeof(CAN_message_t)];
    rxBuffer.pop_front(buf, sizeof(CAN_message_t));
    memmove(&frame, buf, sizeof(frame));
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
  }
  if ( txBuffer.size() ) {
    1ff8:	b96b      	cbnz	r3, 2016 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x3a>
    1ffa:	8920      	ldrh	r0, [r4, #8]
    uint8_t buf[sizeof(CAN_message_t)];
    txBuffer.peek_front(buf, sizeof(CAN_message_t));
    memmove(&frame, buf, sizeof(frame));
    if ( write((FLEXCAN_MAILBOX)getFirstTxBox(), frame) ) txBuffer.pop_front();
  }
  return (uint64_t)(rxBuffer.size() << 12) | txBuffer.size();
    1ffc:	2300      	movs	r3, #0
    1ffe:	88aa      	ldrh	r2, [r5, #4]
    2000:	b280      	uxth	r0, r0
    2002:	b292      	uxth	r2, r2
    2004:	0300      	lsls	r0, r0, #12
    2006:	b292      	uxth	r2, r2
}
    2008:	ea42 0200 	orr.w	r2, r2, r0
    200c:	4610      	mov	r0, r2
    200e:	4619      	mov	r1, r3
    2010:	b00c      	add	sp, #48	; 0x30
    2012:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}


template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::peek_front(T *buffer, uint16_t length, uint32_t entry) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head+entry)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2016:	f834 3008 	ldrh.w	r3, [r4, r8]
    201a:	261a      	movs	r6, #26
    201c:	af06      	add	r7, sp, #24
  }
  if ( txBuffer.size() ) {
    CAN_message_t frame;
    uint8_t buf[sizeof(CAN_message_t)];
    txBuffer.peek_front(buf, sizeof(CAN_message_t));
    memmove(&frame, buf, sizeof(frame));
    201e:	46ee      	mov	lr, sp
    2020:	f003 030f 	and.w	r3, r3, #15
    2024:	46bc      	mov	ip, r7
    2026:	fb06 5603 	mla	r6, r6, r3, r5
    202a:	3612      	adds	r6, #18
    202c:	f856 0f06 	ldr.w	r0, [r6, #6]!
    2030:	6871      	ldr	r1, [r6, #4]
    2032:	68b2      	ldr	r2, [r6, #8]
    2034:	68f3      	ldr	r3, [r6, #12]
    2036:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    2038:	6930      	ldr	r0, [r6, #16]
    203a:	6971      	ldr	r1, [r6, #20]
    203c:	c703      	stmia	r7!, {r0, r1}
    203e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
    2042:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
    2046:	e89c 0003 	ldmia.w	ip, {r0, r1}
    204a:	e88e 0003 	stmia.w	lr, {r0, r1}
    if ( write((FLEXCAN_MAILBOX)getFirstTxBox(), frame) ) txBuffer.pop_front();
    204e:	f7fe f9af 	bl	3b0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]>
    2052:	466a      	mov	r2, sp
    2054:	b2c1      	uxtb	r1, r0
    2056:	4620      	mov	r0, r4
    2058:	f7ff ff84 	bl	1f64 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)>
    205c:	2800      	cmp	r0, #0
    205e:	d0cc      	beq.n	1ffa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1e>
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::read() {
  if ( multi ) {
    head = ((head + 1)&(2*_size-1));
    2060:	f834 3008 	ldrh.w	r3, [r4, r8]
    2064:	3301      	adds	r3, #1
    2066:	f003 031f 	and.w	r3, r3, #31
    206a:	f824 3008 	strh.w	r3, [r4, r8]
    if ( _available ) _available--;
    206e:	88ab      	ldrh	r3, [r5, #4]
    2070:	b29b      	uxth	r3, r3
    2072:	2b00      	cmp	r3, #0
    2074:	d0c1      	beq.n	1ffa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1e>
    2076:	88ab      	ldrh	r3, [r5, #4]
    2078:	3b01      	subs	r3, #1
    207a:	b29b      	uxth	r3, r3
    207c:	80ab      	strh	r3, [r5, #4]
    207e:	e7bc      	b.n	1ffa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x1e>
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2080:	4602      	mov	r2, r0
    2082:	251a      	movs	r5, #26
    2084:	ae06      	add	r6, sp, #24
    2086:	f832 3f04 	ldrh.w	r3, [r2, #4]!
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::read() {
  if ( multi ) {
    head = ((head + 1)&(2*_size-1));
    208a:	8887      	ldrh	r7, [r0, #4]
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    208c:	b2db      	uxtb	r3, r3
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::read() {
  if ( multi ) {
    head = ((head + 1)&(2*_size-1));
    208e:	3701      	adds	r7, #1
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2090:	fb05 2503 	mla	r5, r5, r3, r2
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::read() {
  if ( multi ) {
    head = ((head + 1)&(2*_size-1));
    2094:	f3c7 0708 	ubfx	r7, r7, #0, #9
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    2098:	f505 7581 	add.w	r5, r5, #258	; 0x102
    209c:	f855 0f06 	ldr.w	r0, [r5, #6]!
    20a0:	6869      	ldr	r1, [r5, #4]
    20a2:	68aa      	ldr	r2, [r5, #8]
    20a4:	68eb      	ldr	r3, [r5, #12]
    20a6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    20a8:	6928      	ldr	r0, [r5, #16]
  _mainHandler = handler;
}

FCTP_FUNC uint64_t FCTP_OPT::events() {
  if ( rxBuffer.size() ) {
    CAN_message_t frame;
    20aa:	2300      	movs	r3, #0
    20ac:	6969      	ldr	r1, [r5, #20]
    20ae:	2508      	movs	r5, #8
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::read() {
  if ( multi ) {
    head = ((head + 1)&(2*_size-1));
    20b0:	80a7      	strh	r7, [r4, #4]
    if ( _available ) _available--;
    20b2:	8922      	ldrh	r2, [r4, #8]
    20b4:	9302      	str	r3, [sp, #8]
    20b6:	b292      	uxth	r2, r2
    20b8:	9300      	str	r3, [sp, #0]
    20ba:	9301      	str	r3, [sp, #4]
    20bc:	9303      	str	r3, [sp, #12]
    20be:	9304      	str	r3, [sp, #16]
    20c0:	9305      	str	r3, [sp, #20]
    20c2:	f88d 500b 	strb.w	r5, [sp, #11]
}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::readBytes(T *buffer, uint16_t length) {
  if ( multi ) {
    memmove(&buffer[0],&_cabuf[((head)&(_size-1))][2],length*sizeof(T)); // update CA buffer
    20c6:	c603      	stmia	r6!, {r0, r1}

template<typename T, uint16_t _size, uint16_t multi>
T Circular_Buffer<T,_size,multi>::read() {
  if ( multi ) {
    head = ((head + 1)&(2*_size-1));
    if ( _available ) _available--;
    20c8:	b11a      	cbz	r2, 20d2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0xf6>
    20ca:	8923      	ldrh	r3, [r4, #8]
    20cc:	3b01      	subs	r3, #1
    20ce:	b29b      	uxth	r3, r3
    20d0:	8123      	strh	r3, [r4, #8]
    uint8_t buf[sizeof(CAN_message_t)];
    rxBuffer.pop_front(buf, sizeof(CAN_message_t));
    memmove(&frame, buf, sizeof(frame));
    20d2:	ad06      	add	r5, sp, #24
    20d4:	466e      	mov	r6, sp
    20d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    20d8:	c60f      	stmia	r6!, {r0, r1, r2, r3}
    20da:	e895 0003 	ldmia.w	r5, {r0, r1}
    20de:	e886 0003 	stmia.w	r6, {r0, r1}
    mbCallbacks((FLEXCAN_MAILBOX)frame.mb, frame);
    20e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
}
#endif


FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
  if ( mb_num == FIFO ) {
    20e6:	2b63      	cmp	r3, #99	; 0x63
    20e8:	d010      	beq.n	210c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x130>
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    if ( _mainHandler ) _mainHandler(msg);
    return;
  }
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
    20ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
    20ee:	f242 52c4 	movw	r2, #9668	; 0x25c4
    20f2:	589b      	ldr	r3, [r3, r2]
    20f4:	b10b      	cbz	r3, 20fa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x11e>
    20f6:	4668      	mov	r0, sp
    20f8:	4798      	blx	r3
  if ( _mainHandler ) _mainHandler(msg);
    20fa:	f242 63c4 	movw	r3, #9924	; 0x26c4
    20fe:	58e3      	ldr	r3, [r4, r3]
    2100:	2b00      	cmp	r3, #0
    2102:	f43f af73 	beq.w	1fec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x10>
    2106:	4668      	mov	r0, sp
    2108:	4798      	blx	r3
    210a:	e76f      	b.n	1fec <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x10>
#endif


FCTP_FUNC void FCTP_OPT::mbCallbacks(const FLEXCAN_MAILBOX &mb_num, const CAN_message_t &msg) {
  if ( mb_num == FIFO ) {
    if ( _mbHandlers[0] ) _mbHandlers[0](msg);
    210c:	f242 53c4 	movw	r3, #9668	; 0x25c4
    2110:	58e3      	ldr	r3, [r4, r3]
    2112:	2b00      	cmp	r3, #0
    2114:	d1ef      	bne.n	20f6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x11a>
    2116:	e7f0      	b.n	20fa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()+0x11e>

00002118 <loop>:
}


void loop() {
    2118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	Can0.events();
    211c:	4822      	ldr	r0, [pc, #136]	; (21a8 <loop+0x90>)
    211e:	f7ff ff5d 	bl	1fdc <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::events()>
	logButton.update();
    2122:	4822      	ldr	r0, [pc, #136]	; (21ac <loop+0x94>)
    2124:	f000 ff1e 	bl	2f64 <Bounce::update()>
	if (logButton.fallingEdge()) {
    2128:	4820      	ldr	r0, [pc, #128]	; (21ac <loop+0x94>)
    212a:	f000 ff3b 	bl	2fa4 <Bounce::fallingEdge()>
    212e:	b128      	cbz	r0, 213c <loop+0x24>
		if (!log_enable)
    2130:	4f1f      	ldr	r7, [pc, #124]	; (21b0 <loop+0x98>)
    2132:	783b      	ldrb	r3, [r7, #0]
    2134:	2b00      	cmp	r3, #0
    2136:	d134      	bne.n	21a2 <loop+0x8a>
		{
			startLogging();
    2138:	f7ff fe5c 	bl	1df4 <startLogging()>
		}

	}


	while (millis() > time_now + period) {
    213c:	4d1d      	ldr	r5, [pc, #116]	; (21b4 <loop+0x9c>)
    213e:	4e1e      	ldr	r6, [pc, #120]	; (21b8 <loop+0xa0>)
    2140:	682a      	ldr	r2, [r5, #0]
    2142:	6833      	ldr	r3, [r6, #0]
    2144:	4c1d      	ldr	r4, [pc, #116]	; (21bc <loop+0xa4>)
    2146:	4413      	add	r3, r2
    2148:	6822      	ldr	r2, [r4, #0]
    214a:	429a      	cmp	r2, r3
    214c:	d927      	bls.n	219e <loop+0x86>
    214e:	4f18      	ldr	r7, [pc, #96]	; (21b0 <loop+0x98>)
		digitalClockDisplay();
		if(log_enable)
		{
			sprintf(disp_msg_4, "FileSize: %ld", logFileSize);
    2150:	f8df 8080 	ldr.w	r8, [pc, #128]	; 21d4 <loop+0xbc>
    2154:	e006      	b.n	2164 <loop+0x4c>
    2156:	6822      	ldr	r2, [r4, #0]
		}

	}


	while (millis() > time_now + period) {
    2158:	6833      	ldr	r3, [r6, #0]
    215a:	6821      	ldr	r1, [r4, #0]
    215c:	4413      	add	r3, r2
				startLogging();
				newFileCount++;
				sprintf(disp_msg_5, "NewFileCount: %d", newFileCount);
			}
		}
		time_now = millis();
    215e:	602a      	str	r2, [r5, #0]
		}

	}


	while (millis() > time_now + period) {
    2160:	428b      	cmp	r3, r1
    2162:	d21c      	bcs.n	219e <loop+0x86>
		digitalClockDisplay();
    2164:	f7fe fe0e 	bl	d84 <digitalClockDisplay()>
		if(log_enable)
    2168:	783b      	ldrb	r3, [r7, #0]
    216a:	2b00      	cmp	r3, #0
    216c:	d0f3      	beq.n	2156 <loop+0x3e>
		{
			sprintf(disp_msg_4, "FileSize: %ld", logFileSize);
    216e:	f8d8 2000 	ldr.w	r2, [r8]
    2172:	4913      	ldr	r1, [pc, #76]	; (21c0 <loop+0xa8>)
    2174:	4813      	ldr	r0, [pc, #76]	; (21c4 <loop+0xac>)
    2176:	f009 fbad 	bl	b8d4 <sprintf>
			if (logFileSize >= LOG_FILE_SIZE_SD)
    217a:	f8d8 3000 	ldr.w	r3, [r8]
    217e:	f5b3 0f20 	cmp.w	r3, #10485760	; 0xa00000
    2182:	d3e8      	bcc.n	2156 <loop+0x3e>
			{
				stopLogging();
    2184:	f7fe fe34 	bl	df0 <stopLogging()>
				startLogging();
    2188:	f7ff fe34 	bl	1df4 <startLogging()>
				newFileCount++;
    218c:	4b0e      	ldr	r3, [pc, #56]	; (21c8 <loop+0xb0>)
				sprintf(disp_msg_5, "NewFileCount: %d", newFileCount);
    218e:	490f      	ldr	r1, [pc, #60]	; (21cc <loop+0xb4>)
			sprintf(disp_msg_4, "FileSize: %ld", logFileSize);
			if (logFileSize >= LOG_FILE_SIZE_SD)
			{
				stopLogging();
				startLogging();
				newFileCount++;
    2190:	681a      	ldr	r2, [r3, #0]
				sprintf(disp_msg_5, "NewFileCount: %d", newFileCount);
    2192:	480f      	ldr	r0, [pc, #60]	; (21d0 <loop+0xb8>)
			sprintf(disp_msg_4, "FileSize: %ld", logFileSize);
			if (logFileSize >= LOG_FILE_SIZE_SD)
			{
				stopLogging();
				startLogging();
				newFileCount++;
    2194:	3201      	adds	r2, #1
    2196:	601a      	str	r2, [r3, #0]
				sprintf(disp_msg_5, "NewFileCount: %d", newFileCount);
    2198:	f009 fb9c 	bl	b8d4 <sprintf>
    219c:	e7db      	b.n	2156 <loop+0x3e>
    219e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		{
			startLogging();
		}
		else
		{
			stopLogging();
    21a2:	f7fe fe25 	bl	df0 <stopLogging()>
    21a6:	e7c9      	b.n	213c <loop+0x24>
    21a8:	20001b3c 	.word	0x20001b3c
    21ac:	20004218 	.word	0x20004218
    21b0:	20036814 	.word	0x20036814
    21b4:	20004214 	.word	0x20004214
    21b8:	20001070 	.word	0x20001070
    21bc:	20036ca0 	.word	0x20036ca0
    21c0:	20000190 	.word	0x20000190
    21c4:	2000105c 	.word	0x2000105c
    21c8:	20004278 	.word	0x20004278
    21cc:	20000470 	.word	0x20000470
    21d0:	2000109c 	.word	0x2000109c
    21d4:	2000427c 	.word	0x2000427c

000021d8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)>:
  }
  writeTxMailbox(mb_num, msg);
  return 1; // transmit entry accepted //
}

FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    21d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( msg.seq ) {
    21dc:	7d8e      	ldrb	r6, [r1, #22]
  }
  writeTxMailbox(mb_num, msg);
  return 1; // transmit entry accepted //
}

FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
    21de:	b087      	sub	sp, #28
    21e0:	460c      	mov	r4, r1
    21e2:	4605      	mov	r5, r0
  if ( msg.seq ) {
    21e4:	bb66      	cbnz	r6, 2240 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x68>
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    21e6:	4f4a      	ldr	r7, [pc, #296]	; (2310 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x138>)
    21e8:	6839      	ldr	r1, [r7, #0]
    21ea:	f011 5100 	ands.w	r1, r1, #536870912	; 0x20000000
    21ee:	d134      	bne.n	225a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x82>
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
  if ( msg.seq ) {
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    return 1;
  }
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    21f0:	683b      	ldr	r3, [r7, #0]
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    21f2:	4b48      	ldr	r3, [pc, #288]	; (2314 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
    21f4:	440b      	add	r3, r1
    21f6:	011b      	lsls	r3, r3, #4
    21f8:	681b      	ldr	r3, [r3, #0]
    21fa:	f3c3 6303 	ubfx	r3, r3, #24, #4
    21fe:	2b08      	cmp	r3, #8
    2200:	d016      	beq.n	2230 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x58>
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
  if ( msg.seq ) {
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    return 1;
  }
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2202:	4843      	ldr	r0, [pc, #268]	; (2310 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x138>)
    2204:	e004      	b.n	2210 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x38>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2206:	6813      	ldr	r3, [r2, #0]
    2208:	f3c3 6303 	ubfx	r3, r3, #24, #4
    220c:	2b08      	cmp	r3, #8
    220e:	d00f      	beq.n	2230 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x58>
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
  if ( msg.seq ) {
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    return 1;
  }
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2210:	6803      	ldr	r3, [r0, #0]
    2212:	3101      	adds	r1, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2214:	4a3f      	ldr	r2, [pc, #252]	; (2314 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x13c>)
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
  if ( msg.seq ) {
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    return 1;
  }
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2216:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    221a:	b2c9      	uxtb	r1, r1
    221c:	3301      	adds	r3, #1
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    221e:	440a      	add	r2, r1
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
  if ( msg.seq ) {
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    return 1;
  }
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2220:	4299      	cmp	r1, r3
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    2222:	ea4f 1202 	mov.w	r2, r2, lsl #4
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
  if ( msg.seq ) {
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    return 1;
  }
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    2226:	d3ee      	bcc.n	2206 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x2e>
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
      writeTxMailbox(i, msg);
      return 1; /* transmit entry accepted */
    }
  }
  return 0; /* transmit entry failed, no mailboxes or queues available */
    2228:	2000      	movs	r0, #0
}
    222a:	b007      	add	sp, #28
    222c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    return 1;
  }
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    if ( FLEXCAN_get_code(FLEXCANb_MBn_CS(_bus, i)) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
      writeTxMailbox(i, msg);
    2230:	4628      	mov	r0, r5
    2232:	4622      	mov	r2, r4
    2234:	f7ff fe06 	bl	1e44 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeTxMailbox(unsigned char, CAN_message_t const&)>
      return 1; /* transmit entry accepted */
    2238:	2001      	movs	r0, #1
    }
  }
  return 0; /* transmit entry failed, no mailboxes or queues available */
}
    223a:	b007      	add	sp, #28
    223c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  return 1; // transmit entry accepted //
}

FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
  if ( msg.seq ) {
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    2240:	f7fe f8b6 	bl	3b0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::getFirstTxBox() [clone .isra.44]>
    2244:	4622      	mov	r2, r4
    2246:	b2c1      	uxtb	r1, r0
    2248:	4628      	mov	r0, r5
    224a:	f7ff fe8b 	bl	1f64 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(FLEXCAN_MAILBOX, CAN_message_t const&)>
    224e:	4680      	mov	r8, r0
    2250:	b168      	cbz	r0, 226e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x96>
    2252:	2001      	movs	r0, #1
      writeTxMailbox(i, msg);
      return 1; /* transmit entry accepted */
    }
  }
  return 0; /* transmit entry failed, no mailboxes or queues available */
}
    2254:	b007      	add	sp, #28
    2256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    225a:	f7fe f883 	bl	364 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]>
FCTP_FUNC int FCTP_OPT::write(const CAN_message_t &msg) {
  if ( msg.seq ) {
    if ( !write((FLEXCAN_MAILBOX)getFirstTxBox(), msg) ) struct2queueTx(msg);
    return 1;
  }
  for (uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++) {
    225e:	683b      	ldr	r3, [r7, #0]
    2260:	4601      	mov	r1, r0
    2262:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    2266:	3301      	adds	r3, #1
    2268:	4283      	cmp	r3, r0
    226a:	d8c2      	bhi.n	21f2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x1a>
    226c:	e7dc      	b.n	2228 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x50>
}

template<typename T, uint16_t _size, uint16_t multi>
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
  if ( multi ) {
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    226e:	f641 360a 	movw	r6, #6922	; 0x1b0a
    2272:	f04f 091a 	mov.w	r9, #26
  return 0; /* no messages available */
}

FCTP_FUNC void FCTP_OPT::struct2queueTx(const CAN_message_t &msg) {
  uint8_t buf[sizeof(CAN_message_t)];
  memmove(buf, &msg, sizeof(msg));
    2276:	6820      	ldr	r0, [r4, #0]
    2278:	466f      	mov	r7, sp
    227a:	442e      	add	r6, r5
    227c:	6861      	ldr	r1, [r4, #4]
    227e:	68a2      	ldr	r2, [r4, #8]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    2280:	f04f 0a18 	mov.w	sl, #24
}

template<typename T, uint16_t _size, uint16_t multi>
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
  if ( multi ) {
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    2284:	f8b6 b002 	ldrh.w	fp, [r6, #2]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    2288:	46ee      	mov	lr, sp
    228a:	68e3      	ldr	r3, [r4, #12]
}

template<typename T, uint16_t _size, uint16_t multi>
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
  if ( multi ) {
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    228c:	f641 3c0a 	movw	ip, #6922	; 0x1b0a
    2290:	f00b 0b0f 	and.w	fp, fp, #15
    2294:	fb09 6b0b 	mla	fp, r9, fp, r6
    2298:	c70f      	stmia	r7!, {r0, r1, r2, r3}
    229a:	6920      	ldr	r0, [r4, #16]
    229c:	6961      	ldr	r1, [r4, #20]
    229e:	f88b 8016 	strb.w	r8, [fp, #22]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    22a2:	8873      	ldrh	r3, [r6, #2]
    22a4:	f003 030f 	and.w	r3, r3, #15
    22a8:	fb09 6303 	mla	r3, r9, r3, r6
    22ac:	f883 a017 	strb.w	sl, [r3, #23]
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    22b0:	8873      	ldrh	r3, [r6, #2]
    22b2:	f003 030f 	and.w	r3, r3, #15
    22b6:	c703      	stmia	r7!, {r0, r1}
    22b8:	fb09 6403 	mla	r4, r9, r3, r6
    22bc:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
    22c0:	61a0      	str	r0, [r4, #24]
    22c2:	61e1      	str	r1, [r4, #28]
    22c4:	6222      	str	r2, [r4, #32]
    22c6:	6263      	str	r3, [r4, #36]	; 0x24
    22c8:	e8be 0003 	ldmia.w	lr!, {r0, r1}
    22cc:	62a0      	str	r0, [r4, #40]	; 0x28
    22ce:	62e1      	str	r1, [r4, #44]	; 0x2c
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    22d0:	8872      	ldrh	r2, [r6, #2]
    22d2:	f835 300c 	ldrh.w	r3, [r5, ip]
    22d6:	b292      	uxth	r2, r2
    22d8:	b29b      	uxth	r3, r3
    22da:	f083 0310 	eor.w	r3, r3, #16
    22de:	429a      	cmp	r2, r3
    22e0:	d00d      	beq.n	22fe <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x126>
    tail = ((tail + 1)&(2*_size-1));
    22e2:	8873      	ldrh	r3, [r6, #2]
    22e4:	3301      	adds	r3, #1
    22e6:	f003 031f 	and.w	r3, r3, #31
    22ea:	8073      	strh	r3, [r6, #2]
    if ( _available < _size ) _available++;
    22ec:	88b3      	ldrh	r3, [r6, #4]
    22ee:	b29b      	uxth	r3, r3
    22f0:	2b0f      	cmp	r3, #15
    22f2:	d8ae      	bhi.n	2252 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x7a>
    22f4:	88b3      	ldrh	r3, [r6, #4]
    22f6:	3301      	adds	r3, #1
    22f8:	b29b      	uxth	r3, r3
    22fa:	80b3      	strh	r3, [r6, #4]
    22fc:	e7a9      	b.n	2252 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x7a>
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
  if ( multi ) {
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    22fe:	f835 300c 	ldrh.w	r3, [r5, ip]
    2302:	3301      	adds	r3, #1
    2304:	f003 031f 	and.w	r3, r3, #31
    2308:	f825 300c 	strh.w	r3, [r5, ip]
    230c:	e7e9      	b.n	22e2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::write(CAN_message_t const&)+0x10a>
    230e:	bf00      	nop
    2310:	401d4000 	.word	0x401d4000
    2314:	0401d408 	.word	0x0401d408

00002318 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>:
  }
  if ( _mbHandlers[mb_num] ) _mbHandlers[mb_num](msg);
  if ( _mainHandler ) _mainHandler(msg);
}

FCTP_FUNC void FCTP_OPT::struct2queueRx(const CAN_message_t &msg) {
    2318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
}

template<typename T, uint16_t _size, uint16_t multi>
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
  if ( multi ) {
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    231c:	88c7      	ldrh	r7, [r0, #6]
    231e:	4605      	mov	r5, r0
    2320:	468e      	mov	lr, r1
    2322:	f04f 0c1a 	mov.w	ip, #26
    2326:	b086      	sub	sp, #24
    2328:	b2ff      	uxtb	r7, r7
  uint8_t buf[sizeof(CAN_message_t)];
  memmove(buf, &msg, sizeof(msg));
    232a:	6808      	ldr	r0, [r1, #0]
    232c:	f04f 0800 	mov.w	r8, #0
    2330:	6849      	ldr	r1, [r1, #4]
    2332:	fb0c 5707 	mla	r7, ip, r7, r5
    2336:	f8de 2008 	ldr.w	r2, [lr, #8]
    233a:	466c      	mov	r4, sp
    233c:	f8de 300c 	ldr.w	r3, [lr, #12]
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    2340:	466e      	mov	r6, sp
    2342:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    2344:	f8de 0010 	ldr.w	r0, [lr, #16]

template<typename T, uint16_t _size, uint16_t multi>
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
  if ( multi ) {
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    2348:	2218      	movs	r2, #24
    234a:	f8de 1014 	ldr.w	r1, [lr, #20]
}

template<typename T, uint16_t _size, uint16_t multi>
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
  if ( multi ) {
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    234e:	f887 810a 	strb.w	r8, [r7, #266]	; 0x10a
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    2352:	88eb      	ldrh	r3, [r5, #6]
    2354:	b2db      	uxtb	r3, r3
    2356:	fb0c 5303 	mla	r3, ip, r3, r5
    235a:	f883 210b 	strb.w	r2, [r3, #267]	; 0x10b
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    235e:	88ef      	ldrh	r7, [r5, #6]
    2360:	b2ff      	uxtb	r7, r7
    2362:	c403      	stmia	r4!, {r0, r1}
    2364:	fb0c 5707 	mla	r7, ip, r7, r5
    2368:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    236a:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
    236e:	f8c7 1110 	str.w	r1, [r7, #272]	; 0x110
    2372:	f8c7 2114 	str.w	r2, [r7, #276]	; 0x114
    2376:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
    237a:	ce03      	ldmia	r6!, {r0, r1}
    237c:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
    2380:	f8c7 1120 	str.w	r1, [r7, #288]	; 0x120
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    2384:	88ea      	ldrh	r2, [r5, #6]
    2386:	88ab      	ldrh	r3, [r5, #4]
    2388:	b292      	uxth	r2, r2
    238a:	b29b      	uxth	r3, r3
    238c:	f483 7380 	eor.w	r3, r3, #256	; 0x100
    2390:	429a      	cmp	r2, r3
    2392:	d00f      	beq.n	23b4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x9c>
    tail = ((tail + 1)&(2*_size-1));
    2394:	88eb      	ldrh	r3, [r5, #6]
    2396:	3301      	adds	r3, #1
    2398:	f3c3 0308 	ubfx	r3, r3, #0, #9
    239c:	80eb      	strh	r3, [r5, #6]
    if ( _available < _size ) _available++;
    239e:	892b      	ldrh	r3, [r5, #8]
    23a0:	b29b      	uxth	r3, r3
    23a2:	2bff      	cmp	r3, #255	; 0xff
    23a4:	d803      	bhi.n	23ae <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x96>
    23a6:	892b      	ldrh	r3, [r5, #8]
    23a8:	3301      	adds	r3, #1
    23aa:	b29b      	uxth	r3, r3
    23ac:	812b      	strh	r3, [r5, #8]
  rxBuffer.push_back(buf, sizeof(CAN_message_t));
}
    23ae:	b006      	add	sp, #24
    23b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
void Circular_Buffer<T,_size,multi>::write(const T *buffer, uint16_t length) {
  if ( multi ) {
    _cabuf[((tail)&(_size-1))][0] = length & 0xFF00;
    _cabuf[((tail)&(_size-1))][1] = length & 0xFF;
    memmove(_cabuf[((tail)&(_size-1))]+2,buffer,length*sizeof(T));
    if ( tail == ((head ^ _size)) ) head = ((head + 1)&(2*_size-1));
    23b4:	88ab      	ldrh	r3, [r5, #4]
    23b6:	3301      	adds	r3, #1
    23b8:	f3c3 0308 	ubfx	r3, r3, #0, #9
    23bc:	80ab      	strh	r3, [r5, #4]
    23be:	e7e9      	b.n	2394 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)+0x7c>

000023c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>:
  mb_filter_table[mb_num][4] = id4; // id4
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
  if ( !distribution ) return; /* distribution not enabled */
    23c0:	f500 5317 	add.w	r3, r0, #9664	; 0x25c0
    23c4:	781b      	ldrb	r3, [r3, #0]
    23c6:	2b00      	cmp	r3, #0
    23c8:	f000 80a0 	beq.w	250c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x14c>
  mb_filter_table[mb_num][3] = id3; // id3
  mb_filter_table[mb_num][4] = id4; // id4
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    23cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ( !distribution ) return; /* distribution not enabled */
  CAN_message_t frame = msg;
    23d0:	460f      	mov	r7, r1
  mb_filter_table[mb_num][3] = id3; // id3
  mb_filter_table[mb_num][4] = id4; // id4
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
    23d2:	b087      	sub	sp, #28
    23d4:	460d      	mov	r5, r1
    23d6:	4606      	mov	r6, r0
  if ( !distribution ) return; /* distribution not enabled */
  CAN_message_t frame = msg;
    23d8:	466c      	mov	r4, sp

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    23da:	f8df e1cc 	ldr.w	lr, [pc, #460]	; 25a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e8>
  mb_filter_table[mb_num][5] = id5; // id5
}

FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
  if ( !distribution ) return; /* distribution not enabled */
  CAN_message_t frame = msg;
    23de:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
    23e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    23e2:	e897 0003 	ldmia.w	r7, {r0, r1}
    23e6:	e884 0003 	stmia.w	r4, {r0, r1}

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    23ea:	f8de 3000 	ldr.w	r3, [lr]
    23ee:	009b      	lsls	r3, r3, #2
    23f0:	d54c      	bpl.n	248c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xcc>
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    23f2:	4b6c      	ldr	r3, [pc, #432]	; (25a4 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e4>)
    23f4:	2400      	movs	r4, #0
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
          frame.mb = FIFO;
    23f6:	f04f 0a63 	mov.w	sl, #99	; 0x63
FCTP_FUNC volatile void FCTP_OPT::frame_distribution(CAN_message_t &msg) {
  if ( !distribution ) return; /* distribution not enabled */
  CAN_message_t frame = msg;

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    23fa:	681b      	ldr	r3, [r3, #0]
    23fc:	f3c3 6903 	ubfx	r9, r3, #24, #4
    2400:	ea4f 09c9 	mov.w	r9, r9, lsl #3
    2404:	f109 0908 	add.w	r9, r9, #8
    2408:	e007      	b.n	241a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x5a>
            frame.mb = FIFO;
            struct2queueRx(frame);
          }
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    240a:	6819      	ldr	r1, [r3, #0]
    240c:	0f49      	lsrs	r1, r1, #29
    240e:	2902      	cmp	r1, #2
    2410:	f000 8089 	beq.w	2526 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x166>
    2414:	3401      	adds	r4, #1
  if ( !distribution ) return; /* distribution not enabled */
  CAN_message_t frame = msg;

  if ( FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) {
    uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    for (uint8_t i = 0; i < max_fifo_filters; i++) { /* check fifo filters */
    2416:	454c      	cmp	r4, r9
    2418:	d038      	beq.n	248c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xcc>
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
    241a:	7d2b      	ldrb	r3, [r5, #20]
    241c:	2b63      	cmp	r3, #99	; 0x63
    241e:	d035      	beq.n	248c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xcc>
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    2420:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    2424:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
    2428:	f502 53e6 	add.w	r3, r2, #7360	; 0x1cc0
    242c:	6818      	ldr	r0, [r3, #0]
    242e:	f010 4f60 	tst.w	r0, #3758096384	; 0xe0000000
    2432:	d0ef      	beq.n	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x54>

      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    2434:	6818      	ldr	r0, [r3, #0]
    2436:	0f40      	lsrs	r0, r0, #29
    2438:	2801      	cmp	r0, #1
    243a:	d1e6      	bne.n	240a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x4a>
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    243c:	681a      	ldr	r2, [r3, #0]
    243e:	79e8      	ldrb	r0, [r5, #7]
    2440:	f3c2 4200 	ubfx	r2, r2, #16, #1
    2444:	4290      	cmp	r0, r2
    2446:	d1e5      	bne.n	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x54>
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2448:	681a      	ldr	r2, [r3, #0]
    244a:	f412 7f60 	tst.w	r2, #896	; 0x380
    244e:	d0e1      	beq.n	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x54>
    2450:	461f      	mov	r7, r3
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2452:	ea4f 0b41 	mov.w	fp, r1, lsl #1
      if ( msg.mb == FIFO ) break; // don't distribute to fifo if fifo was the source
      if ( !(fifo_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters

      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
    2456:	2300      	movs	r3, #0
    2458:	e006      	b.n	2468 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xa8>
    245a:	683a      	ldr	r2, [r7, #0]
    245c:	fa5f f388 	uxtb.w	r3, r8
    2460:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    2464:	4293      	cmp	r3, r2
    2466:	d2d5      	bcs.n	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x54>
          if ( frame.id == fifo_filter_table[i][p+1] ) {
    2468:	f103 0801 	add.w	r8, r3, #1
    246c:	9a00      	ldr	r2, [sp, #0]
    246e:	eb0b 0308 	add.w	r3, fp, r8
    2472:	f503 63e6 	add.w	r3, r3, #1840	; 0x730
    2476:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    247a:	429a      	cmp	r2, r3
    247c:	d1ed      	bne.n	245a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x9a>
            frame.mb = FIFO;
            struct2queueRx(frame);
    247e:	4669      	mov	r1, sp
    2480:	4630      	mov	r0, r6

      if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
        for ( uint8_t p = 0; p < ((fifo_filter_table[i][0] & 0x380) >> 7); p++) {
          if ( frame.id == fifo_filter_table[i][p+1] ) {
            frame.mb = FIFO;
    2482:	f88d a014 	strb.w	sl, [sp, #20]
            struct2queueRx(frame);
    2486:	f7ff ff47 	bl	2318 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    248a:	e7e6      	b.n	245a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x9a>
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    248c:	4f46      	ldr	r7, [pc, #280]	; (25a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e8>)
    248e:	683c      	ldr	r4, [r7, #0]
    2490:	f014 5400 	ands.w	r4, r4, #536870912	; 0x20000000
    2494:	d13b      	bne.n	250e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x14e>
        }
      }
    } /* end of fifo scan */
  } /* end of fifo checking */

  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2496:	683b      	ldr	r3, [r7, #0]
    2498:	f8df 810c 	ldr.w	r8, [pc, #268]	; 25a8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1e8>
    249c:	e008      	b.n	24b0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xf0>
    249e:	f8d8 3000 	ldr.w	r3, [r8]
    24a2:	3401      	adds	r4, #1
    24a4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    24a8:	b2e4      	uxtb	r4, r4
    24aa:	3301      	adds	r3, #1
    24ac:	429c      	cmp	r4, r3
    24ae:	d237      	bcs.n	2520 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x160>
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    24b0:	7d2b      	ldrb	r3, [r5, #20]
    24b2:	42a3      	cmp	r3, r4
    24b4:	d0f3      	beq.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    24b6:	eb04 0144 	add.w	r1, r4, r4, lsl #1
    24ba:	eb06 02c1 	add.w	r2, r6, r1, lsl #3
    24be:	f502 53fe 	add.w	r3, r2, #8128	; 0x1fc0
    24c2:	6818      	ldr	r0, [r3, #0]
    24c4:	f010 4f60 	tst.w	r0, #3758096384	; 0xe0000000
    24c8:	d0e9      	beq.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    24ca:	6818      	ldr	r0, [r3, #0]
    24cc:	79ef      	ldrb	r7, [r5, #7]
    24ce:	f3c0 60c0 	ubfx	r0, r0, #27, #1
    24d2:	4287      	cmp	r7, r0
    24d4:	d1e3      	bne.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
    24d6:	6818      	ldr	r0, [r3, #0]
    24d8:	0f40      	lsrs	r0, r0, #29
    24da:	2801      	cmp	r0, #1
    24dc:	d03f      	beq.n	255e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x19e>
          frame.mb = i;
          struct2queueRx(frame);
        }
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
    24de:	681b      	ldr	r3, [r3, #0]
    24e0:	0f5b      	lsrs	r3, r3, #29
    24e2:	2b02      	cmp	r3, #2
    24e4:	d1db      	bne.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
    24e6:	f641 73c4 	movw	r3, #8132	; 0x1fc4
    24ea:	9900      	ldr	r1, [sp, #0]
    24ec:	4413      	add	r3, r2
    24ee:	681b      	ldr	r3, [r3, #0]
    24f0:	4299      	cmp	r1, r3
    24f2:	d3d4      	bcc.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
    24f4:	f641 73c8 	movw	r3, #8136	; 0x1fc8
    24f8:	589b      	ldr	r3, [r3, r2]
    24fa:	4299      	cmp	r1, r3
    24fc:	d8cf      	bhi.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
        frame.mb = i;
        struct2queueRx(frame);
    24fe:	4669      	mov	r1, sp
    2500:	4630      	mov	r0, r6
        }
      }
    }
    else if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
      if ( frame.id >= mb_filter_table[i][1] && frame.id <= mb_filter_table[i][2] ) {
        frame.mb = i;
    2502:	f88d 4014 	strb.w	r4, [sp, #20]
        struct2queueRx(frame);
    2506:	f7ff ff07 	bl	2318 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    250a:	e7c8      	b.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
    250c:	4770      	bx	lr
    250e:	f7fd ff29 	bl	364 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]>
        }
      }
    } /* end of fifo scan */
  } /* end of fifo checking */

  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    2512:	683b      	ldr	r3, [r7, #0]
    2514:	4604      	mov	r4, r0
    2516:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    251a:	3301      	adds	r3, #1
    251c:	4298      	cmp	r0, r3
    251e:	d3bb      	bcc.n	2498 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xd8>
        struct2queueRx(frame);
      }
    }
  } /* end of mb scan */

}
    2520:	b007      	add	sp, #28
    2522:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
            struct2queueRx(frame);
          }
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
    2526:	681b      	ldr	r3, [r3, #0]
    2528:	79e9      	ldrb	r1, [r5, #7]
    252a:	f3c3 4300 	ubfx	r3, r3, #16, #1
    252e:	4299      	cmp	r1, r3
    2530:	f47f af70 	bne.w	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x54>
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
    2534:	f641 43c4 	movw	r3, #7364	; 0x1cc4
    2538:	9900      	ldr	r1, [sp, #0]
    253a:	4413      	add	r3, r2
    253c:	681b      	ldr	r3, [r3, #0]
    253e:	4299      	cmp	r1, r3
    2540:	f4ff af68 	bcc.w	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x54>
    2544:	f641 43c8 	movw	r3, #7368	; 0x1cc8
    2548:	589b      	ldr	r3, [r3, r2]
    254a:	4299      	cmp	r1, r3
    254c:	f63f af62 	bhi.w	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x54>
          frame.mb = FIFO;
          struct2queueRx(frame);
    2550:	4669      	mov	r1, sp
    2552:	4630      	mov	r0, r6
        }
      }
      else if ( (fifo_filter_table[i][0] >> 29) == FLEXCAN_RANGE ) {
        if ( (bool)(fifo_filter_table[i][0] & (1UL << 16)) != msg.flags.extended ) continue; /* extended flag check */
        if ( frame.id >= fifo_filter_table[i][1] && frame.id <= fifo_filter_table[i][2] ) {
          frame.mb = FIFO;
    2554:	f88d a014 	strb.w	sl, [sp, #20]
          struct2queueRx(frame);
    2558:	f7ff fede 	bl	2318 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    255c:	e75a      	b.n	2414 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x54>
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    255e:	681a      	ldr	r2, [r3, #0]
    2560:	f412 7f60 	tst.w	r2, #896	; 0x380
    2564:	d09b      	beq.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
    2566:	461f      	mov	r7, r3
        if ( frame.id == mb_filter_table[i][p+1] ) {
    2568:	ea4f 0a41 	mov.w	sl, r1, lsl #1
  for ( uint8_t i = mailboxOffset(); i < FLEXCANb_MAXMB_SIZE(_bus); i++ ) {
    if ( msg.mb == i ) continue; // don't distribute to same mailbox
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
    256c:	2300      	movs	r3, #0
    256e:	e006      	b.n	257e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1be>
    2570:	683a      	ldr	r2, [r7, #0]
    2572:	fa5f f389 	uxtb.w	r3, r9
    2576:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    257a:	4293      	cmp	r3, r2
    257c:	d28f      	bcs.n	249e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0xde>
        if ( frame.id == mb_filter_table[i][p+1] ) {
    257e:	f103 0901 	add.w	r9, r3, #1
    2582:	9a00      	ldr	r2, [sp, #0]
    2584:	eb0a 0309 	add.w	r3, sl, r9
    2588:	f503 63fe 	add.w	r3, r3, #2032	; 0x7f0
    258c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
    2590:	429a      	cmp	r2, r3
    2592:	d1ed      	bne.n	2570 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1b0>
          frame.mb = i;
          struct2queueRx(frame);
    2594:	4669      	mov	r1, sp
    2596:	4630      	mov	r0, r6
    if ( !(mb_filter_table[i][0] & 0xE0000000) ) continue; // skip unset filters
    if ( (bool)(mb_filter_table[i][0] & (1UL << 27)) != msg.flags.extended ) continue; /* extended flag check */
    if ( (mb_filter_table[i][0] >> 29) == FLEXCAN_MULTI ) {
      for ( uint8_t p = 0; p < ((mb_filter_table[i][0] & 0x380) >> 7); p++) {
        if ( frame.id == mb_filter_table[i][p+1] ) {
          frame.mb = i;
    2598:	f88d 4014 	strb.w	r4, [sp, #20]
          struct2queueRx(frame);
    259c:	f7ff febc 	bl	2318 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    25a0:	e7e6      	b.n	2570 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)+0x1b0>
    25a2:	bf00      	nop
    25a4:	401d4034 	.word	0x401d4034
    25a8:	401d4000 	.word	0x401d4000

000025ac <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()>:
  uint8_t buf[sizeof(CAN_message_t)];
  memmove(buf, &msg, sizeof(msg));
  rxBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    25ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  CAN_message_t msg; // setup a temporary storage buffer
    25b0:	f04f 0c00 	mov.w	ip, #0
  uint8_t buf[sizeof(CAN_message_t)];
  memmove(buf, &msg, sizeof(msg));
  rxBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    25b4:	b08f      	sub	sp, #60	; 0x3c
  CAN_message_t msg; // setup a temporary storage buffer
    25b6:	2308      	movs	r3, #8
  FLEXCANb_IMASK1(_bus) = value;
}

FCTP_FUNC uint64_t FCTP_OPT::readIMASK() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    25b8:	f8df 8268 	ldr.w	r8, [pc, #616]	; 2824 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x278>
  memmove(buf, &msg, sizeof(msg));
  rxBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
  CAN_message_t msg; // setup a temporary storage buffer
    25bc:	f8cd c028 	str.w	ip, [sp, #40]	; 0x28
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    25c0:	4662      	mov	r2, ip
  memmove(buf, &msg, sizeof(msg));
  rxBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
  CAN_message_t msg; // setup a temporary storage buffer
    25c2:	f88d 302b 	strb.w	r3, [sp, #43]	; 0x2b
    25c6:	f8cd c020 	str.w	ip, [sp, #32]
    25ca:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
    25ce:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
    25d2:	f8cd c030 	str.w	ip, [sp, #48]	; 0x30
    25d6:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
  FLEXCANb_IMASK1(_bus) = value;
}

FCTP_FUNC uint64_t FCTP_OPT::readIMASK() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    25da:	f8df e24c 	ldr.w	lr, [pc, #588]	; 2828 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x27c>
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    25de:	498b      	ldr	r1, [pc, #556]	; (280c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x260>)
  uint8_t buf[sizeof(CAN_message_t)];
  memmove(buf, &msg, sizeof(msg));
  rxBuffer.push_back(buf, sizeof(CAN_message_t));
}

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
    25e0:	9006      	str	r0, [sp, #24]
  FLEXCANb_IMASK1(_bus) = value;
}

FCTP_FUNC uint64_t FCTP_OPT::readIMASK() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    25e2:	f8d8 0000 	ldr.w	r0, [r8]
    25e6:	f8de e000 	ldr.w	lr, [lr]
    25ea:	4605      	mov	r5, r0
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    25ec:	6809      	ldr	r1, [r1, #0]
    25ee:	4888      	ldr	r0, [pc, #544]	; (2810 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x264>)
  FLEXCANb_IMASK1(_bus) = value;
}

FCTP_FUNC uint64_t FCTP_OPT::readIMASK() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    25f0:	ea4c 0a0e 	orr.w	sl, ip, lr
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    25f4:	460b      	mov	r3, r1

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
  CAN_message_t msg; // setup a temporary storage buffer
  uint64_t imask = readIMASK(), iflag = readIFLAG();

  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    25f6:	4987      	ldr	r1, [pc, #540]	; (2814 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x268>)
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    25f8:	6800      	ldr	r0, [r0, #0]
  FLEXCANb_IMASK1(_bus) = value;
}

FCTP_FUNC uint64_t FCTP_OPT::readIMASK() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IMASK2(_bus) << 32) | FLEXCANb_IMASK1(_bus));
    25fa:	46ab      	mov	fp, r5

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
  CAN_message_t msg; // setup a temporary storage buffer
  uint64_t imask = readIMASK(), iflag = readIFLAG();

  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    25fc:	680c      	ldr	r4, [r1, #0]
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    25fe:	ea42 0200 	orr.w	r2, r2, r0

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
  CAN_message_t msg; // setup a temporary storage buffer
  uint64_t imask = readIMASK(), iflag = readIFLAG();

  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    2602:	0420      	lsls	r0, r4, #16
  } // for loop
}

FCTP_FUNC uint64_t FCTP_OPT::readIFLAG() {
#if defined(__IMXRT1062__)
  return (((uint64_t)FLEXCANb_IFLAG2(_bus) << 32) | FLEXCANb_IFLAG1(_bus));
    2604:	4690      	mov	r8, r2
    2606:	4699      	mov	r9, r3
    2608:	e9cd 8900 	strd	r8, r9, [sp]

FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
  CAN_message_t msg; // setup a temporary storage buffer
  uint64_t imask = readIMASK(), iflag = readIFLAG();

  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    260c:	d403      	bmi.n	2616 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6a>
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    260e:	680b      	ldr	r3, [r1, #0]
    2610:	0099      	lsls	r1, r3, #2
    2612:	f100 810b 	bmi.w	282c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x280>
      ext_output3(msg);
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    }
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2616:	e9dd 2300 	ldrd	r2, r3, [sp]
    261a:	f042 0201 	orr.w	r2, r2, #1
    261e:	2b00      	cmp	r3, #0
    2620:	f000 80ef 	beq.w	2802 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x256>
    2624:	fab3 f983 	clz	r9, r3
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2628:	4d7a      	ldr	r5, [pc, #488]	; (2814 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x268>)
      ext_output3(msg);
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    }
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    262a:	f1c9 0940 	rsb	r9, r9, #64	; 0x40
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    262e:	682b      	ldr	r3, [r5, #0]
      ext_output3(msg);
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    }
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2630:	fa5f f989 	uxtb.w	r9, r9
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    2634:	f013 5800 	ands.w	r8, r3, #536870912	; 0x20000000
    2638:	f040 8192 	bne.w	2960 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3b4>
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    }
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    263c:	682b      	ldr	r3, [r5, #0]
    mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_TX_INACTIVE);
  }
}

FCTP_FUNC uint8_t FCTP_OPT::mailboxOffset() {
  if ( !(FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN ) ) return 0; /* return offset 0 since FIFO is disabled */
    263e:	4644      	mov	r4, r8
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
      msg.len = (code & 0xF0000) >> 16;
      msg.mb = mb_num;
      msg.timestamp = code & 0xFFFF;
      msg.bus = busNumber;
    2640:	f242 63d1 	movw	r3, #9937	; 0x26d1
    2644:	9a06      	ldr	r2, [sp, #24]
    2646:	f8cd 900c 	str.w	r9, [sp, #12]
    264a:	18d3      	adds	r3, r2, r3
    264c:	f8cd 8008 	str.w	r8, [sp, #8]
    2650:	9307      	str	r3, [sp, #28]
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    if (!(imask & (1ULL << mb_num))) continue; /* don't read non-interrupt mailboxes */
    2652:	f1c4 0120 	rsb	r1, r4, #32
    2656:	fa2a f604 	lsr.w	r6, sl, r4
    265a:	f1a4 0520 	sub.w	r5, r4, #32
    265e:	fa0b f201 	lsl.w	r2, fp, r1
    2662:	fa2b f305 	lsr.w	r3, fp, r5
    2666:	4316      	orrs	r6, r2
    2668:	431e      	orrs	r6, r3
    266a:	2300      	movs	r3, #0
    266c:	f006 0201 	and.w	r2, r6, #1
    2670:	4313      	orrs	r3, r2
    2672:	f000 80a4 	beq.w	27be <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x212>
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    2676:	9b00      	ldr	r3, [sp, #0]
    2678:	fa23 f804 	lsr.w	r8, r3, r4
    267c:	9b01      	ldr	r3, [sp, #4]
    267e:	fa03 f101 	lsl.w	r1, r3, r1
    2682:	40eb      	lsrs	r3, r5
    2684:	ea48 0801 	orr.w	r8, r8, r1
    2688:	ea48 0803 	orr.w	r8, r8, r3
    268c:	2300      	movs	r3, #0
    268e:	f008 0201 	and.w	r2, r8, #1
    2692:	4313      	orrs	r3, r2
    2694:	f000 8093 	beq.w	27be <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x212>
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    2698:	4b5f      	ldr	r3, [pc, #380]	; (2818 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x26c>)
    269a:	4423      	add	r3, r4
    269c:	011b      	lsls	r3, r3, #4
    uint32_t code = mbxAddr[0];
    269e:	6819      	ldr	r1, [r3, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
    26a0:	0e0a      	lsrs	r2, r1, #24
    26a2:	f002 000b 	and.w	r0, r2, #11
    26a6:	f002 020f 	and.w	r2, r2, #15
    26aa:	2802      	cmp	r0, #2
    26ac:	9204      	str	r2, [sp, #16]
    26ae:	f040 8083 	bne.w	27b8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x20c>
         ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) ) {
      msg.flags.extended = (bool)(code & (1UL << 21));
    26b2:	f401 1e00 	and.w	lr, r1, #2097152	; 0x200000
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    26b6:	6858      	ldr	r0, [r3, #4]
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    uint32_t code = mbxAddr[0];
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
         ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) ) {
      msg.flags.extended = (bool)(code & (1UL << 21));
    26b8:	f1be 0f00 	cmp.w	lr, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    26bc:	f020 4060 	bic.w	r0, r0, #3758096384	; 0xe0000000
    26c0:	bf0d      	iteet	eq
    26c2:	2212      	moveq	r2, #18
    26c4:	2200      	movne	r2, #0
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    uint32_t code = mbxAddr[0];
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
         ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) ) {
      msg.flags.extended = (bool)(code & (1UL << 21));
    26c6:	f04f 0c01 	movne.w	ip, #1
    26ca:	f04f 0c00 	moveq.w	ip, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    26ce:	40d0      	lsrs	r0, r2
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    26d0:	9a04      	ldr	r2, [sp, #16]
    if (!(iflag & (1ULL << mb_num))) continue; /* don't read unflagged mailboxes */
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    uint32_t code = mbxAddr[0];
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
         ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) ) {
      msg.flags.extended = (bool)(code & (1UL << 21));
    26d2:	f88d c027 	strb.w	ip, [sp, #39]	; 0x27
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    26d6:	2a06      	cmp	r2, #6
    volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (mb_num * 0x10)));
    uint32_t code = mbxAddr[0];
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
         ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) ) {
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    26d8:	9008      	str	r0, [sp, #32]
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    26da:	f000 813d 	beq.w	2958 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3ac>
      msg.len = (code & 0xF0000) >> 16;
      msg.mb = mb_num;
      msg.timestamp = code & 0xFFFF;
      msg.bus = busNumber;
    26de:	9a07      	ldr	r2, [sp, #28]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
         ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) ) {
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
      msg.len = (code & 0xF0000) >> 16;
    26e0:	f3c1 4c03 	ubfx	ip, r1, #16, #4
      msg.mb = mb_num;
    26e4:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
      msg.timestamp = code & 0xFFFF;
      msg.bus = busNumber;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    26e8:	f1be 0f00 	cmp.w	lr, #0
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
      msg.len = (code & 0xF0000) >> 16;
      msg.mb = mb_num;
      msg.timestamp = code & 0xFFFF;
      msg.bus = busNumber;
    26ec:	7810      	ldrb	r0, [r2, #0]
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
         ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) ) {
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
      msg.len = (code & 0xF0000) >> 16;
    26ee:	f88d c02b 	strb.w	ip, [sp, #43]	; 0x2b
      msg.mb = mb_num;
      msg.timestamp = code & 0xFFFF;
      msg.bus = busNumber;
    26f2:	f88d 0035 	strb.w	r0, [sp, #53]	; 0x35
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    26f6:	bf08      	it	eq
    26f8:	f04f 6080 	moveq.w	r0, #67108864	; 0x4000000
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
      msg.len = (code & 0xF0000) >> 16;
      msg.mb = mb_num;
      msg.timestamp = code & 0xFFFF;
      msg.bus = busNumber;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    26fc:	f8d3 e008 	ldr.w	lr, [r3, #8]
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2700:	bf18      	it	ne
    2702:	f04f 608c 	movne.w	r0, #73400320	; 0x4600000
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
      msg.len = (code & 0xF0000) >> 16;
      msg.mb = mb_num;
      msg.timestamp = code & 0xFFFF;
    2706:	f8ad 1024 	strh.w	r1, [sp, #36]	; 0x24
#endif
  FLEXCANb_IFLAG1(_bus) = value;
}

FCTP_FUNC void FCTP_OPT::writeIFLAGBit(uint8_t mb_num) {
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    270a:	2c1f      	cmp	r4, #31
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
      msg.len = (code & 0xF0000) >> 16;
      msg.mb = mb_num;
      msg.timestamp = code & 0xFFFF;
      msg.bus = busNumber;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    270c:	f88d e02f 	strb.w	lr, [sp, #47]	; 0x2f
    2710:	6899      	ldr	r1, [r3, #8]
    2712:	ea4f 2111 	mov.w	r1, r1, lsr #8
    2716:	f88d 102e 	strb.w	r1, [sp, #46]	; 0x2e
    271a:	6899      	ldr	r1, [r3, #8]
    271c:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2720:	f88d 102d 	strb.w	r1, [sp, #45]	; 0x2d
    2724:	6899      	ldr	r1, [r3, #8]
    2726:	ea4f 6111 	mov.w	r1, r1, lsr #24
    272a:	f88d 102c 	strb.w	r1, [sp, #44]	; 0x2c
    272e:	68d9      	ldr	r1, [r3, #12]
    2730:	f88d 1033 	strb.w	r1, [sp, #51]	; 0x33
    2734:	68d9      	ldr	r1, [r3, #12]
    2736:	ea4f 2111 	mov.w	r1, r1, lsr #8
    273a:	f88d 1032 	strb.w	r1, [sp, #50]	; 0x32
    273e:	68d9      	ldr	r1, [r3, #12]
    2740:	ea4f 4111 	mov.w	r1, r1, lsr #16
    2744:	f88d 1031 	strb.w	r1, [sp, #49]	; 0x31
    2748:	68d9      	ldr	r1, [r3, #12]
    274a:	ea4f 6111 	mov.w	r1, r1, lsr #24
    274e:	f88d 1030 	strb.w	r1, [sp, #48]	; 0x30
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
    2752:	6018      	str	r0, [r3, #0]
      (void)FLEXCANb_TIMER(_bus);
    2754:	4b31      	ldr	r3, [pc, #196]	; (281c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x270>)
    2756:	681b      	ldr	r3, [r3, #0]
#endif
  FLEXCANb_IFLAG1(_bus) = value;
}

FCTP_FUNC void FCTP_OPT::writeIFLAGBit(uint8_t mb_num) {
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    2758:	f240 80fa 	bls.w	2950 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3a4>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    275c:	4a2b      	ldr	r2, [pc, #172]	; (280c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x260>)
    275e:	2301      	movs	r3, #1
    2760:	6811      	ldr	r1, [r2, #0]
    2762:	40ab      	lsls	r3, r5
    2764:	430b      	orrs	r3, r1
    2766:	6013      	str	r3, [r2, #0]
  }
  return 0;
}

FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
    2768:	9b02      	ldr	r3, [sp, #8]
    276a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
    276e:	9b06      	ldr	r3, [sp, #24]
    2770:	f503 51fe 	add.w	r1, r3, #8128	; 0x1fc0
    2774:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
    2778:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    277c:	00db      	lsls	r3, r3, #3
    277e:	f140 80e2 	bpl.w	2946 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x39a>
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    2782:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
      msg.bus = busNumber;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
      (void)FLEXCANb_TIMER(_bus);
      writeIFLAGBit(mb_num);
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2786:	f8dd e020 	ldr.w	lr, [sp, #32]
  return 0;
}

FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    278a:	0f5b      	lsrs	r3, r3, #29
    278c:	2b01      	cmp	r3, #1
    278e:	f000 80f6 	beq.w	297e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3d2>
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    2792:	f851 3032 	ldr.w	r3, [r1, r2, lsl #3]
    2796:	0f5b      	lsrs	r3, r3, #29
    2798:	2b02      	cmp	r3, #2
    279a:	f000 80cc 	beq.w	2936 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x38a>
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
      (void)FLEXCANb_TIMER(_bus);
      writeIFLAGBit(mb_num);
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
      frame_distribution(msg);
    279e:	a908      	add	r1, sp, #32
    27a0:	9806      	ldr	r0, [sp, #24]
    27a2:	f7ff fe0d 	bl	23c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    27a6:	a808      	add	r0, sp, #32
    27a8:	f3af 8000 	nop.w
      ext_output2(msg);
    27ac:	a808      	add	r0, sp, #32
    27ae:	f3af 8000 	nop.w
      ext_output3(msg);
    27b2:	a808      	add	r0, sp, #32
    27b4:	f3af 8000 	nop.w
    }
    if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
    27b8:	9b04      	ldr	r3, [sp, #16]
    27ba:	2b08      	cmp	r3, #8
    27bc:	d015      	beq.n	27ea <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x23e>
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    }
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    27be:	4b15      	ldr	r3, [pc, #84]	; (2814 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x268>)
    27c0:	3401      	adds	r4, #1
    27c2:	681b      	ldr	r3, [r3, #0]
    27c4:	b2e4      	uxtb	r4, r4
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    27c6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    }
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    27ca:	9402      	str	r4, [sp, #8]
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    27cc:	3301      	adds	r3, #1
    27ce:	429c      	cmp	r4, r3
    27d0:	d203      	bcs.n	27da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x22e>
    27d2:	9b03      	ldr	r3, [sp, #12]
    27d4:	42a3      	cmp	r3, r4
    27d6:	f63f af3c 	bhi.w	2652 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0xa6>
    }
    if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_TX_INACTIVE ) {
      writeIFLAGBit(mb_num); /* clear IFLAG, currently unused */
    }
  }
  FLEXCANb_ESR1(_bus) |= FLEXCANb_ESR1(_bus);
    27da:	4b11      	ldr	r3, [pc, #68]	; (2820 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x274>)
    27dc:	6819      	ldr	r1, [r3, #0]
    27de:	681a      	ldr	r2, [r3, #0]
    27e0:	430a      	orrs	r2, r1
    27e2:	601a      	str	r2, [r3, #0]
}
    27e4:	b00f      	add	sp, #60	; 0x3c
    27e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif
  FLEXCANb_IFLAG1(_bus) = value;
}

FCTP_FUNC void FCTP_OPT::writeIFLAGBit(uint8_t mb_num) {
  if ( mb_num < 32 ) FLEXCANb_IFLAG1(_bus) |= (1UL << mb_num);
    27ea:	2c1f      	cmp	r4, #31
    27ec:	f240 80dd 	bls.w	29aa <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3fe>
  else FLEXCANb_IFLAG2(_bus) |= (1UL << (mb_num - 32));
    27f0:	2201      	movs	r2, #1
    27f2:	4b06      	ldr	r3, [pc, #24]	; (280c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x260>)
    27f4:	fa02 f505 	lsl.w	r5, r2, r5
    27f8:	681b      	ldr	r3, [r3, #0]
    27fa:	431d      	orrs	r5, r3
    27fc:	4b03      	ldr	r3, [pc, #12]	; (280c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x260>)
    27fe:	601d      	str	r5, [r3, #0]
    2800:	e7dd      	b.n	27be <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x212>
      ext_output3(msg);
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    }
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
    2802:	fab2 f982 	clz	r9, r2
    2806:	f109 0920 	add.w	r9, r9, #32
    280a:	e70d      	b.n	2628 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x7c>
    280c:	401d402c 	.word	0x401d402c
    2810:	401d4030 	.word	0x401d4030
    2814:	401d4000 	.word	0x401d4000
    2818:	0401d408 	.word	0x0401d408
    281c:	401d4008 	.word	0x401d4008
    2820:	401d4020 	.word	0x401d4020
    2824:	401d4024 	.word	0x401d4024
    2828:	401d4028 	.word	0x401d4028
FCTP_FUNC void FCTP_OPT::flexcan_interrupt() {
  CAN_message_t msg; // setup a temporary storage buffer
  uint64_t imask = readIMASK(), iflag = readIFLAG();

  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
    282c:	f00a 0220 	and.w	r2, sl, #32
    2830:	2300      	movs	r3, #0
    2832:	4313      	orrs	r3, r2
    2834:	f43f aeef 	beq.w	2616 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6a>
    2838:	f008 0220 	and.w	r2, r8, #32
    283c:	2300      	movs	r3, #0
    283e:	4313      	orrs	r3, r2
    2840:	f43f aee9 	beq.w	2616 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6a>
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
    2844:	4b82      	ldr	r3, [pc, #520]	; (2a50 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4a4>)
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      msg.bus = busNumber;
    2846:	f242 61d1 	movw	r1, #9937	; 0x26d1
    284a:	9806      	ldr	r0, [sp, #24]
  uint64_t imask = readIMASK(), iflag = readIFLAG();

  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
    284c:	681b      	ldr	r3, [r3, #0]
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      msg.bus = busNumber;
    284e:	5c41      	ldrb	r1, [r0, r1]

  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
    2850:	f3c3 4403 	ubfx	r4, r3, #16, #4
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
    2854:	f403 1000 	and.w	r0, r3, #2097152	; 0x200000
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2858:	4a7e      	ldr	r2, [pc, #504]	; (2a54 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4a8>)

  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
    285a:	f88d 402b 	strb.w	r4, [sp, #43]	; 0x2b
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
    285e:	2800      	cmp	r0, #0
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2860:	6812      	ldr	r2, [r2, #0]
      msg.idhit = code >> 23;
    2862:	ea4f 50d3 	mov.w	r0, r3, lsr #23
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2866:	bf14      	ite	ne
    2868:	2400      	movne	r4, #0
    286a:	2412      	moveq	r4, #18
    286c:	f022 4260 	bic.w	r2, r2, #3758096384	; 0xe0000000
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2870:	4d79      	ldr	r5, [pc, #484]	; (2a58 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4ac>)
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
    2872:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2876:	fa22 f204 	lsr.w	r2, r2, r4
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
    287a:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
    287e:	f3c3 5300 	ubfx	r3, r3, #20, #1
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
    2882:	9208      	str	r2, [sp, #32]
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      msg.bus = busNumber;
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    2884:	f04f 0263 	mov.w	r2, #99	; 0x63
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2888:	6828      	ldr	r0, [r5, #0]
  if ( !(FLEXCANb_MCR(_bus) & (1UL << 15)) ) { /* if DMA is disabled, ONLY THEN you can handle FIFO in ISR */
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
    288a:	f88d 3028 	strb.w	r3, [sp, #40]	; 0x28
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    288e:	f88d 002f 	strb.w	r0, [sp, #47]	; 0x2f
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
    2892:	bf18      	it	ne
    2894:	2001      	movne	r0, #1
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    2896:	682b      	ldr	r3, [r5, #0]
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
    2898:	bf08      	it	eq
    289a:	2000      	moveq	r0, #0
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    289c:	0a1b      	lsrs	r3, r3, #8
    if ( (FLEXCANb_MCR(_bus) & FLEXCAN_MCR_FEN) && (imask & FLEXCAN_IMASK1_BUF5M) && (iflag & FLEXCAN_IFLAG1_BUF5I) ) { /* FIFO is enabled, capture frames if triggered */
      volatile uint32_t *mbxAddr = &(*(volatile uint32_t*)(_bus + 0x80 + (0 * 0x10)));
      uint32_t code = mbxAddr[0];
      msg.len = (code & 0xF0000) >> 16;
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
    289e:	f88d 0027 	strb.w	r0, [sp, #39]	; 0x27
    28a2:	2005      	movs	r0, #5
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    28a4:	f88d 302e 	strb.w	r3, [sp, #46]	; 0x2e
    28a8:	682b      	ldr	r3, [r5, #0]
    28aa:	0c1b      	lsrs	r3, r3, #16
    28ac:	f88d 302d 	strb.w	r3, [sp, #45]	; 0x2d
    28b0:	682c      	ldr	r4, [r5, #0]
    28b2:	4b6a      	ldr	r3, [pc, #424]	; (2a5c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b0>)
    28b4:	0e24      	lsrs	r4, r4, #24
    28b6:	f88d 402c 	strb.w	r4, [sp, #44]	; 0x2c
    28ba:	681c      	ldr	r4, [r3, #0]
    28bc:	f88d 4033 	strb.w	r4, [sp, #51]	; 0x33
    28c0:	681c      	ldr	r4, [r3, #0]
    28c2:	0a24      	lsrs	r4, r4, #8
    28c4:	f88d 4032 	strb.w	r4, [sp, #50]	; 0x32
    28c8:	681c      	ldr	r4, [r3, #0]
    28ca:	0c24      	lsrs	r4, r4, #16
    28cc:	f88d 4031 	strb.w	r4, [sp, #49]	; 0x31
    28d0:	681b      	ldr	r3, [r3, #0]
      msg.bus = busNumber;
    28d2:	f88d 1035 	strb.w	r1, [sp, #53]	; 0x35
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    28d6:	0e1b      	lsrs	r3, r3, #24
      msg.bus = busNumber;
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
      (void)FLEXCANb_TIMER(_bus);
    28d8:	4961      	ldr	r1, [pc, #388]	; (2a60 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b4>)
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      msg.bus = busNumber;
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
    28da:	f88d 2034 	strb.w	r2, [sp, #52]	; 0x34
      msg.flags.remote = (bool)(code & (1UL << 20));
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.timestamp = code & 0xFFFF;
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      msg.idhit = code >> 23;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
    28de:	f88d 3030 	strb.w	r3, [sp, #48]	; 0x30
      msg.bus = busNumber;
      msg.mb = FIFO; /* store the mailbox the message came from (for callback reference) */
      (void)FLEXCANb_TIMER(_bus);
    28e2:	680b      	ldr	r3, [r1, #0]
    28e4:	f7fd fd98 	bl	418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]>
      writeIFLAGBit(5); /* clear FIFO bit only! */
      if ( iflag & FLEXCAN_IFLAG1_BUF6I ) writeIFLAGBit(6); /* clear FIFO bit only! */
    28e8:	e9dd 2300 	ldrd	r2, r3, [sp]
    28ec:	2300      	movs	r3, #0
    28ee:	f002 0240 	and.w	r2, r2, #64	; 0x40
    28f2:	4313      	orrs	r3, r2
    28f4:	d15d      	bne.n	29b2 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x406>
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
    28f6:	e9dd 2300 	ldrd	r2, r3, [sp]
    28fa:	2300      	movs	r3, #0
    28fc:	f002 0280 	and.w	r2, r2, #128	; 0x80
    2900:	4313      	orrs	r3, r2
    2902:	f040 80a1 	bne.w	2a48 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x49c>
      frame_distribution(msg);
    2906:	9c06      	ldr	r4, [sp, #24]
    2908:	a908      	add	r1, sp, #32
    290a:	4620      	mov	r0, r4
    290c:	f7ff fd58 	bl	23c0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::frame_distribution(CAN_message_t&)>
      ext_output1(msg);
    2910:	a808      	add	r0, sp, #32
    2912:	f3af 8000 	nop.w
      ext_output2(msg);
    2916:	a808      	add	r0, sp, #32
    2918:	f3af 8000 	nop.w
      ext_output3(msg);
    291c:	a808      	add	r0, sp, #32
    291e:	f3af 8000 	nop.w
  if ( mb_num == FIFO ) fifo_filter_table[0][0] |= (1UL << 28); /* enable fifo enhancement */
  else mb_filter_table[mb_num][0] |= (1UL << 28); /* enable mb enhancement */
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
    2922:	f504 53e6 	add.w	r3, r4, #7360	; 0x1cc0
    2926:	681b      	ldr	r3, [r3, #0]
    2928:	00da      	lsls	r2, r3, #3
    292a:	d446      	bmi.n	29ba <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x40e>
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
      frame_distribution(msg);
      ext_output1(msg);
      ext_output2(msg);
      ext_output3(msg);
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    292c:	a908      	add	r1, sp, #32
    292e:	9806      	ldr	r0, [sp, #24]
    2930:	f7ff fcf2 	bl	2318 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    2934:	e66f      	b.n	2616 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6a>
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
  }
  else if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    if ( id >= mb_filter_table[mb_num][1] && id <= mb_filter_table[mb_num][2] ) return 1;
    2936:	6843      	ldr	r3, [r0, #4]
    2938:	459e      	cmp	lr, r3
    293a:	f4ff af30 	bcc.w	279e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1f2>
    293e:	6883      	ldr	r3, [r0, #8]
      msg.bus = busNumber;
      for ( uint8_t i = 0; i < (8 >> 2); i++ ) for ( int8_t d = 0; d < 4 ; d++ ) msg.buf[(4 * i) + 3 - d] = (uint8_t)(mbxAddr[2 + i] >> (8 * d));
      mbxAddr[0] = FLEXCAN_MB_CS_CODE(FLEXCAN_MB_CODE_RX_EMPTY) | ((msg.flags.extended) ? (FLEXCAN_MB_CS_SRR | FLEXCAN_MB_CS_IDE) : 0);
      (void)FLEXCANb_TIMER(_bus);
      writeIFLAGBit(mb_num);
      if ( filter_match((FLEXCAN_MAILBOX)mb_num, msg.id) ) struct2queueRx(msg); /* store frame in queue */
    2940:	459e      	cmp	lr, r3
    2942:	f63f af2c 	bhi.w	279e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1f2>
    2946:	a908      	add	r1, sp, #32
    2948:	9806      	ldr	r0, [sp, #24]
    294a:	f7ff fce5 	bl	2318 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::struct2queueRx(CAN_message_t const&)>
    294e:	e726      	b.n	279e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1f2>
    2950:	4620      	mov	r0, r4
    2952:	f7fd fd61 	bl	418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]>
    2956:	e707      	b.n	2768 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1bc>
    uint32_t code = mbxAddr[0];
    if ( ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_FULL ) ||
         ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) ) {
      msg.flags.extended = (bool)(code & (1UL << 21));
      msg.id = (mbxAddr[1] & 0x1FFFFFFF) >> ((msg.flags.extended) ? 0 : 18);
      if ( FLEXCAN_get_code(code) == FLEXCAN_MB_CODE_RX_OVERRUN ) msg.flags.overrun = 1;
    2958:	2001      	movs	r0, #1
    295a:	f88d 0029 	strb.w	r0, [sp, #41]	; 0x29
    295e:	e6be      	b.n	26de <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x132>
    2960:	f7fd fd00 	bl	364 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::mailboxOffset() [clone .isra.39] [clone .part.40]>
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    }
  }

  uint8_t exit_point = 64 - __builtin_clzll(iflag | 1); /* break from MSB's if unset, add 1 to prevent undefined behaviour in clz for 0 check */
  for ( uint8_t mb_num = mailboxOffset(); mb_num < FLEXCANb_MAXMB_SIZE(_bus); mb_num++ ) {
    2964:	682b      	ldr	r3, [r5, #0]
    2966:	4604      	mov	r4, r0
    2968:	4680      	mov	r8, r0
    if ( mb_num >= exit_point ) break; /* early exit from higher unflagged mailboxes */
    296a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    296e:	3301      	adds	r3, #1
    2970:	4298      	cmp	r0, r3
    2972:	f4bf af32 	bcs.w	27da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x22e>
    2976:	4581      	cmp	r9, r0
    2978:	f63f ae62 	bhi.w	2640 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x94>
    297c:	e72d      	b.n	27da <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x22e>
}

FCTP_FUNC volatile bool FCTP_OPT::filter_match(FLEXCAN_MAILBOX mb_num, uint32_t id) {
  if ( !(mb_filter_table[mb_num][0] & 0x10000000) ) return 1;
  if ( (mb_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    for ( uint8_t i = 0; i < ((mb_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == mb_filter_table[mb_num][i+1] ) return 1;
    297e:	f851 1032 	ldr.w	r1, [r1, r2, lsl #3]
    2982:	f411 7f60 	tst.w	r1, #896	; 0x380
    2986:	f43f af0a 	beq.w	279e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1f2>
    298a:	6841      	ldr	r1, [r0, #4]
    298c:	458e      	cmp	lr, r1
    298e:	d104      	bne.n	299a <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3ee>
    2990:	e7d9      	b.n	2946 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x39a>
    2992:	f850 2023 	ldr.w	r2, [r0, r3, lsl #2]
    2996:	4596      	cmp	lr, r2
    2998:	d0d5      	beq.n	2946 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x39a>
    299a:	6802      	ldr	r2, [r0, #0]
    299c:	b2d9      	uxtb	r1, r3
    299e:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    29a2:	1c4b      	adds	r3, r1, #1
    29a4:	4291      	cmp	r1, r2
    29a6:	d3f4      	bcc.n	2992 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x3e6>
    29a8:	e6f9      	b.n	279e <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x1f2>
    29aa:	4620      	mov	r0, r4
    29ac:	f7fd fd34 	bl	418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]>
    29b0:	e705      	b.n	27be <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x212>
    29b2:	2006      	movs	r0, #6
    29b4:	f7fd fd30 	bl	418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]>
    29b8:	e79d      	b.n	28f6 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x34a>
  else mb_filter_table[mb_num][0] |= (1UL << 28); /* enable mb enhancement */
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    29ba:	4b2a      	ldr	r3, [pc, #168]	; (2a64 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x4b8>)
    29bc:	f04f 0e00 	mov.w	lr, #0
      if ( iflag & FLEXCAN_IFLAG1_BUF7I ) writeIFLAGBit(7); /* clear FIFO bit only! */
      frame_distribution(msg);
      ext_output1(msg);
      ext_output2(msg);
      ext_output3(msg);
      if (fifo_filter_match(msg.id)) struct2queueRx(msg);
    29c0:	f8dd c020 	ldr.w	ip, [sp, #32]
  else mb_filter_table[mb_num][0] |= (1UL << 28); /* enable mb enhancement */
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
    29c4:	681b      	ldr	r3, [r3, #0]
    29c6:	f8dd 9018 	ldr.w	r9, [sp, #24]
    29ca:	f3c3 6803 	ubfx	r8, r3, #24, #4
    29ce:	ea4f 08c8 	mov.w	r8, r8, lsl #3
    29d2:	f108 0808 	add.w	r8, r8, #8
    29d6:	e008      	b.n	29ea <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x43e>
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
   }
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
    29d8:	6823      	ldr	r3, [r4, #0]
    29da:	0f5b      	lsrs	r3, r3, #29
    29dc:	2b02      	cmp	r3, #2
    29de:	d028      	beq.n	2a32 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x486>
    29e0:	f10e 0e01 	add.w	lr, lr, #1
}

FCTP_FUNC volatile bool FCTP_OPT::fifo_filter_match(uint32_t id) {
  if ( !(fifo_filter_table[0][0] & 0x10000000) ) return 1;
  uint8_t max_fifo_filters = (((FLEXCANb_CTRL2(_bus) >> FLEXCAN_CTRL2_RFFN_BIT_NO) & 0xF) + 1) * 8; // 8->128
  for (uint8_t mb_num = 0; mb_num < max_fifo_filters; mb_num++) { /* check fifo filters */
    29e4:	45c6      	cmp	lr, r8
    29e6:	f43f ae16 	beq.w	2616 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x6a>
    if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_MULTI ) {
    29ea:	eb0e 054e 	add.w	r5, lr, lr, lsl #1
    29ee:	eb09 02c5 	add.w	r2, r9, r5, lsl #3
    29f2:	f502 54e6 	add.w	r4, r2, #7360	; 0x1cc0
    29f6:	6823      	ldr	r3, [r4, #0]
    29f8:	0f5b      	lsrs	r3, r3, #29
    29fa:	2b01      	cmp	r3, #1
    29fc:	d1ec      	bne.n	29d8 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x42c>
      for ( uint8_t i = 0; i < ((fifo_filter_table[mb_num][0] & 0x380) >> 7); i++) if ( id == fifo_filter_table[mb_num][i+1] ) return 1;
    29fe:	6821      	ldr	r1, [r4, #0]
    2a00:	f411 7f60 	tst.w	r1, #896	; 0x380
    2a04:	d0ec      	beq.n	29e0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x434>
    2a06:	f641 41c4 	movw	r1, #7364	; 0x1cc4
    2a0a:	588a      	ldr	r2, [r1, r2]
    2a0c:	4562      	cmp	r2, ip
    2a0e:	d08d      	beq.n	292c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x380>
    2a10:	006d      	lsls	r5, r5, #1
    2a12:	e003      	b.n	2a1c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x470>
    2a14:	f859 2021 	ldr.w	r2, [r9, r1, lsl #2]
    2a18:	4594      	cmp	ip, r2
    2a1a:	d087      	beq.n	292c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x380>
    2a1c:	b2d8      	uxtb	r0, r3
    2a1e:	6822      	ldr	r2, [r4, #0]
    2a20:	1c43      	adds	r3, r0, #1
    2a22:	f3c2 12c2 	ubfx	r2, r2, #7, #3
    2a26:	18e9      	adds	r1, r5, r3
    2a28:	4290      	cmp	r0, r2
    2a2a:	f501 61e6 	add.w	r1, r1, #1840	; 0x730
    2a2e:	d3f1      	bcc.n	2a14 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x468>
    2a30:	e7d6      	b.n	29e0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x434>
   }
    else if ( (fifo_filter_table[mb_num][0] >> 29) == FLEXCAN_RANGE ) {
      if ( id >= fifo_filter_table[mb_num][1] && id <= fifo_filter_table[mb_num][2] ) return 1;
    2a32:	f641 43c4 	movw	r3, #7364	; 0x1cc4
    2a36:	589b      	ldr	r3, [r3, r2]
    2a38:	459c      	cmp	ip, r3
    2a3a:	d3d1      	bcc.n	29e0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x434>
    2a3c:	f641 43c8 	movw	r3, #7368	; 0x1cc8
    2a40:	589b      	ldr	r3, [r3, r2]
    2a42:	459c      	cmp	ip, r3
    2a44:	d8cc      	bhi.n	29e0 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x434>
    2a46:	e771      	b.n	292c <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x380>
    2a48:	2007      	movs	r0, #7
    2a4a:	f7fd fce5 	bl	418 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::writeIFLAGBit(unsigned char) [clone .isra.48] [clone .part.49]>
    2a4e:	e75a      	b.n	2906 <FlexCAN_T4<(CAN_DEV_TABLE)1075658752, (FLEXCAN_RXQUEUE_TABLE)256, (FLEXCAN_TXQUEUE_TABLE)16>::flexcan_interrupt()+0x35a>
    2a50:	401d4080 	.word	0x401d4080
    2a54:	401d4084 	.word	0x401d4084
    2a58:	401d4088 	.word	0x401d4088
    2a5c:	401d408c 	.word	0x401d408c
    2a60:	401d4008 	.word	0x401d4008
    2a64:	401d4034 	.word	0x401d4034

00002a68 <_GLOBAL__sub_I_u8g2>:
				sprintf(disp_msg_5, "NewFileCount: %d", newFileCount);
			}
		}
		time_now = millis();
	}
}
    2a68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
class __FlashStringHelper;

class Print
{
  public:
	constexpr Print() : write_error(0) {}
    2a6a:	4d41      	ldr	r5, [pc, #260]	; (2b70 <_GLOBAL__sub_I_u8g2+0x108>)
    2a6c:	2400      	movs	r4, #0
    u8g2_t u8g2;
    u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
  public:
    u8g2_uint_t tx, ty;
  
    U8G2(void) { cpp_next_cb = u8x8_ascii_next; home(); }
    2a6e:	4a41      	ldr	r2, [pc, #260]	; (2b74 <_GLOBAL__sub_I_u8g2+0x10c>)
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    2a70:	f105 0608 	add.w	r6, r5, #8
    u8g2_t u8g2;
    u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
  public:
    u8g2_uint_t tx, ty;
  
    U8G2(void) { cpp_next_cb = u8x8_ascii_next; home(); }
    2a74:	4b40      	ldr	r3, [pc, #256]	; (2b78 <_GLOBAL__sub_I_u8g2+0x110>)
    2a76:	602a      	str	r2, [r5, #0]
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    2a78:	4630      	mov	r0, r6
    u8g2_t u8g2;
    u8x8_char_cb cpp_next_cb; /*  the cpp interface has its own decoding function for the Arduino print command */
  public:
    u8g2_uint_t tx, ty;
  
    U8G2(void) { cpp_next_cb = u8x8_ascii_next; home(); }
    2a7a:	f8c5 30b4 	str.w	r3, [r5, #180]	; 0xb4
    2a7e:	712c      	strb	r4, [r5, #4]
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    2a80:	f8a5 40b8 	strh.w	r4, [r5, #184]	; 0xb8
    2a84:	f8a5 40ba 	strh.w	r4, [r5, #186]	; 0xba
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, rotation, u8x8_byte_arduino_sw_i2c, u8x8_gpio_and_delay_arduino);
    u8x8_SetPin_SW_I2C(getU8x8(), clock,  data,  reset);
  }
};
class U8G2_SSD1306_128X64_NONAME_F_HW_I2C : public U8G2 {
  public: U8G2_SSD1306_128X64_NONAME_F_HW_I2C(const u8g2_cb_t *rotation, uint8_t reset = U8X8_PIN_NONE, uint8_t clock = U8X8_PIN_NONE, uint8_t data = U8X8_PIN_NONE) : U8G2() {
    2a88:	4f3c      	ldr	r7, [pc, #240]	; (2b7c <_GLOBAL__sub_I_u8g2+0x114>)
    uint8_t userInterfaceInputValue(const char *title, const char *pre, uint8_t *value, uint8_t lo, uint8_t hi, uint8_t digits, const char *post) {
      return u8g2_UserInterfaceInputValue(&u8g2, title, pre, value, lo, hi, digits, post); }
    

     /* LiquidCrystal compatible functions */
    void home(void) { tx = 0; ty = 0;  u8x8_utf8_init(u8g2_GetU8x8(&u8g2)); }
    2a8a:	f001 f90f 	bl	3cac <u8x8_utf8_init>
    u8x8_SetPin_SW_I2C(getU8x8(), clock,  data,  reset);
  }
};
class U8G2_SSD1306_128X64_NONAME_F_HW_I2C : public U8G2 {
  public: U8G2_SSD1306_128X64_NONAME_F_HW_I2C(const u8g2_cb_t *rotation, uint8_t reset = U8X8_PIN_NONE, uint8_t clock = U8X8_PIN_NONE, uint8_t data = U8X8_PIN_NONE) : U8G2() {
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, rotation, u8x8_byte_arduino_hw_i2c, u8x8_gpio_and_delay_arduino);
    2a8e:	4630      	mov	r0, r6
    2a90:	4b3b      	ldr	r3, [pc, #236]	; (2b80 <_GLOBAL__sub_I_u8g2+0x118>)
    2a92:	4a3c      	ldr	r2, [pc, #240]	; (2b84 <_GLOBAL__sub_I_u8g2+0x11c>)
    2a94:	493c      	ldr	r1, [pc, #240]	; (2b88 <_GLOBAL__sub_I_u8g2+0x120>)
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, rotation, u8x8_byte_arduino_sw_i2c, u8x8_gpio_and_delay_arduino);
    u8x8_SetPin_SW_I2C(getU8x8(), clock,  data,  reset);
  }
};
class U8G2_SSD1306_128X64_NONAME_F_HW_I2C : public U8G2 {
  public: U8G2_SSD1306_128X64_NONAME_F_HW_I2C(const u8g2_cb_t *rotation, uint8_t reset = U8X8_PIN_NONE, uint8_t clock = U8X8_PIN_NONE, uint8_t data = U8X8_PIN_NONE) : U8G2() {
    2a96:	602f      	str	r7, [r5, #0]
    u8g2_Setup_ssd1306_i2c_128x64_noname_f(&u8g2, rotation, u8x8_byte_arduino_hw_i2c, u8x8_gpio_and_delay_arduino);
    2a98:	f000 fc1e 	bl	32d8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>
    u8x8_SetPin_HW_I2C(getU8x8(), reset, clock, data);
    2a9c:	23ff      	movs	r3, #255	; 0xff
    2a9e:	4630      	mov	r0, r6
#if defined(__MK66FX1M0__)
static void flexcan_isr_can0();
static void flexcan_isr_can1();
#endif

FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    2aa0:	f242 67c8 	movw	r7, #9928	; 0x26c8
#ifndef CIRCULAR_BUFFER_H
#define CIRCULAR_BUFFER_H
#include <algorithm>

template<typename T, uint16_t _size, uint16_t multi = 0>
class Circular_Buffer {
    2aa4:	f641 360e 	movw	r6, #6926	; 0x1b0e
    2aa8:	461a      	mov	r2, r3
    2aaa:	4619      	mov	r1, r3
    2aac:	f000 fb2a 	bl	3104 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>
    2ab0:	4a36      	ldr	r2, [pc, #216]	; (2b8c <_GLOBAL__sub_I_u8g2+0x124>)
 * \class FsVolume
 * \brief FsVolume class.
 */
class FsVolume {
 public:
  FsVolume() {}
    2ab2:	4b37      	ldr	r3, [pc, #220]	; (2b90 <_GLOBAL__sub_I_u8g2+0x128>)
    2ab4:	f641 3e0a 	movw	lr, #6922	; 0x1b0a
    2ab8:	51d4      	str	r4, [r2, r7]
    2aba:	f242 67d0 	movw	r7, #9936	; 0x26d0
    2abe:	f641 310c 	movw	r1, #6924	; 0x1b0c
    2ac2:	4834      	ldr	r0, [pc, #208]	; (2b94 <_GLOBAL__sub_I_u8g2+0x12c>)
    2ac4:	55d4      	strb	r4, [r2, r7]
    2ac6:	f502 5c17 	add.w	ip, r2, #9664	; 0x25c0
#if defined(__IMXRT1062__)
  if ( _bus == CAN3 ) _CAN3 = this;
  if ( _bus == CAN2 ) _CAN2 = this;
    2aca:	4f33      	ldr	r7, [pc, #204]	; (2b98 <_GLOBAL__sub_I_u8g2+0x130>)
    2acc:	8094      	strh	r4, [r2, #4]
    2ace:	603a      	str	r2, [r7, #0]
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2ad0:	4f32      	ldr	r7, [pc, #200]	; (2b9c <_GLOBAL__sub_I_u8g2+0x134>)
    2ad2:	80d4      	strh	r4, [r2, #6]
    2ad4:	f8c3 7490 	str.w	r7, [r3, #1168]	; 0x490
#else  // HAS_SDIO_CLASS
class SdSpiCard {
#endif  // HAS_SDIO_CLASS
 public:
  /** Construct an instance of SdSpiCard. */
  SdSpiCard() {}
    2ad8:	4f31      	ldr	r7, [pc, #196]	; (2ba0 <_GLOBAL__sub_I_u8g2+0x138>)
    2ada:	8114      	strh	r4, [r2, #8]
#define LOG_FILENAME "CANLog.asc"

#define LOG_BTN  5
#define LED_PIN  13

SdFs sd;
    2adc:	4d31      	ldr	r5, [pc, #196]	; (2ba4 <_GLOBAL__sub_I_u8g2+0x13c>)
    2ade:	f822 400e 	strh.w	r4, [r2, lr]
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2ae2:	f04f 0e07 	mov.w	lr, #7
    2ae6:	5254      	strh	r4, [r2, r1]
    2ae8:	2101      	movs	r1, #1
    2aea:	5394      	strh	r4, [r2, r6]
    2aec:	2629      	movs	r6, #41	; 0x29
#if defined(__MK66FX1M0__)
static void flexcan_isr_can0();
static void flexcan_isr_can1();
#endif

FCTP_FUNC FCTP_OPT::FlexCAN_T4() {
    2aee:	6010      	str	r0, [r2, #0]
    2af0:	f242 60cc 	movw	r0, #9932	; 0x26cc
    2af4:	f8c3 749c 	str.w	r7, [r3, #1180]	; 0x49c
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    2af8:	4f2b      	ldr	r7, [pc, #172]	; (2ba8 <_GLOBAL__sub_I_u8g2+0x140>)
		init_AlwaysInline(MSBFIRST, SPI_MODE0);
	}
private:
	void init_AlwaysInline(uint8_t bitOrder, uint8_t dataMode)
	  __attribute__((__always_inline__)) {
			tcr = LPSPI_TCR_FRAMESZ(7);    // TCR has polarity and bit order too
    2afa:	f8c3 e4a8 	str.w	lr, [r3, #1192]	; 0x4a8
    2afe:	5014      	str	r4, [r2, r0]
    2b00:	462a      	mov	r2, r5
    2b02:	f8c3 4480 	str.w	r4, [r3, #1152]	; 0x480
    2b06:	4618      	mov	r0, r3
    2b08:	f8c3 4484 	str.w	r4, [r3, #1156]	; 0x484
 * \class SdioConfig
 * \brief SDIO card configuration.
 */
class SdioConfig {
 public:
  SdioConfig() {}
    2b0c:	f883 4498 	strb.w	r4, [r3, #1176]	; 0x498
//------------------------------------------------------------------------------
/**
 * \class SdioCard
 * \brief Raw SDIO access to SD and SDHC flash memory cards.
 */
class SdioCard : public SdCardInterface {
    2b10:	f883 4499 	strb.w	r4, [r3, #1177]	; 0x499
    2b14:	f883 44b6 	strb.w	r4, [r3, #1206]	; 0x4b6
    2b18:	f883 14b1 	strb.w	r1, [r3, #1201]	; 0x4b1
public:
	SPISettings(uint32_t clockIn, uint8_t bitOrderIn, uint8_t dataModeIn) : _clock(clockIn) {
		init_AlwaysInline(bitOrderIn, dataModeIn);
	}

	SPISettings() : _clock(4000000) {
    2b1c:	f8c3 74a4 	str.w	r7, [r3, #1188]	; 0x4a4
#include "Print.h"

class Stream : public Print
{
  public:
	constexpr Stream() : _timeout(1000), read_error(0) {}
    2b20:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
    2b24:	f883 64b3 	strb.w	r6, [r3, #1203]	; 0x4b3
    2b28:	4920      	ldr	r1, [pc, #128]	; (2bac <_GLOBAL__sub_I_u8g2+0x144>)
    2b2a:	f88c 4000 	strb.w	r4, [ip]
    2b2e:	f007 feef 	bl	a910 <__aeabi_atexit>
    2b32:	4b1f      	ldr	r3, [pc, #124]	; (2bb0 <_GLOBAL__sub_I_u8g2+0x148>)
FsFile file;
    2b34:	462a      	mov	r2, r5
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2b36:	4e1f      	ldr	r6, [pc, #124]	; (2bb4 <_GLOBAL__sub_I_u8g2+0x14c>)
    2b38:	711c      	strb	r4, [r3, #4]
    2b3a:	4618      	mov	r0, r3
    2b3c:	731c      	strb	r4, [r3, #12]
 * \brief FsBaseFile class.
 */
class FsBaseFile {
 public:
  /** Create an instance. */
  FsBaseFile() {}
    2b3e:	649c      	str	r4, [r3, #72]	; 0x48
    2b40:	64dc      	str	r4, [r3, #76]	; 0x4c
    2b42:	609f      	str	r7, [r3, #8]
    2b44:	491c      	ldr	r1, [pc, #112]	; (2bb8 <_GLOBAL__sub_I_u8g2+0x150>)
};
/**
 * \class FsFile
 * \brief FsBaseFile file with Arduino Stream.
 */
class FsFile : public StreamFile<FsBaseFile, uint64_t> {
    2b46:	601e      	str	r6, [r3, #0]
    2b48:	f007 fee2 	bl	a910 <__aeabi_atexit>
    2b4c:	4b1b      	ldr	r3, [pc, #108]	; (2bbc <_GLOBAL__sub_I_u8g2+0x154>)
class RingBuf : public Print {
 public:
  /**
   * RingBuf Constructor.
   */
  RingBuf() {}
    2b4e:	491c      	ldr	r1, [pc, #112]	; (2bc0 <_GLOBAL__sub_I_u8g2+0x158>)
    2b50:	4a1c      	ldr	r2, [pc, #112]	; (2bc4 <_GLOBAL__sub_I_u8g2+0x15c>)
    2b52:	711c      	strb	r4, [r3, #4]
    2b54:	505c      	str	r4, [r3, r1]
    2b56:	601a      	str	r2, [r3, #0]
{
private:
	unsigned long us;
public:
	elapsedMicros(void) { us = micros(); }
	elapsedMicros(unsigned long val) { us = micros() - val; }
    2b58:	f006 f9de 	bl	8f18 <micros>
    2b5c:	4b1a      	ldr	r3, [pc, #104]	; (2bc8 <_GLOBAL__sub_I_u8g2+0x160>)
int period = 1000;
unsigned long time_now = 0;

uint32_t logFileSize = 0;
uint32_t newFileCount = 0;
Bounce logButton = Bounce(LOG_BTN, 15); // 15 = 15 ms debounce time
    2b5e:	220f      	movs	r2, #15
    2b60:	2105      	movs	r1, #5
    2b62:	6018      	str	r0, [r3, #0]
    2b64:	4819      	ldr	r0, [pc, #100]	; (2bcc <_GLOBAL__sub_I_u8g2+0x164>)
				sprintf(disp_msg_5, "NewFileCount: %d", newFileCount);
			}
		}
		time_now = millis();
	}
}
    2b66:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
int period = 1000;
unsigned long time_now = 0;

uint32_t logFileSize = 0;
uint32_t newFileCount = 0;
Bounce logButton = Bounce(LOG_BTN, 15); // 15 = 15 ms debounce time
    2b6a:	f000 b9cf 	b.w	2f0c <Bounce::Bounce(unsigned char, unsigned long)>
    2b6e:	bf00      	nop
    2b70:	20036298 	.word	0x20036298
    2b74:	20000008 	.word	0x20000008
    2b78:	00003c9d 	.word	0x00003c9d
    2b7c:	20000020 	.word	0x20000020
    2b80:	00002fb9 	.word	0x00002fb9
    2b84:	00003115 	.word	0x00003115
    2b88:	20000948 	.word	0x20000948
    2b8c:	20001b3c 	.word	0x20001b3c
    2b90:	20036358 	.word	0x20036358
    2b94:	20000080 	.word	0x20000080
    2b98:	20036354 	.word	0x20036354
    2b9c:	200009f8 	.word	0x200009f8
    2ba0:	20000a50 	.word	0x20000a50
    2ba4:	20001044 	.word	0x20001044
    2ba8:	003d0900 	.word	0x003d0900
    2bac:	00000239 	.word	0x00000239
    2bb0:	20004228 	.word	0x20004228
    2bb4:	2000005c 	.word	0x2000005c
    2bb8:	0000034d 	.word	0x0000034d
    2bbc:	20004280 	.word	0x20004280
    2bc0:	00032008 	.word	0x00032008
    2bc4:	200000a4 	.word	0x200000a4
    2bc8:	20004210 	.word	0x20004210
    2bcc:	20004218 	.word	0x20004218

00002bd0 <breakTime(long, tmElements_t&)>:
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    2bd0:	4b62      	ldr	r3, [pc, #392]	; (2d5c <breakTime(long, tmElements_t&)+0x18c>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2bd2:	4a63      	ldr	r2, [pc, #396]	; (2d60 <breakTime(long, tmElements_t&)+0x190>)
  time /= 24; // now it is days
    2bd4:	fba3 3c00 	umull	r3, ip, r3, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2bd8:	4b62      	ldr	r3, [pc, #392]	; (2d64 <breakTime(long, tmElements_t&)+0x194>)
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
    2bda:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
// leap year calculator expects year argument as years offset from 1970
#define LEAP_YEAR(Y)     ( ((1970+(Y))>0) && !((1970+(Y))%4) && ( ((1970+(Y))%100) || !((1970+(Y))%400) ) )

static  const uint8_t monthDays[]={31,28,31,30,31,30,31,31,30,31,30,31}; // API starts months from 1, this array starts from 0
 
void breakTime(time_t timeInput, tmElements_t &tm){
    2bde:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2be2:	fba3 4800 	umull	r4, r8, r3, r0
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2be6:	f10c 0e04 	add.w	lr, ip, #4
    2bea:	4e5f      	ldr	r6, [pc, #380]	; (2d68 <breakTime(long, tmElements_t&)+0x198>)
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2bec:	fba2 4200 	umull	r4, r2, r2, r0
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2bf0:	ea4f 1858 	mov.w	r8, r8, lsr #5
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2bf4:	f8df 917c 	ldr.w	r9, [pc, #380]	; 2d74 <breakTime(long, tmElements_t&)+0x1a4>
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2bf8:	fbae 6706 	umull	r6, r7, lr, r6
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2bfc:	0ad2      	lsrs	r2, r2, #11
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2bfe:	fba3 4308 	umull	r4, r3, r3, r8
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2c02:	2500      	movs	r5, #0
    2c04:	ebc7 040e 	rsb	r4, r7, lr
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2c08:	fba9 9602 	umull	r9, r6, r9, r2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2c0c:	095b      	lsrs	r3, r3, #5
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2c0e:	f8df 915c 	ldr.w	r9, [pc, #348]	; 2d6c <breakTime(long, tmElements_t&)+0x19c>
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2c12:	eb07 0454 	add.w	r4, r7, r4, lsr #1
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2c16:	f04f 0b64 	mov.w	fp, #100	; 0x64
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2c1a:	0936      	lsrs	r6, r6, #4
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2c1c:	f44f 7ac8 	mov.w	sl, #400	; 0x190
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2c20:	08a4      	lsrs	r4, r4, #2
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2c22:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2c26:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2c2a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2c2e:	ebc4 040e 	rsb	r4, r4, lr
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2c32:	ebc8 1708 	rsb	r7, r8, r8, lsl #4
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2c36:	eba2 06c6 	sub.w	r6, r2, r6, lsl #3
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
  
  year = 0;  
  days = 0;
    2c3a:	462a      	mov	r2, r5
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2c3c:	eba8 0383 	sub.w	r3, r8, r3, lsl #2
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2c40:	3401      	adds	r4, #1
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2c42:	eba0 0087 	sub.w	r0, r0, r7, lsl #2
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
    2c46:	708e      	strb	r6, [r1, #2]
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
    2c48:	704b      	strb	r3, [r1, #1]
  uint8_t month, monthLength;
  uint32_t time;
  unsigned long days;

  time = (uint32_t)timeInput;
  tm.Second = time % 60;
    2c4a:	7008      	strb	r0, [r1, #0]
  time /= 60; // now it is minutes
  tm.Minute = time % 60;
  time /= 60; // now it is hours
  tm.Hour = time % 24;
  time /= 24; // now it is days
  tm.Wday = ((time + 4) % 7) + 1;  // Sunday is day 1 
    2c4c:	70cc      	strb	r4, [r1, #3]
    2c4e:	b2ef      	uxtb	r7, r5
  
  year = 0;  
  days = 0;
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    2c50:	f240 146d 	movw	r4, #365	; 0x16d
    2c54:	f207 73b2 	addw	r3, r7, #1970	; 0x7b2
    2c58:	fb89 0e03 	smull	r0, lr, r9, r3
    2c5c:	f013 0803 	ands.w	r8, r3, #3
    2c60:	ea4f 70e3 	mov.w	r0, r3, asr #31
    2c64:	ebc0 166e 	rsb	r6, r0, lr, asr #5
    2c68:	d10d      	bne.n	2c86 <breakTime(long, tmElements_t&)+0xb6>
    2c6a:	ebc0 10ee 	rsb	r0, r0, lr, asr #7
    2c6e:	fb0b 3616 	mls	r6, fp, r6, r3
    2c72:	f44f 74b7 	mov.w	r4, #366	; 0x16e
    2c76:	fb0a 3010 	mls	r0, sl, r0, r3
    2c7a:	b926      	cbnz	r6, 2c86 <breakTime(long, tmElements_t&)+0xb6>
    2c7c:	2800      	cmp	r0, #0
    2c7e:	f240 106d 	movw	r0, #365	; 0x16d
    2c82:	bf18      	it	ne
    2c84:	4604      	movne	r4, r0
    2c86:	4422      	add	r2, r4
    2c88:	3501      	adds	r5, #1
    2c8a:	4594      	cmp	ip, r2
    2c8c:	d2df      	bcs.n	2c4e <breakTime(long, tmElements_t&)+0x7e>
    year++;
  }
  tm.Year = year; // year is offset from 1970 
    2c8e:	718f      	strb	r7, [r1, #6]
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2c90:	f1b8 0f00 	cmp.w	r8, #0
    2c94:	d10c      	bne.n	2cb0 <breakTime(long, tmElements_t&)+0xe0>
    2c96:	4835      	ldr	r0, [pc, #212]	; (2d6c <breakTime(long, tmElements_t&)+0x19c>)
    2c98:	17de      	asrs	r6, r3, #31
    2c9a:	2564      	movs	r5, #100	; 0x64
    2c9c:	fb80 4003 	smull	r4, r0, r0, r3
    2ca0:	ebc6 1460 	rsb	r4, r6, r0, asr #5
    2ca4:	fb05 3414 	mls	r4, r5, r4, r3
    2ca8:	b3c4      	cbz	r4, 2d1c <breakTime(long, tmElements_t&)+0x14c>
    2caa:	f44f 74b7 	mov.w	r4, #366	; 0x16e
    2cae:	e002      	b.n	2cb6 <breakTime(long, tmElements_t&)+0xe6>
    2cb0:	f240 146d 	movw	r4, #365	; 0x16d
    2cb4:	17de      	asrs	r6, r3, #31
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2cb6:	482d      	ldr	r0, [pc, #180]	; (2d6c <breakTime(long, tmElements_t&)+0x19c>)
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    2cb8:	1b12      	subs	r2, r2, r4
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2cba:	2564      	movs	r5, #100	; 0x64
    2cbc:	f44f 74c8 	mov.w	r4, #400	; 0x190
    2cc0:	fb80 7003 	smull	r7, r0, r0, r3
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
  time  -= days; // now it is days in this year, starting at 0
    2cc4:	ebc2 0c0c 	rsb	ip, r2, ip
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2cc8:	2200      	movs	r2, #0
    2cca:	ebc6 1760 	rsb	r7, r6, r0, asr #5
    2cce:	ebc6 16e0 	rsb	r6, r6, r0, asr #7
    2cd2:	2001      	movs	r0, #1
    2cd4:	fb05 3717 	mls	r7, r5, r7, r3
        monthLength=29;
      } else {
        monthLength=28;
      }
    } else {
      monthLength = monthDays[month];
    2cd8:	4d25      	ldr	r5, [pc, #148]	; (2d70 <breakTime(long, tmElements_t&)+0x1a0>)
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2cda:	fb04 3616 	mls	r6, r4, r6, r3
    2cde:	e002      	b.n	2ce6 <breakTime(long, tmElements_t&)+0x116>
    2ce0:	3001      	adds	r0, #1
    2ce2:	3201      	adds	r2, #1
    2ce4:	b2c0      	uxtb	r0, r0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
    2ce6:	2a01      	cmp	r2, #1
    2ce8:	b2d4      	uxtb	r4, r2
    2cea:	d024      	beq.n	2d36 <breakTime(long, tmElements_t&)+0x166>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2cec:	5d53      	ldrb	r3, [r2, r5]
    2cee:	4563      	cmp	r3, ip
    2cf0:	d80b      	bhi.n	2d0a <breakTime(long, tmElements_t&)+0x13a>
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    2cf2:	280c      	cmp	r0, #12
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
      time -= monthLength;
    2cf4:	ebc3 0c0c 	rsb	ip, r3, ip
  time  -= days; // now it is days in this year, starting at 0
  
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    2cf8:	d1f2      	bne.n	2ce0 <breakTime(long, tmElements_t&)+0x110>
    2cfa:	240d      	movs	r4, #13
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2cfc:	f10c 0c01 	add.w	ip, ip, #1
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    2d00:	714c      	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
    2d02:	f881 c004 	strb.w	ip, [r1, #4]
}
    2d06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    2d0a:	3401      	adds	r4, #1
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
  tm.Day = time + 1;     // day of month
    2d0c:	f10c 0c01 	add.w	ip, ip, #1
    2d10:	b2e4      	uxtb	r4, r4
    2d12:	f881 c004 	strb.w	ip, [r1, #4]
      time -= monthLength;
    } else {
        break;
    }
  }
  tm.Month = month + 1;  // jan is month 1  
    2d16:	714c      	strb	r4, [r1, #5]
  tm.Day = time + 1;     // day of month
}
    2d18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  while((unsigned)(days += (LEAP_YEAR(year) ? 366 : 365)) <= time) {
    year++;
  }
  tm.Year = year; // year is offset from 1970 
  
  days -= LEAP_YEAR(year) ? 366 : 365;
    2d1c:	ebc6 10e0 	rsb	r0, r6, r0, asr #7
    2d20:	f44f 75c8 	mov.w	r5, #400	; 0x190
    2d24:	f240 146d 	movw	r4, #365	; 0x16d
    2d28:	fb05 3010 	mls	r0, r5, r0, r3
    2d2c:	2800      	cmp	r0, #0
    2d2e:	bf08      	it	eq
    2d30:	f44f 74b7 	moveq.w	r4, #366	; 0x16e
    2d34:	e7bf      	b.n	2cb6 <breakTime(long, tmElements_t&)+0xe6>
  days=0;
  month=0;
  monthLength=0;
  for (month=0; month<12; month++) {
    if (month==1) { // february
      if (LEAP_YEAR(year)) {
    2d36:	f1b8 0f00 	cmp.w	r8, #0
    2d3a:	d109      	bne.n	2d50 <breakTime(long, tmElements_t&)+0x180>
    2d3c:	b967      	cbnz	r7, 2d58 <breakTime(long, tmElements_t&)+0x188>
    2d3e:	2e00      	cmp	r6, #0
    2d40:	bf14      	ite	ne
    2d42:	231c      	movne	r3, #28
    2d44:	231d      	moveq	r3, #29
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2d46:	459c      	cmp	ip, r3
    2d48:	d304      	bcc.n	2d54 <breakTime(long, tmElements_t&)+0x184>
      time -= monthLength;
    2d4a:	ebc3 0c0c 	rsb	ip, r3, ip
    2d4e:	e7c7      	b.n	2ce0 <breakTime(long, tmElements_t&)+0x110>
    2d50:	231c      	movs	r3, #28
    2d52:	e7f8      	b.n	2d46 <breakTime(long, tmElements_t&)+0x176>
      }
    } else {
      monthLength = monthDays[month];
    }
    
    if (time >= monthLength) {
    2d54:	2402      	movs	r4, #2
    2d56:	e7d1      	b.n	2cfc <breakTime(long, tmElements_t&)+0x12c>
    2d58:	231d      	movs	r3, #29
    2d5a:	e7f4      	b.n	2d46 <breakTime(long, tmElements_t&)+0x176>
    2d5c:	c22e4507 	.word	0xc22e4507
    2d60:	91a2b3c5 	.word	0x91a2b3c5
    2d64:	88888889 	.word	0x88888889
    2d68:	24924925 	.word	0x24924925
    2d6c:	51eb851f 	.word	0x51eb851f
    2d70:	20000484 	.word	0x20000484
    2d74:	aaaaaaab 	.word	0xaaaaaaab

00002d78 <refreshCache(long) [clone .part.0]>:

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    2d78:	b510      	push	{r4, lr}
  if (t != cacheTime) {
    breakTime(t, tm); 
    2d7a:	4903      	ldr	r1, [pc, #12]	; (2d88 <refreshCache(long) [clone .part.0]+0x10>)

static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
    2d7c:	4604      	mov	r4, r0
  if (t != cacheTime) {
    breakTime(t, tm); 
    2d7e:	f7ff ff27 	bl	2bd0 <breakTime(long, tmElements_t&)>
    cacheTime = t; 
    2d82:	4b02      	ldr	r3, [pc, #8]	; (2d8c <refreshCache(long) [clone .part.0]+0x14>)
    2d84:	601c      	str	r4, [r3, #0]
    2d86:	bd10      	pop	{r4, pc}
    2d88:	2003681c 	.word	0x2003681c
    2d8c:	20036818 	.word	0x20036818

00002d90 <now()>:
#ifdef TIME_DRIFT_INFO   // define this to get drift data
time_t sysUnsyncedTime = 0; // the time sysTime unadjusted by sync  
#endif


time_t now() {
    2d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2d92:	4c1b      	ldr	r4, [pc, #108]	; (2e00 <now()+0x70>)
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2d94:	4d1b      	ldr	r5, [pc, #108]	; (2e04 <now()+0x74>)
    2d96:	6823      	ldr	r3, [r4, #0]
    2d98:	682a      	ldr	r2, [r5, #0]
    2d9a:	4f1b      	ldr	r7, [pc, #108]	; (2e08 <now()+0x78>)
    2d9c:	1a9b      	subs	r3, r3, r2
    2d9e:	6838      	ldr	r0, [r7, #0]
    2da0:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    2da4:	d30c      	bcc.n	2dc0 <now()+0x30>
    2da6:	3001      	adds	r0, #1
    2da8:	e000      	b.n	2dac <now()+0x1c>
    2daa:	4608      	mov	r0, r1
		// millis() and prevMillis are both unsigned ints thus the subtraction will always be the absolute value of the difference
    sysTime++;
    prevMillis += 1000;	
    2dac:	f502 727a 	add.w	r2, r2, #1000	; 0x3e8
    2db0:	6823      	ldr	r3, [r4, #0]
    2db2:	1c41      	adds	r1, r0, #1
#endif


time_t now() {
	// calculate number of seconds passed since last call to now()
  while (millis() - prevMillis >= 1000) {
    2db4:	1a9b      	subs	r3, r3, r2
    2db6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
    2dba:	d2f6      	bcs.n	2daa <now()+0x1a>
    2dbc:	6038      	str	r0, [r7, #0]
    2dbe:	602a      	str	r2, [r5, #0]
    prevMillis += 1000;	
#ifdef TIME_DRIFT_INFO
    sysUnsyncedTime++; // this can be compared to the synced time to measure long term drift     
#endif
  }
  if (nextSyncTime <= sysTime) {
    2dc0:	4e12      	ldr	r6, [pc, #72]	; (2e0c <now()+0x7c>)
    2dc2:	6833      	ldr	r3, [r6, #0]
    2dc4:	4298      	cmp	r0, r3
    2dc6:	d30f      	bcc.n	2de8 <now()+0x58>
    if (getTimePtr != 0) {
    2dc8:	4b11      	ldr	r3, [pc, #68]	; (2e10 <now()+0x80>)
    2dca:	681b      	ldr	r3, [r3, #0]
    2dcc:	b163      	cbz	r3, 2de8 <now()+0x58>
      time_t t = getTimePtr();
    2dce:	4798      	blx	r3
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2dd0:	4b10      	ldr	r3, [pc, #64]	; (2e14 <now()+0x84>)
#endif
  }
  if (nextSyncTime <= sysTime) {
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
    2dd2:	b950      	cbnz	r0, 2dea <now()+0x5a>
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2dd4:	4910      	ldr	r1, [pc, #64]	; (2e18 <now()+0x88>)
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2dd6:	681a      	ldr	r2, [r3, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2dd8:	780b      	ldrb	r3, [r1, #0]
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2dda:	6838      	ldr	r0, [r7, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2ddc:	3300      	adds	r3, #0
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2dde:	4402      	add	r2, r0
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2de0:	bf18      	it	ne
    2de2:	2301      	movne	r3, #1
    if (getTimePtr != 0) {
      time_t t = getTimePtr();
      if (t != 0) {
        setTime(t);
      } else {
        nextSyncTime = sysTime + syncInterval;
    2de4:	6032      	str	r2, [r6, #0]
        Status = (Status == timeNotSet) ?  timeNotSet : timeNeedsSync;
    2de6:	700b      	strb	r3, [r1, #0]
      }
    }
  }  
  return (time_t)sysTime;
}
    2de8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2dea:	681b      	ldr	r3, [r3, #0]
  Status = timeSet;
    2dec:	2102      	movs	r1, #2
    2dee:	6824      	ldr	r4, [r4, #0]
    2df0:	4a09      	ldr	r2, [pc, #36]	; (2e18 <now()+0x88>)
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2df2:	4403      	add	r3, r0
#ifdef TIME_DRIFT_INFO
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
    2df4:	6038      	str	r0, [r7, #0]
  nextSyncTime = (uint32_t)t + syncInterval;
  Status = timeSet;
  prevMillis = millis();  // restart counting from now (thanks to Korman for this fix)
    2df6:	602c      	str	r4, [r5, #0]
 if(sysUnsyncedTime == 0) 
   sysUnsyncedTime = t;   // store the time of the first call to set a valid Time   
#endif

  sysTime = (uint32_t)t;  
  nextSyncTime = (uint32_t)t + syncInterval;
    2df8:	6033      	str	r3, [r6, #0]
  Status = timeSet;
    2dfa:	7011      	strb	r1, [r2, #0]
    2dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    2dfe:	bf00      	nop
    2e00:	20036ca0 	.word	0x20036ca0
    2e04:	20036830 	.word	0x20036830
    2e08:	20036824 	.word	0x20036824
    2e0c:	20036834 	.word	0x20036834
    2e10:	2003682c 	.word	0x2003682c
    2e14:	200010b0 	.word	0x200010b0
    2e18:	20036828 	.word	0x20036828

00002e1c <hour()>:
    breakTime(t, tm); 
    cacheTime = t; 
  }
}

int hour() { // the hour now 
    2e1c:	b508      	push	{r3, lr}
  return hour(now()); 
    2e1e:	f7ff ffb7 	bl	2d90 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2e22:	4b04      	ldr	r3, [pc, #16]	; (2e34 <hour()+0x18>)
    2e24:	681b      	ldr	r3, [r3, #0]
    2e26:	4298      	cmp	r0, r3
    2e28:	d001      	beq.n	2e2e <hour()+0x12>
    2e2a:	f7ff ffa5 	bl	2d78 <refreshCache(long) [clone .part.0]>
  return hour(now()); 
}

int hour(time_t t) { // the hour for the given time
  refreshCache(t);
  return tm.Hour;  
    2e2e:	4b02      	ldr	r3, [pc, #8]	; (2e38 <hour()+0x1c>)
  }
}

int hour() { // the hour now 
  return hour(now()); 
}
    2e30:	7898      	ldrb	r0, [r3, #2]
    2e32:	bd08      	pop	{r3, pc}
    2e34:	20036818 	.word	0x20036818
    2e38:	2003681c 	.word	0x2003681c

00002e3c <minute()>:

uint8_t isPM(time_t t) { // returns true if PM
  return (hour(t) >= 12); 
}

int minute() {
    2e3c:	b508      	push	{r3, lr}
  return minute(now()); 
    2e3e:	f7ff ffa7 	bl	2d90 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2e42:	4b04      	ldr	r3, [pc, #16]	; (2e54 <minute()+0x18>)
    2e44:	681b      	ldr	r3, [r3, #0]
    2e46:	4298      	cmp	r0, r3
    2e48:	d001      	beq.n	2e4e <minute()+0x12>
    2e4a:	f7ff ff95 	bl	2d78 <refreshCache(long) [clone .part.0]>
  return minute(now()); 
}

int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
    2e4e:	4b02      	ldr	r3, [pc, #8]	; (2e58 <minute()+0x1c>)
  return (hour(t) >= 12); 
}

int minute() {
  return minute(now()); 
}
    2e50:	7858      	ldrb	r0, [r3, #1]
    2e52:	bd08      	pop	{r3, pc}
    2e54:	20036818 	.word	0x20036818
    2e58:	2003681c 	.word	0x2003681c

00002e5c <second()>:
int minute(time_t t) { // the minute for the given time
  refreshCache(t);
  return tm.Minute;  
}

int second() {
    2e5c:	b508      	push	{r3, lr}
  return second(now()); 
    2e5e:	f7ff ff97 	bl	2d90 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2e62:	4b04      	ldr	r3, [pc, #16]	; (2e74 <second()+0x18>)
    2e64:	681b      	ldr	r3, [r3, #0]
    2e66:	4298      	cmp	r0, r3
    2e68:	d001      	beq.n	2e6e <second()+0x12>
    2e6a:	f7ff ff85 	bl	2d78 <refreshCache(long) [clone .part.0]>
  return second(now()); 
}

int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
    2e6e:	4b02      	ldr	r3, [pc, #8]	; (2e78 <second()+0x1c>)
  return tm.Minute;  
}

int second() {
  return second(now()); 
}
    2e70:	7818      	ldrb	r0, [r3, #0]
    2e72:	bd08      	pop	{r3, pc}
    2e74:	20036818 	.word	0x20036818
    2e78:	2003681c 	.word	0x2003681c

00002e7c <day()>:
int second(time_t t) {  // the second for the given time
  refreshCache(t);
  return tm.Second;
}

int day(){
    2e7c:	b508      	push	{r3, lr}
  return(day(now())); 
    2e7e:	f7ff ff87 	bl	2d90 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2e82:	4b04      	ldr	r3, [pc, #16]	; (2e94 <day()+0x18>)
    2e84:	681b      	ldr	r3, [r3, #0]
    2e86:	4298      	cmp	r0, r3
    2e88:	d001      	beq.n	2e8e <day()+0x12>
    2e8a:	f7ff ff75 	bl	2d78 <refreshCache(long) [clone .part.0]>
  return(day(now())); 
}

int day(time_t t) { // the day for the given time (0-6)
  refreshCache(t);
  return tm.Day;
    2e8e:	4b02      	ldr	r3, [pc, #8]	; (2e98 <day()+0x1c>)
  return tm.Second;
}

int day(){
  return(day(now())); 
}
    2e90:	7918      	ldrb	r0, [r3, #4]
    2e92:	bd08      	pop	{r3, pc}
    2e94:	20036818 	.word	0x20036818
    2e98:	2003681c 	.word	0x2003681c

00002e9c <month()>:
int weekday(time_t t) {
  refreshCache(t);
  return tm.Wday;
}
   
int month(){
    2e9c:	b508      	push	{r3, lr}
  return month(now()); 
    2e9e:	f7ff ff77 	bl	2d90 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2ea2:	4b04      	ldr	r3, [pc, #16]	; (2eb4 <month()+0x18>)
    2ea4:	681b      	ldr	r3, [r3, #0]
    2ea6:	4298      	cmp	r0, r3
    2ea8:	d001      	beq.n	2eae <month()+0x12>
    2eaa:	f7ff ff65 	bl	2d78 <refreshCache(long) [clone .part.0]>
  return month(now()); 
}

int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
    2eae:	4b02      	ldr	r3, [pc, #8]	; (2eb8 <month()+0x1c>)
  return tm.Wday;
}
   
int month(){
  return month(now()); 
}
    2eb0:	7958      	ldrb	r0, [r3, #5]
    2eb2:	bd08      	pop	{r3, pc}
    2eb4:	20036818 	.word	0x20036818
    2eb8:	2003681c 	.word	0x2003681c

00002ebc <year()>:
int month(time_t t) {  // the month for the given time
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
    2ebc:	b508      	push	{r3, lr}
  return year(now()); 
    2ebe:	f7ff ff67 	bl	2d90 <now()>
static tmElements_t tm;          // a cache of time elements
static time_t cacheTime;   // the time the cache was updated
static uint32_t syncInterval = 300;  // time sync will be attempted after this many seconds

void refreshCache(time_t t) {
  if (t != cacheTime) {
    2ec2:	4b05      	ldr	r3, [pc, #20]	; (2ed8 <year()+0x1c>)
    2ec4:	681b      	ldr	r3, [r3, #0]
    2ec6:	4298      	cmp	r0, r3
    2ec8:	d001      	beq.n	2ece <year()+0x12>
    2eca:	f7ff ff55 	bl	2d78 <refreshCache(long) [clone .part.0]>
  return year(now()); 
}

int year(time_t t) { // the year for the given time
  refreshCache(t);
  return tmYearToCalendar(tm.Year);
    2ece:	4b03      	ldr	r3, [pc, #12]	; (2edc <year()+0x20>)
  refreshCache(t);
  return tm.Month;
}

int year() {  // as in Processing, the full four digit year: (2009, 2010 etc) 
  return year(now()); 
    2ed0:	7998      	ldrb	r0, [r3, #6]
}
    2ed2:	f200 70b2 	addw	r0, r0, #1970	; 0x7b2
    2ed6:	bd08      	pop	{r3, pc}
    2ed8:	20036818 	.word	0x20036818
    2edc:	2003681c 	.word	0x2003681c

00002ee0 <timeStatus()>:
void adjustTime(long adjustment) {
  sysTime += adjustment;
}

// indicates if time has been set and recently synchronized
timeStatus_t timeStatus() {
    2ee0:	b508      	push	{r3, lr}
  now(); // required to actually update the status
    2ee2:	f7ff ff55 	bl	2d90 <now()>
  return Status;
    2ee6:	4b01      	ldr	r3, [pc, #4]	; (2eec <timeStatus()+0xc>)
}
    2ee8:	7818      	ldrb	r0, [r3, #0]
    2eea:	bd08      	pop	{r3, pc}
    2eec:	20036828 	.word	0x20036828

00002ef0 <setSyncProvider(long (*)())>:

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
  nextSyncTime = sysTime;
    2ef0:	4b03      	ldr	r3, [pc, #12]	; (2f00 <setSyncProvider(long (*)())+0x10>)
    2ef2:	4a04      	ldr	r2, [pc, #16]	; (2f04 <setSyncProvider(long (*)())+0x14>)
    2ef4:	6819      	ldr	r1, [r3, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2ef6:	4b04      	ldr	r3, [pc, #16]	; (2f08 <setSyncProvider(long (*)())+0x18>)
  nextSyncTime = sysTime;
    2ef8:	6011      	str	r1, [r2, #0]
  now(); // required to actually update the status
  return Status;
}

void setSyncProvider( getExternalTime getTimeFunction){
  getTimePtr = getTimeFunction;  
    2efa:	6018      	str	r0, [r3, #0]
  nextSyncTime = sysTime;
  now(); // this will sync the clock
    2efc:	f7ff bf48 	b.w	2d90 <now()>
    2f00:	20036824 	.word	0x20036824
    2f04:	20036834 	.word	0x20036834
    2f08:	2003682c 	.word	0x2003682c

00002f0c <Bounce::Bounce(unsigned char, unsigned long)>:

#include <Arduino.h>
#include "Bounce.h"


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
    2f0c:	b538      	push	{r3, r4, r5, lr}
    2f0e:	4b07      	ldr	r3, [pc, #28]	; (2f2c <Bounce::Bounce(unsigned char, unsigned long)+0x20>)
    2f10:	4604      	mov	r4, r0
    2f12:	460d      	mov	r5, r1


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    2f14:	2100      	movs	r1, #0
    2f16:	681b      	ldr	r3, [r3, #0]
       }


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
    2f18:	6042      	str	r2, [r0, #4]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    2f1a:	4628      	mov	r0, r5


void Bounce::interval(unsigned long interval_millis)
{
  this->interval_millis = interval_millis;
  this->rebounce_millis = 0;
    2f1c:	60a1      	str	r1, [r4, #8]


Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
    2f1e:	6023      	str	r3, [r4, #0]
	state = digitalRead(pin);
    2f20:	f006 f866 	bl	8ff0 <digitalRead>
    this->pin = pin;
    2f24:	7365      	strb	r5, [r4, #13]

Bounce::Bounce(uint8_t pin,unsigned long interval_millis)
{
	interval(interval_millis);
	previous_millis = millis();
	state = digitalRead(pin);
    2f26:	7320      	strb	r0, [r4, #12]
    this->pin = pin;
}
    2f28:	4620      	mov	r0, r4
    2f2a:	bd38      	pop	{r3, r4, r5, pc}
    2f2c:	20036ca0 	.word	0x20036ca0

00002f30 <Bounce::debounce()>:
	return (int)state;
}


// Protected: debounces the pin
int Bounce::debounce() {
    2f30:	b538      	push	{r3, r4, r5, lr}
    2f32:	4604      	mov	r4, r0
	
	uint8_t newState = digitalRead(pin);
    2f34:	7b40      	ldrb	r0, [r0, #13]
    2f36:	f006 f85b 	bl	8ff0 <digitalRead>
	if (state != newState ) {
    2f3a:	7b23      	ldrb	r3, [r4, #12]
    2f3c:	4283      	cmp	r3, r0
    2f3e:	d00c      	beq.n	2f5a <Bounce::debounce()+0x2a>
    2f40:	4907      	ldr	r1, [pc, #28]	; (2f60 <Bounce::debounce()+0x30>)
    2f42:	4602      	mov	r2, r0
  		if (millis() - previous_millis >= interval_millis) {
    2f44:	6825      	ldr	r5, [r4, #0]
    2f46:	680b      	ldr	r3, [r1, #0]
    2f48:	6860      	ldr	r0, [r4, #4]
    2f4a:	1b5b      	subs	r3, r3, r5
    2f4c:	4283      	cmp	r3, r0
    2f4e:	d304      	bcc.n	2f5a <Bounce::debounce()+0x2a>
    2f50:	680b      	ldr	r3, [r1, #0]
  			previous_millis = millis();
  			state = newState;
  			return 1;
    2f52:	2001      	movs	r0, #1
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
  			state = newState;
    2f54:	7322      	strb	r2, [r4, #12]
int Bounce::debounce() {
	
	uint8_t newState = digitalRead(pin);
	if (state != newState ) {
  		if (millis() - previous_millis >= interval_millis) {
  			previous_millis = millis();
    2f56:	6023      	str	r3, [r4, #0]
  			state = newState;
  			return 1;
    2f58:	bd38      	pop	{r3, r4, r5, pc}
	}
  }
  
  return 0;
    2f5a:	2000      	movs	r0, #0
	
}
    2f5c:	bd38      	pop	{r3, r4, r5, pc}
    2f5e:	bf00      	nop
    2f60:	20036ca0 	.word	0x20036ca0

00002f64 <Bounce::update()>:
}



int Bounce::update()
{
    2f64:	b538      	push	{r3, r4, r5, lr}
    2f66:	4604      	mov	r4, r0
	if ( debounce() ) {
    2f68:	f7ff ffe2 	bl	2f30 <Bounce::debounce()>
    2f6c:	b988      	cbnz	r0, 2f92 <Bounce::update()+0x2e>
        return stateChanged = 1;
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
    2f6e:	68a3      	ldr	r3, [r4, #8]
    2f70:	b163      	cbz	r3, 2f8c <Bounce::update()+0x28>
    2f72:	490b      	ldr	r1, [pc, #44]	; (2fa0 <Bounce::update()+0x3c>)
    2f74:	6825      	ldr	r5, [r4, #0]
    2f76:	680a      	ldr	r2, [r1, #0]
    2f78:	1b52      	subs	r2, r2, r5
    2f7a:	4293      	cmp	r3, r2
    2f7c:	d806      	bhi.n	2f8c <Bounce::update()+0x28>
        previous_millis = millis();
		 rebounce(0);
		 return stateChanged = 1;
    2f7e:	2301      	movs	r3, #1
    2f80:	680a      	ldr	r2, [r1, #0]
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    2f82:	60a0      	str	r0, [r4, #8]
    }

     // We need to rebounce, so simulate a state change
     
	if ( rebounce_millis && (millis() - previous_millis >= rebounce_millis) ) {
        previous_millis = millis();
    2f84:	6022      	str	r2, [r4, #0]
		 rebounce(0);
		 return stateChanged = 1;
    2f86:	4618      	mov	r0, r3
    2f88:	73a3      	strb	r3, [r4, #14]
    2f8a:	bd38      	pop	{r3, r4, r5, pc}
	}

	return stateChanged = 0;
    2f8c:	2300      	movs	r3, #0
    2f8e:	73a3      	strb	r3, [r4, #14]
}
    2f90:	bd38      	pop	{r3, r4, r5, pc}

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    2f92:	2301      	movs	r3, #1
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    2f94:	2200      	movs	r2, #0

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    2f96:	4618      	mov	r0, r3
  this->rebounce_millis = 0;
}

void Bounce::rebounce(unsigned long interval)
{
	 this->rebounce_millis = interval;
    2f98:	60a2      	str	r2, [r4, #8]

int Bounce::update()
{
	if ( debounce() ) {
        rebounce(0);
        return stateChanged = 1;
    2f9a:	73a3      	strb	r3, [r4, #14]
    2f9c:	bd38      	pop	{r3, r4, r5, pc}
    2f9e:	bf00      	nop
    2fa0:	20036ca0 	.word	0x20036ca0

00002fa4 <Bounce::fallingEdge()>:
}

// The risingEdge method is true for one scan after the de-bounced input goes from off-to-on.
bool  Bounce::risingEdge() { return stateChanged && state; }
// The fallingEdge  method it true for one scan after the de-bounced input goes from on-to-off. 
bool  Bounce::fallingEdge() { return stateChanged && !state; }
    2fa4:	7b83      	ldrb	r3, [r0, #14]
    2fa6:	b123      	cbz	r3, 2fb2 <Bounce::fallingEdge()+0xe>
    2fa8:	7b00      	ldrb	r0, [r0, #12]
    2faa:	fab0 f080 	clz	r0, r0
    2fae:	0940      	lsrs	r0, r0, #5
    2fb0:	4770      	bx	lr
    2fb2:	4618      	mov	r0, r3
    2fb4:	4770      	bx	lr
    2fb6:	bf00      	nop

00002fb8 <u8x8_gpio_and_delay_arduino>:

#ifdef U8X8_USE_PINS
extern "C" uint8_t u8x8_gpio_and_delay_arduino(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  uint8_t i;
  switch(msg)
    2fb8:	f1a1 0328 	sub.w	r3, r1, #40	; 0x28
/*=============================================*/
/*=== ARDUINO GPIO & DELAY ===*/

#ifdef U8X8_USE_PINS
extern "C" uint8_t u8x8_gpio_and_delay_arduino(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
    2fbc:	b530      	push	{r4, r5, lr}
    2fbe:	4605      	mov	r5, r0
    2fc0:	b083      	sub	sp, #12
  uint8_t i;
  switch(msg)
    2fc2:	2b25      	cmp	r3, #37	; 0x25
    2fc4:	d871      	bhi.n	30aa <u8x8_gpio_and_delay_arduino+0xf2>
    2fc6:	e8df f003 	tbb	[pc, r3]
    2fca:	4633      	.short	0x4633
    2fcc:	195f1616 	.word	0x195f1616
    2fd0:	70707070 	.word	0x70707070
    2fd4:	70707070 	.word	0x70707070
    2fd8:	70707070 	.word	0x70707070
    2fdc:	70707070 	.word	0x70707070
    2fe0:	70707070 	.word	0x70707070
    2fe4:	70707070 	.word	0x70707070
    2fe8:	70707070 	.word	0x70707070
    2fec:	4c4c7070 	.word	0x4c4c7070
	i = u8x8_GetPinValue(u8x8, msg);
	if ( i != U8X8_PIN_NONE )
	{
	  if ( u8x8_GetPinIndex(u8x8, msg) < U8X8_PIN_OUTPUT_CNT )
	  {
	    digitalWrite(i, arg_int);
    2ff0:	4611      	mov	r1, r2
    2ff2:	f005 fff7 	bl	8fe4 <digitalWrite>
	break;
      }
      
      return 0;
  }
  return 1;
    2ff6:	2001      	movs	r0, #1
}
    2ff8:	b003      	add	sp, #12
    2ffa:	bd30      	pop	{r4, r5, pc}
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    2ffc:	4b3e      	ldr	r3, [pc, #248]	; (30f8 <u8x8_gpio_and_delay_arduino+0x140>)
    case U8X8_MSG_DELAY_MILLI:
      delay(arg_int);
      break;
    case U8X8_MSG_DELAY_I2C:
      /* arg_int is 1 or 4: 100KHz (5us) or 400KHz (1.25us) */
      delayMicroseconds(arg_int<=2?5:2);
    2ffe:	2a03      	cmp	r2, #3
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3000:	4a3e      	ldr	r2, [pc, #248]	; (30fc <u8x8_gpio_and_delay_arduino+0x144>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    3002:	681c      	ldr	r4, [r3, #0]
    3004:	bf38      	it	cc
    3006:	2005      	movcc	r0, #5
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    3008:	6811      	ldr	r1, [r2, #0]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    300a:	461a      	mov	r2, r3

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    300c:	f103 43c6 	add.w	r3, r3, #1660944384	; 0x63000000
    3010:	bf28      	it	cs
    3012:	2002      	movcs	r0, #2
    3014:	f503 13de 	add.w	r3, r3, #1818624	; 0x1bc000
    3018:	f603 637f 	addw	r3, r3, #3711	; 0xe7f
    301c:	fba3 3101 	umull	r3, r1, r3, r1
    3020:	0c89      	lsrs	r1, r1, #18
    3022:	fb00 f101 	mul.w	r1, r0, r1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    3026:	6813      	ldr	r3, [r2, #0]
    3028:	1b1b      	subs	r3, r3, r4
    302a:	4299      	cmp	r1, r3
    302c:	d8fb      	bhi.n	3026 <u8x8_gpio_and_delay_arduino+0x6e>
    302e:	e7e2      	b.n	2ff6 <u8x8_gpio_and_delay_arduino+0x3e>
    3030:	352b      	adds	r5, #43	; 0x2b

#ifdef U8X8_USE_PINS
extern "C" uint8_t u8x8_gpio_and_delay_arduino(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
  uint8_t i;
  switch(msg)
    3032:	2400      	movs	r4, #0
    3034:	e004      	b.n	3040 <u8x8_gpio_and_delay_arduino+0x88>
	    pinMode(u8x8->pins[i], OUTPUT);
	  }
	  else
	  {
#ifdef INPUT_PULLUP
	    pinMode(u8x8->pins[i], INPUT_PULLUP);
    3036:	f005 ffe1 	bl	8ffc <pinMode>
    303a:	3401      	adds	r4, #1
  uint8_t i;
  switch(msg)
  {
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
    
      for( i = 0; i < U8X8_PIN_CNT; i++ )
    303c:	2c16      	cmp	r4, #22
    303e:	d0da      	beq.n	2ff6 <u8x8_gpio_and_delay_arduino+0x3e>
	if ( u8x8->pins[i] != U8X8_PIN_NONE )
    3040:	f815 3f01 	ldrb.w	r3, [r5, #1]!
	{
	  if ( i < U8X8_PIN_OUTPUT_CNT )
	  {
	    pinMode(u8x8->pins[i], OUTPUT);
    3044:	2101      	movs	r1, #1
  switch(msg)
  {
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
    
      for( i = 0; i < U8X8_PIN_CNT; i++ )
	if ( u8x8->pins[i] != U8X8_PIN_NONE )
    3046:	2bff      	cmp	r3, #255	; 0xff
	{
	  if ( i < U8X8_PIN_OUTPUT_CNT )
	  {
	    pinMode(u8x8->pins[i], OUTPUT);
    3048:	4618      	mov	r0, r3
  switch(msg)
  {
    case U8X8_MSG_GPIO_AND_DELAY_INIT:
    
      for( i = 0; i < U8X8_PIN_CNT; i++ )
	if ( u8x8->pins[i] != U8X8_PIN_NONE )
    304a:	d0f6      	beq.n	303a <u8x8_gpio_and_delay_arduino+0x82>
	{
	  if ( i < U8X8_PIN_OUTPUT_CNT )
    304c:	2c0f      	cmp	r4, #15
    304e:	d9f2      	bls.n	3036 <u8x8_gpio_and_delay_arduino+0x7e>
	    pinMode(u8x8->pins[i], OUTPUT);
	  }
	  else
	  {
#ifdef INPUT_PULLUP
	    pinMode(u8x8->pins[i], INPUT_PULLUP);
    3050:	4618      	mov	r0, r3
    3052:	2102      	movs	r1, #2
    3054:	e7ef      	b.n	3036 <u8x8_gpio_and_delay_arduino+0x7e>
    case U8X8_MSG_DELAY_100NANO:
      /* not used at the moment */
      break;
   
    case U8X8_MSG_DELAY_MILLI:
      delay(arg_int);
    3056:	4610      	mov	r0, r2
    3058:	f005 fef8 	bl	8e4c <delay>
	break;
      }
      
      return 0;
  }
  return 1;
    305c:	2001      	movs	r0, #1
}
    305e:	b003      	add	sp, #12
    3060:	bd30      	pop	{r4, r5, pc}
      /* arg_int is 1 or 4: 100KHz (5us) or 400KHz (1.25us) */
      delayMicroseconds(arg_int<=2?5:2);
      break;
    case U8X8_MSG_GPIO_I2C_CLOCK:
    case U8X8_MSG_GPIO_I2C_DATA:
      if ( arg_int == 0 )
    3062:	9201      	str	r2, [sp, #4]
      {
	pinMode(u8x8_GetPinValue(u8x8, msg), OUTPUT);
    3064:	f001 033f 	and.w	r3, r1, #63	; 0x3f
      /* arg_int is 1 or 4: 100KHz (5us) or 400KHz (1.25us) */
      delayMicroseconds(arg_int<=2?5:2);
      break;
    case U8X8_MSG_GPIO_I2C_CLOCK:
    case U8X8_MSG_GPIO_I2C_DATA:
      if ( arg_int == 0 )
    3068:	2a00      	cmp	r2, #0
    306a:	d135      	bne.n	30d8 <u8x8_gpio_and_delay_arduino+0x120>
      {
	pinMode(u8x8_GetPinValue(u8x8, msg), OUTPUT);
    306c:	441d      	add	r5, r3
    306e:	2101      	movs	r1, #1
    3070:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    3074:	f005 ffc2 	bl	8ffc <pinMode>
	digitalWrite(u8x8_GetPinValue(u8x8, msg), 0);
    3078:	9a01      	ldr	r2, [sp, #4]
    307a:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    307e:	4611      	mov	r1, r2
    3080:	f005 ffb0 	bl	8fe4 <digitalWrite>
	break;
      }
      
      return 0;
  }
  return 1;
    3084:	2001      	movs	r0, #1
    3086:	e7b7      	b.n	2ff8 <u8x8_gpio_and_delay_arduino+0x40>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    3088:	491b      	ldr	r1, [pc, #108]	; (30f8 <u8x8_gpio_and_delay_arduino+0x140>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    308a:	4b1c      	ldr	r3, [pc, #112]	; (30fc <u8x8_gpio_and_delay_arduino+0x144>)
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    308c:	6808      	ldr	r0, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    308e:	4c1c      	ldr	r4, [pc, #112]	; (3100 <u8x8_gpio_and_delay_arduino+0x148>)
    3090:	681b      	ldr	r3, [r3, #0]
    3092:	fba4 4303 	umull	r4, r3, r4, r3
    3096:	0c9b      	lsrs	r3, r3, #18
    3098:	2a00      	cmp	r2, #0
    309a:	bf14      	ite	ne
    309c:	461a      	movne	r2, r3
    309e:	2200      	moveq	r2, #0
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    30a0:	680b      	ldr	r3, [r1, #0]
    30a2:	1a1b      	subs	r3, r3, r0
    30a4:	429a      	cmp	r2, r3
    30a6:	d8fb      	bhi.n	30a0 <u8x8_gpio_and_delay_arduino+0xe8>
    30a8:	e7a5      	b.n	2ff6 <u8x8_gpio_and_delay_arduino+0x3e>
	digitalWrite(u8x8_GetPinValue(u8x8, msg), 1);
#endif 
      }
      break;
    default:
      if ( msg >= U8X8_MSG_GPIO(0) )
    30aa:	293f      	cmp	r1, #63	; 0x3f
    30ac:	d91c      	bls.n	30e8 <u8x8_gpio_and_delay_arduino+0x130>
    30ae:	f001 013f 	and.w	r1, r1, #63	; 0x3f
      {
	i = u8x8_GetPinValue(u8x8, msg);
    30b2:	186b      	adds	r3, r5, r1
    30b4:	f893 002c 	ldrb.w	r0, [r3, #44]	; 0x2c
	if ( i != U8X8_PIN_NONE )
    30b8:	28ff      	cmp	r0, #255	; 0xff
    30ba:	d09c      	beq.n	2ff6 <u8x8_gpio_and_delay_arduino+0x3e>
	{
	  if ( u8x8_GetPinIndex(u8x8, msg) < U8X8_PIN_OUTPUT_CNT )
    30bc:	290f      	cmp	r1, #15
    30be:	d997      	bls.n	2ff0 <u8x8_gpio_and_delay_arduino+0x38>
	  {
	    digitalWrite(i, arg_int);
	  }
	  else
	  {
	    if ( u8x8_GetPinIndex(u8x8, msg) == U8X8_PIN_OUTPUT_CNT )
    30c0:	2910      	cmp	r1, #16
    30c2:	d013      	beq.n	30ec <u8x8_gpio_and_delay_arduino+0x134>
	    {
	      // call yield() for the first pin only, u8x8 will always request all the pins, so this should be ok
	      yield();
	    }
	    u8x8_SetGPIOResult(u8x8, digitalRead(i) == 0 ? 0 : 1);
    30c4:	f005 ff94 	bl	8ff0 <digitalRead>
    30c8:	1c03      	adds	r3, r0, #0
	break;
      }
      
      return 0;
  }
  return 1;
    30ca:	f04f 0001 	mov.w	r0, #1
	    if ( u8x8_GetPinIndex(u8x8, msg) == U8X8_PIN_OUTPUT_CNT )
	    {
	      // call yield() for the first pin only, u8x8 will always request all the pins, so this should be ok
	      yield();
	    }
	    u8x8_SetGPIOResult(u8x8, digitalRead(i) == 0 ? 0 : 1);
    30ce:	bf18      	it	ne
    30d0:	2301      	movne	r3, #1
    30d2:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
    30d6:	e78f      	b.n	2ff8 <u8x8_gpio_and_delay_arduino+0x40>
	digitalWrite(u8x8_GetPinValue(u8x8, msg), 0);
      }
      else
      {
#ifdef INPUT_PULLUP
	pinMode(u8x8_GetPinValue(u8x8, msg), INPUT_PULLUP);
    30d8:	441d      	add	r5, r3
    30da:	2102      	movs	r1, #2
    30dc:	f895 002c 	ldrb.w	r0, [r5, #44]	; 0x2c
    30e0:	f005 ff8c 	bl	8ffc <pinMode>
	break;
      }
      
      return 0;
  }
  return 1;
    30e4:	2001      	movs	r0, #1
    30e6:	e787      	b.n	2ff8 <u8x8_gpio_and_delay_arduino+0x40>
	  }
	}
	break;
      }
      
      return 0;
    30e8:	2000      	movs	r0, #0
    30ea:	e785      	b.n	2ff8 <u8x8_gpio_and_delay_arduino+0x40>
    30ec:	9001      	str	r0, [sp, #4]
	  else
	  {
	    if ( u8x8_GetPinIndex(u8x8, msg) == U8X8_PIN_OUTPUT_CNT )
	    {
	      // call yield() for the first pin only, u8x8 will always request all the pins, so this should be ok
	      yield();
    30ee:	f007 fa11 	bl	a514 <yield>
    30f2:	9801      	ldr	r0, [sp, #4]
    30f4:	e7e6      	b.n	30c4 <u8x8_gpio_and_delay_arduino+0x10c>
    30f6:	bf00      	nop
    30f8:	e0001004 	.word	0xe0001004
    30fc:	2000112c 	.word	0x2000112c
    3100:	431bde83 	.word	0x431bde83

00003104 <u8x8_SetPin_HW_I2C(u8x8_struct*, unsigned char, unsigned char, unsigned char)>:
}
#endif /* obsolete com specific setup */

void u8x8_SetPin_HW_I2C(u8x8_t *u8x8, uint8_t reset, uint8_t clock, uint8_t data)
{
  u8x8_SetPin(u8x8, U8X8_PIN_RESET, reset);
    3104:	f880 1037 	strb.w	r1, [r0, #55]	; 0x37
  u8x8_SetPin(u8x8, U8X8_PIN_I2C_CLOCK, clock);
    3108:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  u8x8_SetPin(u8x8, U8X8_PIN_I2C_DATA, data);
    310c:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    3110:	4770      	bx	lr
    3112:	bf00      	nop

00003114 <u8x8_byte_arduino_hw_i2c>:
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    3114:	3914      	subs	r1, #20

/*=============================================*/
/*=== HARDWARE I2C ===*/

extern "C" uint8_t u8x8_byte_arduino_hw_i2c(U8X8_UNUSED u8x8_t *u8x8, U8X8_UNUSED uint8_t msg, U8X8_UNUSED uint8_t arg_int, U8X8_UNUSED void *arg_ptr)
{
    3116:	b538      	push	{r3, r4, r5, lr}
    3118:	4605      	mov	r5, r0
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
    311a:	290c      	cmp	r1, #12
    311c:	d833      	bhi.n	3186 <u8x8_byte_arduino_hw_i2c+0x72>
    311e:	e8df f001 	tbb	[pc, r1]
    3122:	3213      	.short	0x3213
    3124:	0d200732 	.word	0x0d200732
    3128:	32323232 	.word	0x32323232
    312c:	3232      	.short	0x3232
    312e:	0b          	.byte	0x0b
    312f:	00          	.byte	0x00
  {
    case U8X8_MSG_BYTE_SEND:
      Wire.write((uint8_t *)arg_ptr, (int)arg_int);
    3130:	4619      	mov	r1, r3
    3132:	4816      	ldr	r0, [pc, #88]	; (318c <u8x8_byte_arduino_hw_i2c+0x78>)
    3134:	f001 f83e 	bl	41b4 <TwoWire::write(unsigned char const*, unsigned int)>
      break;
    default:
      return 0;
  }
#endif
  return 1;
    3138:	2001      	movs	r0, #1
#ifdef U8X8_HAVE_HW_I2C
  switch(msg)
  {
    case U8X8_MSG_BYTE_SEND:
      Wire.write((uint8_t *)arg_ptr, (int)arg_int);
      break;
    313a:	bd38      	pop	{r3, r4, r5, pc}
	void beginTransmission(int address) {
		beginTransmission((uint8_t)address);
	}
	uint8_t endTransmission(uint8_t sendStop);
	uint8_t endTransmission(void) {
		return endTransmission(1);
    313c:	2101      	movs	r1, #1
    313e:	4813      	ldr	r0, [pc, #76]	; (318c <u8x8_byte_arduino_hw_i2c+0x78>)
    3140:	f001 f96a 	bl	4418 <TwoWire::endTransmission(unsigned char)>
      break;
    default:
      return 0;
  }
#endif
  return 1;
    3144:	2001      	movs	r0, #1
    3146:	bd38      	pop	{r3, r4, r5, pc}
  {
    case U8X8_MSG_BYTE_SEND:
      Wire.write((uint8_t *)arg_ptr, (int)arg_int);
      break;
    case U8X8_MSG_BYTE_INIT:
      if ( u8x8->bus_clock == 0 ) 	/* issue 769 */
    3148:	69ab      	ldr	r3, [r5, #24]
    314a:	b92b      	cbnz	r3, 3158 <u8x8_byte_arduino_hw_i2c+0x44>
	u8x8->bus_clock = u8x8->display_info->i2c_bus_clock_100kHz * 100000UL;
    314c:	682a      	ldr	r2, [r5, #0]
    314e:	4b10      	ldr	r3, [pc, #64]	; (3190 <u8x8_byte_arduino_hw_i2c+0x7c>)
    3150:	7b52      	ldrb	r2, [r2, #13]
    3152:	fb03 f302 	mul.w	r3, r3, r2
    3156:	61ab      	str	r3, [r5, #24]
      else
      {
	Wire.begin();
      }
#else
      Wire.begin();
    3158:	480c      	ldr	r0, [pc, #48]	; (318c <u8x8_byte_arduino_hw_i2c+0x78>)
    315a:	f001 f849 	bl	41f0 <TwoWire::begin()>
      break;
    default:
      return 0;
  }
#endif
  return 1;
    315e:	2001      	movs	r0, #1
	Wire.begin();
      }
#else
      Wire.begin();
#endif
      break;
    3160:	bd38      	pop	{r3, r4, r5, pc}
      break;
    case U8X8_MSG_BYTE_START_TRANSFER:
#if ARDUINO >= 10600
      /* not sure when the setClock function was introduced, but it is there since 1.6.0 */
      /* if there is any error with Wire.setClock() just remove this function call */
      Wire.setClock(u8x8->bus_clock); 
    3162:	4c0a      	ldr	r4, [pc, #40]	; (318c <u8x8_byte_arduino_hw_i2c+0x78>)
    3164:	69a9      	ldr	r1, [r5, #24]
    3166:	4620      	mov	r0, r4
    3168:	f001 f9c6 	bl	44f8 <TwoWire::setClock(unsigned long)>
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    316c:	f895 2024 	ldrb.w	r2, [r5, #36]	; 0x24
		transmitting = 1;
    3170:	2301      	movs	r3, #1
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    3172:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
		transmitting = 1;
    3176:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
      break;
    default:
      return 0;
  }
#endif
  return 1;
    317a:	4618      	mov	r0, r3
	void end();
	void setClock(uint32_t frequency);
	void setSDA(uint8_t pin);
	void setSCL(uint8_t pin); 
	void beginTransmission(uint8_t address) {
		txBuffer[0] = (address << 1);
    317c:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
		transmitting = 1;
		txBufferLength = 1;
    3180:	f884 305f 	strb.w	r3, [r4, #95]	; 0x5f
    3184:	bd38      	pop	{r3, r4, r5, pc}
      break;
    case U8X8_MSG_BYTE_END_TRANSFER:
      Wire.endTransmission();
      break;
    default:
      return 0;
    3186:	2000      	movs	r0, #0
  }
#endif
  return 1;
}
    3188:	bd38      	pop	{r3, r4, r5, pc}
    318a:	bf00      	nop
    318c:	200010b4 	.word	0x200010b4
    3190:	000186a0 	.word	0x000186a0

00003194 <u8g2_send_buffer>:
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    3194:	6803      	ldr	r3, [r0, #0]
  For most displays, this will make the content visible to the user.
  Some displays (like the SSD1606) require a u8x8_RefreshDisplay()
*/
static void u8g2_send_buffer(u8g2_t *u8g2) U8X8_NOINLINE;
static void u8g2_send_buffer(u8g2_t *u8g2)
{
    3196:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    319a:	4680      	mov	r8, r0
    319c:	b082      	sub	sp, #8
  uint8_t src_row;
  uint8_t src_max;
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
    319e:	2500      	movs	r5, #0
  src_max = u8g2->tile_buf_height;
    31a0:	f890 9050 	ldrb.w	r9, [r0, #80]	; 0x50
  dest_row = u8g2->tile_curr_row;
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
    31a4:	f893 a011 	ldrb.w	sl, [r3, #17]
  uint8_t dest_row;
  uint8_t dest_max;

  src_row = 0;
  src_max = u8g2->tile_buf_height;
  dest_row = u8g2->tile_curr_row;
    31a8:	f890 6051 	ldrb.w	r6, [r0, #81]	; 0x51
    31ac:	e003      	b.n	31b6 <u8g2_send_buffer+0x22>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
    31ae:	45b2      	cmp	sl, r6
    31b0:	d915      	bls.n	31de <u8g2_send_buffer+0x4a>
    31b2:	f8d8 3000 	ldr.w	r3, [r8]
{
  uint8_t *ptr;
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    31b6:	7c1b      	ldrb	r3, [r3, #16]
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    31b8:	4632      	mov	r2, r6
  uint16_t offset;
  uint8_t w;
  
  w = u8g2_GetU8x8(u8g2)->display_info->tile_width;
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
    31ba:	f8d8 704c 	ldr.w	r7, [r8, #76]	; 0x4c
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    31be:	2100      	movs	r1, #0
    31c0:	00dc      	lsls	r4, r3, #3
    31c2:	4640      	mov	r0, r8
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
    31c4:	3601      	adds	r6, #1
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    31c6:	fb04 f405 	mul.w	r4, r4, r5
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    31ca:	3501      	adds	r5, #1
    dest_row++;
    31cc:	b2f6      	uxtb	r6, r6
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    31ce:	b2a4      	uxth	r4, r4
  dest_max = u8g2_GetU8x8(u8g2)->display_info->tile_height;
  
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    31d0:	b2ed      	uxtb	r5, r5
  offset = src_tile_row;
  ptr = u8g2->tile_buf_ptr;
  offset *= w;
  offset *= 8;
  ptr += offset;
  u8x8_DrawTile(u8g2_GetU8x8(u8g2), 0, dest_tile_row, w, ptr);
    31d2:	443c      	add	r4, r7
    31d4:	9400      	str	r4, [sp, #0]
    31d6:	f000 feb7 	bl	3f48 <u8x8_DrawTile>
  do
  {
    u8g2_send_tile_row(u8g2, src_row, dest_row);
    src_row++;
    dest_row++;
  } while( src_row < src_max && dest_row < dest_max );
    31da:	45a9      	cmp	r9, r5
    31dc:	d8e7      	bhi.n	31ae <u8g2_send_buffer+0x1a>
}
    31de:	b002      	add	sp, #8
    31e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

000031e4 <u8g2_ClearBuffer>:

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    31e4:	6802      	ldr	r2, [r0, #0]
  cnt *= u8g2->tile_buf_height;
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    31e6:	2100      	movs	r1, #0
/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
  cnt *= u8g2->tile_buf_height;
    31e8:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    31ec:	7c12      	ldrb	r2, [r2, #16]
  cnt *= u8g2->tile_buf_height;
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    31ee:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
  cnt *= u8g2->tile_buf_height;
    31f0:	fb12 f203 	smulbb	r2, r2, r3
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    31f4:	00d2      	lsls	r2, r2, #3
    31f6:	f008 b919 	b.w	b42c <memset>
    31fa:	bf00      	nop

000031fc <u8g2_SendBuffer>:
  } while( src_row < src_max && dest_row < dest_max );
}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
    31fc:	b510      	push	{r4, lr}
    31fe:	4604      	mov	r4, r0
  u8g2_send_buffer(u8g2);
    3200:	f7ff ffc8 	bl	3194 <u8g2_send_buffer>
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    3204:	4620      	mov	r0, r4
}
    3206:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

/* same as u8g2_send_buffer but also send the DISPLAY_REFRESH message (used by SSD1606) */
void u8g2_SendBuffer(u8g2_t *u8g2)
{
  u8g2_send_buffer(u8g2);
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
    320a:	f000 becf 	b.w	3fac <u8x8_RefreshDisplay>
    320e:	bf00      	nop

00003210 <u8g2_SetBufferCurrTileRow>:

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
    3210:	6c83      	ldr	r3, [r0, #72]	; 0x48
  u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );  
}

/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
    3212:	b510      	push	{r4, lr}
    3214:	4604      	mov	r4, r0
  u8g2->tile_curr_row = row;
    3216:	f880 1051 	strb.w	r1, [r0, #81]	; 0x51
  u8g2->cb->update_dimension(u8g2);
    321a:	681b      	ldr	r3, [r3, #0]
    321c:	4798      	blx	r3
  u8g2->cb->update_page_win(u8g2);
    321e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    3220:	4620      	mov	r0, r4
    3222:	685b      	ldr	r3, [r3, #4]
}
    3224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
/*============================================*/
void u8g2_SetBufferCurrTileRow(u8g2_t *u8g2, uint8_t row)
{
  u8g2->tile_curr_row = row;
  u8g2->cb->update_dimension(u8g2);
  u8g2->cb->update_page_win(u8g2);
    3228:	4718      	bx	r3
    322a:	bf00      	nop

0000322c <u8g2_FirstPage>:
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
    322c:	b510      	push	{r4, lr}
  if ( u8g2->is_auto_page_clear )
    322e:	f890 30ab 	ldrb.w	r3, [r0, #171]	; 0xab
  u8g2->cb->update_dimension(u8g2);
  u8g2->cb->update_page_win(u8g2);
}

void u8g2_FirstPage(u8g2_t *u8g2)
{
    3232:	4604      	mov	r4, r0
  if ( u8g2->is_auto_page_clear )
    3234:	b153      	cbz	r3, 324c <u8g2_FirstPage+0x20>

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    3236:	6802      	ldr	r2, [r0, #0]
  cnt *= u8g2->tile_buf_height;
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    3238:	2100      	movs	r1, #0
/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
  cnt *= u8g2->tile_buf_height;
    323a:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    323e:	7c12      	ldrb	r2, [r2, #16]
  cnt *= u8g2->tile_buf_height;
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    3240:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
  cnt *= u8g2->tile_buf_height;
    3242:	fb12 f203 	smulbb	r2, r2, r3
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    3246:	00d2      	lsls	r2, r2, #3
    3248:	f008 f8f0 	bl	b42c <memset>
{
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    324c:	4620      	mov	r0, r4
    324e:	2100      	movs	r1, #0
}
    3250:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, 0);
    3254:	f7ff bfdc 	b.w	3210 <u8g2_SetBufferCurrTileRow>

00003258 <u8g2_NextPage>:
}

uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
    3258:	b538      	push	{r3, r4, r5, lr}
    325a:	4605      	mov	r5, r0
  uint8_t row;
  u8g2_send_buffer(u8g2);
    325c:	f7ff ff9a 	bl	3194 <u8g2_send_buffer>
  row = u8g2->tile_curr_row;
    3260:	f895 4051 	ldrb.w	r4, [r5, #81]	; 0x51
  row += u8g2->tile_buf_height;
    3264:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    3268:	682a      	ldr	r2, [r5, #0]
uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
  uint8_t row;
  u8g2_send_buffer(u8g2);
  row = u8g2->tile_curr_row;
  row += u8g2->tile_buf_height;
    326a:	441c      	add	r4, r3
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    326c:	7c51      	ldrb	r1, [r2, #17]
uint8_t u8g2_NextPage(u8g2_t *u8g2)
{
  uint8_t row;
  u8g2_send_buffer(u8g2);
  row = u8g2->tile_curr_row;
  row += u8g2->tile_buf_height;
    326e:	b2e4      	uxtb	r4, r4
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
    3270:	42a1      	cmp	r1, r4
    3272:	d916      	bls.n	32a2 <u8g2_NextPage+0x4a>
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    return 0;
  }
  if ( u8g2->is_auto_page_clear )
    3274:	f895 10ab 	ldrb.w	r1, [r5, #171]	; 0xab
    3278:	b929      	cbnz	r1, 3286 <u8g2_NextPage+0x2e>
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    327a:	4628      	mov	r0, r5
    327c:	4621      	mov	r1, r4
    327e:	f7ff ffc7 	bl	3210 <u8g2_SetBufferCurrTileRow>
  return 1;
    3282:	2001      	movs	r0, #1
}
    3284:	bd38      	pop	{r3, r4, r5, pc}

/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
    3286:	7c12      	ldrb	r2, [r2, #16]
  cnt *= u8g2->tile_buf_height;
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    3288:	2100      	movs	r1, #0
    328a:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
/*============================================*/
void u8g2_ClearBuffer(u8g2_t *u8g2)
{
  size_t cnt;
  cnt = u8g2_GetU8x8(u8g2)->display_info->tile_width;
  cnt *= u8g2->tile_buf_height;
    328c:	fb12 f203 	smulbb	r2, r2, r3
  cnt *= 8;
  memset(u8g2->tile_buf_ptr, 0, cnt);
    3290:	00d2      	lsls	r2, r2, #3
    3292:	f008 f8cb 	bl	b42c <memset>
  }
  if ( u8g2->is_auto_page_clear )
  {
    u8g2_ClearBuffer(u8g2);
  }
  u8g2_SetBufferCurrTileRow(u8g2, row);
    3296:	4628      	mov	r0, r5
    3298:	4621      	mov	r1, r4
    329a:	f7ff ffb9 	bl	3210 <u8g2_SetBufferCurrTileRow>
  return 1;
    329e:	2001      	movs	r0, #1
}
    32a0:	bd38      	pop	{r3, r4, r5, pc}
  u8g2_send_buffer(u8g2);
  row = u8g2->tile_curr_row;
  row += u8g2->tile_buf_height;
  if ( row >= u8g2_GetU8x8(u8g2)->display_info->tile_height )
  {
    u8x8_RefreshDisplay( u8g2_GetU8x8(u8g2) );
    32a2:	4628      	mov	r0, r5
    32a4:	f000 fe82 	bl	3fac <u8x8_RefreshDisplay>
    return 0;
    32a8:	2000      	movs	r0, #0
    32aa:	bd38      	pop	{r3, r4, r5, pc}

000032ac <u8g2_ClearDisplay>:
#include "u8g2.h"

/* Clear screen buffer & display reliable for all u8g2 displays. */
/* This is done with u8g2 picture loop, because we can not use the u8x8 function in all cases */
void u8g2_ClearDisplay(u8g2_t *u8g2)
{
    32ac:	b510      	push	{r4, lr}
    32ae:	4604      	mov	r4, r0
  u8g2_FirstPage(u8g2);
    32b0:	f7ff ffbc 	bl	322c <u8g2_FirstPage>
  do {
  } while ( u8g2_NextPage(u8g2) );
    32b4:	4620      	mov	r0, r4
    32b6:	f7ff ffcf 	bl	3258 <u8g2_NextPage>
    32ba:	2800      	cmp	r0, #0
    32bc:	d1fa      	bne.n	32b4 <u8g2_ClearDisplay+0x8>
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    32be:	4601      	mov	r1, r0
    32c0:	4620      	mov	r0, r4
}
    32c2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    send commands.
    This will not work because the current tile row is modified by the picture 
    loop above. To fix this, reset the tile row to 0, issue #370
    A workaround would be, that the user sets the current tile row to 0 manually.
  */
  u8g2_SetBufferCurrTileRow(u8g2, 0);  
    32c6:	f7ff bfa3 	b.w	3210 <u8g2_SetBufferCurrTileRow>
    32ca:	bf00      	nop

000032cc <u8g2_m_16_8_f>:
  #ifdef U8G2_USE_DYNAMIC_ALLOC
  *page_cnt = 8;
  return 0;
  #else
  static uint8_t buf[1024];
  *page_cnt = 8;
    32cc:	2308      	movs	r3, #8
    32ce:	7003      	strb	r3, [r0, #0]
  return buf;
  #endif
}
    32d0:	4800      	ldr	r0, [pc, #0]	; (32d4 <u8g2_m_16_8_f+0x8>)
    32d2:	4770      	bx	lr
    32d4:	20036838 	.word	0x20036838

000032d8 <u8g2_Setup_ssd1306_i2c_128x64_noname_f>:
  buf = u8g2_m_16_8_2(&tile_buf_height);
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
}
/* ssd1306 f */
void u8g2_Setup_ssd1306_i2c_128x64_noname_f(u8g2_t *u8g2, const u8g2_cb_t *rotation, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    32d8:	b530      	push	{r4, r5, lr}
    32da:	b085      	sub	sp, #20
    32dc:	4604      	mov	r4, r0
    32de:	460d      	mov	r5, r1
  uint8_t tile_buf_height;
  uint8_t *buf;
  u8g2_SetupDisplay(u8g2, u8x8_d_ssd1306_128x64_noname, u8x8_cad_ssd13xx_fast_i2c, byte_cb, gpio_and_delay_cb);
    32e0:	4909      	ldr	r1, [pc, #36]	; (3308 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x30>)
    32e2:	9300      	str	r3, [sp, #0]
    32e4:	4613      	mov	r3, r2
    32e6:	4a09      	ldr	r2, [pc, #36]	; (330c <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x34>)
    32e8:	f000 ff04 	bl	40f4 <u8x8_Setup>
  buf = u8g2_m_16_8_f(&tile_buf_height);
    32ec:	f10d 000f 	add.w	r0, sp, #15
    32f0:	f7ff ffec 	bl	32cc <u8g2_m_16_8_f>
  u8g2_SetupBuffer(u8g2, buf, tile_buf_height, u8g2_ll_hvline_vertical_top_lsb, rotation);
    32f4:	f89d 200f 	ldrb.w	r2, [sp, #15]
    32f8:	4601      	mov	r1, r0
    32fa:	4b05      	ldr	r3, [pc, #20]	; (3310 <u8g2_Setup_ssd1306_i2c_128x64_noname_f+0x38>)
    32fc:	4620      	mov	r0, r4
    32fe:	9500      	str	r5, [sp, #0]
    3300:	f000 fca0 	bl	3c44 <u8g2_SetupBuffer>
}
    3304:	b005      	add	sp, #20
    3306:	bd30      	pop	{r4, r5, pc}
    3308:	000040a5 	.word	0x000040a5
    330c:	00003e0d 	.word	0x00003e0d
    3310:	00003aa9 	.word	0x00003aa9

00003314 <u8g2_font_get_word>:

static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset) U8G2_NOINLINE; 
static uint16_t u8g2_font_get_word(const uint8_t *font, uint8_t offset)
{
    uint16_t pos;
    font += offset;
    3314:	1843      	adds	r3, r0, r1
    pos = u8x8_pgm_read( font );
    3316:	5c40      	ldrb	r0, [r0, r1]
    font++;
    pos <<= 8;
    pos += u8x8_pgm_read( font);
    return pos;
    3318:	785b      	ldrb	r3, [r3, #1]
    331a:	eb03 2000 	add.w	r0, r3, r0, lsl #8
}
    331e:	b280      	uxth	r0, r0
    3320:	4770      	bx	lr
    3322:	bf00      	nop

00003324 <u8g2_font_setup_decode>:
  decode->y = ly;
  
}

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
    3324:	b470      	push	{r4, r5, r6}
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    3326:	f890 4090 	ldrb.w	r4, [r0, #144]	; 0x90

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  decode->decode_ptr = glyph_data;
  decode->decode_bit_pos = 0;
    332a:	2300      	movs	r3, #0
}

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  decode->decode_ptr = glyph_data;
    332c:	6781      	str	r1, [r0, #120]	; 0x78
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    332e:	2c07      	cmp	r4, #7

static void u8g2_font_setup_decode(u8g2_t *u8g2, const uint8_t *glyph_data)
{
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  decode->decode_ptr = glyph_data;
  decode->decode_bit_pos = 0;
    3330:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
    3334:	780a      	ldrb	r2, [r1, #0]
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    3336:	d935      	bls.n	33a4 <u8g2_font_setup_decode+0x80>
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    3338:	f1a4 0308 	sub.w	r3, r4, #8
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    333c:	3101      	adds	r1, #1
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    333e:	b2db      	uxtb	r3, r3
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    3340:	6781      	str	r1, [r0, #120]	; 0x78
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    3342:	2501      	movs	r5, #1
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    3344:	f890 6091 	ldrb.w	r6, [r0, #145]	; 0x91
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
    3348:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    334c:	fa05 f404 	lsl.w	r4, r5, r4
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    3350:	18f5      	adds	r5, r6, r3
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    3352:	3c01      	subs	r4, #1
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    3354:	b2ed      	uxtb	r5, r5
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    3356:	4014      	ands	r4, r2
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    3358:	2d07      	cmp	r5, #7
  /*
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
    335a:	f880 4082 	strb.w	r4, [r0, #130]	; 0x82
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    335e:	780c      	ldrb	r4, [r1, #0]
    3360:	fa44 f403 	asr.w	r4, r4, r3
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    3364:	d920      	bls.n	33a8 <u8g2_font_setup_decode+0x84>
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    3366:	1c4a      	adds	r2, r1, #1
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3368:	f1c3 0308 	rsb	r3, r3, #8
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    336c:	3d08      	subs	r5, #8
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    336e:	b2db      	uxtb	r3, r3
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    3370:	6782      	str	r2, [r0, #120]	; 0x78
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3372:	784a      	ldrb	r2, [r1, #1]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    3374:	b2ed      	uxtb	r5, r5
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3376:	fa02 f303 	lsl.w	r3, r2, r3
    337a:	4323      	orrs	r3, r4
    337c:	b2db      	uxtb	r3, r3
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    337e:	2201      	movs	r2, #1
  
  decode->fg_color = u8g2->draw_color;
    3380:	f890 40aa 	ldrb.w	r4, [r0, #170]	; 0xaa
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
    3384:	f880 5084 	strb.w	r5, [r0, #132]	; 0x84
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    3388:	40b2      	lsls	r2, r6
  
  decode->fg_color = u8g2->draw_color;
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
    338a:	fab4 f184 	clz	r1, r4
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
  
  decode->fg_color = u8g2->draw_color;
    338e:	f880 4086 	strb.w	r4, [r0, #134]	; 0x86
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    3392:	3a01      	subs	r2, #1
  
  decode->fg_color = u8g2->draw_color;
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
    3394:	0949      	lsrs	r1, r1, #5
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    3396:	4013      	ands	r3, r2
  
  decode->fg_color = u8g2->draw_color;
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
    3398:	f880 1087 	strb.w	r1, [r0, #135]	; 0x87
  decode->decode_ptr += 1;
  decode->decode_ptr += 1;
  */
  
  decode->glyph_width = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_char_width);
  decode->glyph_height = u8g2_font_decode_get_unsigned_bits(decode,u8g2->font_info.bits_per_char_height);
    339c:	f880 3083 	strb.w	r3, [r0, #131]	; 0x83
  
  decode->fg_color = u8g2->draw_color;
  decode->bg_color = (decode->fg_color == 0 ? 1 : 0);
}
    33a0:	bc70      	pop	{r4, r5, r6}
    33a2:	4770      	bx	lr
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    33a4:	4623      	mov	r3, r4
    33a6:	e7cc      	b.n	3342 <u8g2_font_setup_decode+0x1e>
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    33a8:	b2e3      	uxtb	r3, r4
    33aa:	e7e8      	b.n	337e <u8g2_font_setup_decode+0x5a>

000033ac <u8g2_font_calc_vref_font>:
/* callback procedures to correct the y position */

u8g2_uint_t u8g2_font_calc_vref_font(U8X8_UNUSED u8g2_t *u8g2)
{
  return 0;
}
    33ac:	2000      	movs	r0, #0
    33ae:	4770      	bx	lr

000033b0 <u8g2_read_font_info>:
}

/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
    33b0:	b510      	push	{r4, lr}
    33b2:	460c      	mov	r4, r1
    33b4:	4602      	mov	r2, r0
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    33b6:	2111      	movs	r1, #17
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33b8:	7823      	ldrb	r3, [r4, #0]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    33ba:	4620      	mov	r0, r4
/*========================================================================*/
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
    33bc:	7013      	strb	r3, [r2, #0]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33be:	7863      	ldrb	r3, [r4, #1]
/* new font format */
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
    33c0:	7053      	strb	r3, [r2, #1]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33c2:	78a3      	ldrb	r3, [r4, #2]
void u8g2_read_font_info(u8g2_font_info_t *font_info, const uint8_t *font)
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
    33c4:	7093      	strb	r3, [r2, #2]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33c6:	78e3      	ldrb	r3, [r4, #3]
{
  /* offset 0 */
  font_info->glyph_cnt = u8g2_font_get_byte(font, 0);
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
    33c8:	70d3      	strb	r3, [r2, #3]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33ca:	7923      	ldrb	r3, [r4, #4]
  font_info->bbx_mode = u8g2_font_get_byte(font, 1);
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
    33cc:	7113      	strb	r3, [r2, #4]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33ce:	7963      	ldrb	r3, [r4, #5]
  font_info->bits_per_0 = u8g2_font_get_byte(font, 2);
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
    33d0:	7153      	strb	r3, [r2, #5]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33d2:	79a3      	ldrb	r3, [r4, #6]
  font_info->bits_per_1 = u8g2_font_get_byte(font, 3);
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
    33d4:	7193      	strb	r3, [r2, #6]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33d6:	79e3      	ldrb	r3, [r4, #7]
  
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
    33d8:	71d3      	strb	r3, [r2, #7]
/* removed NOINLINE, because it leads to smaller code, might also be faster */
//static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset) U8G2_NOINLINE;
static uint8_t u8g2_font_get_byte(const uint8_t *font, uint8_t offset)
{
  font += offset;
  return u8x8_pgm_read( font );  
    33da:	7a23      	ldrb	r3, [r4, #8]
  /* offset 4 */
  font_info->bits_per_char_width = u8g2_font_get_byte(font, 4);
  font_info->bits_per_char_height = u8g2_font_get_byte(font, 5);
  font_info->bits_per_char_x = u8g2_font_get_byte(font, 6);
  font_info->bits_per_char_y = u8g2_font_get_byte(font, 7);
  font_info->bits_per_delta_x = u8g2_font_get_byte(font, 8);
    33dc:	7213      	strb	r3, [r2, #8]
  
  /* offset 9 */
  font_info->max_char_width = u8g2_font_get_byte(font, 9);
    33de:	7a63      	ldrb	r3, [r4, #9]
    33e0:	7253      	strb	r3, [r2, #9]
  font_info->max_char_height = u8g2_font_get_byte(font, 10);
    33e2:	7aa3      	ldrb	r3, [r4, #10]
    33e4:	7293      	strb	r3, [r2, #10]
  font_info->x_offset = u8g2_font_get_byte(font, 11);
    33e6:	7ae3      	ldrb	r3, [r4, #11]
    33e8:	72d3      	strb	r3, [r2, #11]
  font_info->y_offset = u8g2_font_get_byte(font, 12);
    33ea:	7b23      	ldrb	r3, [r4, #12]
    33ec:	7313      	strb	r3, [r2, #12]
  
  /* offset 13 */
  font_info->ascent_A = u8g2_font_get_byte(font, 13);
    33ee:	7b63      	ldrb	r3, [r4, #13]
    33f0:	7353      	strb	r3, [r2, #13]
  font_info->descent_g = u8g2_font_get_byte(font, 14);
    33f2:	7ba3      	ldrb	r3, [r4, #14]
    33f4:	7393      	strb	r3, [r2, #14]
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
    33f6:	7be3      	ldrb	r3, [r4, #15]
    33f8:	73d3      	strb	r3, [r2, #15]
  font_info->descent_para = u8g2_font_get_byte(font, 16);
    33fa:	7c23      	ldrb	r3, [r4, #16]
    33fc:	7413      	strb	r3, [r2, #16]
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    33fe:	f7ff ff89 	bl	3314 <u8g2_font_get_word>
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
    3402:	2113      	movs	r1, #19
  font_info->descent_g = u8g2_font_get_byte(font, 14);
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
    3404:	8250      	strh	r0, [r2, #18]
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
    3406:	4620      	mov	r0, r4
    3408:	f7ff ff84 	bl	3314 <u8g2_font_get_word>
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
    340c:	2115      	movs	r1, #21
  font_info->ascent_para = u8g2_font_get_byte(font, 15);
  font_info->descent_para = u8g2_font_get_byte(font, 16);
  
  /* offset 17 */
  font_info->start_pos_upper_A = u8g2_font_get_word(font, 17);
  font_info->start_pos_lower_a = u8g2_font_get_word(font, 19); 
    340e:	8290      	strh	r0, [r2, #20]
  
  /* offset 21 */
#ifdef U8G2_WITH_UNICODE
  font_info->start_pos_unicode = u8g2_font_get_word(font, 21); 
    3410:	4620      	mov	r0, r4
    3412:	f7ff ff7f 	bl	3314 <u8g2_font_get_word>
    3416:	82d0      	strh	r0, [r2, #22]
    3418:	bd10      	pop	{r4, pc}
    341a:	bf00      	nop

0000341c <u8g2_font_decode_get_signed_bits>:
	r = bits(x)+1;

*/
/* optimized */
int8_t u8g2_font_decode_get_signed_bits(u8g2_font_decode_t *f, uint8_t cnt)
{
    341c:	b470      	push	{r4, r5, r6}

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
    341e:	7b04      	ldrb	r4, [r0, #12]
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
    3420:	6805      	ldr	r5, [r0, #0]
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    3422:	190b      	adds	r3, r1, r4
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    3424:	782a      	ldrb	r2, [r5, #0]
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    3426:	b2db      	uxtb	r3, r3
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    3428:	4122      	asrs	r2, r4
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    342a:	2b07      	cmp	r3, #7
    342c:	d90a      	bls.n	3444 <u8g2_font_decode_get_signed_bits+0x28>
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    342e:	1c6e      	adds	r6, r5, #1
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3430:	f1c4 0408 	rsb	r4, r4, #8
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    3434:	3b08      	subs	r3, #8
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3436:	b2e4      	uxtb	r4, r4
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    3438:	6006      	str	r6, [r0, #0]
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    343a:	786d      	ldrb	r5, [r5, #1]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    343c:	b2db      	uxtb	r3, r3
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    343e:	fa05 f404 	lsl.w	r4, r5, r4
    3442:	4322      	orrs	r2, r4
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
  d <<= cnt;
  v -= d;
  return v;
    3444:	2401      	movs	r4, #1
    3446:	1e4d      	subs	r5, r1, #1
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
    3448:	7303      	strb	r3, [r0, #12]
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    344a:	b2d2      	uxtb	r2, r2
  v = (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt);
  d = 1;
  cnt--;
  d <<= cnt;
  v -= d;
  return v;
    344c:	fa04 f101 	lsl.w	r1, r4, r1
    3450:	b2e8      	uxtb	r0, r5
    3452:	3901      	subs	r1, #1
    3454:	fa04 f000 	lsl.w	r0, r4, r0
    3458:	4011      	ands	r1, r2
    345a:	1a08      	subs	r0, r1, r0
  //return (int8_t)u8g2_font_decode_get_unsigned_bits(f, cnt) - ((1<<cnt)>>1);
}
    345c:	bc70      	pop	{r4, r5, r6}
    345e:	b240      	sxtb	r0, r0
    3460:	4770      	bx	lr
    3462:	bf00      	nop

00003464 <u8g2_add_vector_y>:


#ifdef U8G2_WITH_FONT_ROTATION
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
    3464:	2b01      	cmp	r3, #1
    3466:	d00b      	beq.n	3480 <u8g2_add_vector_y+0x1c>
    3468:	d307      	bcc.n	347a <u8g2_add_vector_y+0x16>
    346a:	2b02      	cmp	r3, #2
    346c:	d102      	bne.n	3474 <u8g2_add_vector_y+0x10>
      break;
    case 1:
      dy += x;
      break;
    case 2:
      dy -= y;
    346e:	1a80      	subs	r0, r0, r2
    3470:	b280      	uxth	r0, r0
      break;
    3472:	4770      	bx	lr
    default:
      dy -= x;
    3474:	1a40      	subs	r0, r0, r1
    3476:	b280      	uxth	r0, r0
      break;      
  }
  return dy;
}
    3478:	4770      	bx	lr
u8g2_uint_t u8g2_add_vector_y(u8g2_uint_t dy, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
  {
    case 0:
      dy += y;
    347a:	4410      	add	r0, r2
    347c:	b280      	uxth	r0, r0
      break;
    347e:	4770      	bx	lr
    case 1:
      dy += x;
    3480:	4408      	add	r0, r1
    3482:	b280      	uxth	r0, r0
      break;
    3484:	4770      	bx	lr
    3486:	bf00      	nop

00003488 <u8g2_add_vector_x>:
  return dy;
}

u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
    3488:	2b01      	cmp	r3, #1
    348a:	d00b      	beq.n	34a4 <u8g2_add_vector_x+0x1c>
    348c:	d307      	bcc.n	349e <u8g2_add_vector_x+0x16>
    348e:	2b02      	cmp	r3, #2
    3490:	d102      	bne.n	3498 <u8g2_add_vector_x+0x10>
      break;
    case 1:
      dx -= y;
      break;
    case 2:
      dx -= x;
    3492:	1a40      	subs	r0, r0, r1
    3494:	b280      	uxth	r0, r0
      break;
    3496:	4770      	bx	lr
    default:
      dx += y;
    3498:	4410      	add	r0, r2
    349a:	b280      	uxth	r0, r0
      break;      
  }
  return dx;
}
    349c:	4770      	bx	lr
u8g2_uint_t u8g2_add_vector_x(u8g2_uint_t dx, int8_t x, int8_t y, uint8_t dir)
{
  switch(dir)
  {
    case 0:
      dx += x;
    349e:	4408      	add	r0, r1
    34a0:	b280      	uxth	r0, r0
      break;
    34a2:	4770      	bx	lr
    case 1:
      dx -= y;
    34a4:	1a80      	subs	r0, r0, r2
    34a6:	b280      	uxth	r0, r0
      break;
    34a8:	4770      	bx	lr
    34aa:	bf00      	nop

000034ac <u8g2_font_decode_len>:
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
    34ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    34b0:	b087      	sub	sp, #28
    34b2:	4605      	mov	r5, r0
    34b4:	460f      	mov	r7, r1
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
  
  cnt = len;
  
  /* get the local position */
  lx = decode->x;
    34b6:	f890 9080 	ldrb.w	r9, [r0, #128]	; 0x80
  Called by:
    u8g2_font_decode_glyph()
*/
/* optimized */
void u8g2_font_decode_len(u8g2_t *u8g2, uint8_t len, uint8_t is_foreground)
{
    34ba:	9205      	str	r2, [sp, #20]
  
  cnt = len;
  
  /* get the local position */
  lx = decode->x;
  ly = decode->y;
    34bc:	f890 a081 	ldrb.w	sl, [r0, #129]	; 0x81
    34c0:	e00e      	b.n	34e0 <u8g2_font_decode_len+0x34>
#else
	0
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    34c2:	f895 2085 	ldrb.w	r2, [r5, #133]	; 0x85
    34c6:	2a00      	cmp	r2, #0
    34c8:	d046      	beq.n	3558 <u8g2_font_decode_len+0xac>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
    34ca:	42a7      	cmp	r7, r4
      break;
    cnt -= rem;
    lx = 0;
    ly++;
    34cc:	f10a 0301 	add.w	r3, sl, #1
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
      break;
    cnt -= rem;
    34d0:	eba7 0404 	sub.w	r4, r7, r4
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
    34d4:	d338      	bcc.n	3548 <u8g2_font_decode_len+0x9c>
      break;
    cnt -= rem;
    34d6:	b2e7      	uxtb	r7, r4
    lx = 0;
    34d8:	f04f 0900 	mov.w	r9, #0
    ly++;
    34dc:	fa5f fa83 	uxtb.w	sl, r3
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
    rem -= lx;
    34e0:	f895 4082 	ldrb.w	r4, [r5, #130]	; 0x82
    y = decode->target_y;

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    34e4:	fa4f f689 	sxtb.w	r6, r9
    34e8:	fa4f fb8a 	sxtb.w	fp, sl
    34ec:	f895 8088 	ldrb.w	r8, [r5, #136]	; 0x88
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
    y = decode->target_y;
    34f0:	f8b5 007e 	ldrh.w	r0, [r5, #126]	; 0x7e
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
    rem -= lx;
    34f4:	ebc9 0404 	rsb	r4, r9, r4
    y = decode->target_y;

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    34f8:	4631      	mov	r1, r6
    34fa:	465a      	mov	r2, fp
    34fc:	4643      	mov	r3, r8
  
  for(;;)
  {
    /* calculate the number of pixel to the right edge of the glyph */
    rem = decode->glyph_width;
    rem -= lx;
    34fe:	b2e4      	uxtb	r4, r4
    /* now draw the line, but apply the rotation around the glyph target position */
    //u8g2_font_decode_draw_pixel(u8g2, lx,ly,current, is_foreground);

    /* get target position */
    x = decode->target_x;
    y = decode->target_y;
    3500:	9003      	str	r0, [sp, #12]

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    3502:	f8b5 007c 	ldrh.w	r0, [r5, #124]	; 0x7c
    3506:	f7ff ffbf 	bl	3488 <u8g2_add_vector_x>
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
    350a:	4643      	mov	r3, r8
    y = decode->target_y;

    /* apply rotation */
#ifdef U8G2_WITH_FONT_ROTATION
    
    x = u8g2_add_vector_x(x, lx, ly, decode->dir);
    350c:	9004      	str	r0, [sp, #16]
    y = u8g2_add_vector_y(y, lx, ly, decode->dir);
    350e:	465a      	mov	r2, fp
    3510:	4631      	mov	r1, r6
    3512:	9803      	ldr	r0, [sp, #12]
    3514:	f7ff ffa6 	bl	3464 <u8g2_add_vector_y>
    3518:	42a7      	cmp	r7, r4
    x += lx;
    y += ly;
#endif
    
    /* draw foreground and background (if required) */
    if ( is_foreground )
    351a:	9a05      	ldr	r2, [sp, #20]
    351c:	463b      	mov	r3, r7
    351e:	bf28      	it	cs
    3520:	4623      	movcs	r3, r4
    3522:	2a00      	cmp	r2, #0
    3524:	d0cd      	beq.n	34c2 <u8g2_font_decode_len+0x16>
    {
      u8g2->draw_color = decode->fg_color;			/* draw_color will be restored later */
    3526:	f895 6086 	ldrb.w	r6, [r5, #134]	; 0x86
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
      u8g2_DrawHVLine(u8g2, 
    352a:	4602      	mov	r2, r0
    352c:	f8cd 8000 	str.w	r8, [sp]
    3530:	9904      	ldr	r1, [sp, #16]
    3532:	4628      	mov	r0, r5
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
    3534:	f885 60aa 	strb.w	r6, [r5, #170]	; 0xaa
      u8g2_DrawHVLine(u8g2, 
    3538:	f000 fa78 	bl	3a2c <u8g2_DrawHVLine>
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
    353c:	42a7      	cmp	r7, r4
      break;
    cnt -= rem;
    lx = 0;
    ly++;
    353e:	f10a 0301 	add.w	r3, sl, #1
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
      break;
    cnt -= rem;
    3542:	eba7 0404 	sub.w	r4, r7, r4
#endif
      );   
    }
    
    /* check, whether the end of the run length code has been reached */
    if ( cnt < rem )
    3546:	d2c6      	bcs.n	34d6 <u8g2_font_decode_len+0x2a>
    lx = 0;
    ly++;
  }
  lx += cnt;
  
  decode->x = lx;
    3548:	444f      	add	r7, r9
  decode->y = ly;
    354a:	f885 b081 	strb.w	fp, [r5, #129]	; 0x81
    lx = 0;
    ly++;
  }
  lx += cnt;
  
  decode->x = lx;
    354e:	f885 7080 	strb.w	r7, [r5, #128]	; 0x80
  decode->y = ly;
  
}
    3552:	b007      	add	sp, #28
    3554:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif
      );
    }
    else if ( decode->is_transparent == 0 )    
    {
      u8g2->draw_color = decode->bg_color;			/* draw_color will be restored later */
    3558:	f895 6087 	ldrb.w	r6, [r5, #135]	; 0x87
    355c:	e7e5      	b.n	352a <u8g2_font_decode_len+0x7e>
    355e:	bf00      	nop

00003560 <u8g2_font_decode_glyph>:
  Calls:
    u8g2_font_decode_len()
*/
/* optimized */
int8_t u8g2_font_decode_glyph(u8g2_t *u8g2, const uint8_t *glyph_data)
{
    3560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3564:	b083      	sub	sp, #12
    3566:	4604      	mov	r4, r0
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    
  u8g2_font_setup_decode(u8g2, glyph_data);
    3568:	f7ff fedc 	bl	3324 <u8g2_font_setup_decode>
{
  uint8_t a, b;
  int8_t x, y;
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    356c:	f100 0678 	add.w	r6, r0, #120	; 0x78
    
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
    3570:	f890 1092 	ldrb.w	r1, [r0, #146]	; 0x92
  int8_t d;
  int8_t h;
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
    3574:	f990 8083 	ldrsb.w	r8, [r0, #131]	; 0x83
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
    3578:	4630      	mov	r0, r6
    357a:	f7ff ff4f 	bl	341c <u8g2_font_decode_get_signed_bits>
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
    357e:	f894 1093 	ldrb.w	r1, [r4, #147]	; 0x93
  u8g2_font_decode_t *decode = &(u8g2->font_decode);
    
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
    3582:	4607      	mov	r7, r0
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
    3584:	4630      	mov	r0, r6
    3586:	f7ff ff49 	bl	341c <u8g2_font_decode_get_signed_bits>
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
    358a:	f894 1094 	ldrb.w	r1, [r4, #148]	; 0x94
    
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
    358e:	4605      	mov	r5, r0
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
    3590:	4630      	mov	r0, r6
    3592:	f7ff ff43 	bl	341c <u8g2_font_decode_get_signed_bits>
  
  if ( decode->glyph_width > 0 )
    3596:	f994 6082 	ldrsb.w	r6, [r4, #130]	; 0x82
  u8g2_font_setup_decode(u8g2, glyph_data);
  h = u8g2->font_decode.glyph_height;
  
  x = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_x);
  y = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_char_y);
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
    359a:	4681      	mov	r9, r0
  
  if ( decode->glyph_width > 0 )
    359c:	2e00      	cmp	r6, #0
    359e:	f340 80a7 	ble.w	36f0 <u8g2_font_decode_glyph+0x190>
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    35a2:	4445      	add	r5, r8
    35a4:	f894 a088 	ldrb.w	sl, [r4, #136]	; 0x88
    35a8:	4639      	mov	r1, r7
    35aa:	f8b4 007c 	ldrh.w	r0, [r4, #124]	; 0x7c
    35ae:	426d      	negs	r5, r5
    35b0:	4653      	mov	r3, sl
    35b2:	b26d      	sxtb	r5, r5
    35b4:	462a      	mov	r2, r5
    35b6:	f7ff ff67 	bl	3488 <u8g2_add_vector_x>
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
    35ba:	462a      	mov	r2, r5
  d = u8g2_font_decode_get_signed_bits(decode, u8g2->font_info.bits_per_delta_x);
  
  if ( decode->glyph_width > 0 )
  {
#ifdef U8G2_WITH_FONT_ROTATION
    decode->target_x = u8g2_add_vector_x(decode->target_x, x, -(h+y), decode->dir);
    35bc:	f8a4 007c 	strh.w	r0, [r4, #124]	; 0x7c
    35c0:	4683      	mov	fp, r0
    decode->target_y = u8g2_add_vector_y(decode->target_y, x, -(h+y), decode->dir);
    35c2:	4639      	mov	r1, r7
    35c4:	f8b4 007e 	ldrh.w	r0, [r4, #126]	; 0x7e
    35c8:	4653      	mov	r3, sl
    35ca:	f7ff ff4b 	bl	3464 <u8g2_add_vector_y>
    35ce:	4602      	mov	r2, r0
    35d0:	f8a4 007e 	strh.w	r0, [r4, #126]	; 0x7e
      y0 = decode->target_y;
      x1 = x0;
      y1 = y0;
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
    35d4:	f1ba 0f03 	cmp.w	sl, #3
    35d8:	f200 80af 	bhi.w	373a <u8g2_font_decode_glyph+0x1da>
    35dc:	e8df f00a 	tbb	[pc, sl]
    35e0:	029e938c 	.word	0x029e938c
	    y1++;
	    break;	  
	case 3:
	    x1 += h;
	    y0 -= decode->glyph_width;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    35e4:	f1c6 0601 	rsb	r6, r6, #1
	    y1++;
    35e8:	1c41      	adds	r1, r0, #1
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    y1++;
	    break;	  
	case 3:
	    x1 += h;
    35ea:	eb0b 0308 	add.w	r3, fp, r8
	    y0 -= decode->glyph_width;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    35ee:	4432      	add	r2, r6
	    y1++;
    35f0:	b289      	uxth	r1, r1
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    y1++;
	    break;	  
	case 3:
	    x1 += h;
    35f2:	b29b      	uxth	r3, r3
	    y0 -= decode->glyph_width;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    35f4:	b292      	uxth	r2, r2
#else /* U8G2_WITH_FONT_ROTATION */
      x1 += decode->glyph_width;
      y1 += h;      
#endif
      
      if ( u8g2_IsIntersection(u8g2, x0, y0, x1, y1) == 0 ) 
    35f6:	9100      	str	r1, [sp, #0]
    35f8:	4620      	mov	r0, r4
    35fa:	4659      	mov	r1, fp
    35fc:	f000 fa24 	bl	3a48 <u8g2_IsIntersection>
    3600:	2800      	cmp	r0, #0
    3602:	d075      	beq.n	36f0 <u8g2_font_decode_glyph+0x190>
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
    3604:	2200      	movs	r2, #0
    3606:	f894 3084 	ldrb.w	r3, [r4, #132]	; 0x84
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
    360a:	f04f 0b01 	mov.w	fp, #1
	return d;
    }
#endif /* U8G2_WITH_INTERSECTION */
   
    /* reset local x/y position */
    decode->x = 0;
    360e:	f884 2080 	strb.w	r2, [r4, #128]	; 0x80
    decode->y = 0;
    3612:	f884 2081 	strb.w	r2, [r4, #129]	; 0x81
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
    3616:	f894 108e 	ldrb.w	r1, [r4, #142]	; 0x8e
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
    361a:	6fa0      	ldr	r0, [r4, #120]	; 0x78
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    361c:	18ca      	adds	r2, r1, r3
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    361e:	7806      	ldrb	r6, [r0, #0]
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    3620:	b2d2      	uxtb	r2, r2
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    3622:	411e      	asrs	r6, r3
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    3624:	2a07      	cmp	r2, #7
    3626:	d90d      	bls.n	3644 <u8g2_font_decode_glyph+0xe4>
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    3628:	f100 0e01 	add.w	lr, r0, #1
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    362c:	f1c3 0308 	rsb	r3, r3, #8
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    3630:	3a08      	subs	r2, #8
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3632:	b2db      	uxtb	r3, r3
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    3634:	f8c4 e078 	str.w	lr, [r4, #120]	; 0x78
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3638:	7845      	ldrb	r5, [r0, #1]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    363a:	b2d2      	uxtb	r2, r2
    363c:	4670      	mov	r0, lr
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    363e:	fa05 f303 	lsl.w	r3, r5, r3
    3642:	431e      	orrs	r6, r3
    
    /* decode glyph */
    for(;;)
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
    3644:	f894 308f 	ldrb.w	r3, [r4, #143]	; 0x8f
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
    3648:	fa0b f101 	lsl.w	r1, fp, r1
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    364c:	b2f6      	uxtb	r6, r6
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
    364e:	f884 2084 	strb.w	r2, [r4, #132]	; 0x84
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    3652:	eb03 0e02 	add.w	lr, r3, r2
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
    3656:	3901      	subs	r1, #1
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    3658:	7805      	ldrb	r5, [r0, #0]
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    365a:	fa5f fe8e 	uxtb.w	lr, lr
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
    365e:	400e      	ands	r6, r1
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    3660:	4115      	asrs	r5, r2
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    3662:	f1be 0f07 	cmp.w	lr, #7
    3666:	d90c      	bls.n	3682 <u8g2_font_decode_glyph+0x122>
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    3668:	1c41      	adds	r1, r0, #1
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    366a:	f1c2 0208 	rsb	r2, r2, #8
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    366e:	f1ae 0e08 	sub.w	lr, lr, #8
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3672:	b2d2      	uxtb	r2, r2
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    3674:	67a1      	str	r1, [r4, #120]	; 0x78
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3676:	7841      	ldrb	r1, [r0, #1]
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    3678:	fa5f fe8e 	uxtb.w	lr, lr
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    367c:	fa01 f202 	lsl.w	r2, r1, r2
    3680:	4315      	orrs	r5, r2
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
    3682:	fa0b f303 	lsl.w	r3, fp, r3
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    3686:	b2ed      	uxtb	r5, r5
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
    3688:	f884 e084 	strb.w	lr, [r4, #132]	; 0x84
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
    368c:	3b01      	subs	r3, #1
    368e:	401d      	ands	r5, r3
    {
      a = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_0);
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
    3690:	2200      	movs	r2, #0
    3692:	4631      	mov	r1, r6
    3694:	4620      	mov	r0, r4
    3696:	f7ff ff09 	bl	34ac <u8g2_font_decode_len>
	u8g2_font_decode_len(u8g2, b, 1);
    369a:	2201      	movs	r2, #1
    369c:	4629      	mov	r1, r5
    369e:	4620      	mov	r0, r4
    36a0:	f7ff ff04 	bl	34ac <u8g2_font_decode_len>

/* optimized */
uint8_t u8g2_font_decode_get_unsigned_bits(u8g2_font_decode_t *f, uint8_t cnt) 
{
  uint8_t val;
  uint8_t bit_pos = f->decode_bit_pos;
    36a4:	f894 1084 	ldrb.w	r1, [r4, #132]	; 0x84
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
    36a8:	6fa7      	ldr	r7, [r4, #120]	; 0x78
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    36aa:	1c4b      	adds	r3, r1, #1
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    36ac:	f1c1 0008 	rsb	r0, r1, #8
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    36b0:	783a      	ldrb	r2, [r7, #0]
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    36b2:	f1a1 0c07 	sub.w	ip, r1, #7
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
    36b6:	b2db      	uxtb	r3, r3
  if ( bit_pos_plus_cnt >= 8 )
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    36b8:	f107 0a01 	add.w	sl, r7, #1
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    36bc:	410a      	asrs	r2, r1
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    36be:	b2c0      	uxtb	r0, r0
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    36c0:	2b07      	cmp	r3, #7
  uint8_t bit_pos_plus_cnt;
  
  //val = *(f->decode_ptr);
  val = u8x8_pgm_read( f->decode_ptr );  
  
  val >>= bit_pos;
    36c2:	b2d1      	uxtb	r1, r2
  bit_pos_plus_cnt = bit_pos;
  bit_pos_plus_cnt += cnt;
  if ( bit_pos_plus_cnt >= 8 )
    36c4:	d908      	bls.n	36d8 <u8g2_font_decode_glyph+0x178>
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    36c6:	f8c4 a078 	str.w	sl, [r4, #120]	; 0x78
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    //bit_pos -= 8;
    bit_pos_plus_cnt -= 8;
    36ca:	fa5f f38c 	uxtb.w	r3, ip
  {
    uint8_t s = 8;
    s -= bit_pos;
    f->decode_ptr++;
    //val |= *(f->decode_ptr) << (8-bit_pos);
    val |= u8x8_pgm_read( f->decode_ptr ) << (s);
    36ce:	7879      	ldrb	r1, [r7, #1]
    36d0:	fa01 f000 	lsl.w	r0, r1, r0
    36d4:	4302      	orrs	r2, r0
    36d6:	b2d1      	uxtb	r1, r2
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
	u8g2_font_decode_len(u8g2, b, 1);
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
    36d8:	07ca      	lsls	r2, r1, #31
    bit_pos_plus_cnt -= 8;
  }
  val &= (1U<<cnt)-1;
  //bit_pos += cnt;
  
  f->decode_bit_pos = bit_pos_plus_cnt;
    36da:	f884 3084 	strb.w	r3, [r4, #132]	; 0x84
      b = u8g2_font_decode_get_unsigned_bits(decode, u8g2->font_info.bits_per_1);
      do
      {
	u8g2_font_decode_len(u8g2, a, 0);
	u8g2_font_decode_len(u8g2, b, 1);
      } while( u8g2_font_decode_get_unsigned_bits(decode, 1) != 0 );
    36de:	d4d7      	bmi.n	3690 <u8g2_font_decode_glyph+0x130>

      if ( decode->y >= h )
    36e0:	f994 2081 	ldrsb.w	r2, [r4, #129]	; 0x81
    36e4:	4542      	cmp	r2, r8
    36e6:	db96      	blt.n	3616 <u8g2_font_decode_glyph+0xb6>
	break;
    }
    
    /* restore the u8g2 draw color, because this is modified by the decode algo */
    u8g2->draw_color = decode->fg_color;
    36e8:	f894 3086 	ldrb.w	r3, [r4, #134]	; 0x86
    36ec:	f884 30aa 	strb.w	r3, [r4, #170]	; 0xaa
  }
  return d;
}
    36f0:	4648      	mov	r0, r9
    36f2:	b003      	add	sp, #12
    36f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
      {
	case 0:
	    x1 += decode->glyph_width;
    36f8:	eb0b 0306 	add.w	r3, fp, r6
	    y1 += h;
    36fc:	eb00 0108 	add.w	r1, r0, r8
      
#ifdef U8G2_WITH_FONT_ROTATION
      switch(decode->dir)
      {
	case 0:
	    x1 += decode->glyph_width;
    3700:	b29b      	uxth	r3, r3
	    y1 += h;
    3702:	b289      	uxth	r1, r1
	    break;
    3704:	e777      	b.n	35f6 <u8g2_font_decode_glyph+0x96>
	case 1:
	    x0 -= h;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    3706:	f1c8 0001 	rsb	r0, r8, #1
	    x1++;
    370a:	f10b 0301 	add.w	r3, fp, #1
	    y1 += decode->glyph_width;
    370e:	1991      	adds	r1, r2, r6
	    x1 += decode->glyph_width;
	    y1 += h;
	    break;
	case 1:
	    x0 -= h;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    3710:	4483      	add	fp, r0
	    x1++;
    3712:	b29b      	uxth	r3, r3
	    y1 += decode->glyph_width;
    3714:	b289      	uxth	r1, r1
	    x1 += decode->glyph_width;
	    y1 += h;
	    break;
	case 1:
	    x0 -= h;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    3716:	fa1f fb8b 	uxth.w	fp, fp
	    x1++;
	    y1 += decode->glyph_width;
	    break;
    371a:	e76c      	b.n	35f6 <u8g2_font_decode_glyph+0x96>
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    371c:	f1c6 0601 	rsb	r6, r6, #1
	    x1++;
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    3720:	f1c8 0001 	rsb	r0, r8, #1
	    y1 += decode->glyph_width;
	    break;
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    x1++;
    3724:	f10b 0301 	add.w	r3, fp, #1
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    y1++;
    3728:	1c51      	adds	r1, r2, #1
	    x1++;
	    y1 += decode->glyph_width;
	    break;
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    372a:	44b3      	add	fp, r6
	    x1++;
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    372c:	4410      	add	r0, r2
	    y1 += decode->glyph_width;
	    break;
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
	    x1++;
    372e:	b29b      	uxth	r3, r3
	    x1++;
	    y1 += decode->glyph_width;
	    break;
	case 2:
	    x0 -= decode->glyph_width;
	    x0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    3730:	fa1f fb8b 	uxth.w	fp, fp
	    x1++;
	    y0 -= h;
	    y0++;	/* shift down, because of assymetric boundaries for the interseciton test */
    3734:	b282      	uxth	r2, r0
	    y1++;
    3736:	b289      	uxth	r1, r1
	    break;	  
    3738:	e75d      	b.n	35f6 <u8g2_font_decode_glyph+0x96>
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
      y0 = decode->target_y;
      x1 = x0;
      y1 = y0;
    373a:	4601      	mov	r1, r0
#ifdef U8G2_WITH_INTERSECTION
    {
      u8g2_uint_t x0, x1, y0, y1;
      x0 = decode->target_x;
      y0 = decode->target_y;
      x1 = x0;
    373c:	465b      	mov	r3, fp
    373e:	e75a      	b.n	35f6 <u8g2_font_decode_glyph+0x96>

00003740 <u8g2_font_get_glyph_data>:
    encoding: Encoding (ASCII or Unicode) of the glyph
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
    3740:	b538      	push	{r3, r4, r5, lr}
  const uint8_t *font = u8g2->font;
  font += U8G2_FONT_DATA_STRUCT_SIZE;

  
  if ( encoding <= 255 )
    3742:	29ff      	cmp	r1, #255	; 0xff
  Return:
    Address of the glyph data or NULL, if the encoding is not avialable in the font.
*/
const uint8_t *u8g2_font_get_glyph_data(u8g2_t *u8g2, uint16_t encoding)
{
  const uint8_t *font = u8g2->font;
    3744:	6f03      	ldr	r3, [r0, #112]	; 0x70
  font += U8G2_FONT_DATA_STRUCT_SIZE;
    3746:	f103 0317 	add.w	r3, r3, #23

  
  if ( encoding <= 255 )
    374a:	d80f      	bhi.n	376c <u8g2_font_get_glyph_data+0x2c>
  {
    if ( encoding >= 'a' )
    374c:	2960      	cmp	r1, #96	; 0x60
    374e:	d932      	bls.n	37b6 <u8g2_font_get_glyph_data+0x76>
    {
      font += u8g2->font_info.start_pos_lower_a;
    3750:	f8b0 20a0 	ldrh.w	r2, [r0, #160]	; 0xa0
    3754:	4413      	add	r3, r2
      font += u8g2->font_info.start_pos_upper_A;
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
    3756:	7858      	ldrb	r0, [r3, #1]
    3758:	b918      	cbnz	r0, 3762 <u8g2_font_get_glyph_data+0x22>
    375a:	e02b      	b.n	37b4 <u8g2_font_get_glyph_data+0x74>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
      {
	return font+2;	/* skip encoding and glyph size */
      }
      font += u8x8_pgm_read( font + 1 );
    375c:	4403      	add	r3, r0
      font += u8g2->font_info.start_pos_upper_A;
    }
    
    for(;;)
    {
      if ( u8x8_pgm_read( font + 1 ) == 0 )
    375e:	7858      	ldrb	r0, [r3, #1]
    3760:	b388      	cbz	r0, 37c6 <u8g2_font_get_glyph_data+0x86>
	break;
      if ( u8x8_pgm_read( font ) == encoding )
    3762:	781a      	ldrb	r2, [r3, #0]
    3764:	428a      	cmp	r2, r1
    3766:	d1f9      	bne.n	375c <u8g2_font_get_glyph_data+0x1c>
      {
	return font+2;	/* skip encoding and glyph size */
    3768:	1c98      	adds	r0, r3, #2
    376a:	bd38      	pop	{r3, r4, r5, pc}
//	font = u8g2->last_font_data;
//    }
//    else
//#endif 

    font += u8g2->font_info.start_pos_unicode;
    376c:	f8b0 20a2 	ldrh.w	r2, [r0, #162]	; 0xa2
    3770:	460d      	mov	r5, r1
    3772:	189c      	adds	r4, r3, r2
    unicode_lookup_table = font; 
    3774:	4622      	mov	r2, r4
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
    3776:	4610      	mov	r0, r2
    3778:	2100      	movs	r1, #0
    377a:	f7ff fdcb 	bl	3314 <u8g2_font_get_word>
      e = u8g2_font_get_word(unicode_lookup_table, 2);
    377e:	2102      	movs	r1, #2
    unicode_lookup_table = font; 
  
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
    3780:	4404      	add	r4, r0
      e = u8g2_font_get_word(unicode_lookup_table, 2);
    3782:	4610      	mov	r0, r2
    3784:	f7ff fdc6 	bl	3314 <u8g2_font_get_word>
      unicode_lookup_table+=4;
    } while( e < encoding );
    3788:	4285      	cmp	r5, r0
    /* issue 596: search for the glyph start in the unicode lookup table */
    do
    {
      font += u8g2_font_get_word(unicode_lookup_table, 0);
      e = u8g2_font_get_word(unicode_lookup_table, 2);
      unicode_lookup_table+=4;
    378a:	f102 0204 	add.w	r2, r2, #4
    } while( e < encoding );
    378e:	d8f2      	bhi.n	3776 <u8g2_font_get_glyph_data+0x36>
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
    3790:	7820      	ldrb	r0, [r4, #0]
      e <<= 8;
      e |= u8x8_pgm_read( font + 1 );
    3792:	7862      	ldrb	r2, [r4, #1]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
    3794:	ea52 2000 	orrs.w	r0, r2, r0, lsl #8
    3798:	d00c      	beq.n	37b4 <u8g2_font_get_glyph_data+0x74>
	break;
  
      if ( e == encoding )
    379a:	4285      	cmp	r5, r0
    379c:	d102      	bne.n	37a4 <u8g2_font_get_glyph_data+0x64>
    379e:	e010      	b.n	37c2 <u8g2_font_get_glyph_data+0x82>
    37a0:	429d      	cmp	r5, r3
    37a2:	d00e      	beq.n	37c2 <u8g2_font_get_glyph_data+0x82>
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
      }
      font += u8x8_pgm_read( font + 2 );
    37a4:	78a3      	ldrb	r3, [r4, #2]
    37a6:	441c      	add	r4, r3
    } while( e < encoding );
    
  
    for(;;)
    {
      e = u8x8_pgm_read( font );
    37a8:	7820      	ldrb	r0, [r4, #0]
      e <<= 8;
      e |= u8x8_pgm_read( font + 1 );
    37aa:	7863      	ldrb	r3, [r4, #1]
//#ifdef  __unix__
//      if ( encoding < e )
//        break;
//#endif 

      if ( e == 0 )
    37ac:	ea53 2300 	orrs.w	r3, r3, r0, lsl #8
    37b0:	d1f6      	bne.n	37a0 <u8g2_font_get_glyph_data+0x60>
      font += u8x8_pgm_read( font + 2 );
    }  
  }
#endif
  
  return NULL;
    37b2:	4618      	mov	r0, r3
}
    37b4:	bd38      	pop	{r3, r4, r5, pc}
  {
    if ( encoding >= 'a' )
    {
      font += u8g2->font_info.start_pos_lower_a;
    }
    else if ( encoding >= 'A' )
    37b6:	2940      	cmp	r1, #64	; 0x40
    37b8:	d9cd      	bls.n	3756 <u8g2_font_get_glyph_data+0x16>
    {
      font += u8g2->font_info.start_pos_upper_A;
    37ba:	f8b0 209e 	ldrh.w	r2, [r0, #158]	; 0x9e
    37be:	4413      	add	r3, r2
    37c0:	e7c9      	b.n	3756 <u8g2_font_get_glyph_data+0x16>
// removed, there is now the new index table
//#ifdef  __unix__
//	u8g2->last_font_data = font;
//	u8g2->last_unicode = encoding;
//#endif 
	return font+3;	/* skip encoding and glyph size */
    37c2:	1ce0      	adds	r0, r4, #3
    37c4:	bd38      	pop	{r3, r4, r5, pc}
    37c6:	bd38      	pop	{r3, r4, r5, pc}

000037c8 <u8g2_DrawGlyph>:
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
    37c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    37ca:	4615      	mov	r5, r2
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
    37cc:	f890 2088 	ldrb.w	r2, [r0, #136]	; 0x88
{
  u8g2->font_decode.is_transparent = is_transparent;		// new font procedures
}

u8g2_uint_t u8g2_DrawGlyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
    37d0:	4604      	mov	r4, r0
    37d2:	460e      	mov	r6, r1
    37d4:	461f      	mov	r7, r3
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
    37d6:	2a03      	cmp	r2, #3
    37d8:	d807      	bhi.n	37ea <u8g2_DrawGlyph+0x22>
    37da:	e8df f002 	tbb	[pc, r2]
    37de:	1a1f      	.short	0x1a1f
    37e0:	0215      	.short	0x0215
      break;
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
      break;
    case 3:
      x += u8g2->font_calc_vref(u8g2);
    37e2:	6f43      	ldr	r3, [r0, #116]	; 0x74
    37e4:	4798      	blx	r3
    37e6:	4430      	add	r0, r6
    37e8:	b286      	uxth	r6, r0
}

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
  u8g2->font_decode.target_x = x;
    37ea:	f8a4 607c 	strh.w	r6, [r4, #124]	; 0x7c
  u8g2->font_decode.target_y = y;
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
    37ee:	4639      	mov	r1, r7

static u8g2_uint_t u8g2_font_draw_glyph(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, uint16_t encoding)
{
  u8g2_uint_t dx = 0;
  u8g2->font_decode.target_x = x;
  u8g2->font_decode.target_y = y;
    37f0:	f8a4 507e 	strh.w	r5, [r4, #126]	; 0x7e
  //u8g2->font_decode.is_transparent = is_transparent; this is already set
  //u8g2->font_decode.dir = dir;
  const uint8_t *glyph_data = u8g2_font_get_glyph_data(u8g2, encoding);
    37f4:	4620      	mov	r0, r4
    37f6:	f7ff ffa3 	bl	3740 <u8g2_font_get_glyph_data>
  if ( glyph_data != NULL )
    37fa:	b120      	cbz	r0, 3806 <u8g2_DrawGlyph+0x3e>
  {
    dx = u8g2_font_decode_glyph(u8g2, glyph_data);
    37fc:	4601      	mov	r1, r0
    37fe:	4620      	mov	r0, r4
    3800:	f7ff feae 	bl	3560 <u8g2_font_decode_glyph>
    3804:	b280      	uxth	r0, r0
  }
#else
  y += u8g2->font_calc_vref(u8g2);
#endif
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}
    3806:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      break;
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
      break;
    case 2:
      y -= u8g2->font_calc_vref(u8g2);
    3808:	6f43      	ldr	r3, [r0, #116]	; 0x74
    380a:	4798      	blx	r3
    380c:	1a28      	subs	r0, r5, r0
    380e:	b285      	uxth	r5, r0
      break;
    3810:	e7eb      	b.n	37ea <u8g2_DrawGlyph+0x22>
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
      break;
    case 1:
      x -= u8g2->font_calc_vref(u8g2);
    3812:	6f43      	ldr	r3, [r0, #116]	; 0x74
    3814:	4798      	blx	r3
    3816:	1a30      	subs	r0, r6, r0
    3818:	b286      	uxth	r6, r0
      break;
    381a:	e7e6      	b.n	37ea <u8g2_DrawGlyph+0x22>
{
#ifdef U8G2_WITH_FONT_ROTATION
  switch(u8g2->font_decode.dir)
  {
    case 0:
      y += u8g2->font_calc_vref(u8g2);
    381c:	6f43      	ldr	r3, [r0, #116]	; 0x74
    381e:	4798      	blx	r3
    3820:	4428      	add	r0, r5
    3822:	b285      	uxth	r5, r0
      break;
    3824:	e7e1      	b.n	37ea <u8g2_DrawGlyph+0x22>
    3826:	bf00      	nop

00003828 <u8g2_draw_string>:
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
    3828:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
    382c:	f04f 0900 	mov.w	r9, #0
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
    3830:	f64f 7aff 	movw	sl, #65535	; 0xffff
      break;
    str++;
    if ( e != 0x0fffe )
    3834:	f64f 7bfe 	movw	fp, #65534	; 0xfffe
    3838:	1e5e      	subs	r6, r3, #1
  return u8g2_font_draw_glyph(u8g2, x, y, encoding);
}

static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str) U8G2_NOINLINE;
static u8g2_uint_t u8g2_draw_string(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
    383a:	4688      	mov	r8, r1
    383c:	4617      	mov	r7, r2
    383e:	4605      	mov	r5, r0
  uint16_t e;
  u8g2_uint_t delta, sum;
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
    3840:	f000 fa34 	bl	3cac <u8x8_utf8_init>
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    3844:	686b      	ldr	r3, [r5, #4]
    3846:	4628      	mov	r0, r5
    3848:	f816 1f01 	ldrb.w	r1, [r6, #1]!
    384c:	4798      	blx	r3
    384e:	4604      	mov	r4, r0
    if ( e == 0x0ffff )
      break;
    str++;
    if ( e != 0x0fffe )
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
    3850:	4603      	mov	r3, r0
    3852:	463a      	mov	r2, r7
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
    3854:	4554      	cmp	r4, sl
      break;
    str++;
    if ( e != 0x0fffe )
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
    3856:	4641      	mov	r1, r8
    3858:	4628      	mov	r0, r5
  u8x8_utf8_init(u8g2_GetU8x8(u8g2));
  sum = 0;
  for(;;)
  {
    e = u8g2->u8x8.next_cb(u8g2_GetU8x8(u8g2), (uint8_t)*str);
    if ( e == 0x0ffff )
    385a:	d01d      	beq.n	3898 <u8g2_draw_string+0x70>
      break;
    str++;
    if ( e != 0x0fffe )
    385c:	455c      	cmp	r4, fp
    385e:	d0f1      	beq.n	3844 <u8g2_draw_string+0x1c>
    {
      delta = u8g2_DrawGlyph(u8g2, x, y, e);
    3860:	f7ff ffb2 	bl	37c8 <u8g2_DrawGlyph>
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
    3864:	f895 3088 	ldrb.w	r3, [r5, #136]	; 0x88
    3868:	2b03      	cmp	r3, #3
    386a:	d805      	bhi.n	3878 <u8g2_draw_string+0x50>
    386c:	e8df f003 	tbb	[pc, r3]
    3870:	020f080b 	.word	0x020f080b
	  break;
	case 2:
	  x -= delta;
	  break;
	case 3:
	  y -= delta;
    3874:	1a3f      	subs	r7, r7, r0
    3876:	b2bf      	uxth	r7, r7

#else
      x += delta;
#endif

      sum += delta;    
    3878:	4481      	add	r9, r0
    387a:	fa1f f989 	uxth.w	r9, r9
    387e:	e7e1      	b.n	3844 <u8g2_draw_string+0x1c>
      {
	case 0:
	  x += delta;
	  break;
	case 1:
	  y += delta;
    3880:	4407      	add	r7, r0
    3882:	b2bf      	uxth	r7, r7
	  break;
    3884:	e7f8      	b.n	3878 <u8g2_draw_string+0x50>
    
#ifdef U8G2_WITH_FONT_ROTATION
      switch(u8g2->font_decode.dir)
      {
	case 0:
	  x += delta;
    3886:	4480      	add	r8, r0
    3888:	fa1f f888 	uxth.w	r8, r8
	  break;
    388c:	e7f4      	b.n	3878 <u8g2_draw_string+0x50>
	case 1:
	  y += delta;
	  break;
	case 2:
	  x -= delta;
    388e:	ebc0 0808 	rsb	r8, r0, r8
    3892:	fa1f f888 	uxth.w	r8, r8
	  break;
    3896:	e7ef      	b.n	3878 <u8g2_draw_string+0x50>

      sum += delta;    
    }
  }
  return sum;
}
    3898:	4648      	mov	r0, r9
    389a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    389e:	bf00      	nop

000038a0 <u8g2_DrawStr>:

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
    38a0:	b410      	push	{r4}
  u8g2->u8x8.next_cb = u8x8_ascii_next;
    38a2:	4c03      	ldr	r4, [pc, #12]	; (38b0 <u8g2_DrawStr+0x10>)
    38a4:	6044      	str	r4, [r0, #4]
  return u8g2_draw_string(u8g2, x, y, str);
}
    38a6:	f85d 4b04 	ldr.w	r4, [sp], #4
}

u8g2_uint_t u8g2_DrawStr(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, const char *str)
{
  u8g2->u8x8.next_cb = u8x8_ascii_next;
  return u8g2_draw_string(u8g2, x, y, str);
    38aa:	f7ff bfbd 	b.w	3828 <u8g2_draw_string>
    38ae:	bf00      	nop
    38b0:	00003c9d 	.word	0x00003c9d

000038b4 <u8g2_UpdateRefHeight>:

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
    38b4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    38b6:	b1e3      	cbz	r3, 38f2 <u8g2_UpdateRefHeight+0x3e>
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    38b8:	f990 1099 	ldrsb.w	r1, [r0, #153]	; 0x99
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    38bc:	f990 209a 	ldrsb.w	r2, [r0, #154]	; 0x9a
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
    38c0:	f890 30a5 	ldrb.w	r3, [r0, #165]	; 0xa5

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
  if ( u8g2->font == NULL )
    return;
  u8g2->font_ref_ascent = u8g2->font_info.ascent_A;
    38c4:	f880 10a6 	strb.w	r1, [r0, #166]	; 0xa6
  u8g2->font_ref_descent = u8g2->font_info.descent_g;
    38c8:	f880 20a7 	strb.w	r2, [r0, #167]	; 0xa7
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
    38cc:	b18b      	cbz	r3, 38f2 <u8g2_UpdateRefHeight+0x3e>
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
    38ce:	2b01      	cmp	r3, #1
    38d0:	d010      	beq.n	38f4 <u8g2_UpdateRefHeight+0x40>
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
    38d2:	f990 3096 	ldrsb.w	r3, [r0, #150]	; 0x96
/*===============================================*/

/* set ascent/descent for reference point calculation */

void u8g2_UpdateRefHeight(u8g2_t *u8g2)
{
    38d6:	b410      	push	{r4}
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
  }
  else
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.max_char_height+u8g2->font_info.y_offset )
    38d8:	f990 4098 	ldrsb.w	r4, [r0, #152]	; 0x98
    38dc:	4423      	add	r3, r4
    38de:	4299      	cmp	r1, r3
      u8g2->font_ref_ascent = u8g2->font_info.max_char_height+u8g2->font_info.y_offset;
    38e0:	bfb8      	it	lt
    38e2:	f880 30a6 	strblt.w	r3, [r0, #166]	; 0xa6
    if ( u8g2->font_ref_descent > u8g2->font_info.y_offset )
    38e6:	42a2      	cmp	r2, r4
      u8g2->font_ref_descent = u8g2->font_info.y_offset;
    38e8:	bfc8      	it	gt
    38ea:	f880 40a7 	strbgt.w	r4, [r0, #167]	; 0xa7
  }  
}
    38ee:	f85d 4b04 	ldr.w	r4, [sp], #4
    38f2:	4770      	bx	lr
  if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_TEXT )
  {
  }
  else if ( u8g2->font_height_mode == U8G2_FONT_HEIGHT_MODE_XTEXT )
  {
    if ( u8g2->font_ref_ascent < u8g2->font_info.ascent_para )
    38f4:	f990 309b 	ldrsb.w	r3, [r0, #155]	; 0x9b
    38f8:	4299      	cmp	r1, r3
      u8g2->font_ref_ascent = u8g2->font_info.ascent_para;
    38fa:	bfb8      	it	lt
    38fc:	f880 30a6 	strblt.w	r3, [r0, #166]	; 0xa6
    if ( u8g2->font_ref_descent > u8g2->font_info.descent_para )
    3900:	f990 309c 	ldrsb.w	r3, [r0, #156]	; 0x9c
    3904:	429a      	cmp	r2, r3
    3906:	ddf4      	ble.n	38f2 <u8g2_UpdateRefHeight+0x3e>
      u8g2->font_ref_descent = u8g2->font_info.descent_para;
    3908:	f880 30a7 	strb.w	r3, [r0, #167]	; 0xa7
    390c:	4770      	bx	lr
    390e:	bf00      	nop

00003910 <u8g2_SetFontPosBaseline>:
  return 0;
}

void u8g2_SetFontPosBaseline(u8g2_t *u8g2)
{
  u8g2->font_calc_vref = u8g2_font_calc_vref_font;
    3910:	4b01      	ldr	r3, [pc, #4]	; (3918 <u8g2_SetFontPosBaseline+0x8>)
    3912:	6743      	str	r3, [r0, #116]	; 0x74
    3914:	4770      	bx	lr
    3916:	bf00      	nop
    3918:	000033ad 	.word	0x000033ad

0000391c <u8g2_SetFont>:

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
  if ( u8g2->font != font )
    391c:	6f02      	ldr	r2, [r0, #112]	; 0x70
    391e:	428a      	cmp	r2, r1
    3920:	d00a      	beq.n	3938 <u8g2_SetFont+0x1c>
}

/*===============================================*/

void u8g2_SetFont(u8g2_t *u8g2, const uint8_t  *font)
{
    3922:	b510      	push	{r4, lr}
    3924:	4604      	mov	r4, r0
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    u8g2_read_font_info(&(u8g2->font_info), font);
    3926:	308c      	adds	r0, #140	; 0x8c
  {
//#ifdef  __unix__
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    3928:	6721      	str	r1, [r4, #112]	; 0x70
    u8g2_read_font_info(&(u8g2->font_info), font);
    392a:	f7ff fd41 	bl	33b0 <u8g2_read_font_info>
    u8g2_UpdateRefHeight(u8g2);
    392e:	4620      	mov	r0, r4
    /* u8g2_SetFontPosBaseline(u8g2); */ /* removed with issue 195 */
  }
}
    3930:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
//	u8g2->last_font_data = NULL;
//	u8g2->last_unicode = 0x0ffff;
//#endif 
    u8g2->font = font;
    u8g2_read_font_info(&(u8g2->font_info), font);
    u8g2_UpdateRefHeight(u8g2);
    3934:	f7ff bfbe 	b.w	38b4 <u8g2_UpdateRefHeight>
    3938:	4770      	bx	lr
    393a:	bf00      	nop

0000393c <u8g2_DrawHVLine.part.0>:
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    393c:	2b01      	cmp	r3, #1
  This is the toplevel function for the hv line draw procedures.
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
    393e:	b470      	push	{r4, r5, r6}
    3940:	f89d 400c 	ldrb.w	r4, [sp, #12]
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    {
    
      /* convert to two directions */    
      if ( len > 1 )
    3944:	d903      	bls.n	394e <u8g2_DrawHVLine.part.0+0x12>
      {
	if ( dir == 2 )
    3946:	2c02      	cmp	r4, #2
    3948:	d02c      	beq.n	39a4 <u8g2_DrawHVLine.part.0+0x68>
	{
	  x -= len;
	  x++;
	}
	else if ( dir == 3 )
    394a:	2c03      	cmp	r4, #3
    394c:	d055      	beq.n	39fa <u8g2_DrawHVLine.part.0+0xbe>
	}
      }
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
    394e:	07e4      	lsls	r4, r4, #31
    3950:	d52b      	bpl.n	39aa <u8g2_DrawHVLine.part.0+0x6e>
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    3952:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
    3956:	428c      	cmp	r4, r1
    3958:	d84d      	bhi.n	39f6 <u8g2_DrawHVLine.part.0+0xba>
	  return;
	if ( x >= u8g2->user_x1 )
    395a:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
    395e:	428c      	cmp	r4, r1
    3960:	d949      	bls.n	39f6 <u8g2_DrawHVLine.part.0+0xba>
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    3962:	4413      	add	r3, r2
      {
	if ( x < u8g2->user_x0 )
	  return;
	if ( x >= u8g2->user_x1 )
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    3964:	f8b0 5064 	ldrh.w	r5, [r0, #100]	; 0x64
    3968:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    396c:	b29b      	uxth	r3, r3
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    396e:	4293      	cmp	r3, r2
    3970:	d203      	bcs.n	397a <u8g2_DrawHVLine.part.0+0x3e>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    3972:	4294      	cmp	r4, r2
    3974:	d94b      	bls.n	3a0e <u8g2_DrawHVLine.part.0+0xd2>
    {
      b = d;
      b--;
    3976:	1e63      	subs	r3, r4, #1
    3978:	b29b      	uxth	r3, r3
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
  if ( b <= c )
    397a:	429d      	cmp	r5, r3
    397c:	d23b      	bcs.n	39f6 <u8g2_DrawHVLine.part.0+0xba>
    397e:	4294      	cmp	r4, r2
    3980:	d939      	bls.n	39f6 <u8g2_DrawHVLine.part.0+0xba>
    3982:	42aa      	cmp	r2, r5
    3984:	bf38      	it	cc
    3986:	462a      	movcc	r2, r5
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    3988:	2501      	movs	r5, #1
    398a:	429c      	cmp	r4, r3
    398c:	bf94      	ite	ls
    398e:	ebc2 0304 	rsbls	r3, r2, r4
    3992:	ebc2 0303 	rsbhi	r3, r2, r3
    3996:	b29b      	uxth	r3, r3
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    3998:	6c84      	ldr	r4, [r0, #72]	; 0x48
    399a:	9503      	str	r5, [sp, #12]
    399c:	68a4      	ldr	r4, [r4, #8]
    399e:	46a4      	mov	ip, r4
    }
}
    39a0:	bc70      	pop	{r4, r5, r6}
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
	  return;
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    39a2:	4760      	bx	ip
    39a4:	3101      	adds	r1, #1
      if ( len > 1 )
      {
	if ( dir == 2 )
	{
	  x -= len;
	  x++;
    39a6:	1ac9      	subs	r1, r1, r3
    39a8:	b289      	uxth	r1, r1
      dir &= 1;  
      
      /* clip against the user window */
      if ( dir == 0 )
      {
	if ( y < u8g2->user_y0 )
    39aa:	f8b0 4064 	ldrh.w	r4, [r0, #100]	; 0x64
    39ae:	4294      	cmp	r4, r2
    39b0:	d821      	bhi.n	39f6 <u8g2_DrawHVLine.part.0+0xba>
	  return;
	if ( y >= u8g2->user_y1 )
    39b2:	f8b0 4066 	ldrh.w	r4, [r0, #102]	; 0x66
    39b6:	4294      	cmp	r4, r2
    39b8:	d91d      	bls.n	39f6 <u8g2_DrawHVLine.part.0+0xba>
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    39ba:	440b      	add	r3, r1
      {
	if ( y < u8g2->user_y0 )
	  return;
	if ( y >= u8g2->user_y1 )
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    39bc:	f8b0 6060 	ldrh.w	r6, [r0, #96]	; 0x60
    39c0:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
static uint8_t u8g2_clip_intersection2(u8g2_uint_t *ap, u8g2_uint_t *len, u8g2_uint_t c, u8g2_uint_t d)
{
  u8g2_uint_t a = *ap;
  u8g2_uint_t b;
  b  = a;
  b += *len;
    39c4:	b29b      	uxth	r3, r3
  /* be removed completly (be aware about memory curruption for wrong */
  /* arguments) or return 0 for a>b (will lead to skipped lines for wrong */
  /* arguments) */  
  
  /* removing the following if clause completly may lead to memory corruption of a>b */
  if ( a > b )
    39c6:	428b      	cmp	r3, r1
    39c8:	d203      	bcs.n	39d2 <u8g2_DrawHVLine.part.0+0x96>
  {    
    /* replacing this if with a simple "return 0;" will not handle the case with negative a */    
    if ( a < d )
    39ca:	428c      	cmp	r4, r1
    39cc:	d91d      	bls.n	3a0a <u8g2_DrawHVLine.part.0+0xce>
    {
      b = d;
      b--;
    39ce:	1e63      	subs	r3, r4, #1
    39d0:	b29b      	uxth	r3, r3
  
  /* from now on, the asumption a <= b is ok */
  
  if ( a >= d )
    return 0;
  if ( b <= c )
    39d2:	428c      	cmp	r4, r1
    39d4:	d90f      	bls.n	39f6 <u8g2_DrawHVLine.part.0+0xba>
    39d6:	429e      	cmp	r6, r3
    39d8:	bf34      	ite	cc
    39da:	2500      	movcc	r5, #0
    39dc:	2501      	movcs	r5, #1
    39de:	b955      	cbnz	r5, 39f6 <u8g2_DrawHVLine.part.0+0xba>
    39e0:	42b1      	cmp	r1, r6
    39e2:	bf38      	it	cc
    39e4:	4631      	movcc	r1, r6
    a = c;
  if ( b > d )
    b = d;
  
  *ap = a;
  b -= a;
    39e6:	429c      	cmp	r4, r3
    39e8:	bf94      	ite	ls
    39ea:	ebc1 0304 	rsbls	r3, r1, r4
    39ee:	ebc1 0303 	rsbhi	r3, r1, r3
    39f2:	b29b      	uxth	r3, r3
    39f4:	e7d0      	b.n	3998 <u8g2_DrawHVLine.part.0+0x5c>
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
    39f6:	bc70      	pop	{r4, r5, r6}
    39f8:	4770      	bx	lr
    39fa:	3201      	adds	r2, #1
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    39fc:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
	  x++;
	}
	else if ( dir == 3 )
	{
	  y -= len;
	  y++;
    3a00:	1ad2      	subs	r2, r2, r3
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    3a02:	428c      	cmp	r4, r1
	  x++;
	}
	else if ( dir == 3 )
	{
	  y -= len;
	  y++;
    3a04:	b292      	uxth	r2, r2
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
	  return;
      }
      else
      {
	if ( x < u8g2->user_x0 )
    3a06:	d9a8      	bls.n	395a <u8g2_DrawHVLine.part.0+0x1e>
    3a08:	e7f5      	b.n	39f6 <u8g2_DrawHVLine.part.0+0xba>
      {
	if ( y < u8g2->user_y0 )
	  return;
	if ( y >= u8g2->user_y1 )
	  return;
	if ( u8g2_clip_intersection2(&x, &len, u8g2->user_x0, u8g2->user_x1) == 0 )
    3a0a:	4631      	mov	r1, r6
    3a0c:	e7e1      	b.n	39d2 <u8g2_DrawHVLine.part.0+0x96>
      {
	if ( x < u8g2->user_x0 )
	  return;
	if ( x >= u8g2->user_x1 )
	  return;
	if ( u8g2_clip_intersection2(&y, &len, u8g2->user_y0, u8g2->user_y1) == 0 )
    3a0e:	462a      	mov	r2, r5
    3a10:	e7b3      	b.n	397a <u8g2_DrawHVLine.part.0+0x3e>
    3a12:	bf00      	nop

00003a14 <u8g2_draw_hv_line_2dir>:
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3a14:	b470      	push	{r4, r5, r6}
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    3a16:	f8b0 4056 	ldrh.w	r4, [r0, #86]	; 0x56
  This function first adjusts the y position to the local buffer. Then it
  will clip the line and call u8g2_draw_low_level_hv_line()

*/
void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3a1a:	f89d 600c 	ldrb.w	r6, [sp, #12]
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    3a1e:	6c45      	ldr	r5, [r0, #68]	; 0x44
    3a20:	1b12      	subs	r2, r2, r4
    3a22:	9603      	str	r6, [sp, #12]
    3a24:	46ac      	mov	ip, r5
    3a26:	b292      	uxth	r2, r2
}
    3a28:	bc70      	pop	{r4, r5, r6}
  /* clipping happens before the display rotation */

  /* transform to pixel buffer coordinates */
  y -= u8g2->pixel_curr_row;
  
  u8g2->ll_hvline(u8g2, x, y, len, dir);
    3a2a:	4760      	bx	ip

00003a2c <u8g2_DrawHVLine>:
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3a2c:	b470      	push	{r4, r5, r6}
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    3a2e:	f890 40a4 	ldrb.w	r4, [r0, #164]	; 0xa4
  This function should be called by the user.
  
  "dir" may have 4 directions: 0 (left to right), 1, 2, 3 (down up)
*/
void u8g2_DrawHVLine(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3a32:	f89d 600c 	ldrb.w	r6, [sp, #12]
  /* after rotation this will call u8g2_draw_hv_line_4dir() */
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  if ( u8g2->is_page_clip_window_intersection != 0 )
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
    if ( len != 0 )
    3a36:	b124      	cbz	r4, 3a42 <u8g2_DrawHVLine+0x16>
    3a38:	b11b      	cbz	r3, 3a42 <u8g2_DrawHVLine+0x16>
    3a3a:	9603      	str	r6, [sp, #12]
      }
      
      
      u8g2->cb->draw_l90(u8g2, x, y, len, dir);
    }
}
    3a3c:	bc70      	pop	{r4, r5, r6}
    3a3e:	f7ff bf7d 	b.w	393c <u8g2_DrawHVLine.part.0>
    3a42:	bc70      	pop	{r4, r5, r6}
    3a44:	4770      	bx	lr
    3a46:	bf00      	nop

00003a48 <u8g2_IsIntersection>:



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    3a48:	b470      	push	{r4, r5, r6}
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    3a4a:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66


/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    3a4e:	f8b0 4064 	ldrh.w	r4, [r0, #100]	; 0x64
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    3a52:	4295      	cmp	r5, r2



/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
    3a54:	f8bd 600c 	ldrh.w	r6, [sp, #12]
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    3a58:	d909      	bls.n	3a6e <u8g2_IsIntersection+0x26>
    {
      return 1;
    }
    else
    {
      if ( v0 > v1 )	// v0 > v1
    3a5a:	42b2      	cmp	r2, r6
    3a5c:	d80b      	bhi.n	3a76 <u8g2_IsIntersection+0x2e>
    3a5e:	42b4      	cmp	r4, r6
    3a60:	bf2c      	ite	cs
    3a62:	2400      	movcs	r4, #0
    3a64:	2401      	movcc	r4, #1
    3a66:	b934      	cbnz	r4, 3a76 <u8g2_IsIntersection+0x2e>

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    3a68:	2000      	movs	r0, #0
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    3a6a:	bc70      	pop	{r4, r5, r6}
    3a6c:	4770      	bx	lr
  }
  else
  {
    if ( v1 > a0 )	// v1 >= a0
    {
      if ( v0 > v1 )	// v0 > v1
    3a6e:	42b4      	cmp	r4, r6
    3a70:	d2fa      	bcs.n	3a68 <u8g2_IsIntersection+0x20>
    3a72:	42b2      	cmp	r2, r6
    3a74:	d9f8      	bls.n	3a68 <u8g2_IsIntersection+0x20>
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    3a76:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
    3a7a:	f8b0 4060 	ldrh.w	r4, [r0, #96]	; 0x60
  a1 and v1 are excluded
  v0 == v1 is not support end return 1
*/
uint8_t u8g2_is_intersection_decision_tree(u8g2_uint_t a0, u8g2_uint_t a1, u8g2_uint_t v0, u8g2_uint_t v1)
{
  if ( v0 < a1 )		// v0 <= a1
    3a7e:	428a      	cmp	r2, r1
    3a80:	d909      	bls.n	3a96 <u8g2_IsIntersection+0x4e>

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    3a82:	429c      	cmp	r4, r3
    3a84:	bf2c      	ite	cs
    3a86:	2000      	movcs	r0, #0
    3a88:	2001      	movcc	r0, #1
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    3a8a:	bc70      	pop	{r4, r5, r6}

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    3a8c:	4299      	cmp	r1, r3
    3a8e:	bf88      	it	hi
    3a90:	f040 0001 	orrhi.w	r0, r0, #1
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    3a94:	4770      	bx	lr

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    3a96:	4299      	cmp	r1, r3
    3a98:	bf94      	ite	ls
    3a9a:	2000      	movls	r0, #0
    3a9c:	2001      	movhi	r0, #1
    3a9e:	429c      	cmp	r4, r3
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    3aa0:	bc70      	pop	{r4, r5, r6}

/* upper limits are not included (asymetric boundaries) */
uint8_t u8g2_IsIntersection(u8g2_t *u8g2, u8g2_uint_t x0, u8g2_uint_t y0, u8g2_uint_t x1, u8g2_uint_t y1)
{
  if ( u8g2_is_intersection_decision_tree(u8g2->user_y0, u8g2->user_y1, y0, y1) == 0 )
    return 0; 
    3aa2:	bf28      	it	cs
    3aa4:	2000      	movcs	r0, #0
  
  return u8g2_is_intersection_decision_tree(u8g2->user_x0, u8g2->user_x1, x0, x1);
}
    3aa6:	4770      	bx	lr

00003aa8 <u8g2_ll_hvline_vertical_top_lsb>:
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3aa8:	b5f0      	push	{r4, r5, r6, r7, lr}
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
    3aaa:	2401      	movs	r4, #1
  //assert(y >= u8g2->buf_y0);
  //assert(y < u8g2_GetU8x8(u8g2)->display_info->tile_height*8);
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
    3aac:	f002 0607 	and.w	r6, r2, #7
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    3ab0:	f890 50aa 	ldrb.w	r5, [r0, #170]	; 0xaa
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
    3ab4:	40b4      	lsls	r4, r6
		1: vertical line (top to bottom)
  asumption: 
    all clipping done
*/
void u8g2_ll_hvline_vertical_top_lsb(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3ab6:	f89d e014 	ldrb.w	lr, [sp, #20]
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    3aba:	2d01      	cmp	r5, #1
  
  /* bytes are vertical, lsb on top (y=0), msb at bottom (y=7) */
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;
    3abc:	b2e4      	uxtb	r4, r4

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    3abe:	d941      	bls.n	3b44 <u8g2_ll_hvline_vertical_top_lsb+0x9c>
  bit_pos = y;		/* overflow truncate is ok here... */
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
    3ac0:	2500      	movs	r5, #0
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
    3ac2:	6807      	ldr	r7, [r0, #0]
  if ( u8g2->draw_color != 1 )
    xor_mask = mask;


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
    3ac4:	f022 0207 	bic.w	r2, r2, #7
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
  ptr += offset;
  ptr += x;
    3ac8:	f64f 7cf8 	movw	ip, #65528	; 0xfff8
    3acc:	7c3f      	ldrb	r7, [r7, #16]
    3ace:	fb02 f207 	mul.w	r2, r2, r7


  offset = y;		/* y might be 8 or 16 bit, but we need 16 bit, so use a 16 bit variable */
  offset &= ~7;
  offset *= u8g2_GetU8x8(u8g2)->display_info->tile_width;
  ptr = u8g2->tile_buf_ptr;
    3ad2:	6cc7      	ldr	r7, [r0, #76]	; 0x4c
  ptr += offset;
  ptr += x;
    3ad4:	ea02 0c0c 	and.w	ip, r2, ip
    3ad8:	4461      	add	r1, ip
    3ada:	4439      	add	r1, r7
  
  if ( dir == 0 )
    3adc:	f1be 0f00 	cmp.w	lr, #0
    3ae0:	d110      	bne.n	3b04 <u8g2_ll_hvline_vertical_top_lsb+0x5c>
    3ae2:	1e5a      	subs	r2, r3, #1
    3ae4:	b292      	uxth	r2, r2
    3ae6:	3201      	adds	r2, #1
    3ae8:	440a      	add	r2, r1
      {
#ifdef __unix
	assert(ptr < max_ptr);
#endif
	*ptr |= or_mask;
	*ptr ^= xor_mask;
    3aea:	780b      	ldrb	r3, [r1, #0]
    3aec:	432b      	orrs	r3, r5
    3aee:	4063      	eors	r3, r4
    3af0:	f801 3b01 	strb.w	r3, [r1], #1
	ptr++;
	len--;
      } while( len != 0 );
    3af4:	428a      	cmp	r2, r1
    3af6:	d1f8      	bne.n	3aea <u8g2_ll_hvline_vertical_top_lsb+0x42>
    3af8:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    3afa:	4615      	mov	r5, r2
	if ( u8g2->draw_color != 1 )
    3afc:	d001      	beq.n	3b02 <u8g2_ll_hvline_vertical_top_lsb+0x5a>
	  xor_mask = 1;
    3afe:	2401      	movs	r4, #1
      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
	  or_mask  = 1;
    3b00:	4625      	mov	r5, r4
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    3b02:	b1c3      	cbz	r3, 3b36 <u8g2_ll_hvline_vertical_top_lsb+0x8e>
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    3b04:	780a      	ldrb	r2, [r1, #0]
      
      bit_pos++;
    3b06:	3601      	adds	r6, #1
      bit_pos &= 7;

      len--;
    3b08:	3b01      	subs	r3, #1
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    3b0a:	ea4f 0e45 	mov.w	lr, r5, lsl #1
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    3b0e:	432a      	orrs	r2, r5
      bit_pos++;
      bit_pos &= 7;

      len--;

      if ( bit_pos == 0 )
    3b10:	f016 0607 	ands.w	r6, r6, #7
      *ptr ^= xor_mask;
      
      bit_pos++;
      bit_pos &= 7;

      len--;
    3b14:	b29b      	uxth	r3, r3
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    3b16:	ea82 0204 	eor.w	r2, r2, r4
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
    3b1a:	ea4f 0744 	mov.w	r7, r4, lsl #1
    {
#ifdef __unix
      assert(ptr < max_ptr);
#endif
      *ptr |= or_mask;
      *ptr ^= xor_mask;
    3b1e:	700a      	strb	r2, [r1, #0]
      bit_pos++;
      bit_pos &= 7;

      len--;

      if ( bit_pos == 0 )
    3b20:	d10a      	bne.n	3b38 <u8g2_ll_hvline_vertical_top_lsb+0x90>
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
		
	if ( u8g2->draw_color <= 1 )
    3b22:	f890 20aa 	ldrb.w	r2, [r0, #170]	; 0xaa

      len--;

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    3b26:	f8b0 7052 	ldrh.w	r7, [r0, #82]	; 0x52
		
	if ( u8g2->draw_color <= 1 )
    3b2a:	2a01      	cmp	r2, #1

      len--;

      if ( bit_pos == 0 )
      {
	ptr+=u8g2->pixel_buf_width;	/* 6 Jan 17: Changed u8g2->width to u8g2->pixel_buf_width, issue #148 */
    3b2c:	4439      	add	r1, r7
		
	if ( u8g2->draw_color <= 1 )
    3b2e:	d9e4      	bls.n	3afa <u8g2_ll_hvline_vertical_top_lsb+0x52>
	  or_mask  = 1;
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
    3b30:	2401      	movs	r4, #1
      else
      {
	or_mask <<= 1;
	xor_mask <<= 1;
      }
    } while( len != 0 );
    3b32:	2b00      	cmp	r3, #0
    3b34:	d1e6      	bne.n	3b04 <u8g2_ll_hvline_vertical_top_lsb+0x5c>
    3b36:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if ( u8g2->draw_color != 1 )
	  xor_mask = 1;
      }
      else
      {
	or_mask <<= 1;
    3b38:	fa5f f58e 	uxtb.w	r5, lr
	xor_mask <<= 1;
    3b3c:	b2fc      	uxtb	r4, r7
      }
    } while( len != 0 );
    3b3e:	2b00      	cmp	r3, #0
    3b40:	d1e0      	bne.n	3b04 <u8g2_ll_hvline_vertical_top_lsb+0x5c>
    3b42:	e7f8      	b.n	3b36 <u8g2_ll_hvline_vertical_top_lsb+0x8e>
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
  if ( u8g2->draw_color <= 1 )
    or_mask  = mask;
    3b44:	4625      	mov	r5, r4
  if ( u8g2->draw_color != 1 )
    3b46:	d1bc      	bne.n	3ac2 <u8g2_ll_hvline_vertical_top_lsb+0x1a>
  bit_pos &= 7; 	/* ... because only the lowest 3 bits are needed */
  mask = 1;
  mask <<= bit_pos;

  or_mask = 0;
  xor_mask = 0;
    3b48:	2400      	movs	r4, #0
    3b4a:	e7ba      	b.n	3ac2 <u8g2_ll_hvline_vertical_top_lsb+0x1a>

00003b4c <u8g2_update_dimension_common>:
    u8g2_uint_t buf_y0;
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
    3b4c:	b4f0      	push	{r4, r5, r6, r7}
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
    3b4e:	f890 5050 	ldrb.w	r5, [r0, #80]	; 0x50
    u8g2_uint_t buf_y1; 	
*/

static void u8g2_update_dimension_common(u8g2_t *u8g2)
{
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
    3b52:	6801      	ldr	r1, [r0, #0]
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
  t *= 8;
    3b54:	00eb      	lsls	r3, r5, #3
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
    3b56:	f890 4051 	ldrb.w	r4, [r0, #81]	; 0x51
  const u8x8_display_info_t *display_info = u8g2_GetU8x8(u8g2)->display_info;
  u8g2_uint_t t;
  
  t = u8g2->tile_buf_height;
  t *= 8;
  u8g2->pixel_buf_height = t;
    3b5a:	f8a0 3054 	strh.w	r3, [r0, #84]	; 0x54
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
    3b5e:	b2a7      	uxth	r7, r4
  
  t = u8g2->tile_buf_height;
  t *= 8;
  u8g2->pixel_buf_height = t;
  
  t = display_info->tile_width;
    3b60:	7c0e      	ldrb	r6, [r1, #16]
  t *= 8;
  u8g2->pixel_curr_row = t;
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
    3b62:	442c      	add	r4, r5
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
  
  t = u8g2->tile_curr_row;
  t *= 8;
    3b64:	00fd      	lsls	r5, r7, #3
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
    3b66:	00f6      	lsls	r6, r6, #3
  
  t = u8g2->tile_curr_row;
  t *= 8;
  u8g2->pixel_curr_row = t;
    3b68:	f8a0 5056 	strh.w	r5, [r0, #86]	; 0x56
#ifndef U8G2_16BIT
  if ( t >= 32 )
    t = 31;
#endif
  t *= 8;
  u8g2->pixel_buf_width = t;
    3b6c:	f8a0 6052 	strh.w	r6, [r0, #82]	; 0x52
  t *= 8;
  u8g2->pixel_curr_row = t;
  
  t = u8g2->tile_buf_height;
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
    3b70:	7c4a      	ldrb	r2, [r1, #17]
    3b72:	4294      	cmp	r4, r2
    3b74:	dd02      	ble.n	3b7c <u8g2_update_dimension_common+0x30>
    3b76:	1bd3      	subs	r3, r2, r7
    3b78:	00db      	lsls	r3, r3, #3
    3b7a:	b29b      	uxth	r3, r3
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
    3b7c:	8a8c      	ldrh	r4, [r1, #20]
    t = display_info->tile_height - u8g2->tile_curr_row;
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
    3b7e:	442b      	add	r3, r5

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
    3b80:	8aca      	ldrh	r2, [r1, #22]
  /* handle the case, where the buffer is larger than the (remaining) part of the display */
  if ( t + u8g2->tile_curr_row > display_info->tile_height )
    t = display_info->tile_height - u8g2->tile_curr_row;
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
    3b82:	f8a0 5058 	strh.w	r5, [r0, #88]	; 0x58
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
    3b86:	f8a0 405c 	strh.w	r4, [r0, #92]	; 0x5c
    t = display_info->tile_height - u8g2->tile_curr_row;
  t *= 8;
  
  u8g2->buf_y0 = u8g2->pixel_curr_row;   
  u8g2->buf_y1 = u8g2->buf_y0;
  u8g2->buf_y1 += t;
    3b8a:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a

  
#ifdef U8G2_16BIT
  u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
    3b8e:	f8a0 205e 	strh.w	r2, [r0, #94]	; 0x5e
  if ( display_info->pixel_width <= 240 )
    u8g2->width = display_info->pixel_width;
  u8g2->height = display_info->pixel_height;
#endif

}
    3b92:	bcf0      	pop	{r4, r5, r6, r7}
    3b94:	4770      	bx	lr
    3b96:	bf00      	nop

00003b98 <u8g2_draw_l90_r0>:
/*============================================*/
extern void u8g2_draw_hv_line_2dir(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir);


void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
    3b98:	b410      	push	{r4}
    3b9a:	f89d 4004 	ldrb.w	r4, [sp, #4]
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
    3b9e:	9401      	str	r4, [sp, #4]
}
    3ba0:	f85d 4b04 	ldr.w	r4, [sp], #4
void u8g2_draw_l90_r0(u8g2_t *u8g2, u8g2_uint_t x, u8g2_uint_t y, u8g2_uint_t len, uint8_t dir)
{
#ifdef __unix
  assert( dir <= 1 );
#endif
  u8g2_draw_hv_line_2dir(u8g2, x, y, len, dir);
    3ba4:	f7ff bf36 	b.w	3a14 <u8g2_draw_hv_line_2dir>

00003ba8 <u8g2_apply_clip_window>:
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
    3ba8:	b530      	push	{r4, r5, lr}
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
    3baa:	f8b0 506e 	ldrh.w	r5, [r0, #110]	; 0x6e
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
    3bae:	b083      	sub	sp, #12
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
    3bb0:	f8b0 306a 	ldrh.w	r3, [r0, #106]	; 0x6a
/*==========================================================*/
/* apply clip window */

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
    3bb4:	4604      	mov	r4, r0
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
    3bb6:	f8b0 206c 	ldrh.w	r2, [r0, #108]	; 0x6c
    3bba:	f8b0 1068 	ldrh.w	r1, [r0, #104]	; 0x68
    3bbe:	9500      	str	r5, [sp, #0]
    3bc0:	f7ff ff42 	bl	3a48 <u8g2_IsIntersection>
    3bc4:	b320      	cbz	r0, 3c10 <u8g2_apply_clip_window+0x68>
  }
  else
  {
    u8g2->is_page_clip_window_intersection = 1;

    if ( u8g2->user_x0 < u8g2->clip_x0 )
    3bc6:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
  {
    u8g2->is_page_clip_window_intersection = 0;
  }
  else
  {
    u8g2->is_page_clip_window_intersection = 1;
    3bca:	2101      	movs	r1, #1

    if ( u8g2->user_x0 < u8g2->clip_x0 )
    3bcc:	f8b4 2060 	ldrh.w	r2, [r4, #96]	; 0x60
  {
    u8g2->is_page_clip_window_intersection = 0;
  }
  else
  {
    u8g2->is_page_clip_window_intersection = 1;
    3bd0:	f884 10a4 	strb.w	r1, [r4, #164]	; 0xa4

    if ( u8g2->user_x0 < u8g2->clip_x0 )
    3bd4:	429a      	cmp	r2, r3
      u8g2->user_x0 = u8g2->clip_x0;
    if ( u8g2->user_x1 > u8g2->clip_x1 )
    3bd6:	f8b4 2062 	ldrh.w	r2, [r4, #98]	; 0x62
  else
  {
    u8g2->is_page_clip_window_intersection = 1;

    if ( u8g2->user_x0 < u8g2->clip_x0 )
      u8g2->user_x0 = u8g2->clip_x0;
    3bda:	bf38      	it	cc
    3bdc:	f8a4 3060 	strhcc.w	r3, [r4, #96]	; 0x60
    if ( u8g2->user_x1 > u8g2->clip_x1 )
    3be0:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
    3be4:	429a      	cmp	r2, r3
      u8g2->user_x1 = u8g2->clip_x1;
    if ( u8g2->user_y0 < u8g2->clip_y0 )
    3be6:	f8b4 2064 	ldrh.w	r2, [r4, #100]	; 0x64
    u8g2->is_page_clip_window_intersection = 1;

    if ( u8g2->user_x0 < u8g2->clip_x0 )
      u8g2->user_x0 = u8g2->clip_x0;
    if ( u8g2->user_x1 > u8g2->clip_x1 )
      u8g2->user_x1 = u8g2->clip_x1;
    3bea:	bf88      	it	hi
    3bec:	f8a4 3062 	strhhi.w	r3, [r4, #98]	; 0x62
    if ( u8g2->user_y0 < u8g2->clip_y0 )
    3bf0:	f8b4 306c 	ldrh.w	r3, [r4, #108]	; 0x6c
    3bf4:	429a      	cmp	r2, r3
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
    3bf6:	f8b4 2066 	ldrh.w	r2, [r4, #102]	; 0x66
    if ( u8g2->user_x0 < u8g2->clip_x0 )
      u8g2->user_x0 = u8g2->clip_x0;
    if ( u8g2->user_x1 > u8g2->clip_x1 )
      u8g2->user_x1 = u8g2->clip_x1;
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    3bfa:	bf38      	it	cc
    3bfc:	f8a4 3064 	strhcc.w	r3, [r4, #100]	; 0x64
    if ( u8g2->user_y1 > u8g2->clip_y1 )
    3c00:	f8b4 306e 	ldrh.w	r3, [r4, #110]	; 0x6e
    3c04:	429a      	cmp	r2, r3
      u8g2->user_y1 = u8g2->clip_y1;
    3c06:	bf88      	it	hi
    3c08:	f8a4 3066 	strhhi.w	r3, [r4, #102]	; 0x66
  }
}
    3c0c:	b003      	add	sp, #12
    3c0e:	bd30      	pop	{r4, r5, pc}
static void u8g2_apply_clip_window(u8g2_t *u8g2)
{
  /* check aganst the current user_??? window */
  if ( u8g2_IsIntersection(u8g2, u8g2->clip_x0, u8g2->clip_y0, u8g2->clip_x1, u8g2->clip_y1) == 0 ) 
  {
    u8g2->is_page_clip_window_intersection = 0;
    3c10:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
    if ( u8g2->user_y0 < u8g2->clip_y0 )
      u8g2->user_y0 = u8g2->clip_y0;
    if ( u8g2->user_y1 > u8g2->clip_y1 )
      u8g2->user_y1 = u8g2->clip_y1;
  }
}
    3c14:	b003      	add	sp, #12
    3c16:	bd30      	pop	{r4, r5, pc}

00003c18 <u8g2_update_page_win_r0>:
{
  u8g2_update_dimension_common(u8g2);  
}

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
    3c18:	b430      	push	{r4, r5}
  u8g2->user_x0 = 0;
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
  
  u8g2->user_y0 = u8g2->buf_y0;
    3c1a:	f8b0 1058 	ldrh.w	r1, [r0, #88]	; 0x58
  u8g2_update_dimension_common(u8g2);  
}

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
  u8g2->user_x0 = 0;
    3c1e:	2500      	movs	r5, #0
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
    3c20:	f8b0 405c 	ldrh.w	r4, [r0, #92]	; 0x5c
  
  u8g2->user_y0 = u8g2->buf_y0;
  u8g2->user_y1 = u8g2->buf_y1;
    3c24:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
  u8g2_update_dimension_common(u8g2);  
}

void u8g2_update_page_win_r0(u8g2_t *u8g2)
{
  u8g2->user_x0 = 0;
    3c28:	f8a0 5060 	strh.w	r5, [r0, #96]	; 0x60
  u8g2->user_x1 = u8g2->width;			/* pixel_buf_width replaced with width */
    3c2c:	f8a0 4062 	strh.w	r4, [r0, #98]	; 0x62
  
  u8g2->user_y0 = u8g2->buf_y0;
    3c30:	f8a0 1064 	strh.w	r1, [r0, #100]	; 0x64
  u8g2->user_y1 = u8g2->buf_y1;
    3c34:	f8a0 2066 	strh.w	r2, [r0, #102]	; 0x66
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
#endif /* U8G2_WITH_CLIP_WINDOW_SUPPORT */
}
    3c38:	bc30      	pop	{r4, r5}
  
  u8g2->user_y0 = u8g2->buf_y0;
  u8g2->user_y1 = u8g2->buf_y1;
  
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT
  u8g2_apply_clip_window(u8g2);
    3c3a:	f7ff bfb5 	b.w	3ba8 <u8g2_apply_clip_window>
    3c3e:	bf00      	nop

00003c40 <u8g2_update_dimension_r0>:
    3c40:	f7ff bf84 	b.w	3b4c <u8g2_update_dimension_common>

00003c44 <u8g2_SetupBuffer>:
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    3c44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3c46:	9e06      	ldr	r6, [sp, #24]
  u8g2->font = NULL;
    3c48:	2500      	movs	r5, #0
  u8g2->tile_curr_row = 0;
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
  u8g2->bitmap_transparency = 0;
  
  u8g2->draw_color = 1;
    3c4a:	2701      	movs	r7, #1
/*
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
    3c4c:	4604      	mov	r4, r0
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
  
  u8g2->tile_buf_ptr = buf;
  u8g2->tile_buf_height = tile_buf_height;
    3c4e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
  
  u8g2->tile_buf_ptr = buf;
    3c52:	64c1      	str	r1, [r0, #76]	; 0x4c
  u8g2->font = NULL;
  //u8g2->kerning = NULL;
  //u8g2->get_kerning_cb = u8g2_GetNullKerning;
  
  //u8g2->ll_hvline = u8g2_ll_hvline_vertical_top_lsb;
  u8g2->ll_hvline = ll_hvline_cb;
    3c54:	6443      	str	r3, [r0, #68]	; 0x44
  
  u8g2->tile_buf_ptr = buf;
  u8g2->tile_buf_height = tile_buf_height;
  
  u8g2->tile_curr_row = 0;
    3c56:	f880 5051 	strb.w	r5, [r0, #81]	; 0x51
  
  u8g2->font_decode.is_transparent = 0; /* issue 443 */
    3c5a:	f880 5085 	strb.w	r5, [r0, #133]	; 0x85
  u8g2->bitmap_transparency = 0;
    3c5e:	f880 50a9 	strb.w	r5, [r0, #169]	; 0xa9
  
  u8g2->draw_color = 1;
    3c62:	f880 70aa 	strb.w	r7, [r0, #170]	; 0xaa
  u8g2->is_auto_page_clear = 1;
    3c66:	f880 70ab 	strb.w	r7, [r0, #171]	; 0xab
  This procedure is called after setting up the display (u8x8 structure).
  --> This is the central init procedure for u8g2 object
*/
void u8g2_SetupBuffer(u8g2_t *u8g2, uint8_t *buf, uint8_t tile_buf_height, u8g2_draw_ll_hvline_cb ll_hvline_cb, const u8g2_cb_t *u8g2_cb)
{
  u8g2->font = NULL;
    3c6a:	6705      	str	r5, [r0, #112]	; 0x70
  u8g2->bitmap_transparency = 0;
  
  u8g2->draw_color = 1;
  u8g2->is_auto_page_clear = 1;
  
  u8g2->cb = u8g2_cb;
    3c6c:	6486      	str	r6, [r0, #72]	; 0x48
  u8g2->cb->update_dimension(u8g2);
    3c6e:	6833      	ldr	r3, [r6, #0]
    3c70:	4798      	blx	r3

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
  u8g2->clip_x0 = 0;
  u8g2->clip_y0 = 0;
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    3c72:	f64f 73ff 	movw	r3, #65535	; 0xffff
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
  
  u8g2->cb->update_page_win(u8g2);
    3c76:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3c78:	4620      	mov	r0, r4

#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
  u8g2->clip_x0 = 0;
    3c7a:	f8a4 5068 	strh.w	r5, [r4, #104]	; 0x68
  u8g2->clip_y0 = 0;
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
  
  u8g2->cb->update_page_win(u8g2);
    3c7e:	6852      	ldr	r2, [r2, #4]
#ifdef U8G2_WITH_CLIP_WINDOW_SUPPORT

void u8g2_SetMaxClipWindow(u8g2_t *u8g2)
{
  u8g2->clip_x0 = 0;
  u8g2->clip_y0 = 0;
    3c80:	f8a4 506c 	strh.w	r5, [r4, #108]	; 0x6c
  u8g2->clip_x1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    3c84:	f8a4 306a 	strh.w	r3, [r4, #106]	; 0x6a
  u8g2->clip_y1 = (u8g2_uint_t)~(u8g2_uint_t)0;
    3c88:	f8a4 306e 	strh.w	r3, [r4, #110]	; 0x6e
  
  u8g2->cb->update_page_win(u8g2);
    3c8c:	4790      	blx	r2
  u8g2_SetMaxClipWindow(u8g2);		/* assign a clip window and call the update() procedure */
#else
  u8g2->cb->update_page_win(u8g2);
#endif

  u8g2_SetFontPosBaseline(u8g2);  /* issue 195 */
    3c8e:	4620      	mov	r0, r4
    3c90:	f7ff fe3e 	bl	3910 <u8g2_SetFontPosBaseline>
  
#ifdef U8G2_WITH_FONT_ROTATION  
  u8g2->font_decode.dir = 0;
    3c94:	f884 5088 	strb.w	r5, [r4, #136]	; 0x88
    3c98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3c9a:	bf00      	nop

00003c9c <u8x8_ascii_next>:
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
}

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    3c9c:	b109      	cbz	r1, 3ca2 <u8x8_ascii_next+0x6>
    3c9e:	290a      	cmp	r1, #10
    3ca0:	d102      	bne.n	3ca8 <u8x8_ascii_next+0xc>
    return 0x0ffff;	/* end of string detected*/
    3ca2:	f64f 70ff 	movw	r0, #65535	; 0xffff
  return b;
}
    3ca6:	4770      	bx	lr

uint16_t u8x8_ascii_next(U8X8_UNUSED u8x8_t *u8x8, uint8_t b)
{
  if ( b == 0 || b == '\n' ) /* '\n' terminates the string to support the string list procedures */
    return 0x0ffff;	/* end of string detected*/
  return b;
    3ca8:	b288      	uxth	r0, r1
    3caa:	4770      	bx	lr

00003cac <u8x8_utf8_init>:
*/

/* reset the internal state machine */
void u8x8_utf8_init(u8x8_t *u8x8)
{
  u8x8->utf8_state = 0;	/* also reset during u8x8_SetupDefaults() */
    3cac:	2300      	movs	r3, #0
    3cae:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
    3cb2:	4770      	bx	lr

00003cb4 <u8x8_byte_SendBytes>:
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    3cb4:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    3cb6:	6904      	ldr	r4, [r0, #16]
    3cb8:	4613      	mov	r3, r2
    3cba:	460a      	mov	r2, r1
    3cbc:	2117      	movs	r1, #23
    3cbe:	46a4      	mov	ip, r4
}
    3cc0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SET_DC, dc, NULL);
}

uint8_t u8x8_byte_SendBytes(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_SEND, cnt, (void *)data);
    3cc4:	4760      	bx	ip
    3cc6:	bf00      	nop

00003cc8 <u8x8_byte_SendByte>:
}

uint8_t u8x8_byte_SendByte(u8x8_t *u8x8, uint8_t byte)
{
    3cc8:	b500      	push	{lr}
    3cca:	b083      	sub	sp, #12
    3ccc:	aa02      	add	r2, sp, #8
    3cce:	f802 1d01 	strb.w	r1, [r2, #-1]!
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
    3cd2:	2101      	movs	r1, #1
    3cd4:	f7ff ffee 	bl	3cb4 <u8x8_byte_SendBytes>
}
    3cd8:	b003      	add	sp, #12
    3cda:	f85d fb04 	ldr.w	pc, [sp], #4
    3cde:	bf00      	nop

00003ce0 <u8x8_byte_StartTransfer>:

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
    3ce0:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    3ce2:	2300      	movs	r3, #0
    3ce4:	6904      	ldr	r4, [r0, #16]
    3ce6:	2118      	movs	r1, #24
    3ce8:	46a4      	mov	ip, r4
    3cea:	461a      	mov	r2, r3
}
    3cec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8_byte_SendBytes(u8x8, 1, &byte);
}

uint8_t u8x8_byte_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
    3cf0:	4760      	bx	ip
    3cf2:	bf00      	nop

00003cf4 <u8x8_byte_EndTransfer>:
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
    3cf4:	b410      	push	{r4}
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    3cf6:	2300      	movs	r3, #0
    3cf8:	6904      	ldr	r4, [r0, #16]
    3cfa:	2119      	movs	r1, #25
    3cfc:	46a4      	mov	ip, r4
    3cfe:	461a      	mov	r2, r3
}
    3d00:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_START_TRANSFER, 0, NULL);
}

uint8_t u8x8_byte_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->byte_cb(u8x8, U8X8_MSG_BYTE_END_TRANSFER, 0, NULL);
    3d04:	4760      	bx	ip
    3d06:	bf00      	nop

00003d08 <u8x8_i2c_data_transfer>:
/* U8X8_MSG_BYTE_START_TRANSFER starts i2c transfer, U8X8_MSG_BYTE_END_TRANSFER stops transfer */
/* After transfer start, a full byte indicates command or data mode */

static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr) U8X8_NOINLINE;
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
    3d08:	b570      	push	{r4, r5, r6, lr}
    3d0a:	4604      	mov	r4, r0
    3d0c:	4616      	mov	r6, r2
    3d0e:	460d      	mov	r5, r1
    u8x8_byte_StartTransfer(u8x8);    
    3d10:	f7ff ffe6 	bl	3ce0 <u8x8_byte_StartTransfer>
    u8x8_byte_SendByte(u8x8, 0x040);
    3d14:	4620      	mov	r0, r4
    3d16:	2140      	movs	r1, #64	; 0x40
    3d18:	f7ff ffd6 	bl	3cc8 <u8x8_byte_SendByte>
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    3d1c:	4633      	mov	r3, r6
    3d1e:	462a      	mov	r2, r5
    3d20:	4620      	mov	r0, r4
    3d22:	6925      	ldr	r5, [r4, #16]
    3d24:	2117      	movs	r1, #23
    3d26:	47a8      	blx	r5
    u8x8_byte_EndTransfer(u8x8);
    3d28:	4620      	mov	r0, r4
}
    3d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
static void u8x8_i2c_data_transfer(u8x8_t *u8x8, uint8_t arg_int, void *arg_ptr)
{
    u8x8_byte_StartTransfer(u8x8);    
    u8x8_byte_SendByte(u8x8, 0x040);
    u8x8->byte_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, arg_int, arg_ptr);
    u8x8_byte_EndTransfer(u8x8);
    3d2e:	f7ff bfe1 	b.w	3cf4 <u8x8_byte_EndTransfer>
    3d32:	bf00      	nop

00003d34 <u8x8_cad_SendCmd>:
*/

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
    3d34:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
    3d36:	68c4      	ldr	r4, [r0, #12]
    3d38:	460a      	mov	r2, r1
    3d3a:	2300      	movs	r3, #0
    3d3c:	2115      	movs	r1, #21
    3d3e:	46a4      	mov	ip, r4
}
    3d40:	f85d 4b04 	ldr.w	r4, [sp], #4

#include "u8x8.h"

uint8_t u8x8_cad_SendCmd(u8x8_t *u8x8, uint8_t cmd)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
    3d44:	4760      	bx	ip
    3d46:	bf00      	nop

00003d48 <u8x8_cad_SendArg>:
}

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
    3d48:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
    3d4a:	68c4      	ldr	r4, [r0, #12]
    3d4c:	460a      	mov	r2, r1
    3d4e:	2300      	movs	r3, #0
    3d50:	2116      	movs	r1, #22
    3d52:	46a4      	mov	ip, r4
}
    3d54:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_CMD, cmd, NULL);
}

uint8_t u8x8_cad_SendArg(u8x8_t *u8x8, uint8_t arg)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_ARG, arg, NULL);
    3d58:	4760      	bx	ip
    3d5a:	bf00      	nop

00003d5c <u8x8_cad_SendData>:
  }
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
    3d5c:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
    3d5e:	68c4      	ldr	r4, [r0, #12]
    3d60:	4613      	mov	r3, r2
    3d62:	460a      	mov	r2, r1
    3d64:	2117      	movs	r1, #23
    3d66:	46a4      	mov	ip, r4
}
    3d68:	f85d 4b04 	ldr.w	r4, [sp], #4
  return 1;
}

uint8_t u8x8_cad_SendData(u8x8_t *u8x8, uint8_t cnt, uint8_t *data)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
    3d6c:	4760      	bx	ip
    3d6e:	bf00      	nop

00003d70 <u8x8_cad_StartTransfer>:
}

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
    3d70:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
    3d72:	2300      	movs	r3, #0
    3d74:	68c4      	ldr	r4, [r0, #12]
    3d76:	2118      	movs	r1, #24
    3d78:	46a4      	mov	ip, r4
    3d7a:	461a      	mov	r2, r3
}
    3d7c:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_SEND_DATA, cnt, data);
}

uint8_t u8x8_cad_StartTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
    3d80:	4760      	bx	ip
    3d82:	bf00      	nop

00003d84 <u8x8_cad_EndTransfer>:
}

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
    3d84:	b410      	push	{r4}
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    3d86:	2300      	movs	r3, #0
    3d88:	68c4      	ldr	r4, [r0, #12]
    3d8a:	2119      	movs	r1, #25
    3d8c:	46a4      	mov	ip, r4
    3d8e:	461a      	mov	r2, r3
}
    3d90:	f85d 4b04 	ldr.w	r4, [sp], #4
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_START_TRANSFER, 0, NULL);
}

uint8_t u8x8_cad_EndTransfer(u8x8_t *u8x8)
{
  return u8x8->cad_cb(u8x8, U8X8_MSG_CAD_END_TRANSFER, 0, NULL);
    3d94:	4760      	bx	ip
    3d96:	bf00      	nop

00003d98 <u8x8_cad_SendSequence>:
  254 milli	delay by milliseconds
  255		end of sequence
*/

void u8x8_cad_SendSequence(u8x8_t *u8x8, uint8_t const *data)
{
    3d98:	b570      	push	{r4, r5, r6, lr}
    3d9a:	4606      	mov	r6, r0
    3d9c:	b082      	sub	sp, #8
    3d9e:	460d      	mov	r5, r1
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    3da0:	782c      	ldrb	r4, [r5, #0]
    data++;
    switch( cmd )
    3da2:	2c17      	cmp	r4, #23
    3da4:	d014      	beq.n	3dd0 <u8x8_cad_SendSequence+0x38>
    3da6:	d91e      	bls.n	3de6 <u8x8_cad_SendSequence+0x4e>
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    3da8:	2300      	movs	r3, #0

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
    3daa:	2c19      	cmp	r4, #25
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    3dac:	4621      	mov	r1, r4
    3dae:	4630      	mov	r0, r6
    3db0:	461a      	mov	r2, r3

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
    3db2:	d927      	bls.n	3e04 <u8x8_cad_SendSequence+0x6c>
    3db4:	2cfe      	cmp	r4, #254	; 0xfe
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
    3db6:	f04f 0129 	mov.w	r1, #41	; 0x29

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
    3dba:	d121      	bne.n	3e00 <u8x8_cad_SendSequence+0x68>
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
    3dbc:	786b      	ldrb	r3, [r5, #1]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
	  data++;
    3dbe:	3502      	adds	r5, #2
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
    3dc0:	461a      	mov	r2, r3
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
	  break;
      case 0x0fe:
	  v = *data;
    3dc2:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, v);	    
    3dc6:	f000 f98d 	bl	40e4 <u8x8_gpio_call>
  uint8_t cmd;
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    3dca:	782c      	ldrb	r4, [r5, #0]
    data++;
    switch( cmd )
    3dcc:	2c17      	cmp	r4, #23
    3dce:	d1ea      	bne.n	3da6 <u8x8_cad_SendSequence+0xe>
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
    3dd0:	786b      	ldrb	r3, [r5, #1]
	  u8x8_cad_SendData(u8x8, 1, &v);
    3dd2:	f10d 0207 	add.w	r2, sp, #7
    3dd6:	2101      	movs	r1, #1
    3dd8:	4630      	mov	r0, r6
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
    3dda:	f88d 3007 	strb.w	r3, [sp, #7]
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
    3dde:	3502      	adds	r5, #2
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
	  break;
      case U8X8_MSG_CAD_SEND_DATA:
	  v = *data;
	  u8x8_cad_SendData(u8x8, 1, &v);
    3de0:	f7ff ffbc 	bl	3d5c <u8x8_cad_SendData>
	  data++;
	  break;
    3de4:	e7dc      	b.n	3da0 <u8x8_cad_SendSequence+0x8>

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
    3de6:	2c15      	cmp	r4, #21
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
    3de8:	f04f 0300 	mov.w	r3, #0
    3dec:	4621      	mov	r1, r4
    3dee:	4630      	mov	r0, r6

  for(;;)
  {
    cmd = *data;
    data++;
    switch( cmd )
    3df0:	d306      	bcc.n	3e00 <u8x8_cad_SendSequence+0x68>
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
    3df2:	786a      	ldrb	r2, [r5, #1]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
	  data++;
    3df4:	3502      	adds	r5, #2
    switch( cmd )
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
    3df6:	68f4      	ldr	r4, [r6, #12]
    data++;
    switch( cmd )
    {
      case U8X8_MSG_CAD_SEND_CMD:
      case U8X8_MSG_CAD_SEND_ARG:
	  v = *data;
    3df8:	f88d 2007 	strb.w	r2, [sp, #7]
	  u8x8->cad_cb(u8x8, cmd, v, NULL);
    3dfc:	47a0      	blx	r4
	  data++;
	  break;
    3dfe:	e7cf      	b.n	3da0 <u8x8_cad_SendSequence+0x8>
	  break;
      default:
	return;
    }
  }
}
    3e00:	b002      	add	sp, #8
    3e02:	bd70      	pop	{r4, r5, r6, pc}
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    3e04:	68f4      	ldr	r4, [r6, #12]
  uint8_t v;

  for(;;)
  {
    cmd = *data;
    data++;
    3e06:	3501      	adds	r5, #1
	  u8x8_cad_SendData(u8x8, 1, &v);
	  data++;
	  break;
      case U8X8_MSG_CAD_START_TRANSFER:
      case U8X8_MSG_CAD_END_TRANSFER:
	  u8x8->cad_cb(u8x8, cmd, 0, NULL);
    3e08:	47a0      	blx	r4
	  break;
    3e0a:	e7c9      	b.n	3da0 <u8x8_cad_SendSequence+0x8>

00003e0c <u8x8_cad_ssd13xx_fast_i2c>:
/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    3e0c:	3914      	subs	r1, #20
}


/* fast version with reduced data start/stops, issue 735 */
uint8_t u8x8_cad_ssd13xx_fast_i2c(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3e0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    3e12:	4606      	mov	r6, r0
    3e14:	4614      	mov	r4, r2
    3e16:	461d      	mov	r5, r3
  static uint8_t in_transfer = 0;
  uint8_t *p;
  switch(msg)
    3e18:	2905      	cmp	r1, #5
    3e1a:	d85a      	bhi.n	3ed2 <u8x8_cad_ssd13xx_fast_i2c+0xc6>
    3e1c:	e8df f001 	tbb	[pc, r1]
    3e20:	36301c0c 	.word	0x36301c0c
    3e24:	034d      	.short	0x034d
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
    3e26:	4f2c      	ldr	r7, [pc, #176]	; (3ed8 <u8x8_cad_ssd13xx_fast_i2c+0xcc>)
    3e28:	783b      	ldrb	r3, [r7, #0]
    3e2a:	2b00      	cmp	r3, #0
    3e2c:	d14b      	bne.n	3ec6 <u8x8_cad_ssd13xx_fast_i2c+0xba>
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
    3e2e:	2300      	movs	r3, #0
      break;
    default:
      return 0;
  }
  return 1;
    3e30:	2001      	movs	r0, #1
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
    3e32:	703b      	strb	r3, [r7, #0]
      break;
    3e34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
    3e38:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
    3e3c:	2bff      	cmp	r3, #255	; 0xff
    3e3e:	d102      	bne.n	3e46 <u8x8_cad_ssd13xx_fast_i2c+0x3a>
	u8x8->i2c_address = 0x078;
    3e40:	2378      	movs	r3, #120	; 0x78
    3e42:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    3e46:	4622      	mov	r2, r4
    3e48:	6934      	ldr	r4, [r6, #16]
    3e4a:	462b      	mov	r3, r5
    3e4c:	4630      	mov	r0, r6
    3e4e:	46a4      	mov	ip, r4
    3e50:	2114      	movs	r1, #20
      break;
    default:
      return 0;
  }
  return 1;
}
    3e52:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
      break;
    case U8X8_MSG_CAD_INIT:
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    3e56:	4760      	bx	ip
  {
    case U8X8_MSG_CAD_SEND_CMD:
      /* improved version, takeover from ld7032 */
      /* assumes, that the args of a command is not longer than 31 bytes */
      /* speed improvement is about 4% compared to the classic version */
      if ( in_transfer != 0 )
    3e58:	4f1f      	ldr	r7, [pc, #124]	; (3ed8 <u8x8_cad_ssd13xx_fast_i2c+0xcc>)
    3e5a:	783b      	ldrb	r3, [r7, #0]
    3e5c:	b10b      	cbz	r3, 3e62 <u8x8_cad_ssd13xx_fast_i2c+0x56>
	 u8x8_byte_EndTransfer(u8x8); 
    3e5e:	f7ff ff49 	bl	3cf4 <u8x8_byte_EndTransfer>
      
      u8x8_byte_StartTransfer(u8x8);
    3e62:	4630      	mov	r0, r6
    3e64:	f7ff ff3c 	bl	3ce0 <u8x8_byte_StartTransfer>
      u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
    3e68:	2100      	movs	r1, #0
    3e6a:	4630      	mov	r0, r6
    3e6c:	f7ff ff2c 	bl	3cc8 <u8x8_byte_SendByte>
      u8x8_byte_SendByte(u8x8, arg_int);
    3e70:	4621      	mov	r1, r4
    3e72:	4630      	mov	r0, r6
    3e74:	f7ff ff28 	bl	3cc8 <u8x8_byte_SendByte>
      in_transfer = 1;
    3e78:	2001      	movs	r0, #1
    3e7a:	7038      	strb	r0, [r7, #0]
	//   u8x8_byte_StartTransfer(u8x8);
	//   u8x8_byte_SendByte(u8x8, 0x000);	/* cmd byte for ssd13xx controller */
	//   in_transfer = 1;
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    3e7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
    3e80:	4611      	mov	r1, r2
    3e82:	f7ff ff21 	bl	3cc8 <u8x8_byte_SendByte>
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3e86:	2001      	movs	r0, #1
	// }
	//u8x8_byte_SendByte(u8x8, arg_int);
      break;
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    3e88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
    3e8c:	4f12      	ldr	r7, [pc, #72]	; (3ed8 <u8x8_cad_ssd13xx_fast_i2c+0xcc>)
    3e8e:	783b      	ldrb	r3, [r7, #0]
    3e90:	b13b      	cbz	r3, 3ea2 <u8x8_cad_ssd13xx_fast_i2c+0x96>
    3e92:	e01b      	b.n	3ecc <u8x8_cad_ssd13xx_fast_i2c+0xc0>
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
    3e94:	3c18      	subs	r4, #24
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    3e96:	2118      	movs	r1, #24
    3e98:	4630      	mov	r0, r6
	arg_int-=24;
    3e9a:	b2e4      	uxtb	r4, r4
	p+=24;
    3e9c:	440d      	add	r5, r1
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    3e9e:	f7ff ff33 	bl	3d08 <u8x8_i2c_data_transfer>
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    3ea2:	2c18      	cmp	r4, #24
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
    3ea4:	462a      	mov	r2, r5
      /* I guess this is related to the size of the Wire buffers in Arduino */
      /* Unfortunately, this can not be handled in the byte level drivers, */
      /* so this is done here. Even further, only 24 bytes will be sent, */
      /* because there will be another byte (DC) required during the transfer */
      p = arg_ptr;
       while( arg_int > 24 )
    3ea6:	d8f5      	bhi.n	3e94 <u8x8_cad_ssd13xx_fast_i2c+0x88>
      {
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
    3ea8:	4630      	mov	r0, r6
    3eaa:	4621      	mov	r1, r4
    3eac:	f7ff ff2c 	bl	3d08 <u8x8_i2c_data_transfer>
      in_transfer = 0;
    3eb0:	2300      	movs	r3, #0
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3eb2:	2001      	movs	r0, #1
	u8x8_i2c_data_transfer(u8x8, 24, p);
	arg_int-=24;
	p+=24;
      }
      u8x8_i2c_data_transfer(u8x8, arg_int, p);
      in_transfer = 0;
    3eb4:	703b      	strb	r3, [r7, #0]
      break;
    3eb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    3eba:	4b07      	ldr	r3, [pc, #28]	; (3ed8 <u8x8_cad_ssd13xx_fast_i2c+0xcc>)
    3ebc:	2200      	movs	r2, #0
      in_transfer = 0;
      break;
    default:
      return 0;
  }
  return 1;
    3ebe:	2001      	movs	r0, #1
      /* apply default i2c adr if required so that the start transfer msg can use this */
      if ( u8x8->i2c_address == 255 )
	u8x8->i2c_address = 0x078;
      return u8x8->byte_cb(u8x8, msg, arg_int, arg_ptr);
    case U8X8_MSG_CAD_START_TRANSFER:
      in_transfer = 0;
    3ec0:	701a      	strb	r2, [r3, #0]
      break;
    3ec2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case U8X8_MSG_CAD_END_TRANSFER:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
    3ec6:	f7ff ff15 	bl	3cf4 <u8x8_byte_EndTransfer>
    3eca:	e7b0      	b.n	3e2e <u8x8_cad_ssd13xx_fast_i2c+0x22>
    case U8X8_MSG_CAD_SEND_ARG:
      u8x8_byte_SendByte(u8x8, arg_int);
      break;      
    case U8X8_MSG_CAD_SEND_DATA:
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
    3ecc:	f7ff ff12 	bl	3cf4 <u8x8_byte_EndTransfer>
    3ed0:	e7e7      	b.n	3ea2 <u8x8_cad_ssd13xx_fast_i2c+0x96>
      if ( in_transfer != 0 )
	u8x8_byte_EndTransfer(u8x8); 
      in_transfer = 0;
      break;
    default:
      return 0;
    3ed2:	2000      	movs	r0, #0
  }
  return 1;
}
    3ed4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    3ed8:	20036c38 	.word	0x20036c38

00003edc <u8x8_d_helper_display_setup_memory>:
  
*/
void u8x8_d_helper_display_setup_memory(u8x8_t *u8x8, const u8x8_display_info_t *display_info)
{
      /* 1) set display info struct */
      u8x8->display_info = display_info;
    3edc:	6001      	str	r1, [r0, #0]
      u8x8->x_offset = u8x8->display_info->default_x_offset;
    3ede:	7c8b      	ldrb	r3, [r1, #18]
    3ee0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
    3ee4:	4770      	bx	lr
    3ee6:	bf00      	nop

00003ee8 <u8x8_d_helper_display_init>:
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
    3ee8:	b538      	push	{r3, r4, r5, lr}
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
    3eea:	2300      	movs	r3, #0
    3eec:	2128      	movs	r1, #40	; 0x28
    3eee:	6945      	ldr	r5, [r0, #20]
  this is a helper function for the U8X8_MSG_DISPLAY_INIT function.
  It can be called within the display callback function to carry out the usual standard tasks.
  
*/
void u8x8_d_helper_display_init(u8x8_t *u8x8)
{
    3ef0:	4604      	mov	r4, r0
      /* 2) apply port directions to the GPIO lines and apply default values for the IO lines*/
      u8x8_gpio_Init(u8x8);
    3ef2:	461a      	mov	r2, r3
    3ef4:	47a8      	blx	r5
      u8x8_cad_Init(u8x8);
    3ef6:	2300      	movs	r3, #0
    3ef8:	68e5      	ldr	r5, [r4, #12]
    3efa:	4620      	mov	r0, r4
    3efc:	461a      	mov	r2, r3
    3efe:	2114      	movs	r1, #20
    3f00:	47a8      	blx	r5

      /* 3) do reset */
      u8x8_gpio_SetReset(u8x8, 1);
    3f02:	4620      	mov	r0, r4
    3f04:	2201      	movs	r2, #1
    3f06:	214b      	movs	r1, #75	; 0x4b
    3f08:	f000 f8ec 	bl	40e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    3f0c:	6823      	ldr	r3, [r4, #0]
    3f0e:	4620      	mov	r0, r4
    3f10:	2129      	movs	r1, #41	; 0x29
    3f12:	791a      	ldrb	r2, [r3, #4]
    3f14:	f000 f8e6 	bl	40e4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 0);
    3f18:	4620      	mov	r0, r4
    3f1a:	2200      	movs	r2, #0
    3f1c:	214b      	movs	r1, #75	; 0x4b
    3f1e:	f000 f8e1 	bl	40e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
    3f22:	6823      	ldr	r3, [r4, #0]
    3f24:	4620      	mov	r0, r4
    3f26:	2129      	movs	r1, #41	; 0x29
    3f28:	791a      	ldrb	r2, [r3, #4]
    3f2a:	f000 f8db 	bl	40e4 <u8x8_gpio_call>
      u8x8_gpio_SetReset(u8x8, 1);
    3f2e:	4620      	mov	r0, r4
    3f30:	2201      	movs	r2, #1
    3f32:	214b      	movs	r1, #75	; 0x4b
    3f34:	f000 f8d6 	bl	40e4 <u8x8_gpio_call>
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
    3f38:	6823      	ldr	r3, [r4, #0]
    3f3a:	4620      	mov	r0, r4
    3f3c:	2129      	movs	r1, #41	; 0x29
    3f3e:	795a      	ldrb	r2, [r3, #5]
}    
    3f40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      u8x8_gpio_SetReset(u8x8, 1);
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
      u8x8_gpio_SetReset(u8x8, 0);
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->reset_pulse_width_ms);
      u8x8_gpio_SetReset(u8x8, 1);
      u8x8_gpio_Delay(u8x8, U8X8_MSG_DELAY_MILLI, u8x8->display_info->post_reset_wait_ms);
    3f44:	f000 b8ce 	b.w	40e4 <u8x8_gpio_call>

00003f48 <u8x8_DrawTile>:

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
    3f48:	b530      	push	{r4, r5, lr}
    3f4a:	b083      	sub	sp, #12
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
    3f4c:	ac02      	add	r4, sp, #8

/*==========================================*/
/* official functions */

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
    3f4e:	9d06      	ldr	r5, [sp, #24]
  u8x8_tile_t tile;
  tile.x_pos = x;
    3f50:	f88d 1005 	strb.w	r1, [sp, #5]
  tile.y_pos = y;
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
    3f54:	210f      	movs	r1, #15
{
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
    3f56:	f844 5d08 	str.w	r5, [r4, #-8]!

uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
    3f5a:	f88d 2006 	strb.w	r2, [sp, #6]
  tile.cnt = cnt;
  tile.tile_ptr = tile_ptr;
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
    3f5e:	2201      	movs	r2, #1
uint8_t u8x8_DrawTile(u8x8_t *u8x8, uint8_t x, uint8_t y, uint8_t cnt, uint8_t *tile_ptr)
{
  u8x8_tile_t tile;
  tile.x_pos = x;
  tile.y_pos = y;
  tile.cnt = cnt;
    3f60:	f88d 3004 	strb.w	r3, [sp, #4]
  tile.tile_ptr = tile_ptr;
  return u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_DRAW_TILE, 1, (void *)&tile);
    3f64:	4623      	mov	r3, r4
    3f66:	6884      	ldr	r4, [r0, #8]
    3f68:	47a0      	blx	r4
}
    3f6a:	b003      	add	sp, #12
    3f6c:	bd30      	pop	{r4, r5, pc}
    3f6e:	bf00      	nop

00003f70 <u8x8_SetupMemory>:

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
    3f70:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
    3f72:	2300      	movs	r3, #0
    3f74:	6884      	ldr	r4, [r0, #8]
    3f76:	2109      	movs	r1, #9
    3f78:	46a4      	mov	ip, r4
    3f7a:	461a      	mov	r2, r3
}
    3f7c:	f85d 4b04 	ldr.w	r4, [sp], #4
}

/* should be implemented as macro */
void u8x8_SetupMemory(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
    3f80:	4760      	bx	ip
    3f82:	bf00      	nop

00003f84 <u8x8_InitDisplay>:
}

void u8x8_InitDisplay(u8x8_t *u8x8)
{
    3f84:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
    3f86:	2300      	movs	r3, #0
    3f88:	6884      	ldr	r4, [r0, #8]
    3f8a:	210a      	movs	r1, #10
    3f8c:	46a4      	mov	ip, r4
    3f8e:	461a      	mov	r2, r3
}
    3f90:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SETUP_MEMORY, 0, NULL);  
}

void u8x8_InitDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
    3f94:	4760      	bx	ip
    3f96:	bf00      	nop

00003f98 <u8x8_SetPowerSave>:
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
    3f98:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    3f9a:	6884      	ldr	r4, [r0, #8]
    3f9c:	460a      	mov	r2, r1
    3f9e:	2300      	movs	r3, #0
    3fa0:	210b      	movs	r1, #11
    3fa2:	46a4      	mov	ip, r4
}
    3fa4:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_INIT, 0, NULL);  
}

void u8x8_SetPowerSave(u8x8_t *u8x8, uint8_t is_enable)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_POWER_SAVE, is_enable, NULL);  
    3fa8:	4760      	bx	ip
    3faa:	bf00      	nop

00003fac <u8x8_RefreshDisplay>:
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
    3fac:	b410      	push	{r4}
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    3fae:	2300      	movs	r3, #0
    3fb0:	6884      	ldr	r4, [r0, #8]
    3fb2:	2110      	movs	r1, #16
    3fb4:	46a4      	mov	ip, r4
    3fb6:	461a      	mov	r2, r3
}
    3fb8:	f85d 4b04 	ldr.w	r4, [sp], #4
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_SET_CONTRAST, value, NULL);  
}

void u8x8_RefreshDisplay(u8x8_t *u8x8)
{
  u8x8->display_cb(u8x8, U8X8_MSG_DISPLAY_REFRESH, 0, NULL);  
    3fbc:	4760      	bx	ip
    3fbe:	bf00      	nop

00003fc0 <u8x8_d_ssd1306_sh1106_generic>:

static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    3fc0:	390b      	subs	r1, #11
  U8X8_END()             			/* end of sequence */
};


static uint8_t u8x8_d_ssd1306_sh1106_generic(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    3fc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3fc4:	4605      	mov	r5, r0
    3fc6:	4614      	mov	r4, r2
    3fc8:	461e      	mov	r6, r3
  uint8_t x, c;
  uint8_t *ptr;
  switch(msg)
    3fca:	2904      	cmp	r1, #4
    3fcc:	d852      	bhi.n	4074 <u8x8_d_ssd1306_sh1106_generic+0xb4>
    3fce:	e8df f001 	tbb	[pc, r1]
    3fd2:	5141      	.short	0x5141
    3fd4:	3247      	.short	0x3247
    3fd6:	03          	.byte	0x03
    3fd7:	00          	.byte	0x00
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
    3fd8:	f7ff feca 	bl	3d70 <u8x8_cad_StartTransfer>
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
      x *= 8;
      x += u8x8->x_offset;
    3fdc:	f895 3022 	ldrb.w	r3, [r5, #34]	; 0x22
      u8x8_cad_EndTransfer(u8x8);
      break;
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
    3fe0:	7977      	ldrb	r7, [r6, #5]
      x *= 8;
      x += u8x8->x_offset;
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    3fe2:	2140      	movs	r1, #64	; 0x40
    3fe4:	4628      	mov	r0, r5
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
      x *= 8;
      x += u8x8->x_offset;
    3fe6:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    3fea:	f7ff fea3 	bl	3d34 <u8x8_cad_SendCmd>
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    3fee:	4628      	mov	r0, r5
#endif
    case U8X8_MSG_DISPLAY_DRAW_TILE:
      u8x8_cad_StartTransfer(u8x8);
      x = ((u8x8_tile_t *)arg_ptr)->x_pos;    
      x *= 8;
      x += u8x8->x_offset;
    3ff0:	f007 07ff 	and.w	r7, r7, #255	; 0xff
    
      u8x8_cad_SendCmd(u8x8, 0x040 );	/* set line offset to 0 */
    
      u8x8_cad_SendCmd(u8x8, 0x010 | (x>>4) );
    3ff4:	0939      	lsrs	r1, r7, #4
    3ff6:	f041 0110 	orr.w	r1, r1, #16
    3ffa:	f7ff fe9b 	bl	3d34 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, 0x000 | ((x&15)));					/* probably wrong, should be SendCmd */
    3ffe:	f007 010f 	and.w	r1, r7, #15
    4002:	4628      	mov	r0, r5
    4004:	f7ff fea0 	bl	3d48 <u8x8_cad_SendArg>
      u8x8_cad_SendArg(u8x8, 0x0b0 | (((u8x8_tile_t *)arg_ptr)->y_pos));	/* probably wrong, should be SendCmd */
    4008:	79b1      	ldrb	r1, [r6, #6]
    400a:	4628      	mov	r0, r5
    400c:	f041 01b0 	orr.w	r1, r1, #176	; 0xb0
    4010:	f7ff fe9a 	bl	3d48 <u8x8_cad_SendArg>
    
      do
      {
	c = ((u8x8_tile_t *)arg_ptr)->cnt;
	ptr = ((u8x8_tile_t *)arg_ptr)->tile_ptr;
	u8x8_cad_SendData(u8x8, c*8, ptr); 	/* note: SendData can not handle more than 255 bytes */
    4014:	7931      	ldrb	r1, [r6, #4]
    4016:	4628      	mov	r0, r5
    4018:	6832      	ldr	r2, [r6, #0]
    401a:	00c9      	lsls	r1, r1, #3
    401c:	f001 01f8 	and.w	r1, r1, #248	; 0xf8
    4020:	f7ff fe9c 	bl	3d5c <u8x8_cad_SendData>
	  u8x8_cad_SendData(u8x8, 8, ptr);
	  ptr += 8;
	  c--;
	} while( c > 0 );
	*/
	arg_int--;
    4024:	1e62      	subs	r2, r4, #1
      } while( arg_int > 0 );
    4026:	f012 04ff 	ands.w	r4, r2, #255	; 0xff
    402a:	d1f3      	bne.n	4014 <u8x8_d_ssd1306_sh1106_generic+0x54>
      
      u8x8_cad_EndTransfer(u8x8);
    402c:	4628      	mov	r0, r5
    402e:	f7ff fea9 	bl	3d84 <u8x8_cad_EndTransfer>
      break;
    default:
      return 0;
  }
  return 1;
    4032:	2001      	movs	r0, #1
	*/
	arg_int--;
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    4034:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
      }
      break;
#ifdef U8X8_WITH_SET_CONTRAST
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
    4036:	f7ff fe9b 	bl	3d70 <u8x8_cad_StartTransfer>
      u8x8_cad_SendCmd(u8x8, 0x081 );
    403a:	2181      	movs	r1, #129	; 0x81
    403c:	4628      	mov	r0, r5
    403e:	f7ff fe79 	bl	3d34 <u8x8_cad_SendCmd>
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
    4042:	4621      	mov	r1, r4
    4044:	4628      	mov	r0, r5
    4046:	f7ff fe7f 	bl	3d48 <u8x8_cad_SendArg>
      u8x8_cad_EndTransfer(u8x8);
    404a:	4628      	mov	r0, r5
    404c:	f7ff fe9a 	bl	3d84 <u8x8_cad_EndTransfer>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4050:	2001      	movs	r0, #1
    case U8X8_MSG_DISPLAY_SET_CONTRAST:
      u8x8_cad_StartTransfer(u8x8);
      u8x8_cad_SendCmd(u8x8, 0x081 );
      u8x8_cad_SendArg(u8x8, arg_int );	/* ssd1306 has range from 0 to 255 */
      u8x8_cad_EndTransfer(u8x8);
      break;
    4052:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
    4054:	b9ca      	cbnz	r2, 408a <u8x8_d_ssd1306_sh1106_generic+0xca>
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
    4056:	490f      	ldr	r1, [pc, #60]	; (4094 <u8x8_d_ssd1306_sh1106_generic+0xd4>)
    4058:	f7ff fe9e 	bl	3d98 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    405c:	2001      	movs	r0, #1
    405e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
    4060:	b952      	cbnz	r2, 4078 <u8x8_d_ssd1306_sh1106_generic+0xb8>
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
    4062:	490d      	ldr	r1, [pc, #52]	; (4098 <u8x8_d_ssd1306_sh1106_generic+0xd8>)
    4064:	f7ff fe98 	bl	3d98 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    4068:	682b      	ldr	r3, [r5, #0]
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    406a:	2001      	movs	r0, #1
      break;
    case U8X8_MSG_DISPLAY_SET_FLIP_MODE:
      if ( arg_int == 0 )
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
    406c:	7c9b      	ldrb	r3, [r3, #18]
    406e:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4072:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      } while( arg_int > 0 );
      
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
    4074:	2000      	movs	r0, #0
  }
  return 1;
}
    4076:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip0_seq);
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
    4078:	4908      	ldr	r1, [pc, #32]	; (409c <u8x8_d_ssd1306_sh1106_generic+0xdc>)
    407a:	f7ff fe8d 	bl	3d98 <u8x8_cad_SendSequence>
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    407e:	682b      	ldr	r3, [r5, #0]
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4080:	2001      	movs	r0, #1
	u8x8->x_offset = u8x8->display_info->default_x_offset;
      }
      else
      {
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_flip1_seq);
	u8x8->x_offset = u8x8->display_info->flipmode_x_offset;
    4082:	7cdb      	ldrb	r3, [r3, #19]
    4084:	f885 3022 	strb.w	r3, [r5, #34]	; 0x22
    4088:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    */
    case U8X8_MSG_DISPLAY_SET_POWER_SAVE:
      if ( arg_int == 0 )
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave0_seq);
      else
	u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_powersave1_seq);
    408a:	4905      	ldr	r1, [pc, #20]	; (40a0 <u8x8_d_ssd1306_sh1106_generic+0xe0>)
    408c:	f7ff fe84 	bl	3d98 <u8x8_cad_SendSequence>
      u8x8_cad_EndTransfer(u8x8);
      break;
    default:
      return 0;
  }
  return 1;
    4090:	2001      	movs	r0, #1
    4092:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4094:	20000954 	.word	0x20000954
    4098:	2000097c 	.word	0x2000097c
    409c:	200009bc 	.word	0x200009bc
    40a0:	2000095c 	.word	0x2000095c

000040a4 <u8x8_d_ssd1306_128x64_noname>:
  /* pixel_width = */ 128,
  /* pixel_height = */ 64
};

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    40a4:	b538      	push	{r3, r4, r5, lr}
    40a6:	4605      	mov	r5, r0
    40a8:	460c      	mov	r4, r1
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    40aa:	f7ff ff89 	bl	3fc0 <u8x8_d_ssd1306_sh1106_generic>
    40ae:	b990      	cbnz	r0, 40d6 <u8x8_d_ssd1306_128x64_noname+0x32>
    return 1;
  
  switch(msg)
    40b0:	2c09      	cmp	r4, #9
    40b2:	d00a      	beq.n	40ca <u8x8_d_ssd1306_128x64_noname+0x26>
    40b4:	2c0a      	cmp	r4, #10
    40b6:	d10f      	bne.n	40d8 <u8x8_d_ssd1306_128x64_noname+0x34>
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
    40b8:	4628      	mov	r0, r5
    40ba:	f7ff ff15 	bl	3ee8 <u8x8_d_helper_display_init>
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
    40be:	4628      	mov	r0, r5
    40c0:	4906      	ldr	r1, [pc, #24]	; (40dc <u8x8_d_ssd1306_128x64_noname+0x38>)
    40c2:	f7ff fe69 	bl	3d98 <u8x8_cad_SendSequence>
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    default:
      return 0;
  }
  return 1;
    40c6:	2001      	movs	r0, #1
  switch(msg)
  {
    case U8X8_MSG_DISPLAY_INIT:
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    40c8:	bd38      	pop	{r3, r4, r5, pc}
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
    40ca:	4628      	mov	r0, r5
    40cc:	4904      	ldr	r1, [pc, #16]	; (40e0 <u8x8_d_ssd1306_128x64_noname+0x3c>)
    40ce:	f7ff ff05 	bl	3edc <u8x8_d_helper_display_setup_memory>
      break;
    default:
      return 0;
  }
  return 1;
    40d2:	2001      	movs	r0, #1
      u8x8_d_helper_display_init(u8x8);
      u8x8_cad_SendSequence(u8x8, u8x8_d_ssd1306_128x64_noname_init_seq);    
      break;
    case U8X8_MSG_DISPLAY_SETUP_MEMORY:
      u8x8_d_helper_display_setup_memory(u8x8, &u8x8_ssd1306_128x64_noname_display_info);
      break;
    40d4:	bd38      	pop	{r3, r4, r5, pc}

uint8_t u8x8_d_ssd1306_128x64_noname(u8x8_t *u8x8, uint8_t msg, uint8_t arg_int, void *arg_ptr)
{
    
  if ( u8x8_d_ssd1306_sh1106_generic(u8x8, msg, arg_int, arg_ptr) != 0 )
    return 1;
    40d6:	2001      	movs	r0, #1
      break;
    default:
      return 0;
  }
  return 1;
}
    40d8:	bd38      	pop	{r3, r4, r5, pc}
    40da:	bf00      	nop
    40dc:	20000984 	.word	0x20000984
    40e0:	20000964 	.word	0x20000964

000040e4 <u8x8_gpio_call>:

#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
    40e4:	b410      	push	{r4}
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    40e6:	6944      	ldr	r4, [r0, #20]
    40e8:	2300      	movs	r3, #0
    40ea:	46a4      	mov	ip, r4
}
    40ec:	f85d 4b04 	ldr.w	r4, [sp], #4
#include "u8x8.h"


void u8x8_gpio_call(u8x8_t *u8x8, uint8_t msg, uint8_t arg)
{
  u8x8->gpio_and_delay_cb(u8x8, msg, arg, NULL);
    40f0:	4760      	bx	ip
    40f2:	bf00      	nop

000040f4 <u8x8_Setup>:
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    40f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    40f6:	4606      	mov	r6, r0
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    u8x8->bus_clock = 0;		/* issue 769 */
    u8x8->i2c_address = 255;
    40f8:	f04f 0eff 	mov.w	lr, #255	; 0xff
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
    40fc:	2700      	movs	r7, #0
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    40fe:	469c      	mov	ip, r3
    4100:	302b      	adds	r0, #43	; 0x2b
    4102:	f106 0541 	add.w	r5, r6, #65	; 0x41
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
    4106:	4674      	mov	r4, lr
    byte_cb			Display controller/communication specific callback funtion
    gpio_and_delay_cb	Environment specific callback function

*/
void u8x8_Setup(u8x8_t *u8x8, u8x8_msg_cb display_cb, u8x8_msg_cb cad_cb, u8x8_msg_cb byte_cb, u8x8_msg_cb gpio_and_delay_cb)
{
    4108:	9b05      	ldr	r3, [sp, #20]
  Args:
    u8x8	An empty u8x8 structure
*/
void u8x8_SetupDefaults(u8x8_t *u8x8)
{
    u8x8->display_info = NULL;
    410a:	6037      	str	r7, [r6, #0]
    u8x8->display_cb = u8x8_dummy_cb;
    u8x8->cad_cb = u8x8_dummy_cb;
    u8x8->byte_cb = u8x8_dummy_cb;
    u8x8->gpio_and_delay_cb = u8x8_dummy_cb;
    u8x8->is_font_inverse_mode = 0;
    410c:	f886 7023 	strb.w	r7, [r6, #35]	; 0x23
    //u8x8->device_address = 0;
    u8x8->utf8_state = 0;		/* also reset by u8x8_utf8_init */
    4110:	f886 7026 	strb.w	r7, [r6, #38]	; 0x26
    u8x8->bus_clock = 0;		/* issue 769 */
    4114:	61b7      	str	r7, [r6, #24]
    u8x8->i2c_address = 255;
    4116:	f886 e024 	strb.w	lr, [r6, #36]	; 0x24
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
    411a:	f886 e028 	strb.w	lr, [r6, #40]	; 0x28
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
      u8x8->pins[i] = U8X8_PIN_NONE;
    411e:	f800 4f01 	strb.w	r4, [r0, #1]!
    u8x8->debounce_default_pin_state = 255;	/* assume all low active buttons */
  
#ifdef U8X8_USE_PINS 
  {
    uint8_t i;
    for( i = 0; i < U8X8_PIN_CNT; i++ )
    4122:	42a8      	cmp	r0, r5
    4124:	d1fb      	bne.n	411e <u8x8_Setup+0x2a>
{
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
    4126:	60b1      	str	r1, [r6, #8]
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    4128:	4630      	mov	r0, r6
  /* setup defaults and reset pins to U8X8_PIN_NONE */
  u8x8_SetupDefaults(u8x8);

  /* setup specific callbacks */
  u8x8->display_cb = display_cb;
  u8x8->cad_cb = cad_cb;
    412a:	60f2      	str	r2, [r6, #12]
  u8x8->byte_cb = byte_cb;
    412c:	f8c6 c010 	str.w	ip, [r6, #16]
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;
    4130:	6173      	str	r3, [r6, #20]

  /* setup display info */
  u8x8_SetupMemory(u8x8);
}
    4132:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
  u8x8->cad_cb = cad_cb;
  u8x8->byte_cb = byte_cb;
  u8x8->gpio_and_delay_cb = gpio_and_delay_cb;

  /* setup display info */
  u8x8_SetupMemory(u8x8);
    4136:	f7ff bf1b 	b.w	3f70 <u8x8_SetupMemory>
    413a:	bf00      	nop

0000413c <TwoWire::available()>:
	}
	uint8_t requestFrom(uint8_t addr, uint8_t qty, uint32_t iaddr, uint8_t n, uint8_t stop);
	virtual size_t write(uint8_t data);
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
    413c:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    4140:	f890 003a 	ldrb.w	r0, [r0, #58]	; 0x3a
	}
    4144:	1a10      	subs	r0, r2, r0
    4146:	4770      	bx	lr

00004148 <TwoWire::read()>:
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4148:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    414c:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    4150:	429a      	cmp	r2, r3
    4152:	d905      	bls.n	4160 <TwoWire::read()+0x18>
		return rxBuffer[rxBufferIndex++];
    4154:	1c5a      	adds	r2, r3, #1
    4156:	4403      	add	r3, r0
    4158:	f880 203a 	strb.w	r2, [r0, #58]	; 0x3a
    415c:	7e98      	ldrb	r0, [r3, #26]
    415e:	4770      	bx	lr
	virtual size_t write(const uint8_t *data, size_t quantity);
	virtual int available(void) {
		return rxBufferLength - rxBufferIndex;
	}
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4160:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex++];
	}
    4164:	4770      	bx	lr
    4166:	bf00      	nop

00004168 <TwoWire::peek()>:
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    4168:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
    416c:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
    4170:	429a      	cmp	r2, r3
    4172:	d902      	bls.n	417a <TwoWire::peek()+0x12>
		return rxBuffer[rxBufferIndex];
    4174:	4403      	add	r3, r0
    4176:	7e98      	ldrb	r0, [r3, #26]
    4178:	4770      	bx	lr
	virtual int read(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
		return rxBuffer[rxBufferIndex++];
	}
	virtual int peek(void) {
		if (rxBufferIndex >= rxBufferLength) return -1;
    417a:	f04f 30ff 	mov.w	r0, #4294967295
		return rxBuffer[rxBufferIndex];
	}
    417e:	4770      	bx	lr

00004180 <TwoWire::flush()>:
	virtual void flush(void) {
    4180:	4770      	bx	lr
    4182:	bf00      	nop

00004184 <TwoWire::write(unsigned char)>:
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
    4184:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    4188:	b193      	cbz	r3, 41b0 <TwoWire::write(unsigned char)+0x2c>
		if (txBufferLength >= BUFFER_LENGTH+1) {
    418a:	f890 305f 	ldrb.w	r3, [r0, #95]	; 0x5f
    418e:	2b20      	cmp	r3, #32
    4190:	d80b      	bhi.n	41aa <TwoWire::write(unsigned char)+0x26>
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    4192:	18c2      	adds	r2, r0, r3
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
	return ret;
}

size_t TwoWire::write(uint8_t data)
{
    4194:	b410      	push	{r4}
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    4196:	1c5c      	adds	r4, r3, #1
		return 1;
    4198:	2301      	movs	r3, #1
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    419a:	f880 405f 	strb.w	r4, [r0, #95]	; 0x5f
		return 1;
	}
	return 0;
}
    419e:	4618      	mov	r0, r3
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
		}
		txBuffer[txBufferLength++] = data;
    41a0:	f882 103d 	strb.w	r1, [r2, #61]	; 0x3d
		return 1;
	}
	return 0;
}
    41a4:	f85d 4b04 	ldr.w	r4, [sp], #4
    41a8:	4770      	bx	lr
	// format warnings are too pedantic - disable until newer toolchain offers better...
	// https://forum.pjrc.com/threads/62473?p=256873&viewfull=1#post256873
	int printf(const char *format, ...) /*__attribute__ ((format (printf, 2, 3)))*/;
	int printf(const __FlashStringHelper *format, ...);
  protected:
	void setWriteError(int err = 1) { write_error = err; }
    41aa:	2201      	movs	r2, #1
size_t TwoWire::write(uint8_t data)
{
	if (transmitting || slave_mode) {
		if (txBufferLength >= BUFFER_LENGTH+1) {
			setWriteError();
			return 0;
    41ac:	2300      	movs	r3, #0
    41ae:	7102      	strb	r2, [r0, #4]
		}
		txBuffer[txBufferLength++] = data;
		return 1;
	}
	return 0;
}
    41b0:	4618      	mov	r0, r3
    41b2:	4770      	bx	lr

000041b4 <TwoWire::write(unsigned char const*, unsigned int)>:

size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
    41b4:	b538      	push	{r3, r4, r5, lr}
    41b6:	4605      	mov	r5, r0
	if (transmitting || slave_mode) {
    41b8:	f8b0 0060 	ldrh.w	r0, [r0, #96]	; 0x60
    41bc:	b190      	cbz	r0, 41e4 <TwoWire::write(unsigned char const*, unsigned int)+0x30>
		size_t avail = BUFFER_LENGTH+1 - txBufferLength;
    41be:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
    41c2:	4614      	mov	r4, r2
    41c4:	f1c3 0221 	rsb	r2, r3, #33	; 0x21
		if (quantity > avail) {
    41c8:	4294      	cmp	r4, r2
    41ca:	d80c      	bhi.n	41e6 <TwoWire::write(unsigned char const*, unsigned int)+0x32>
			quantity = avail;
			setWriteError();
		}
		memcpy(txBuffer + txBufferLength, data, quantity);
    41cc:	f105 003d 	add.w	r0, r5, #61	; 0x3d
    41d0:	4622      	mov	r2, r4
    41d2:	4418      	add	r0, r3
    41d4:	f004 fc3e 	bl	8a54 <memcpy>
		txBufferLength += quantity;
    41d8:	f895 305f 	ldrb.w	r3, [r5, #95]	; 0x5f
    41dc:	4620      	mov	r0, r4
    41de:	441c      	add	r4, r3
    41e0:	f885 405f 	strb.w	r4, [r5, #95]	; 0x5f
		return quantity;
	}
	return 0;
}
    41e4:	bd38      	pop	{r3, r4, r5, pc}
    41e6:	4614      	mov	r4, r2
    41e8:	2201      	movs	r2, #1
    41ea:	712a      	strb	r2, [r5, #4]
    41ec:	e7ee      	b.n	41cc <TwoWire::write(unsigned char const*, unsigned int)+0x18>
    41ee:	bf00      	nop

000041f0 <TwoWire::begin()>:
//#include "debug/printf.h"

#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
    41f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    41f4:	4f2f      	ldr	r7, [pc, #188]	; (42b4 <TwoWire::begin()+0xc4>)
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    41f6:	2500      	movs	r5, #0

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    41f8:	6942      	ldr	r2, [r0, #20]
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    41fa:	2401      	movs	r4, #1
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    41fc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    41fe:	f04f 0e02 	mov.w	lr, #2

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    4202:	6816      	ldr	r6, [r2, #0]
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4204:	f44f 3830 	mov.w	r8, #180224	; 0x2c000
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    4208:	f421 017c 	bic.w	r1, r1, #16515072	; 0xfc0000
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    420c:	6903      	ldr	r3, [r0, #16]
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    420e:	f8df c0b0 	ldr.w	ip, [pc, #176]	; 42c0 <TwoWire::begin()+0xd0>
#define PINCONFIG (IOMUXC_PAD_ODE | IOMUXC_PAD_SRE | IOMUXC_PAD_DSE(4) | IOMUXC_PAD_SPEED(1) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3))

void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
    4212:	f441 2180 	orr.w	r1, r1, #262144	; 0x40000
    4216:	63b9      	str	r1, [r7, #56]	; 0x38
	hardware.clock_gate_register |= hardware.clock_gate_mask;
    4218:	6831      	ldr	r1, [r6, #0]
    421a:	6857      	ldr	r7, [r2, #4]
    421c:	4339      	orrs	r1, r7
    421e:	6031      	str	r1, [r6, #0]
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    4220:	f04f 1101 	mov.w	r1, #65537	; 0x10001
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    4224:	4e24      	ldr	r6, [pc, #144]	; (42b8 <TwoWire::begin()+0xc8>)
void TwoWire::begin(void)
{
	// use 24 MHz clock
	CCM_CSCDR2 = (CCM_CSCDR2 & ~CCM_CSCDR2_LPI2C_CLK_PODF(63)) | CCM_CSCDR2_LPI2C_CLK_SEL;
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
    4226:	f8c3 e010 	str.w	lr, [r3, #16]
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    422a:	611d      	str	r5, [r3, #16]
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    422c:	f8c3 c048 	str.w	ip, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    4230:	625c      	str	r4, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    4232:	629e      	str	r6, [r3, #40]	; 0x28
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    4234:	f64f 0661 	movw	r6, #63585	; 0xf861
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4238:	f8c3 802c 	str.w	r8, [r3, #44]	; 0x2c
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    423c:	6c9f      	ldr	r7, [r3, #72]	; 0x48
    423e:	651f      	str	r7, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    4240:	621d      	str	r5, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    4242:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    4244:	611c      	str	r4, [r3, #16]
	hardware.clock_gate_register |= hardware.clock_gate_mask;
	port->MCR = LPI2C_MCR_RST;
	setClock(100000);

	// Setup SDA register
	*(portControlRegister(hardware.sda_pins[sda_pin_index_].pin)) = PINCONFIG;
    4246:	7e01      	ldrb	r1, [r0, #24]
    4248:	4b1c      	ldr	r3, [pc, #112]	; (42bc <TwoWire::begin()+0xcc>)
    424a:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    424e:	7a09      	ldrb	r1, [r1, #8]
    4250:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    4254:	6889      	ldr	r1, [r1, #8]
    4256:	600e      	str	r6, [r1, #0]
	*(portConfigRegister(hardware.sda_pins[sda_pin_index_].pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    4258:	7e01      	ldrb	r1, [r0, #24]
    425a:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    425e:	7a0c      	ldrb	r4, [r1, #8]
    4260:	68cd      	ldr	r5, [r1, #12]
    4262:	eb03 1104 	add.w	r1, r3, r4, lsl #4
    4266:	6849      	ldr	r1, [r1, #4]
    4268:	600d      	str	r5, [r1, #0]
    426a:	7e01      	ldrb	r1, [r0, #24]
    426c:	eb02 1101 	add.w	r1, r2, r1, lsl #4
	if (hardware.sda_pins[sda_pin_index_].select_input_register) {
    4270:	690c      	ldr	r4, [r1, #16]
    4272:	b10c      	cbz	r4, 4278 <TwoWire::begin()+0x88>
		*(hardware.sda_pins[sda_pin_index_].select_input_register) =  hardware.sda_pins[sda_pin_index_].select_val;
    4274:	6949      	ldr	r1, [r1, #20]
    4276:	6021      	str	r1, [r4, #0]
	}

	// setup SCL register
	*(portControlRegister(hardware.scl_pins[scl_pin_index_].pin)) = PINCONFIG;
    4278:	7e41      	ldrb	r1, [r0, #25]
    427a:	f64f 0461 	movw	r4, #63585	; 0xf861
    427e:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    4282:	f891 1028 	ldrb.w	r1, [r1, #40]	; 0x28
    4286:	eb03 1101 	add.w	r1, r3, r1, lsl #4
    428a:	6889      	ldr	r1, [r1, #8]
    428c:	600c      	str	r4, [r1, #0]
	*(portConfigRegister(hardware.scl_pins[scl_pin_index_].pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    428e:	7e41      	ldrb	r1, [r0, #25]
    4290:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    4294:	f891 4028 	ldrb.w	r4, [r1, #40]	; 0x28
    4298:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
    429a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
    429e:	685b      	ldr	r3, [r3, #4]
    42a0:	6019      	str	r1, [r3, #0]
    42a2:	7e43      	ldrb	r3, [r0, #25]
    42a4:	eb02 1203 	add.w	r2, r2, r3, lsl #4
	if (hardware.scl_pins[scl_pin_index_].select_input_register) {
    42a8:	6b13      	ldr	r3, [r2, #48]	; 0x30
    42aa:	b10b      	cbz	r3, 42b0 <TwoWire::begin()+0xc0>
		*(hardware.scl_pins[scl_pin_index_].select_input_register) =  hardware.scl_pins[scl_pin_index_].select_val;
    42ac:	6b52      	ldr	r2, [r2, #52]	; 0x34
    42ae:	601a      	str	r2, [r3, #0]
    42b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    42b4:	400fc000 	.word	0x400fc000
    42b8:	05050bb8 	.word	0x05050bb8
    42bc:	20000aa0 	.word	0x20000aa0
    42c0:	1928373b 	.word	0x1928373b

000042c4 <TwoWire::force_clock()>:
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    42c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    42c8:	4683      	mov	fp, r0
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    42ca:	4840      	ldr	r0, [pc, #256]	; (43cc <TwoWire::force_clock()+0x108>)
	}
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
    42cc:	b083      	sub	sp, #12
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    42ce:	2515      	movs	r5, #21
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    42d0:	f8db a014 	ldr.w	sl, [fp, #20]
    42d4:	f89b 6018 	ldrb.w	r6, [fp, #24]
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    42d8:	f89b 3019 	ldrb.w	r3, [fp, #25]
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    42dc:	eb0a 1606 	add.w	r6, sl, r6, lsl #4
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    42e0:	493b      	ldr	r1, [pc, #236]	; (43d0 <TwoWire::force_clock()+0x10c>)
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    42e2:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    42e6:	f8df e0ec 	ldr.w	lr, [pc, #236]	; 43d4 <TwoWire::force_clock()+0x110>
}

bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
    42ea:	7a36      	ldrb	r6, [r6, #8]
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    42ec:	460c      	mov	r4, r1
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
    42ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    42f2:	0136      	lsls	r6, r6, #4

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    42f4:	f8df 90e0 	ldr.w	r9, [pc, #224]	; 43d8 <TwoWire::force_clock()+0x114>
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    42f8:	011b      	lsls	r3, r3, #4
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    42fa:	1987      	adds	r7, r0, r6
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
    42fc:	f850 8006 	ldr.w	r8, [r0, r6]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    4300:	eb00 0c03 	add.w	ip, r0, r3
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
    4304:	58c6      	ldr	r6, [r0, r3]
bool TwoWire::force_clock()
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
    4306:	68f8      	ldr	r0, [r7, #12]
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    4308:	687b      	ldr	r3, [r7, #4]
{
	bool ret = false;
	uint32_t sda_pin = hardware.sda_pins[sda_pin_index_].pin;
	uint32_t scl_pin = hardware.scl_pins[scl_pin_index_].pin;
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
    430a:	f8dc 700c 	ldr.w	r7, [ip, #12]
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
    430e:	9300      	str	r3, [sp, #0]
    4310:	601d      	str	r5, [r3, #0]
	*portSetRegister(sda_pin) = sda_mask;
    4312:	f8c8 0084 	str.w	r0, [r8, #132]	; 0x84
	*portModeRegister(sda_pin) |= sda_mask;
    4316:	f8d8 3004 	ldr.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    431a:	f8dc 2004 	ldr.w	r2, [ip, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    431e:	4303      	orrs	r3, r0
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4320:	9201      	str	r2, [sp, #4]
	uint32_t sda_mask = digitalPinToBitMask(sda_pin);
	uint32_t scl_mask = digitalPinToBitMask(scl_pin);
	// take control of pins with GPIO
	*portConfigRegister(sda_pin) = 5 | 0x10;
	*portSetRegister(sda_pin) = sda_mask;
	*portModeRegister(sda_pin) |= sda_mask;
    4322:	f8c8 3004 	str.w	r3, [r8, #4]
	*portConfigRegister(scl_pin) = 5 | 0x10;
    4326:	6015      	str	r5, [r2, #0]
	*portSetRegister(scl_pin) = scl_mask;
    4328:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
	*portModeRegister(scl_pin) |= scl_mask;
    432c:	6873      	ldr	r3, [r6, #4]
    432e:	433b      	orrs	r3, r7
    4330:	6073      	str	r3, [r6, #4]
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    4332:	6809      	ldr	r1, [r1, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4334:	f8de 3000 	ldr.w	r3, [lr]
    4338:	fba9 3203 	umull	r3, r2, r9, r3
    433c:	0c92      	lsrs	r2, r2, #18
    433e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    4342:	0052      	lsls	r2, r2, #1
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4344:	6823      	ldr	r3, [r4, #0]
    4346:	1a5b      	subs	r3, r3, r1
    4348:	429a      	cmp	r2, r3
    434a:	d8fb      	bhi.n	4344 <TwoWire::force_clock()+0x80>
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    434c:	4a20      	ldr	r2, [pc, #128]	; (43d0 <TwoWire::force_clock()+0x10c>)
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    434e:	2509      	movs	r5, #9

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4350:	f8df c084 	ldr.w	ip, [pc, #132]	; 43d8 <TwoWire::force_clock()+0x114>
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4354:	4691      	mov	r9, r2
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
    4356:	f8d8 3008 	ldr.w	r3, [r8, #8]
		  && (*portInputRegister(scl_pin) & scl_mask)) {
    435a:	4218      	tst	r0, r3
    435c:	d002      	beq.n	4364 <TwoWire::force_clock()+0xa0>
    435e:	68b3      	ldr	r3, [r6, #8]
    4360:	421f      	tst	r7, r3
    4362:	d131      	bne.n	43c8 <TwoWire::force_clock()+0x104>
			// success, both pins are high
			ret = true;
			break;
		}
		*portClearRegister(scl_pin) = scl_mask;
    4364:	f8c6 7088 	str.w	r7, [r6, #136]	; 0x88
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    4368:	6814      	ldr	r4, [r2, #0]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    436a:	f8de 1000 	ldr.w	r1, [lr]
    436e:	fbac 3101 	umull	r3, r1, ip, r1
    4372:	0c89      	lsrs	r1, r1, #18
    4374:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4378:	6813      	ldr	r3, [r2, #0]
    437a:	1b1b      	subs	r3, r3, r4
    437c:	4299      	cmp	r1, r3
    437e:	d8fb      	bhi.n	4378 <TwoWire::force_clock()+0xb4>
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
    4380:	f8c6 7084 	str.w	r7, [r6, #132]	; 0x84
uint32_t micros(void);

static inline void delayMicroseconds(uint32_t) __attribute__((always_inline, unused));
static inline void delayMicroseconds(uint32_t usec)
{
	uint32_t begin = ARM_DWT_CYCCNT;
    4384:	f8d9 4000 	ldr.w	r4, [r9]
	uint32_t cycles = F_CPU_ACTUAL / 1000000 * usec;
    4388:	f8de 1000 	ldr.w	r1, [lr]
    438c:	fbac 3101 	umull	r3, r1, ip, r1
    4390:	0c89      	lsrs	r1, r1, #18
    4392:	eb01 0181 	add.w	r1, r1, r1, lsl #2
	// TODO: check if cycles is large, do a wait with yield calls until it's smaller
	while (ARM_DWT_CYCCNT - begin < cycles) ; // wait
    4396:	6813      	ldr	r3, [r2, #0]
    4398:	1b1b      	subs	r3, r3, r4
    439a:	4299      	cmp	r1, r3
    439c:	d8fb      	bhi.n	4396 <TwoWire::force_clock()+0xd2>
	*portModeRegister(sda_pin) |= sda_mask;
	*portConfigRegister(scl_pin) = 5 | 0x10;
	*portSetRegister(scl_pin) = scl_mask;
	*portModeRegister(scl_pin) |= scl_mask;
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
    439e:	3d01      	subs	r5, #1
    43a0:	d1d9      	bne.n	4356 <TwoWire::force_clock()+0x92>
	scl_pin_index_ = newindex;
}

bool TwoWire::force_clock()
{
	bool ret = false;
    43a2:	4628      	mov	r0, r5
		delayMicroseconds(5);
		*portSetRegister(scl_pin) = scl_mask;
		delayMicroseconds(5);
	}
	// return control of pins to I2C
	*(portConfigRegister(sda_pin)) = hardware.sda_pins[sda_pin_index_].mux_val;
    43a4:	f89b 3018 	ldrb.w	r3, [fp, #24]
    43a8:	9a00      	ldr	r2, [sp, #0]
    43aa:	eb0a 1303 	add.w	r3, sl, r3, lsl #4
    43ae:	68db      	ldr	r3, [r3, #12]
    43b0:	6013      	str	r3, [r2, #0]
	*(portConfigRegister(scl_pin)) = hardware.scl_pins[scl_pin_index_].mux_val;
    43b2:	f89b 3019 	ldrb.w	r3, [fp, #25]
    43b6:	9a01      	ldr	r2, [sp, #4]
    43b8:	eb0a 1a03 	add.w	sl, sl, r3, lsl #4
    43bc:	f8da 302c 	ldr.w	r3, [sl, #44]	; 0x2c
    43c0:	6013      	str	r3, [r2, #0]
	return ret;
}
    43c2:	b003      	add	sp, #12
    43c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	delayMicroseconds(10);
	for (int i=0; i < 9; i++) {
		if ((*portInputRegister(sda_pin) & sda_mask)
		  && (*portInputRegister(scl_pin) & scl_mask)) {
			// success, both pins are high
			ret = true;
    43c8:	2001      	movs	r0, #1
    43ca:	e7eb      	b.n	43a4 <TwoWire::force_clock()+0xe0>
    43cc:	20000aa0 	.word	0x20000aa0
    43d0:	e0001004 	.word	0xe0001004
    43d4:	2000112c 	.word	0x2000112c
    43d8:	431bde83 	.word	0x431bde83

000043dc <TwoWire::wait_idle()>:
extern volatile uint32_t systick_millis_count;

static inline uint32_t millis(void) __attribute__((always_inline, unused));
static inline uint32_t millis(void)
{
	return systick_millis_count;
    43dc:	490d      	ldr	r1, [pc, #52]	; (4414 <TwoWire::wait_idle()+0x38>)
    43de:	6902      	ldr	r2, [r0, #16]
//   01   EPF = End Packet Flag
//      2 RDF = Receive Data Flag
//      1 TDF = Transmit Data Flag

bool TwoWire::wait_idle()
{
    43e0:	b510      	push	{r4, lr}
    43e2:	680c      	ldr	r4, [r1, #0]
    43e4:	e005      	b.n	43f2 <TwoWire::wait_idle()+0x16>
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
    43e6:	01db      	lsls	r3, r3, #7
    43e8:	d407      	bmi.n	43fa <TwoWire::wait_idle()+0x1e>
    43ea:	680b      	ldr	r3, [r1, #0]
		if (timeout > 16) {
    43ec:	1b1b      	subs	r3, r3, r4
    43ee:	2b10      	cmp	r3, #16
    43f0:	d808      	bhi.n	4404 <TwoWire::wait_idle()+0x28>

bool TwoWire::wait_idle()
{
	elapsedMillis timeout = 0;
	while (1) {
		uint32_t status = port->MSR; // pg 2899 & 2892
    43f2:	6953      	ldr	r3, [r2, #20]
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
    43f4:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
    43f8:	d1f5      	bne.n	43e6 <TwoWire::wait_idle()+0xa>
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    43fa:	f44f 43fe 	mov.w	r3, #32512	; 0x7f00
	return true;
    43fe:	2001      	movs	r0, #1
			if (force_clock()) break;
			//Serial.printf("unable to get control of I2C bus\n");
			return false;
		}
	}
	port->MSR = 0x00007F00; // clear all prior flags
    4400:	6153      	str	r3, [r2, #20]
	return true;
}
    4402:	bd10      	pop	{r4, pc}
    4404:	4604      	mov	r4, r0
		uint32_t status = port->MSR; // pg 2899 & 2892
		if (!(status & LPI2C_MSR_BBF)) break; // bus is available
		if (status & LPI2C_MSR_MBF) break; // we already have bus control
		if (timeout > 16) {
			//Serial.printf("timeout waiting for idle, MSR = %x\n", status);
			if (force_clock()) break;
    4406:	f7ff ff5d 	bl	42c4 <TwoWire::force_clock()>
    440a:	2800      	cmp	r0, #0
    440c:	d0f9      	beq.n	4402 <TwoWire::wait_idle()+0x26>
    440e:	6922      	ldr	r2, [r4, #16]
    4410:	e7f3      	b.n	43fa <TwoWire::wait_idle()+0x1e>
    4412:	bf00      	nop
    4414:	20036ca0 	.word	0x20036ca0

00004418 <TwoWire::endTransmission(unsigned char)>:
	return true;
}


uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
    4418:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t tx_len = txBufferLength;
    441c:	f890 a05f 	ldrb.w	sl, [r0, #95]	; 0x5f
	if (!tx_len) return 4; // no address for transmit
    4420:	f1ba 0f00 	cmp.w	sl, #0
    4424:	d102      	bne.n	442c <TwoWire::endTransmission(unsigned char)+0x14>
    4426:	2004      	movs	r0, #4
    4428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    442c:	4605      	mov	r5, r0
    442e:	460e      	mov	r6, r1
	if (!wait_idle()) return 4;
    4430:	f7ff ffd4 	bl	43dc <TwoWire::wait_idle()>
    4434:	2800      	cmp	r0, #0
    4436:	d0f6      	beq.n	4426 <TwoWire::endTransmission(unsigned char)+0xe>
    4438:	4f2e      	ldr	r7, [pc, #184]	; (44f4 <TwoWire::endTransmission(unsigned char)+0xdc>)
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
    443a:	2400      	movs	r4, #0
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    443c:	f44f 7900 	mov.w	r9, #512	; 0x200
    4440:	f8d7 8000 	ldr.w	r8, [r7]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    4444:	4554      	cmp	r4, sl
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    4446:	6929      	ldr	r1, [r5, #16]
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
    4448:	d81a      	bhi.n	4480 <TwoWire::endTransmission(unsigned char)+0x68>
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
    444a:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
    444c:	f003 0307 	and.w	r3, r3, #7
			while (fifo_used < 4) {
    4450:	2b03      	cmp	r3, #3
    4452:	d909      	bls.n	4468 <TwoWire::endTransmission(unsigned char)+0x50>
    4454:	e014      	b.n	4480 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    4456:	f895 203d 	ldrb.w	r2, [r5, #61]	; 0x3d
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    445a:	3301      	adds	r3, #1
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
    445c:	2401      	movs	r4, #1
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    445e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    4462:	2b04      	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
    4464:	660a      	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    4466:	d00b      	beq.n	4480 <TwoWire::endTransmission(unsigned char)+0x68>
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4468:	192a      	adds	r2, r5, r4
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
				if (tx_index == 0) {
    446a:	2c00      	cmp	r4, #0
    446c:	d0f3      	beq.n	4456 <TwoWire::endTransmission(unsigned char)+0x3e>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
    446e:	45a2      	cmp	sl, r4
    4470:	d927      	bls.n	44c2 <TwoWire::endTransmission(unsigned char)+0xaa>
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
					tx_index++;
					break;
				}
				fifo_used++;
    4472:	3301      	adds	r3, #1
			while (fifo_used < 4) {
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    4474:	f892 203d 	ldrb.w	r2, [r2, #61]	; 0x3d
    4478:	3401      	adds	r4, #1
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    447a:	2b04      	cmp	r3, #4
				if (tx_index == 0) {
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
    447c:	660a      	str	r2, [r1, #96]	; 0x60
	elapsedMillis timeout = 0;
	while (1) {
		// transmit stuff, if we haven't already
		if (tx_index <= tx_len) {
			uint32_t fifo_used = port->MFSR & 0x07; // pg 2914
			while (fifo_used < 4) {
    447e:	d1f3      	bne.n	4468 <TwoWire::endTransmission(unsigned char)+0x50>
				}
				fifo_used++;
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
    4480:	694b      	ldr	r3, [r1, #20]
		if (status & LPI2C_MSR_ALF) {
    4482:	0518      	lsls	r0, r3, #20
    4484:	d422      	bmi.n	44cc <TwoWire::endTransmission(unsigned char)+0xb4>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
    4486:	055a      	lsls	r2, r3, #21
    4488:	d427      	bmi.n	44da <TwoWire::endTransmission(unsigned char)+0xc2>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
    448a:	0498      	lsls	r0, r3, #18
    448c:	d404      	bmi.n	4498 <TwoWire::endTransmission(unsigned char)+0x80>
    448e:	683a      	ldr	r2, [r7, #0]
    4490:	ebc8 0202 	rsb	r2, r8, r2
    4494:	2a32      	cmp	r2, #50	; 0x32
    4496:	d909      	bls.n	44ac <TwoWire::endTransmission(unsigned char)+0x94>
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    4498:	690b      	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    449a:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 4; // clock stretched too long or generic timeout
    449e:	2004      	movs	r0, #4
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			port->MTDR = LPI2C_MTDR_CMD_STOP;
			return 2; // NACK (assume address, TODO: how to tell address from data)
		}
		if ((status & LPI2C_MSR_PLTF) || timeout > 50) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    44a0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    44a4:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP; // try to send a stop
    44a6:	660a      	str	r2, [r1, #96]	; 0x60
			return 4; // clock stretched too long or generic timeout
    44a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
    44ac:	4554      	cmp	r4, sl
    44ae:	d905      	bls.n	44bc <TwoWire::endTransmission(unsigned char)+0xa4>
			uint32_t tx_fifo = port->MFSR & 0x07;
    44b0:	6dca      	ldr	r2, [r1, #92]	; 0x5c
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
    44b2:	0752      	lsls	r2, r2, #29
    44b4:	d102      	bne.n	44bc <TwoWire::endTransmission(unsigned char)+0xa4>
    44b6:	059b      	lsls	r3, r3, #22
    44b8:	d419      	bmi.n	44ee <TwoWire::endTransmission(unsigned char)+0xd6>
    44ba:	b1c6      	cbz	r6, 44ee <TwoWire::endTransmission(unsigned char)+0xd6>
				return 0;
			}
		}
		yield();
    44bc:	f006 f82a 	bl	a514 <yield>
	uint32_t tx_len = txBufferLength;
	if (!tx_len) return 4; // no address for transmit
	if (!wait_idle()) return 4;
	uint32_t tx_index = 0; // 0=start, 1=addr, 2-(N-1)=data, N=stop
	elapsedMillis timeout = 0;
	while (1) {
    44c0:	e7c0      	b.n	4444 <TwoWire::endTransmission(unsigned char)+0x2c>
					port->MTDR = LPI2C_MTDR_CMD_START | txBuffer[0];
					tx_index = 1;
				} else if (tx_index < tx_len) {
					port->MTDR = LPI2C_MTDR_CMD_TRANSMIT | txBuffer[tx_index++];
				} else {
					if (sendStop) port->MTDR = LPI2C_MTDR_CMD_STOP;
    44c2:	b10e      	cbz	r6, 44c8 <TwoWire::endTransmission(unsigned char)+0xb0>
    44c4:	f8c1 9060 	str.w	r9, [r1, #96]	; 0x60
					tx_index++;
    44c8:	3401      	adds	r4, #1
					break;
    44ca:	e7d9      	b.n	4480 <TwoWire::endTransmission(unsigned char)+0x68>
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    44cc:	690b      	ldr	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    44ce:	2004      	movs	r0, #4
			}
		}
		// monitor status
		uint32_t status = port->MSR; // pg 2884 & 2891
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    44d0:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    44d4:	610b      	str	r3, [r1, #16]
			return 4; // we lost bus arbitration to another master
    44d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    44da:	690b      	ldr	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    44dc:	f44f 7200 	mov.w	r2, #512	; 0x200
			return 2; // NACK (assume address, TODO: how to tell address from data)
    44e0:	2002      	movs	r0, #2
		if (status & LPI2C_MSR_ALF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
			return 4; // we lost bus arbitration to another master
		}
		if (status & LPI2C_MSR_NDF) {
			port->MCR |= LPI2C_MCR_RTF | LPI2C_MCR_RRF; // clear FIFOs
    44e2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
    44e6:	610b      	str	r3, [r1, #16]
			port->MTDR = LPI2C_MTDR_CMD_STOP;
    44e8:	660a      	str	r2, [r1, #96]	; 0x60
			return 2; // NACK (assume address, TODO: how to tell address from data)
    44ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		}
		// are we done yet?
		if (tx_index > tx_len) {
			uint32_t tx_fifo = port->MFSR & 0x07;
			if (tx_fifo == 0 && ((status & LPI2C_MSR_SDF) || !sendStop)) {
				return 0;
    44ee:	2000      	movs	r0, #0
    44f0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    44f4:	20036ca0 	.word	0x20036ca0

000044f8 <TwoWire::setClock(unsigned long)>:
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
	port->MCR = 0;
    44f8:	6903      	ldr	r3, [r0, #16]
    44fa:	2200      	movs	r2, #0
	if (frequency < 400000) {
    44fc:	4813      	ldr	r0, [pc, #76]	; (454c <TwoWire::setClock(unsigned long)+0x54>)
    44fe:	4281      	cmp	r1, r0
// Timeout if a device stretches SCL this long, in microseconds
#define CLOCK_STRETCH_TIMEOUT 15000


void TwoWire::setClock(uint32_t frequency)
{
    4500:	b410      	push	{r4}
	port->MCR = 0;
    4502:	611a      	str	r2, [r3, #16]
	if (frequency < 400000) {
    4504:	d918      	bls.n	4538 <TwoWire::setClock(unsigned long)+0x40>
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
	} else if (frequency < 1000000) {
    4506:	4812      	ldr	r0, [pc, #72]	; (4550 <TwoWire::setClock(unsigned long)+0x58>)
    4508:	4281      	cmp	r1, r0
    450a:	d912      	bls.n	4532 <TwoWire::setClock(unsigned long)+0x3a>
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
    450c:	4c11      	ldr	r4, [pc, #68]	; (4554 <TwoWire::setClock(unsigned long)+0x5c>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
    450e:	4812      	ldr	r0, [pc, #72]	; (4558 <TwoWire::setClock(unsigned long)+0x60>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    4510:	4912      	ldr	r1, [pc, #72]	; (455c <TwoWire::setClock(unsigned long)+0x64>)
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	} else {
		// 1 MHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(9) | LPI2C_MCCR0_CLKLO(10) |
			LPI2C_MCCR0_DATAVD(4) | LPI2C_MCCR0_SETHOLD(7);
    4512:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
    4514:	625a      	str	r2, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
    4516:	6298      	str	r0, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
    4518:	62d9      	str	r1, [r3, #44]	; 0x2c
	}
	port->MCCR1 = port->MCCR0;
    451a:	6c9c      	ldr	r4, [r3, #72]	; 0x48
	port->MCFGR0 = 0;
    451c:	2000      	movs	r0, #0
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    451e:	f04f 1101 	mov.w	r1, #65537	; 0x10001
	port->MCR = LPI2C_MCR_MEN;
    4522:	2201      	movs	r2, #1
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(1) | LPI2C_MCFGR2_FILTSCL(1) |
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
    4524:	651c      	str	r4, [r3, #80]	; 0x50
	port->MCFGR0 = 0;
    4526:	6218      	str	r0, [r3, #32]
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
	port->MCR = LPI2C_MCR_MEN;
}
    4528:	f85d 4b04 	ldr.w	r4, [sp], #4
			LPI2C_MCFGR2_BUSIDLE(2400); // idle timeout 100 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 24 / 256 + 1);
	}
	port->MCCR1 = port->MCCR0;
	port->MCFGR0 = 0;
	port->MFCR = LPI2C_MFCR_RXWATER(1) | LPI2C_MFCR_TXWATER(1);
    452c:	6599      	str	r1, [r3, #88]	; 0x58
	port->MCR = LPI2C_MCR_MEN;
    452e:	611a      	str	r2, [r3, #16]
}
    4530:	4770      	bx	lr
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
	} else if (frequency < 1000000) {
		// 400 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(26) | LPI2C_MCCR0_CLKLO(28) |
			LPI2C_MCCR0_DATAVD(12) | LPI2C_MCCR0_SETHOLD(18);
    4532:	4c0b      	ldr	r4, [pc, #44]	; (4560 <TwoWire::setClock(unsigned long)+0x68>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(0);
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(2) | LPI2C_MCFGR2_FILTSCL(2) |
			LPI2C_MCFGR2_BUSIDLE(3600); // idle timeout 150 us
    4534:	480b      	ldr	r0, [pc, #44]	; (4564 <TwoWire::setClock(unsigned long)+0x6c>)
    4536:	e7eb      	b.n	4510 <TwoWire::setClock(unsigned long)+0x18>
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    4538:	4c0b      	ldr	r4, [pc, #44]	; (4568 <TwoWire::setClock(unsigned long)+0x70>)
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    453a:	2001      	movs	r0, #1
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    453c:	490b      	ldr	r1, [pc, #44]	; (456c <TwoWire::setClock(unsigned long)+0x74>)
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    453e:	f44f 3230 	mov.w	r2, #180224	; 0x2c000
{
	port->MCR = 0;
	if (frequency < 400000) {
		// 100 kHz
		port->MCCR0 = LPI2C_MCCR0_CLKHI(55) | LPI2C_MCCR0_CLKLO(59) |
			LPI2C_MCCR0_DATAVD(25) | LPI2C_MCCR0_SETHOLD(40);
    4542:	649c      	str	r4, [r3, #72]	; 0x48
		port->MCFGR1 = LPI2C_MCFGR1_PRESCALE(1);
    4544:	6258      	str	r0, [r3, #36]	; 0x24
		port->MCFGR2 = LPI2C_MCFGR2_FILTSDA(5) | LPI2C_MCFGR2_FILTSCL(5) |
			LPI2C_MCFGR2_BUSIDLE(3000); // idle timeout 250 us
    4546:	6299      	str	r1, [r3, #40]	; 0x28
		port->MCFGR3 = LPI2C_MCFGR3_PINLOW(CLOCK_STRETCH_TIMEOUT * 12 / 256 + 1);
    4548:	62da      	str	r2, [r3, #44]	; 0x2c
    454a:	e7e6      	b.n	451a <TwoWire::setClock(unsigned long)+0x22>
    454c:	00061a7f 	.word	0x00061a7f
    4550:	000f423f 	.word	0x000f423f
    4554:	0407090a 	.word	0x0407090a
    4558:	01010960 	.word	0x01010960
    455c:	00057f00 	.word	0x00057f00
    4560:	0c121a1c 	.word	0x0c121a1c
    4564:	02020e10 	.word	0x02020e10
    4568:	1928373b 	.word	0x1928373b
    456c:	05050bb8 	.word	0x05050bb8

00004570 <FsCache::sync() [clone .part.0]>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
    4570:	b570      	push	{r4, r5, r6, lr}
    4572:	4604      	mov	r4, r0
  if (m_status & CACHE_STATUS_DIRTY) {
    if (!m_blockDev->writeSector(m_sector, m_buffer)) {
    4574:	6840      	ldr	r0, [r0, #4]
    4576:	f104 0610 	add.w	r6, r4, #16
    457a:	6803      	ldr	r3, [r0, #0]
    457c:	68e1      	ldr	r1, [r4, #12]
    457e:	4632      	mov	r2, r6
    4580:	69db      	ldr	r3, [r3, #28]
    4582:	4798      	blx	r3
    4584:	b140      	cbz	r0, 4598 <FsCache::sync() [clone .part.0]+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
    4586:	7823      	ldrb	r3, [r4, #0]
    4588:	4605      	mov	r5, r0
    458a:	079a      	lsls	r2, r3, #30
    458c:	d407      	bmi.n	459e <FsCache::sync() [clone .part.0]+0x2e>
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    458e:	f023 0301 	bic.w	r3, r3, #1
  }
  return true;

 fail:
  return false;
}
    4592:	4628      	mov	r0, r5
      if (!m_blockDev->writeSector(sector, m_buffer)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status &= ~CACHE_STATUS_DIRTY;
    4594:	7023      	strb	r3, [r4, #0]
  }
  return true;

 fail:
  return false;
}
    4596:	bd70      	pop	{r4, r5, r6, pc}
    m_status &= ~CACHE_STATUS_DIRTY;
  }
  return true;

 fail:
  return false;
    4598:	2500      	movs	r5, #0
}
    459a:	4628      	mov	r0, r5
    459c:	bd70      	pop	{r4, r5, r6, pc}
      goto fail;
    }
    // mirror second FAT
    if (m_status & CACHE_STATUS_MIRROR_FAT) {
      uint32_t sector = m_sector + m_mirrorOffset;
      if (!m_blockDev->writeSector(sector, m_buffer)) {
    459e:	6860      	ldr	r0, [r4, #4]
    45a0:	4632      	mov	r2, r6
    45a2:	68a1      	ldr	r1, [r4, #8]
    45a4:	68e6      	ldr	r6, [r4, #12]
    45a6:	6803      	ldr	r3, [r0, #0]
    45a8:	4431      	add	r1, r6
    45aa:	69db      	ldr	r3, [r3, #28]
    45ac:	4798      	blx	r3
    45ae:	2800      	cmp	r0, #0
    45b0:	d0f2      	beq.n	4598 <FsCache::sync() [clone .part.0]+0x28>
    45b2:	7823      	ldrb	r3, [r4, #0]
    45b4:	e7eb      	b.n	458e <FsCache::sync() [clone .part.0]+0x1e>
    45b6:	bf00      	nop

000045b8 <FsCache::get(unsigned long, unsigned char)>:
 */
#define DBG_FILE "FsCache.cpp"
#include "DebugMacros.h"
#include "FsCache.h"
//------------------------------------------------------------------------------
uint8_t* FsCache::get(uint32_t sector, uint8_t option) {
    45b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (!m_blockDev) {
    45ba:	6843      	ldr	r3, [r0, #4]
    45bc:	b1fb      	cbz	r3, 45fe <FsCache::get(unsigned long, unsigned char)+0x46>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    45be:	68c3      	ldr	r3, [r0, #12]
    45c0:	4604      	mov	r4, r0
    45c2:	4615      	mov	r5, r2
    45c4:	460f      	mov	r7, r1
    45c6:	428b      	cmp	r3, r1
    45c8:	d00e      	beq.n	45e8 <FsCache::get(unsigned long, unsigned char)+0x30>
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    45ca:	7803      	ldrb	r3, [r0, #0]
    45cc:	07da      	lsls	r2, r3, #31
    45ce:	d412      	bmi.n	45f6 <FsCache::get(unsigned long, unsigned char)+0x3e>
  if (m_sector != sector) {
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
    45d0:	076b      	lsls	r3, r5, #29
    45d2:	d516      	bpl.n	4602 <FsCache::get(unsigned long, unsigned char)+0x4a>
    45d4:	f104 0610 	add.w	r6, r4, #16
    45d8:	2200      	movs	r2, #0
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    45da:	f005 0503 	and.w	r5, r5, #3
    45de:	4630      	mov	r0, r6
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_status = 0;
    m_sector = sector;
    45e0:	60e7      	str	r7, [r4, #12]
  }
  m_status |= option & CACHE_STATUS_MASK;
    45e2:	4315      	orrs	r5, r2
    45e4:	7025      	strb	r5, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    45e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45e8:	f910 2b10 	ldrsb.w	r2, [r0], #16
      }
    }
    m_status = 0;
    m_sector = sector;
  }
  m_status |= option & CACHE_STATUS_MASK;
    45ec:	f005 0503 	and.w	r5, r5, #3
    45f0:	4315      	orrs	r5, r2
    45f2:	7025      	strb	r5, [r4, #0]
  return m_buffer;

 fail:
  return nullptr;
}
    45f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    45f6:	f7ff ffbb 	bl	4570 <FsCache::sync() [clone .part.0]>
  if (!m_blockDev) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_sector != sector) {
    if (!sync()) {
    45fa:	2800      	cmp	r0, #0
    45fc:	d1e8      	bne.n	45d0 <FsCache::get(unsigned long, unsigned char)+0x18>
  }
  m_status |= option & CACHE_STATUS_MASK;
  return m_buffer;

 fail:
  return nullptr;
    45fe:	2000      	movs	r0, #0
    4600:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (!sync()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(option & CACHE_OPTION_NO_READ)) {
      if (!m_blockDev->readSector(sector, m_buffer)) {
    4602:	6860      	ldr	r0, [r4, #4]
    4604:	f104 0610 	add.w	r6, r4, #16
    4608:	4639      	mov	r1, r7
    460a:	6803      	ldr	r3, [r0, #0]
    460c:	4632      	mov	r2, r6
    460e:	68db      	ldr	r3, [r3, #12]
    4610:	4798      	blx	r3
    4612:	2800      	cmp	r0, #0
    4614:	d1e0      	bne.n	45d8 <FsCache::get(unsigned long, unsigned char)+0x20>
    4616:	e7f2      	b.n	45fe <FsCache::get(unsigned long, unsigned char)+0x46>

00004618 <FsCache::sync()>:
 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FsCache::sync() {
  if (m_status & CACHE_STATUS_DIRTY) {
    4618:	7803      	ldrb	r3, [r0, #0]
    461a:	07db      	lsls	r3, r3, #31
    461c:	d401      	bmi.n	4622 <FsCache::sync()+0xa>
  }
  return true;

 fail:
  return false;
}
    461e:	2001      	movs	r0, #1
    4620:	4770      	bx	lr
    4622:	f7ff bfa5 	b.w	4570 <FsCache::sync() [clone .part.0]>
    4626:	bf00      	nop

00004628 <ExFatFile::close()>:
#include "../common/DebugMacros.h"
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
    4628:	b510      	push	{r4, lr}
    462a:	4604      	mov	r4, r0
  bool rtn = sync();
    462c:	f000 fd88 	bl	5140 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4630:	2300      	movs	r3, #0
    4632:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_flags = 0;
    4636:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
  return rtn;
}
    463a:	bd10      	pop	{r4, pc}

0000463c <ExFatFile::isBusy()>:
 fail:
  *name = 0;
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatFile::isBusy() {
    463c:	6a03      	ldr	r3, [r0, #32]
    463e:	f8d3 0440 	ldr.w	r0, [r3, #1088]	; 0x440
  /**
   * Check for BlockDevice busy.
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
    4642:	6803      	ldr	r3, [r0, #0]
    4644:	689b      	ldr	r3, [r3, #8]
    4646:	4718      	bx	r3

00004648 <ExFatFile::openRoot(ExFatVolume*)>:
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    4648:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    464c:	b10a      	cbz	r2, 4652 <ExFatFile::openRoot(ExFatVolume*)+0xa>
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
    464e:	2000      	movs	r0, #0
    4650:	4770      	bx	lr
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRoot(ExFatVolume* vol) {
    4652:	b538      	push	{r3, r4, r5, lr}
    4654:	460d      	mov	r5, r1
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4656:	4611      	mov	r1, r2
    4658:	2238      	movs	r2, #56	; 0x38
    465a:	4604      	mov	r4, r0
    465c:	f006 fee6 	bl	b42c <memset>
  m_attributes = FILE_ATTR_ROOT;
    4660:	2340      	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4662:	2001      	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4664:	6225      	str	r5, [r4, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4666:	f884 3031 	strb.w	r3, [r4, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    466a:	f884 0033 	strb.w	r0, [r4, #51]	; 0x33
    466e:	bd38      	pop	{r3, r4, r5, pc}

00004670 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    4670:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  ExChar_t c;
  int end;
  int len = 0;

  // Skip leading spaces.
  while (*path == ' ') {
    4674:	7808      	ldrb	r0, [r1, #0]
    4676:	2820      	cmp	r0, #32
    4678:	d103      	bne.n	4682 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x12>
    467a:	f811 0f01 	ldrb.w	r0, [r1, #1]!
    467e:	2820      	cmp	r0, #32
    4680:	d0fb      	beq.n	467a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    4682:	6051      	str	r1, [r2, #4]

  for (len = 0; ; len++) {
    c = path[len];
    4684:	7808      	ldrb	r0, [r1, #0]
    if (c == 0 || isDirSeparator(c)) {
    4686:	282f      	cmp	r0, #47	; 0x2f
    4688:	d064      	beq.n	4754 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
    468a:	2800      	cmp	r0, #0
    468c:	d062      	beq.n	4754 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xe4>
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    468e:	285c      	cmp	r0, #92	; 0x5c
    4690:	d025      	beq.n	46de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    4692:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    4696:	b2e4      	uxtb	r4, r4
    4698:	2c1a      	cmp	r4, #26
    469a:	d923      	bls.n	46e4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x74>
    469c:	1c4d      	adds	r5, r1, #1
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::parsePathName(const ExChar_t* path,
                            ExName_t* fname, const ExChar_t** ptr) {
    469e:	2600      	movs	r6, #0
    46a0:	f8df e0c4 	ldr.w	lr, [pc, #196]	; 4768 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>
    46a4:	e003      	b.n	46ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    46a6:	2c1a      	cmp	r4, #26
    46a8:	fa2e f704 	lsr.w	r7, lr, r4
    46ac:	d922      	bls.n	46f4 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x84>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    46ae:	f1a0 043e 	sub.w	r4, r0, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    46b2:	3601      	adds	r6, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    46b4:	f1a0 0c20 	sub.w	ip, r0, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    46b8:	46a8      	mov	r8, r5
    46ba:	2c01      	cmp	r4, #1
    46bc:	4637      	mov	r7, r6
    46be:	d90e      	bls.n	46de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    46c0:	287c      	cmp	r0, #124	; 0x7c
    46c2:	d00c      	beq.n	46de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    46c4:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
    46c8:	d809      	bhi.n	46de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    46ca:	f815 0b01 	ldrb.w	r0, [r5], #1
 * \param[in] c character to be tested.
 *
 * \return true for legal character else false.
 */
inline bool lfnLegalChar(ExChar_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    46ce:	f1a0 0422 	sub.w	r4, r0, #34	; 0x22
    if (c == 0 || isDirSeparator(c)) {
    46d2:	b1a0      	cbz	r0, 46fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    46d4:	282f      	cmp	r0, #47	; 0x2f
    46d6:	b2e4      	uxtb	r4, r4
    46d8:	d011      	beq.n	46fe <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x8e>
    46da:	285c      	cmp	r0, #92	; 0x5c
    46dc:	d1e3      	bne.n	46a6 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x36>
      break;
    }
    if (!lfnLegalChar(c)) {
      return false;
    46de:	2000      	movs	r0, #0
    46e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46e4:	4d20      	ldr	r5, [pc, #128]	; (4768 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf8>)
    46e6:	fa25 f404 	lsr.w	r4, r5, r4
    46ea:	07e5      	lsls	r5, r4, #31
    46ec:	d5d6      	bpl.n	469c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x2c>
    46ee:	2000      	movs	r0, #0
    46f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    46f4:	07fc      	lsls	r4, r7, #31
    46f6:	d5da      	bpl.n	46ae <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x3e>
    46f8:	2000      	movs	r0, #0
    46fa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    46fe:	282f      	cmp	r0, #47	; 0x2f
    4700:	d001      	beq.n	4706 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
    4702:	2820      	cmp	r0, #32
    4704:	d123      	bne.n	474e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xde>
    4706:	1c70      	adds	r0, r6, #1
    4708:	4408      	add	r0, r1
    470a:	4605      	mov	r5, r0
    470c:	f810 4b01 	ldrb.w	r4, [r0], #1
    4710:	2c20      	cmp	r4, #32
    4712:	d0fa      	beq.n	470a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
    4714:	2c2f      	cmp	r4, #47	; 0x2f
    4716:	d0f8      	beq.n	470a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x9a>
  *ptr = &path[end];
    4718:	601d      	str	r5, [r3, #0]

  // Back over spaces and dots.
  while (len) {
    471a:	b19e      	cbz	r6, 4744 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd4>
    c = path[len - 1];
    471c:	440f      	add	r7, r1
    471e:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    4722:	2b20      	cmp	r3, #32
    4724:	d001      	beq.n	472a <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xba>
    4726:	2b2e      	cmp	r3, #46	; 0x2e
    4728:	d10a      	bne.n	4740 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd0>
    472a:	1e73      	subs	r3, r6, #1
    472c:	4419      	add	r1, r3
      break;
    }
    len--;
    472e:	461e      	mov	r6, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    4730:	b14b      	cbz	r3, 4746 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    c = path[len - 1];
    4732:	f811 0d01 	ldrb.w	r0, [r1, #-1]!
    4736:	3b01      	subs	r3, #1
    if (c != '.' && c != ' ') {
    4738:	282e      	cmp	r0, #46	; 0x2e
    473a:	d0f8      	beq.n	472e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
    473c:	2820      	cmp	r0, #32
    473e:	d0f6      	beq.n	472e <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xbe>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    4740:	2eff      	cmp	r6, #255	; 0xff
    4742:	dccc      	bgt.n	46de <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x6e>
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    4744:	4633      	mov	r3, r6
  }
  // Max length of LFN is 255.
  if (len > EXFAT_MAX_NAME_LENGTH) {
    return false;
  }
  fname->len = len;
    4746:	6013      	str	r3, [r2, #0]
  return true;
    4748:	2001      	movs	r0, #1
    474a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    474e:	f8c3 8000 	str.w	r8, [r3]
    4752:	e7e3      	b.n	471c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xac>
    if (!lfnLegalChar(c)) {
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    4754:	2820      	cmp	r0, #32
    4756:	d001      	beq.n	475c <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xec>
    4758:	282f      	cmp	r0, #47	; 0x2f
    475a:	d102      	bne.n	4762 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xf2>
    475c:	2700      	movs	r7, #0
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    475e:	463e      	mov	r6, r7
    4760:	e7d1      	b.n	4706 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0x96>
      return false;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    4762:	6019      	str	r1, [r3, #0]
    4764:	2300      	movs	r3, #0
    4766:	e7ee      	b.n	4746 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)+0xd6>
    4768:	05000101 	.word	0x05000101

0000476c <ExFatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int ExFatFile::read(void* buf, size_t count) {
    476c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4770:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    4774:	b083      	sub	sp, #12
    4776:	4605      	mov	r5, r0
  uint8_t* cache;
  uint16_t sectorOffset;
  uint32_t sector;
  uint32_t clusterOffset;

  if (!isReadable()) {
    4778:	07de      	lsls	r6, r3, #31
    477a:	d560      	bpl.n	483e <ExFatFile::read(void*, unsigned int)+0xd2>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    477c:	065c      	lsls	r4, r3, #25
    477e:	460e      	mov	r6, r1
    4780:	4691      	mov	r9, r2
    4782:	f140 80be 	bpl.w	4902 <ExFatFile::read(void*, unsigned int)+0x196>
    if ((m_curPosition + count) > m_validLength) {
    4786:	e9d5 0100 	ldrd	r0, r1, [r5]
    478a:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    478e:	eb10 0a09 	adds.w	sl, r0, r9
    4792:	f141 0b00 	adc.w	fp, r1, #0
    4796:	455b      	cmp	r3, fp
    4798:	bf08      	it	eq
    479a:	4552      	cmpeq	r2, sl
    479c:	f0c0 80b7 	bcc.w	490e <ExFatFile::read(void*, unsigned int)+0x1a2>
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    47a0:	f1b9 0f00 	cmp.w	r9, #0
    47a4:	d074      	beq.n	4890 <ExFatFile::read(void*, unsigned int)+0x124>
    47a6:	46aa      	mov	sl, r5
    47a8:	464c      	mov	r4, r9
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    47aa:	f240 17ff 	movw	r7, #511	; 0x1ff
    47ae:	e8fa 0106 	ldrd	r0, r1, [sl], #24
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    47b2:	6a2b      	ldr	r3, [r5, #32]
    47b4:	f8d3 2438 	ldr.w	r2, [r3, #1080]	; 0x438
    47b8:	ea02 0800 	and.w	r8, r2, r0
    sectorOffset = clusterOffset & m_vol->sectorMask();
    47bc:	f3c8 0b08 	ubfx	fp, r8, #0, #9
    if (clusterOffset == 0) {
    47c0:	f1b8 0f00 	cmp.w	r8, #0
    47c4:	d16a      	bne.n	489c <ExFatFile::read(void*, unsigned int)+0x130>
      if (m_curPosition == 0) {
    47c6:	ea50 0201 	orrs.w	r2, r0, r1
    47ca:	d179      	bne.n	48c0 <ExFatFile::read(void*, unsigned int)+0x154>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
    47cc:	f895 2031 	ldrb.w	r2, [r5, #49]	; 0x31
    47d0:	0651      	lsls	r1, r2, #25
    47d2:	bf4c      	ite	mi
    47d4:	f8d3 1434 	ldrmi.w	r1, [r3, #1076]	; 0x434
    47d8:	69e9      	ldrpl	r1, [r5, #28]
      } else if (isContiguous()) {
        m_curCluster++;
    47da:	61a9      	str	r1, [r5, #24]
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    47dc:	ea4f 2058 	mov.w	r0, r8, lsr #9
    47e0:	3902      	subs	r1, #2
    47e2:	f8d3 242c 	ldr.w	r2, [r3, #1068]	; 0x42c
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    47e6:	42bc      	cmp	r4, r7
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    47e8:	f893 e445 	ldrb.w	lr, [r3, #1093]	; 0x445
          goto fail;
        }
      }
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    47ec:	4402      	add	r2, r0
    47ee:	fa01 f10e 	lsl.w	r1, r1, lr
    47f2:	4411      	add	r1, r2
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
    47f4:	d92e      	bls.n	4854 <ExFatFile::read(void*, unsigned int)+0xe8>
    47f6:	f1bb 0f00 	cmp.w	fp, #0
    47fa:	d12b      	bne.n	4854 <ExFatFile::read(void*, unsigned int)+0xe8>
    47fc:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
                          || sector == m_vol->dataCacheSector()) {
    4800:	4291      	cmp	r1, r2
    4802:	d027      	beq.n	4854 <ExFatFile::read(void*, unsigned int)+0xe8>
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    4804:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
    4808:	d361      	bcc.n	48ce <ExFatFile::read(void*, unsigned int)+0x162>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    480a:	f04f 0c01 	mov.w	ip, #1
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    480e:	ea4f 2854 	mov.w	r8, r4, lsr #9
      // Limit reads to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    4812:	fa0c fe0e 	lsl.w	lr, ip, lr
    4816:	ebc0 000e 	rsb	r0, r0, lr
    481a:	4580      	cmp	r8, r0
    481c:	bf28      	it	cs
    481e:	4680      	movcs	r8, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    4820:	4291      	cmp	r1, r2
    4822:	d83d      	bhi.n	48a0 <ExFatFile::read(void*, unsigned int)+0x134>
    4824:	eb01 0008 	add.w	r0, r1, r8
    4828:	4282      	cmp	r2, r0
    482a:	d239      	bcs.n	48a0 <ExFatFile::read(void*, unsigned int)+0x134>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    482c:	f503 7004 	add.w	r0, r3, #528	; 0x210
    4830:	9101      	str	r1, [sp, #4]
    4832:	9300      	str	r3, [sp, #0]
    4834:	f7ff fef0 	bl	4618 <FsCache::sync()>
    4838:	9b00      	ldr	r3, [sp, #0]
    483a:	9901      	ldr	r1, [sp, #4]
    483c:	bb80      	cbnz	r0, 48a0 <ExFatFile::read(void*, unsigned int)+0x134>
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    483e:	f895 3032 	ldrb.w	r3, [r5, #50]	; 0x32
  return -1;
    4842:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return count - toRead;

 fail:
  m_error |= READ_ERROR;
    4846:	f043 0302 	orr.w	r3, r3, #2
    484a:	f885 3032 	strb.w	r3, [r5, #50]	; 0x32
  return -1;
}
    484e:	b003      	add	sp, #12
    4850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    4854:	f503 7004 	add.w	r0, r3, #528	; 0x210
    4858:	2200      	movs	r2, #0
    485a:	f7ff fead 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      cache = m_vol->dataCacheGet(sector, FsCache::CACHE_FOR_READ);
      if (!cache) {
    485e:	2800      	cmp	r0, #0
    4860:	d0ed      	beq.n	483e <ExFatFile::read(void*, unsigned int)+0xd2>
    }
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    if (sectorOffset != 0 || toRead < m_vol->bytesPerSector()
                          || sector == m_vol->dataCacheSector()) {
      n = m_vol->bytesPerSector() - sectorOffset;
    4862:	f5cb 7800 	rsb	r8, fp, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = cache + sectorOffset;
      memcpy(dst, src, n);
    4866:	eb00 010b 	add.w	r1, r0, fp
    486a:	4630      	mov	r0, r6
    486c:	45a0      	cmp	r8, r4
    486e:	bf28      	it	cs
    4870:	46a0      	movcs	r8, r4
    4872:	4642      	mov	r2, r8
    4874:	f004 f8ee 	bl	8a54 <memcpy>
    4878:	4640      	mov	r0, r8
    487a:	2100      	movs	r1, #0
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    487c:	4446      	add	r6, r8
    m_curPosition += n;
    487e:	e9d5 2300 	ldrd	r2, r3, [r5]
    4882:	1880      	adds	r0, r0, r2
    4884:	4159      	adcs	r1, r3
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    4886:	ebb4 0408 	subs.w	r4, r4, r8
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    488a:	e9c5 0100 	strd	r0, r1, [r5]
  if (isContiguous() || isFile()) {
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    }
  }
  while (toRead) {
    488e:	d190      	bne.n	47b2 <ExFatFile::read(void*, unsigned int)+0x46>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    4890:	2400      	movs	r4, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return count - toRead;
    4892:	ebc4 0009 	rsb	r0, r4, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    4896:	b003      	add	sp, #12
    4898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    489c:	69a9      	ldr	r1, [r5, #24]
    489e:	e79d      	b.n	47dc <ExFatFile::read(void*, unsigned int)+0x70>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    48a0:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
    48a4:	4632      	mov	r2, r6
    48a6:	4643      	mov	r3, r8
    48a8:	f8d0 e000 	ldr.w	lr, [r0]
    48ac:	f8de b010 	ldr.w	fp, [lr, #16]
    48b0:	47d8      	blx	fp
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
     if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    48b2:	2800      	cmp	r0, #0
    48b4:	d0c3      	beq.n	483e <ExFatFile::read(void*, unsigned int)+0xd2>
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    48b6:	ea4f 2848 	mov.w	r8, r8, lsl #9
    48ba:	2100      	movs	r1, #0
    48bc:	4640      	mov	r0, r8
    48be:	e7dd      	b.n	487c <ExFatFile::read(void*, unsigned int)+0x110>
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      if (m_curPosition == 0) {
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
    48c0:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
    48c4:	0652      	lsls	r2, r2, #25
    48c6:	d510      	bpl.n	48ea <ExFatFile::read(void*, unsigned int)+0x17e>
        m_curCluster++;
    48c8:	69a9      	ldr	r1, [r5, #24]
    48ca:	3101      	adds	r1, #1
    48cc:	e785      	b.n	47da <ExFatFile::read(void*, unsigned int)+0x6e>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    48ce:	f8d3 0214 	ldr.w	r0, [r3, #532]	; 0x214
    48d2:	4632      	mov	r2, r6
    48d4:	6803      	ldr	r3, [r0, #0]
    48d6:	68db      	ldr	r3, [r3, #12]
    48d8:	4798      	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    48da:	2800      	cmp	r0, #0
    48dc:	d0af      	beq.n	483e <ExFatFile::read(void*, unsigned int)+0xd2>
    48de:	f44f 7000 	mov.w	r0, #512	; 0x200
    48e2:	2100      	movs	r1, #0
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    48e4:	f44f 7800 	mov.w	r8, #512	; 0x200
    48e8:	e7c8      	b.n	487c <ExFatFile::read(void*, unsigned int)+0x110>
        m_curCluster = isRoot()
                       ? m_vol->rootDirectoryCluster() : m_firstCluster;
      } else if (isContiguous()) {
        m_curCluster++;
      } else {
        fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    48ea:	4618      	mov	r0, r3
    48ec:	4652      	mov	r2, sl
    48ee:	69a9      	ldr	r1, [r5, #24]
    48f0:	f000 fffe 	bl	58f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    48f4:	b240      	sxtb	r0, r0
        if (fg < 0) {
    48f6:	2800      	cmp	r0, #0
    48f8:	dba1      	blt.n	483e <ExFatFile::read(void*, unsigned int)+0xd2>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
    48fa:	d00b      	beq.n	4914 <ExFatFile::read(void*, unsigned int)+0x1a8>
    48fc:	6a2b      	ldr	r3, [r5, #32]
    48fe:	69a9      	ldr	r1, [r5, #24]
    4900:	e76c      	b.n	47dc <ExFatFile::read(void*, unsigned int)+0x70>

  if (!isReadable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isContiguous() || isFile()) {
    4902:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
    4906:	0718      	lsls	r0, r3, #28
    4908:	f53f af3d 	bmi.w	4786 <ExFatFile::read(void*, unsigned int)+0x1a>
    490c:	e748      	b.n	47a0 <ExFatFile::read(void*, unsigned int)+0x34>
    if ((m_curPosition + count) > m_validLength) {
      count = toRead = m_validLength - m_curPosition;
    490e:	ebc0 0902 	rsb	r9, r0, r2
    4912:	e745      	b.n	47a0 <ExFatFile::read(void*, unsigned int)+0x34>
          DBG_FAIL_MACRO;
          goto fail;
        }
        if (fg == 0) {
          // EOF if directory.
          if (isDir()) {
    4914:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    4918:	f013 0f50 	tst.w	r3, #80	; 0x50
    491c:	d1b9      	bne.n	4892 <ExFatFile::read(void*, unsigned int)+0x126>
    491e:	e78e      	b.n	483e <ExFatFile::read(void*, unsigned int)+0xd2>

00004920 <ExFatFile::peek()>:
  }
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
    4920:	b5f0      	push	{r4, r5, r6, r7, lr}
    4922:	b083      	sub	sp, #12
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    4924:	2201      	movs	r2, #1
    4926:	4604      	mov	r4, r0
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
    4928:	6985      	ldr	r5, [r0, #24]
    492a:	f10d 0107 	add.w	r1, sp, #7
  fname->len = len;
  return true;
}
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
    492e:	e9d0 6700 	ldrd	r6, r7, [r0]
    4932:	f7ff ff1b 	bl	476c <ExFatFile::read(void*, unsigned int)>
    4936:	2801      	cmp	r0, #1
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
  m_curCluster = curCluster;
    4938:	61a5      	str	r5, [r4, #24]
    493a:	bf0c      	ite	eq
    493c:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    4940:	f04f 30ff 	movne.w	r0, #4294967295
//------------------------------------------------------------------------------
int ExFatFile::peek() {
  uint64_t curPosition = m_curPosition;
  uint32_t curCluster = m_curCluster;
  int c = read();
  m_curPosition = curPosition;
    4944:	e9c4 6700 	strd	r6, r7, [r4]
  m_curCluster = curCluster;
  return c;
}
    4948:	b003      	add	sp, #12
    494a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000494c <ExFatFile::seekSet(unsigned long long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::seekSet(uint64_t pos) {
    494c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4950:	f890 e031 	ldrb.w	lr, [r0, #49]	; 0x31
    4954:	b085      	sub	sp, #20
    4956:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    4958:	6985      	ldr	r5, [r0, #24]
  // error if file not open
  if (!isOpen()) {
    495a:	f1be 0f00 	cmp.w	lr, #0
    495e:	d036      	beq.n	49ce <ExFatFile::seekSet(unsigned long long)+0x82>
    4960:	4616      	mov	r6, r2
    4962:	461f      	mov	r7, r3
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4964:	e9d0 0100 	ldrd	r0, r1, [r0]
    4968:	4299      	cmp	r1, r3
    496a:	bf08      	it	eq
    496c:	4290      	cmpeq	r0, r2
    496e:	d065      	beq.n	4a3c <ExFatFile::seekSet(unsigned long long)+0xf0>
    return true;
  }
  if (pos == 0) {
    4970:	ea56 0307 	orrs.w	r3, r6, r7
    4974:	d130      	bne.n	49d8 <ExFatFile::seekSet(unsigned long long)+0x8c>
    // set position to start of file
    m_curCluster = 0;
    4976:	2300      	movs	r3, #0
    4978:	61a3      	str	r3, [r4, #24]
    }
  }

 done:
  m_curPosition = pos;
  return true;
    497a:	2001      	movs	r0, #1
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    497c:	e9c4 6700 	strd	r6, r7, [r4]
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    4980:	b005      	add	sp, #20
    4982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    4986:	f110 32ff 	adds.w	r2, r0, #4294967295
    498a:	f141 33ff 	adc.w	r3, r1, #4294967295
    498e:	fa22 fc0c 	lsr.w	ip, r2, ip
    4992:	fa03 f808 	lsl.w	r8, r3, r8
    4996:	fa23 fa0a 	lsr.w	sl, r3, sl
  if (nNew < nCur || m_curPosition == 0) {
    499a:	ea50 0301 	orrs.w	r3, r0, r1
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
    499e:	ea4c 0c08 	orr.w	ip, ip, r8
    49a2:	ea4c 0c0a 	orr.w	ip, ip, sl
  if (nNew < nCur || m_curPosition == 0) {
    49a6:	d04b      	beq.n	4a40 <ExFatFile::seekSet(unsigned long long)+0xf4>
    49a8:	45e3      	cmp	fp, ip
    49aa:	d349      	bcc.n	4a40 <ExFatFile::seekSet(unsigned long long)+0xf4>
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    49ac:	ebcc 0b0b 	rsb	fp, ip, fp
    49b0:	46a9      	mov	r9, r5
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    49b2:	f104 0818 	add.w	r8, r4, #24
    49b6:	465d      	mov	r5, fp
    49b8:	4642      	mov	r2, r8
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    49ba:	2d00      	cmp	r5, #0
    49bc:	d0dd      	beq.n	497a <ExFatFile::seekSet(unsigned long long)+0x2e>
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    49be:	69a1      	ldr	r1, [r4, #24]
    49c0:	3d01      	subs	r5, #1
    49c2:	6a20      	ldr	r0, [r4, #32]
    49c4:	f000 ff94 	bl	58f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    49c8:	2800      	cmp	r0, #0
    49ca:	d1f5      	bne.n	49b8 <ExFatFile::seekSet(unsigned long long)+0x6c>
    49cc:	464d      	mov	r5, r9
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
  return false;
    49ce:	2000      	movs	r0, #0
 done:
  m_curPosition = pos;
  return true;

 fail:
  m_curCluster = tmp;
    49d0:	61a5      	str	r5, [r4, #24]
  return false;
}
    49d2:	b005      	add	sp, #20
    49d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    49d8:	f01e 0f08 	tst.w	lr, #8
    49dc:	d127      	bne.n	4a2e <ExFatFile::seekSet(unsigned long long)+0xe2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    49de:	6a23      	ldr	r3, [r4, #32]
    49e0:	f116 38ff 	adds.w	r8, r6, #4294967295
    49e4:	f893 c445 	ldrb.w	ip, [r3, #1093]	; 0x445
    49e8:	f147 39ff 	adc.w	r9, r7, #4294967295
    49ec:	46c2      	mov	sl, r8
    49ee:	9303      	str	r3, [sp, #12]
    49f0:	f10c 0c09 	add.w	ip, ip, #9
    49f4:	46cb      	mov	fp, r9
  if (isContiguous()) {
    49f6:	f894 9033 	ldrb.w	r9, [r4, #51]	; 0x33
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    49fa:	fa5f fc8c 	uxtb.w	ip, ip
  if (isContiguous()) {
    49fe:	f019 0f40 	tst.w	r9, #64	; 0x40
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> m_vol->bytesPerClusterShift();
    4a02:	f1cc 0820 	rsb	r8, ip, #32
    4a06:	fa2a f20c 	lsr.w	r2, sl, ip
    4a0a:	e9cd ab00 	strd	sl, fp, [sp]
    4a0e:	9b01      	ldr	r3, [sp, #4]
    4a10:	f1ac 0a20 	sub.w	sl, ip, #32
    4a14:	fa03 fb08 	lsl.w	fp, r3, r8
    4a18:	fa23 f30a 	lsr.w	r3, r3, sl
    4a1c:	ea42 020b 	orr.w	r2, r2, fp
    4a20:	ea42 0b03 	orr.w	fp, r2, r3
  if (isContiguous()) {
    4a24:	d0af      	beq.n	4986 <ExFatFile::seekSet(unsigned long long)+0x3a>
    m_curCluster = m_firstCluster + nNew;
    4a26:	69e3      	ldr	r3, [r4, #28]
    4a28:	445b      	add	r3, fp
    4a2a:	61a3      	str	r3, [r4, #24]
    goto done;
    4a2c:	e7a5      	b.n	497a <ExFatFile::seekSet(unsigned long long)+0x2e>
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_validLength) {
    4a2e:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    4a32:	42bb      	cmp	r3, r7
    4a34:	bf08      	it	eq
    4a36:	42b2      	cmpeq	r2, r6
    4a38:	d3c9      	bcc.n	49ce <ExFatFile::seekSet(unsigned long long)+0x82>
    4a3a:	e7d0      	b.n	49de <ExFatFile::seekSet(unsigned long long)+0x92>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    4a3c:	2001      	movs	r0, #1
    4a3e:	e7c8      	b.n	49d2 <ExFatFile::seekSet(unsigned long long)+0x86>
  }
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> m_vol->bytesPerClusterShift();
  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot() ? m_vol->rootDirectoryCluster() : m_firstCluster;
    4a40:	f01e 0f40 	tst.w	lr, #64	; 0x40
    4a44:	d102      	bne.n	4a4c <ExFatFile::seekSet(unsigned long long)+0x100>
    4a46:	69e3      	ldr	r3, [r4, #28]
    4a48:	61a3      	str	r3, [r4, #24]
    4a4a:	e7b1      	b.n	49b0 <ExFatFile::seekSet(unsigned long long)+0x64>
    4a4c:	9b03      	ldr	r3, [sp, #12]
    4a4e:	f8d3 3434 	ldr.w	r3, [r3, #1076]	; 0x434
    4a52:	e7f9      	b.n	4a48 <ExFatFile::seekSet(unsigned long long)+0xfc>

00004a54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4a54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4a58:	469a      	mov	sl, r3
    4a5a:	b093      	sub	sp, #76	; 0x4c
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4a5c:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
    4a60:	4605      	mov	r5, r0
    4a62:	9200      	str	r2, [sp, #0]
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;

  // error if already open
  if (isOpen() || !dir->isDir()) {
    4a64:	b92b      	cbnz	r3, 4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4a66:	f891 3031 	ldrb.w	r3, [r1, #49]	; 0x31
    4a6a:	460e      	mov	r6, r1
    4a6c:	f013 0f50 	tst.w	r3, #80	; 0x50
    4a70:	d108      	bne.n	4a84 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x30>
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    4a72:	2300      	movs	r3, #0
  m_flags = 0;
  return false;
    4a74:	4618      	mov	r0, r3
  return sync();
#endif  // READ_ONLY
 fail:

  // close file
  m_attributes = FILE_ATTR_CLOSED;
    4a76:	f885 3031 	strb.w	r3, [r5, #49]	; 0x31
  m_flags = 0;
    4a7a:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
  return false;
}
    4a7e:	b013      	add	sp, #76	; 0x4c
    4a80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4a84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4a86:	f003 0303 	and.w	r3, r3, #3
    4a8a:	2b01      	cmp	r3, #1
    4a8c:	d006      	beq.n	4a9c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x48>
    4a8e:	2b02      	cmp	r3, #2
    4a90:	f000 8109 	beq.w	4ca6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x252>
    4a94:	2b00      	cmp	r3, #0
    4a96:	d1ec      	bne.n	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4a98:	2301      	movs	r3, #1
    4a9a:	e000      	b.n	4a9e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
    4a9c:	2302      	movs	r3, #2
      break;
    default:
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
    4a9e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    4aa0:	f002 0208 	and.w	r2, r2, #8
    4aa4:	4313      	orrs	r3, r2
    4aa6:	9301      	str	r3, [sp, #4]
  if (name) {
    4aa8:	9b00      	ldr	r3, [sp, #0]
    4aaa:	2b00      	cmp	r3, #0
    4aac:	f000 80fd 	beq.w	4caa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x256>
    nameHash = exFatHashName(name, nameLength, 0);
    4ab0:	4618      	mov	r0, r3
    4ab2:	2200      	movs	r2, #0
    4ab4:	4651      	mov	r1, sl
    4ab6:	f001 f81b 	bl	5af0 <exFatHashName(char const*, unsigned int, unsigned short)>
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    4aba:	f896 3031 	ldrb.w	r3, [r6, #49]	; 0x31
      DBG_FAIL_MACRO;
      goto fail;
  }
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    4abe:	9002      	str	r0, [sp, #8]
bool ExFatFile::seekSet(uint64_t pos) {
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
  // error if file not open
  if (!isOpen()) {
    4ac0:	b14b      	cbz	r3, 4ad6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    4ac2:	e9d6 2300 	ldrd	r2, r3, [r6]
    4ac6:	4313      	orrs	r3, r2
    4ac8:	d005      	beq.n	4ad6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    4aca:	2100      	movs	r1, #0
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    4acc:	2200      	movs	r2, #0
    4ace:	2300      	movs	r3, #0
  if (pos == m_curPosition) {
    return true;
  }
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    4ad0:	61b1      	str	r1, [r6, #24]
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    4ad2:	e9c6 2300 	strd	r2, r3, [r6]
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4ad6:	f10a 030e 	add.w	r3, sl, #14
    4ada:	49b8      	ldr	r1, [pc, #736]	; (4dbc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x368>)
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
  uint8_t freeNeed;
  bool inSet = false;
    4adc:	f04f 0900 	mov.w	r9, #0
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4ae0:	fb81 2103 	smull	r2, r1, r1, r3
    4ae4:	17da      	asrs	r2, r3, #31

  DirFile_t*   dirFile;
  DirStream_t* dirStream;
  DirName_t*   dirName;
  uint8_t buf[32];
  uint8_t freeCount = 0;
    4ae6:	464c      	mov	r4, r9
}
//------------------------------------------------------------------------------
bool ExFatFile::openRootFile(ExFatFile* dir, const ExChar_t* name,
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
    4ae8:	464f      	mov	r7, r9
  modeFlags |= oflag & O_APPEND ? FILE_FLAG_APPEND : 0;
  if (name) {
    nameHash = exFatHashName(name, nameLength, 0);
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;
    4aea:	440b      	add	r3, r1
    4aec:	ebc2 03e3 	rsb	r3, r2, r3, asr #3
    4af0:	b2db      	uxtb	r3, r3
    4af2:	9303      	str	r3, [sp, #12]
    4af4:	3302      	adds	r3, #2
    4af6:	fa5f fb83 	uxtb.w	fp, r3

  while (1) {
    n = dir->read(buf, 32);
    4afa:	2220      	movs	r2, #32
    4afc:	a90a      	add	r1, sp, #40	; 0x28
    4afe:	4630      	mov	r0, r6
    4b00:	f7ff fe34 	bl	476c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4b04:	2800      	cmp	r0, #0
    4b06:	d03d      	beq.n	4b84 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      goto create;
    }
    if (n != 32) {
    4b08:	2820      	cmp	r0, #32
    4b0a:	d1b2      	bne.n	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
    4b0c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
    4b10:	061a      	lsls	r2, r3, #24
    4b12:	d466      	bmi.n	4be2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x18e>
      if (freeCount == 0) {
    4b14:	2c00      	cmp	r4, #0
    4b16:	d161      	bne.n	4bdc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x188>
        freePos.position = dir->curPosition() - 32;
    4b18:	6832      	ldr	r2, [r6, #0]
        freePos.cluster = dir->curCluster();
    4b1a:	69b1      	ldr	r1, [r6, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4b1c:	3a20      	subs	r2, #32
        freePos.cluster = dir->curCluster();
    4b1e:	9107      	str	r1, [sp, #28]
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
    4b20:	9208      	str	r2, [sp, #32]
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
        freeCount++;
    4b22:	3401      	adds	r4, #1
    4b24:	b2e4      	uxtb	r4, r4
      }
      if (!buf[0]) {
    4b26:	b36b      	cbz	r3, 4b84 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x130>
      if (buf[0] != EXFAT_TYPE_FILE) {
        continue;
      }
      inSet = true;
    }
    switch (buf[0]) {
    4b28:	2bc0      	cmp	r3, #192	; 0xc0
    4b2a:	f000 8093 	beq.w	4c54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x200>
    4b2e:	2bc1      	cmp	r3, #193	; 0xc1
    4b30:	d062      	beq.n	4bf8 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1a4>
    4b32:	2b85      	cmp	r3, #133	; 0x85
    4b34:	d1e1      	bne.n	4afa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
    4b36:	2238      	movs	r2, #56	; 0x38
    4b38:	2100      	movs	r1, #0
    4b3a:	4628      	mov	r0, r5
    4b3c:	f006 fc76 	bl	b42c <memset>
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4b40:	f89d 302c 	ldrb.w	r3, [sp, #44]	; 0x2c
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    4b44:	f89d 2029 	ldrb.w	r2, [sp, #41]	; 0x29
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
    4b48:	06d8      	lsls	r0, r3, #27
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4b4a:	4630      	mov	r0, r6
    }
    switch (buf[0]) {
      case EXFAT_TYPE_FILE:
        memset(this, 0, sizeof(ExFatFile));
        dirFile = reinterpret_cast<DirFile_t*>(buf);
        m_setCount = dirFile->setCount;
    4b4c:	f885 2030 	strb.w	r2, [r5, #48]	; 0x30
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
    4b50:	f003 0237 	and.w	r2, r3, #55	; 0x37
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
    4b54:	bf58      	it	pl
    4b56:	f042 0208 	orrpl.w	r2, r2, #8
    4b5a:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4b5e:	6833      	ldr	r3, [r6, #0]
    4b60:	6a31      	ldr	r1, [r6, #32]
    4b62:	69b2      	ldr	r2, [r6, #24]
    4b64:	3b20      	subs	r3, #32
        m_setCount = dirFile->setCount;
        m_attributes = getLe16(dirFile->attributes) & FILE_ATTR_COPY;
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();
    4b66:	6229      	str	r1, [r5, #32]
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4b68:	a90a      	add	r1, sp, #40	; 0x28
        if (!(m_attributes & EXFAT_ATTRIB_DIRECTORY)) {
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
    4b6a:	626a      	str	r2, [r5, #36]	; 0x24
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4b6c:	2220      	movs	r2, #32
          m_attributes |= FILE_ATTR_FILE;
        }
        m_vol = dir->volume();

        m_dirPos.cluster = dir->curCluster();
        m_dirPos.position = dir->curPosition() - 32;
    4b6e:	62ab      	str	r3, [r5, #40]	; 0x28
        m_dirPos.isContiguous = dir->isContiguous();
    4b70:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    4b74:	f3c3 1380 	ubfx	r3, r3, #6, #1
    4b78:	f885 302c 	strb.w	r3, [r5, #44]	; 0x2c
    dir->rewind();
  }
  freeNeed = 2 + (nameLength + 14)/15;

  while (1) {
    n = dir->read(buf, 32);
    4b7c:	f7ff fdf6 	bl	476c <ExFatFile::read(void*, unsigned int)>
    if (n == 0) {
    4b80:	2800      	cmp	r0, #0
    4b82:	d1c1      	bne.n	4b08 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xb4>
#if READ_ONLY
  DBG_FAIL_MACRO;
  goto fail;
#else  // READ_ONLY
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    4b84:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4b86:	0599      	lsls	r1, r3, #22
    4b88:	f57f af73 	bpl.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4b8c:	9b01      	ldr	r3, [sp, #4]
    4b8e:	079a      	lsls	r2, r3, #30
    4b90:	f57f af6f 	bpl.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4b94:	9b00      	ldr	r3, [sp, #0]
    4b96:	2b00      	cmp	r3, #0
    4b98:	f43f af6b 	beq.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4b9c:	455c      	cmp	r4, fp
    4b9e:	d30c      	bcc.n	4bba <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x166>
    4ba0:	e086      	b.n	4cb0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
        goto fail;
      }
      dir->m_curCluster = curCluster;
      continue;
    }
    if (n != 32) {
    4ba2:	2820      	cmp	r0, #32
    4ba4:	f47f af65 	bne.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
    4ba8:	b924      	cbnz	r4, 4bb4 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x160>
      freePos.position = dir->curPosition() - 32;
    4baa:	6832      	ldr	r2, [r6, #0]
      freePos.cluster = dir->curCluster();
    4bac:	69b1      	ldr	r1, [r6, #24]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    4bae:	3a20      	subs	r2, #32
      freePos.cluster = dir->curCluster();
    4bb0:	9107      	str	r1, [sp, #28]
    if (n != 32) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
    4bb2:	9208      	str	r2, [sp, #32]
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    4bb4:	b2dc      	uxtb	r4, r3
  // don't create unless O_CREAT and write
  if (!(oflag & O_CREAT) || !(modeFlags & FILE_FLAG_WRITE) || !name) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    4bb6:	45a3      	cmp	fp, r4
    4bb8:	d97a      	bls.n	4cb0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x25c>
    n = dir->read(buf, 32);
    4bba:	2220      	movs	r2, #32
    4bbc:	a90a      	add	r1, sp, #40	; 0x28
    4bbe:	4630      	mov	r0, r6
    4bc0:	f7ff fdd4 	bl	476c <ExFatFile::read(void*, unsigned int)>
    }
    if (freeCount == 0) {
      freePos.position = dir->curPosition() - 32;
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
    4bc4:	1c63      	adds	r3, r4, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
    4bc6:	2800      	cmp	r0, #0
    4bc8:	d1eb      	bne.n	4ba2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x14e>
      curCluster = dir->m_curCluster;
      if (!dir->addDirCluster()) {
    4bca:	4630      	mov	r0, r6
    goto fail;
  }
  while (freeCount < freeNeed) {
    n = dir->read(buf, 32);
    if (n == 0) {
      curCluster = dir->m_curCluster;
    4bcc:	69b7      	ldr	r7, [r6, #24]
      if (!dir->addDirCluster()) {
    4bce:	f000 fae7 	bl	51a0 <ExFatFile::addDirCluster()>
    4bd2:	2800      	cmp	r0, #0
    4bd4:	f43f af4d 	beq.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
        DBG_FAIL_MACRO;
        goto fail;
      }
      dir->m_curCluster = curCluster;
    4bd8:	61b7      	str	r7, [r6, #24]
      continue;
    4bda:	e7ec      	b.n	4bb6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x162>
    if (!(buf[0] & 0x80)) {
      if (freeCount == 0) {
        freePos.position = dir->curPosition() - 32;
        freePos.cluster = dir->curCluster();
      }
      if (freeCount < freeNeed) {
    4bdc:	455c      	cmp	r4, fp
    4bde:	d2a2      	bcs.n	4b26 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd2>
    4be0:	e79f      	b.n	4b22 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xce>
        freeCount++;
      }
      if (!buf[0]) {
        goto create;
      }
    } else if (!inSet) {
    4be2:	f1b9 0f00 	cmp.w	r9, #0
    4be6:	d19f      	bne.n	4b28 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xd4>
      if (freeCount < freeNeed) {
        freeCount = 0;
    4be8:	455c      	cmp	r4, fp
    4bea:	bf38      	it	cc
    4bec:	2400      	movcc	r4, #0
      }
      if (buf[0] != EXFAT_TYPE_FILE) {
    4bee:	2b85      	cmp	r3, #133	; 0x85
    4bf0:	d183      	bne.n	4afa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        continue;
      }
      inSet = true;
    4bf2:	f04f 0901 	mov.w	r9, #1
    4bf6:	e79e      	b.n	4b36 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xe2>
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    4bf8:	ebc7 080a 	rsb	r8, r7, sl
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    4bfc:	463a      	mov	r2, r7
    4bfe:	9900      	ldr	r1, [sp, #0]
    4c00:	a80a      	add	r0, sp, #40	; 0x28
        }
        break;

      case EXFAT_TYPE_NAME:
        dirName = reinterpret_cast<DirName_t*>(buf);
        nCmp = nameLength - nameOffset;
    4c02:	fa5f f888 	uxtb.w	r8, r8
    4c06:	f1b8 0f0f 	cmp.w	r8, #15
    4c0a:	bf28      	it	cs
    4c0c:	f04f 080f 	movcs.w	r8, #15
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
    4c10:	4643      	mov	r3, r8
    4c12:	f000 ff3f 	bl	5a94 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>
    4c16:	2800      	cmp	r0, #0
    4c18:	d03c      	beq.n	4c94 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x240>
          inSet = false;
          break;
        }
        nameOffset += nCmp;
    4c1a:	4447      	add	r7, r8
    4c1c:	b2ff      	uxtb	r7, r7

        if (nameOffset == nameLength) {
    4c1e:	45ba      	cmp	sl, r7
    4c20:	f47f af6b 	bne.w	4afa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    4c24:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4c26:	051b      	lsls	r3, r3, #20
    4c28:	f53f af23 	bmi.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    4c2c:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4c2e:	f413 4f88 	tst.w	r3, #17408	; 0x4400
    4c32:	f040 80a0 	bne.w	4d76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
    4c36:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    4c3a:	079f      	lsls	r7, r3, #30
    4c3c:	f100 809b 	bmi.w	4d76 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x322>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4c40:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4c42:	055b      	lsls	r3, r3, #21
    4c44:	f53f af15 	bmi.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4c48:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4c4a:	0458      	lsls	r0, r3, #17
    4c4c:	f100 80b8 	bmi.w	4dc0 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x36c>
    DBG_FAIL_MACRO;
    goto fail;
  }
#endif  // READ_ONLY
  return true;
    4c50:	2001      	movs	r0, #1
    4c52:	e714      	b.n	4a7e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4c54:	f89d 3029 	ldrb.w	r3, [sp, #41]	; 0x29
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4c58:	9a01      	ldr	r2, [sp, #4]
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4c5a:	0799      	lsls	r1, r3, #30
        m_dirPos.isContiguous = dir->isContiguous();
        break;

      case EXFAT_TYPE_STREAM:
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
    4c5c:	f885 2033 	strb.w	r2, [r5, #51]	; 0x33
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
    4c60:	d503      	bpl.n	4c6a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x216>
          m_flags |= FILE_FLAG_CONTIGUOUS;
    4c62:	f042 0340 	orr.w	r3, r2, #64	; 0x40
    4c66:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
    4c6a:	990f      	ldr	r1, [sp, #60]	; 0x3c
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4c6c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
        m_firstCluster = getLe32(dirStream->firstCluster);
    4c70:	61e9      	str	r1, [r5, #28]
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
    4c72:	e9c5 2304 	strd	r2, r3, [r5, #16]
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4c76:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
        if (!name) {
    4c7a:	9b00      	ldr	r3, [sp, #0]
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
        m_validLength = getLe64(dirStream->validLength);
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
    4c7c:	e9c5 0102 	strd	r0, r1, [r5, #8]
        if (!name) {
    4c80:	2b00      	cmp	r3, #0
    4c82:	d0cf      	beq.n	4c24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1d0>
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4c84:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    4c88:	4553      	cmp	r3, sl
    4c8a:	d005      	beq.n	4c98 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x244>
            nameHash != getLe16(dirStream->nameHash)) {
          inSet = false;
    4c8c:	f04f 0900 	mov.w	r9, #0
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4c90:	464f      	mov	r7, r9
    4c92:	e732      	b.n	4afa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        nCmp = nameLength - nameOffset;
        if (nCmp > 15) {
          nCmp = 15;
        }
        if (!exFatCmpName(dirName, name, nameOffset, nCmp)) {
          inSet = false;
    4c94:	4681      	mov	r9, r0
    4c96:	e730      	b.n	4afa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
        m_firstCluster = getLe32(dirStream->firstCluster);
        m_dataLength = getLe64(dirStream->dataLength);
        if (!name) {
          goto found;
        }
        if (nameLength != dirStream->nameLength ||
    4c98:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
    4c9c:	9a02      	ldr	r2, [sp, #8]
    4c9e:	4293      	cmp	r3, r2
    4ca0:	d1f4      	bne.n	4c8c <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x238>
        dirStream = reinterpret_cast<DirStream_t*>(buf);
        m_flags = modeFlags;
        if (dirStream->flags & EXFAT_FLAG_CONTIGUOUS) {
          m_flags |= FILE_FLAG_CONTIGUOUS;
        }
        nameOffset = 0;
    4ca2:	2700      	movs	r7, #0
    4ca4:	e729      	b.n	4afa <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0xa6>
  // error if already open
  if (isOpen() || !dir->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  switch (oflag & O_ACCMODE) {
    4ca6:	2303      	movs	r3, #3
    4ca8:	e6f9      	b.n	4a9e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x4a>
                          uint8_t nameLength, oflag_t oflag) {
  int n;
  uint8_t nameOffset = 0;
  uint8_t nCmp;
  uint8_t modeFlags;
  uint16_t nameHash = 0;
    4caa:	9b00      	ldr	r3, [sp, #0]
    4cac:	9302      	str	r3, [sp, #8]
    4cae:	e712      	b.n	4ad6 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x82>
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4cb0:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
  memset(this, 0, sizeof(ExFatFile));
    4cb4:	2100      	movs	r1, #0
    4cb6:	2238      	movs	r2, #56	; 0x38
    4cb8:	4628      	mov	r0, r5
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4cba:	f3c3 1380 	ubfx	r3, r3, #6, #1
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4cbe:	460f      	mov	r7, r1

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4cc0:	f10d 081c 	add.w	r8, sp, #28
    4cc4:	f105 0424 	add.w	r4, r5, #36	; 0x24
      freePos.cluster = dir->curCluster();
    }
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
    4cc8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
  memset(this, 0, sizeof(ExFatFile));
    4ccc:	f006 fbae 	bl	b42c <memset>
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4cd0:	9a03      	ldr	r2, [sp, #12]
    4cd2:	6a33      	ldr	r3, [r6, #32]
    4cd4:	f10a 061e 	add.w	r6, sl, #30
    4cd8:	f102 0901 	add.w	r9, r2, #1
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
    4cdc:	2208      	movs	r2, #8
    freeCount++;
  }

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
    4cde:	622b      	str	r3, [r5, #32]
    4ce0:	b2f6      	uxtb	r6, r6
  m_attributes = FILE_ATTR_FILE;
    4ce2:	f885 2031 	strb.w	r2, [r5, #49]	; 0x31
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4ce6:	fa5f f989 	uxtb.w	r9, r9
    4cea:	f8cd a00c 	str.w	sl, [sp, #12]
    4cee:	f8dd a000 	ldr.w	sl, [sp]

  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
    4cf2:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
    4cf6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    4cfa:	4618      	mov	r0, r3
      if (1 != m_vol->dirSeek(&freePos, 32)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    cache = m_vol->dirCache(&freePos, FsCache::CACHE_FOR_WRITE);
    4cfc:	2201      	movs	r2, #1
    4cfe:	4641      	mov	r1, r8
    4d00:	f000 fdae 	bl	5860 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache || (cache[0] & 0x80)) {
    4d04:	4604      	mov	r4, r0
    4d06:	2800      	cmp	r0, #0
    4d08:	f43f aeb3 	beq.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4d0c:	f990 3000 	ldrsb.w	r3, [r0]
    4d10:	2b00      	cmp	r3, #0
    4d12:	f6ff aeae 	blt.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    memset(cache, 0 , 32);
    4d16:	2220      	movs	r2, #32
    4d18:	2100      	movs	r1, #0
    4d1a:	f006 fb87 	bl	b42c <memset>
    if (i == 0) {
    4d1e:	2f00      	cmp	r7, #0
    4d20:	d067      	beq.n	4df2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x39e>
         setLe16(dirFile->createTime, FS_DEFAULT_TIME);
         setLe16(dirFile->modifyTime, FS_DEFAULT_TIME);
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
    4d22:	2f01      	cmp	r7, #1
    4d24:	d055      	beq.n	4dd2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x37e>
    4d26:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
    4d2a:	2e0f      	cmp	r6, #15

      dirStream->nameLength = nameLength;
      setLe16(dirStream->nameHash, nameHash);
    } else {
      dirName = reinterpret_cast<DirName_t*>(cache);
      dirName->type = EXFAT_TYPE_NAME;
    4d2c:	f04f 01c1 	mov.w	r1, #193	; 0xc1
    4d30:	4632      	mov	r2, r6
    4d32:	f1a3 031e 	sub.w	r3, r3, #30
    4d36:	bf28      	it	cs
    4d38:	220f      	movcs	r2, #15
    4d3a:	7021      	strb	r1, [r4, #0]
    4d3c:	b2db      	uxtb	r3, r3
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4d3e:	b152      	cbz	r2, 4d56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
    4d40:	3402      	adds	r4, #2
    4d42:	b212      	sxth	r2, r2
    4d44:	4453      	add	r3, sl
    4d46:	eb04 0242 	add.w	r2, r4, r2, lsl #1
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
    4d4a:	f813 1b01 	ldrb.w	r1, [r3], #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    4d4e:	f824 1b02 	strh.w	r1, [r4], #2
      nameOffset = 15*(i - 2);
      nCmp = nameLength - nameOffset;
      if (nCmp > 15) {
        nCmp = 15;
      }
      for (size_t k = 0; k < nCmp; k++) {
    4d52:	42a2      	cmp	r2, r4
    4d54:	d1f9      	bne.n	4d4a <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2f6>
  freePos.isContiguous = dir->isContiguous();
  memset(this, 0, sizeof(ExFatFile));
  m_vol = dir->volume();
  m_attributes = FILE_ATTR_FILE;
  m_dirPos = freePos;
  for (uint8_t i = 0; i < freeNeed; i++) {
    4d56:	3701      	adds	r7, #1
    4d58:	b2ff      	uxtb	r7, r7
    4d5a:	45bb      	cmp	fp, r7
    4d5c:	d929      	bls.n	4db2 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x35e>
    if (i) {
      if (1 != m_vol->dirSeek(&freePos, 32)) {
    4d5e:	2220      	movs	r2, #32
    4d60:	4641      	mov	r1, r8
    4d62:	6a28      	ldr	r0, [r5, #32]
    4d64:	f000 fd98 	bl	5898 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    4d68:	2801      	cmp	r0, #1
    4d6a:	f47f ae82 	bne.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4d6e:	3e0f      	subs	r6, #15
    4d70:	6a28      	ldr	r0, [r5, #32]
    4d72:	b2f6      	uxtb	r6, r6
    4d74:	e7c2      	b.n	4cfc <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a8>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Write, truncate, or at end is an error for a directory or read-only file.
  if ((oflag & (O_TRUNC | O_AT_END)) || (m_flags & FILE_FLAG_WRITE)) {
    if (isSubDir() || isReadOnly() || READ_ONLY) {
    4d76:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    4d7a:	f013 0f11 	tst.w	r3, #17
    4d7e:	f47f ae78 	bne.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      goto fail;
    }
  }

#if !READ_ONLY
  if (oflag & O_TRUNC) {
    4d82:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    4d84:	055e      	lsls	r6, r3, #21
    4d86:	f57f af5f 	bpl.w	4c48 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1f4>
    if (!(m_flags & FILE_FLAG_WRITE)) {
    4d8a:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
    4d8e:	079c      	lsls	r4, r3, #30
    4d90:	f57f ae6f 	bpl.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
   * \param[in] length The desired length for the file.
   *
   * \return true for success or false for failure.
   */
  bool truncate(uint64_t length) {
    return seekSet(length) && truncate();
    4d94:	2200      	movs	r2, #0
    4d96:	2300      	movs	r3, #0
    4d98:	4628      	mov	r0, r5
    4d9a:	f7ff fdd7 	bl	494c <ExFatFile::seekSet(unsigned long long)>
    4d9e:	2800      	cmp	r0, #0
    4da0:	f43f ae67 	beq.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4da4:	4628      	mov	r0, r5
    4da6:	f000 fab5 	bl	5314 <ExFatFile::truncate()>
    4daa:	2800      	cmp	r0, #0
    4dac:	f43f ae61 	beq.w	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
    4db0:	e74e      	b.n	4c50 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
      for (size_t k = 0; k < nCmp; k++) {
        setLe16(dirName->unicode + 2*k, name[k + nameOffset]);
      }
    }
  }
  return sync();
    4db2:	4628      	mov	r0, r5
    4db4:	f000 f9c4 	bl	5140 <ExFatFile::sync()>
    4db8:	e661      	b.n	4a7e <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x2a>
    4dba:	bf00      	nop
    4dbc:	88888889 	.word	0x88888889
    }
    if (!truncate(0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if ((oflag & O_AT_END) && !seekSet(fileSize())) {
    4dc0:	4628      	mov	r0, r5
    4dc2:	e9d5 2304 	ldrd	r2, r3, [r5, #16]
    4dc6:	f7ff fdc1 	bl	494c <ExFatFile::seekSet(unsigned long long)>
    4dca:	2800      	cmp	r0, #0
    4dcc:	f47f af40 	bne.w	4c50 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1fc>
    4dd0:	e64f      	b.n	4a72 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x1e>
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4dd2:	9b01      	ldr	r3, [sp, #4]
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4dd4:	21c0      	movs	r1, #192	; 0xc0
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4dd6:	2203      	movs	r2, #3
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4dd8:	f063 033f 	orn	r3, r3, #63	; 0x3f
         setLe16(dirFile->accessTime, FS_DEFAULT_TIME);
       }
      }
    } else if (i == 1) {
      dirStream = reinterpret_cast<DirStream_t*>(cache);
      dirStream->type = EXFAT_TYPE_STREAM;
    4ddc:	7021      	strb	r1, [r4, #0]
      dirStream->flags = EXFAT_FLAG_ALWAYS1 | EXFAT_FLAG_CONTIGUOUS;
    4dde:	7062      	strb	r2, [r4, #1]
      m_flags = modeFlags | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    4de0:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33

      dirStream->nameLength = nameLength;
    4de4:	f89d 300c 	ldrb.w	r3, [sp, #12]
    4de8:	70e3      	strb	r3, [r4, #3]
    4dea:	f8bd 3008 	ldrh.w	r3, [sp, #8]
    4dee:	80a3      	strh	r3, [r4, #4]
    4df0:	e7b1      	b.n	4d56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
      goto fail;
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
    4df2:	2385      	movs	r3, #133	; 0x85
    4df4:	7023      	strb	r3, [r4, #0]
      m_setCount = freeNeed - 1;
      dirFile->setCount = m_setCount;

      if (FsDateTime::callback) {
    4df6:	4b0e      	ldr	r3, [pc, #56]	; (4e30 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3dc>)
    }
    memset(cache, 0 , 32);
    if (i == 0) {
      dirFile = reinterpret_cast<DirFile_t*>(cache);
      dirFile->type = EXFAT_TYPE_FILE;
      m_setCount = freeNeed - 1;
    4df8:	f885 9030 	strb.w	r9, [r5, #48]	; 0x30
      dirFile->setCount = m_setCount;
    4dfc:	f884 9001 	strb.w	r9, [r4, #1]

      if (FsDateTime::callback) {
    4e00:	681b      	ldr	r3, [r3, #0]
    4e02:	b17b      	cbz	r3, 4e24 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x3d0>
        uint16_t date, time;
        uint8_t ms10;
        FsDateTime::callback(&date, &time, &ms10);
    4e04:	f10d 0217 	add.w	r2, sp, #23
    4e08:	f10d 011a 	add.w	r1, sp, #26
    4e0c:	a806      	add	r0, sp, #24
    4e0e:	4798      	blx	r3
    4e10:	f8bd 1018 	ldrh.w	r1, [sp, #24]
    4e14:	f8bd 201a 	ldrh.w	r2, [sp, #26]
        setLe16(dirFile->createDate, date);
        setLe16(dirFile->createTime, time);
        dirFile->createTimeMs = ms10;
    4e18:	f89d 3017 	ldrb.w	r3, [sp, #23]
    4e1c:	8161      	strh	r1, [r4, #10]
    4e1e:	8122      	strh	r2, [r4, #8]
    4e20:	7523      	strb	r3, [r4, #20]
    4e22:	e798      	b.n	4d56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
    4e24:	f245 2321 	movw	r3, #21025	; 0x5221
    4e28:	8163      	strh	r3, [r4, #10]
    4e2a:	81e3      	strh	r3, [r4, #14]
    4e2c:	8263      	strh	r3, [r4, #18]
    4e2e:	e792      	b.n	4d56 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)+0x302>
    4e30:	20036c3c 	.word	0x20036c3c

00004e34 <ExFatFile::open(ExFatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4e34:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4e38:	4606      	mov	r6, r0
    4e3a:	b095      	sub	sp, #84	; 0x54
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    4e3c:	2000      	movs	r0, #0
    4e3e:	460d      	mov	r5, r1
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4e40:	f896 1031 	ldrb.w	r1, [r6, #49]	; 0x31
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatFile* dirFile, const ExChar_t* path, oflag_t oflag) {
    4e44:	9203      	str	r2, [sp, #12]
    4e46:	f88d 0049 	strb.w	r0, [sp, #73]	; 0x49
    4e4a:	f88d 004a 	strb.w	r0, [sp, #74]	; 0x4a
    4e4e:	f88d 004b 	strb.w	r0, [sp, #75]	; 0x4b
  ExFatFile tmpDir;
  ExName_t fname;
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    4e52:	b929      	cbnz	r1, 4e60 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
    4e54:	4699      	mov	r9, r3
    4e56:	f895 3031 	ldrb.w	r3, [r5, #49]	; 0x31
    4e5a:	f013 0f50 	tst.w	r3, #80	; 0x50
    4e5e:	d103      	bne.n	4e68 <ExFatFile::open(ExFatFile*, char const*, int)+0x34>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    4e60:	2000      	movs	r0, #0
}
    4e62:	b015      	add	sp, #84	; 0x54
    4e64:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    4e68:	7813      	ldrb	r3, [r2, #0]
    4e6a:	4614      	mov	r4, r2
    4e6c:	2b2f      	cmp	r3, #47	; 0x2f
    4e6e:	d035      	beq.n	4edc <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
  uint8_t setCount() const {return m_setCount;}
  bool mkdir(ExFatFile* parent, ExName_t* fname);
  bool openRootFile(ExFatFile* dir,
                    const ExChar_t* name, uint8_t nameLength, oflag_t oflag);
  bool open(ExFatFile* dirFile, ExName_t* fname, oflag_t oflag) {
    return openRootFile(dirFile, fname->lfn, fname->len, oflag);
    4e70:	f04f 0800 	mov.w	r8, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    4e74:	4621      	mov	r1, r4
    4e76:	ab03      	add	r3, sp, #12
    4e78:	aa04      	add	r2, sp, #16
    4e7a:	4630      	mov	r0, r6
    4e7c:	f7ff fbf8 	bl	4670 <ExFatFile::parsePathName(char const*, ExName_t*, char const**)>
    4e80:	2800      	cmp	r0, #0
    4e82:	d0ed      	beq.n	4e60 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    4e84:	9b03      	ldr	r3, [sp, #12]
    4e86:	781b      	ldrb	r3, [r3, #0]
    4e88:	2b00      	cmp	r3, #0
    4e8a:	d03c      	beq.n	4f06 <ExFatFile::open(ExFatFile*, char const*, int)+0xd2>
    4e8c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4e90:	4629      	mov	r1, r5
    4e92:	9a05      	ldr	r2, [sp, #20]
    4e94:	4630      	mov	r0, r6
    4e96:	f8cd 8000 	str.w	r8, [sp]
    4e9a:	f7ff fddb 	bl	4a54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    4e9e:	2800      	cmp	r0, #0
    4ea0:	d0de      	beq.n	4e60 <ExFatFile::open(ExFatFile*, char const*, int)+0x2c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    4ea2:	4634      	mov	r4, r6
    4ea4:	af06      	add	r7, sp, #24
    4ea6:	f106 0e30 	add.w	lr, r6, #48	; 0x30
    4eaa:	6820      	ldr	r0, [r4, #0]
    4eac:	3410      	adds	r4, #16
    4eae:	f854 1c0c 	ldr.w	r1, [r4, #-12]
    4eb2:	463d      	mov	r5, r7
    4eb4:	f854 2c08 	ldr.w	r2, [r4, #-8]
    4eb8:	3710      	adds	r7, #16
    4eba:	f854 3c04 	ldr.w	r3, [r4, #-4]
    4ebe:	4574      	cmp	r4, lr
    4ec0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    4ec2:	d1f2      	bne.n	4eaa <ExFatFile::open(ExFatFile*, char const*, int)+0x76>
    4ec4:	6820      	ldr	r0, [r4, #0]
    dirFile = &tmpDir;
    4ec6:	ad06      	add	r5, sp, #24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    4ec8:	6038      	str	r0, [r7, #0]
#include "ExFatFile.h"
#include "ExFatVolume.h"
#include "upcase.h"
//------------------------------------------------------------------------------
bool ExFatFile::close() {
  bool rtn = sync();
    4eca:	4630      	mov	r0, r6
    4ecc:	f000 f938 	bl	5140 <ExFatFile::sync()>
  m_attributes = FILE_ATTR_CLOSED;
    4ed0:	f886 8031 	strb.w	r8, [r6, #49]	; 0x31
  m_flags = 0;
    4ed4:	f886 8033 	strb.w	r8, [r6, #51]	; 0x33
    4ed8:	9c03      	ldr	r4, [sp, #12]
    4eda:	e7cb      	b.n	4e74 <ExFatFile::open(ExFatFile*, char const*, int)+0x40>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    4edc:	3401      	adds	r4, #1
    4ede:	9403      	str	r4, [sp, #12]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    4ee0:	7821      	ldrb	r1, [r4, #0]
    4ee2:	292f      	cmp	r1, #47	; 0x2f
    4ee4:	d0fa      	beq.n	4edc <ExFatFile::open(ExFatFile*, char const*, int)+0xa8>
      path++;
    }
    if (*path == 0) {
    4ee6:	b1d1      	cbz	r1, 4f1e <ExFatFile::open(ExFatFile*, char const*, int)+0xea>
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4ee8:	a806      	add	r0, sp, #24
    4eea:	2238      	movs	r2, #56	; 0x38
    4eec:	2100      	movs	r1, #0
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    4eee:	6a2f      	ldr	r7, [r5, #32]
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    4ef0:	4605      	mov	r5, r0
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4ef2:	f006 fa9b 	bl	b42c <memset>
  m_attributes = FILE_ATTR_ROOT;
    4ef6:	2240      	movs	r2, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4ef8:	2301      	movs	r3, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4efa:	970e      	str	r7, [sp, #56]	; 0x38
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4efc:	f88d 2049 	strb.w	r2, [sp, #73]	; 0x49
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4f00:	f88d 304b 	strb.w	r3, [sp, #75]	; 0x4b
    4f04:	e7b4      	b.n	4e70 <ExFatFile::open(ExFatFile*, char const*, int)+0x3c>
    4f06:	f89d 3010 	ldrb.w	r3, [sp, #16]
    4f0a:	4629      	mov	r1, r5
    4f0c:	9a05      	ldr	r2, [sp, #20]
    4f0e:	4630      	mov	r0, r6
    4f10:	f8cd 9000 	str.w	r9, [sp]
    4f14:	f7ff fd9e 	bl	4a54 <ExFatFile::openRootFile(ExFatFile*, char const*, unsigned char, int)>
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
}
    4f18:	b015      	add	sp, #84	; 0x54
    4f1a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4f1e:	2238      	movs	r2, #56	; 0x38
    4f20:	4630      	mov	r0, r6
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    }
    if (*path == 0) {
      return openRoot(dirFile->m_vol);
    4f22:	6a2c      	ldr	r4, [r5, #32]
bool ExFatFile::openRoot(ExFatVolume* vol) {
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
    4f24:	f006 fa82 	bl	b42c <memset>
  m_attributes = FILE_ATTR_ROOT;
    4f28:	2340      	movs	r3, #64	; 0x40
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4f2a:	2001      	movs	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
  m_vol = vol;
    4f2c:	6234      	str	r4, [r6, #32]
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(ExFatFile));
  m_attributes = FILE_ATTR_ROOT;
    4f2e:	f886 3031 	strb.w	r3, [r6, #49]	; 0x31
  m_vol = vol;
  m_flags = FILE_FLAG_READ;
    4f32:	f886 0033 	strb.w	r0, [r6, #51]	; 0x33
    4f36:	e794      	b.n	4e62 <ExFatFile::open(ExFatFile*, char const*, int)+0x2e>

00004f38 <ExFatFile::open(ExFatVolume*, char const*, int)>:
bool ExFatFile::open(const ExChar_t* path, int oflag) {
  return open(ExFatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool ExFatFile::open(ExFatVolume* vol, const ExChar_t* path, int oflag) {
  return vol && open(vol->vwd(), path, oflag);
    4f38:	b119      	cbz	r1, 4f42 <ExFatFile::open(ExFatVolume*, char const*, int)+0xa>
    4f3a:	f501 6189 	add.w	r1, r1, #1096	; 0x448
    4f3e:	f7ff bf79 	b.w	4e34 <ExFatFile::open(ExFatFile*, char const*, int)>
}
    4f42:	4608      	mov	r0, r1
    4f44:	4770      	bx	lr
    4f46:	bf00      	nop

00004f48 <ExFatFile::addCluster()>:
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4f48:	6981      	ldr	r1, [r0, #24]
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
    4f4a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4f4c:	4604      	mov	r4, r0
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4f4e:	6a00      	ldr	r0, [r0, #32]
    4f50:	b101      	cbz	r1, 4f54 <ExFatFile::addCluster()+0xc>
    4f52:	3101      	adds	r1, #1
    4f54:	2201      	movs	r2, #1
    4f56:	f000 fbb7 	bl	56c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    4f5a:	2801      	cmp	r0, #1
  }
  return checksum;
}
//------------------------------------------------------------------------------
bool ExFatFile::addCluster() {
  uint32_t find = m_vol->bitmapFind(m_curCluster ?  m_curCluster + 1 : 0, 1);
    4f5c:	4606      	mov	r6, r0
  if (find < 2) {
    4f5e:	d92e      	bls.n	4fbe <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, 1, 1)) {
    4f60:	2301      	movs	r3, #1
    4f62:	4601      	mov	r1, r0
    4f64:	6a20      	ldr	r0, [r4, #32]
    4f66:	461a      	mov	r2, r3
    4f68:	f000 fc08 	bl	577c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    4f6c:	4607      	mov	r7, r0
    4f6e:	b330      	cbz	r0, 4fbe <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    4f70:	69a3      	ldr	r3, [r4, #24]
    4f72:	b33b      	cbz	r3, 4fc4 <ExFatFile::addCluster()+0x7c>
    4f74:	f894 2033 	ldrb.w	r2, [r4, #51]	; 0x33
    m_flags |= FILE_FLAG_CONTIGUOUS;
    goto done;
  }
  if (isContiguous()) {
    4f78:	0651      	lsls	r1, r2, #25
    4f7a:	d512      	bpl.n	4fa2 <ExFatFile::addCluster()+0x5a>
    if (find == (m_curCluster + 1)) {
    4f7c:	1c59      	adds	r1, r3, #1
    4f7e:	428e      	cmp	r6, r1
    4f80:	d026      	beq.n	4fd0 <ExFatFile::addCluster()+0x88>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4f82:	f022 0240 	bic.w	r2, r2, #64	; 0x40

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4f86:	69e1      	ldr	r1, [r4, #28]
  if (isContiguous()) {
    if (find == (m_curCluster + 1)) {
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    4f88:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
    4f8c:	e005      	b.n	4f9a <ExFatFile::addCluster()+0x52>

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
      if (!m_vol->fatPut(c, c + 1)) {
    4f8e:	6a20      	ldr	r0, [r4, #32]
    4f90:	f000 fcb8 	bl	5904 <ExFatPartition::fatPut(unsigned long, unsigned long)>
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4f94:	4629      	mov	r1, r5
      if (!m_vol->fatPut(c, c + 1)) {
    4f96:	b190      	cbz	r0, 4fbe <ExFatFile::addCluster()+0x76>
    4f98:	69a3      	ldr	r3, [r4, #24]
    4f9a:	1c4d      	adds	r5, r1, #1
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4f9c:	4299      	cmp	r1, r3
      if (!m_vol->fatPut(c, c + 1)) {
    4f9e:	462a      	mov	r2, r5
      goto done;
    }
    // No longer contiguous so make FAT chain.
    m_flags &= ~FILE_FLAG_CONTIGUOUS;

    for (uint32_t c = m_firstCluster; c < m_curCluster; c++) {
    4fa0:	d3f5      	bcc.n	4f8e <ExFatFile::addCluster()+0x46>
        goto fail;
      }
    }
  }
  // New cluster is EOC.
  if (!m_vol->fatPut(find, EXFAT_EOC)) {
    4fa2:	f04f 32ff 	mov.w	r2, #4294967295
    4fa6:	4631      	mov	r1, r6
    4fa8:	6a20      	ldr	r0, [r4, #32]
    4faa:	f000 fcab 	bl	5904 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4fae:	b130      	cbz	r0, 4fbe <ExFatFile::addCluster()+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Connect new cluster to existing chain.
  if (m_curCluster) {
    4fb0:	69a1      	ldr	r1, [r4, #24]
    4fb2:	b169      	cbz	r1, 4fd0 <ExFatFile::addCluster()+0x88>
    if (!m_vol->fatPut(m_curCluster, find)) {
    4fb4:	4632      	mov	r2, r6
    4fb6:	6a20      	ldr	r0, [r4, #32]
    4fb8:	f000 fca4 	bl	5904 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    4fbc:	b940      	cbnz	r0, 4fd0 <ExFatFile::addCluster()+0x88>
 done:
  m_curCluster = find;
  return true;

 fail:
  return false;
    4fbe:	2700      	movs	r7, #0
}
    4fc0:	4638      	mov	r0, r7
    4fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!m_vol->bitmapModify(find, 1, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_curCluster == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    4fc4:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    4fc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4fcc:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
      goto fail;
    }
  }

 done:
  m_curCluster = find;
    4fd0:	61a6      	str	r6, [r4, #24]
  return true;

 fail:
  return false;
}
    4fd2:	4638      	mov	r0, r7
    4fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4fd6:	bf00      	nop

00004fd8 <ExFatFile::syncDir()>:
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4fd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4fdc:	2700      	movs	r7, #0
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4fde:	b087      	sub	sp, #28
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4fe0:	f100 0b24 	add.w	fp, r0, #36	; 0x24
 fail:
  m_error |= WRITE_ERROR;
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
    4fe4:	4606      	mov	r6, r0
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4fe6:	f10d 080c 	add.w	r8, sp, #12
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
  uint8_t setCount = 0;
    4fea:	46ba      	mov	sl, r7
//------------------------------------------------------------------------------
bool ExFatFile::syncDir() {
  DirFile_t* df;
  DirStream_t* ds;
  uint8_t* cache;
  uint16_t checksum = 0;
    4fec:	463c      	mov	r4, r7
  uint8_t setCount = 0;

  DirPos_t pos = m_dirPos;
    4fee:	e89b 0007 	ldmia.w	fp, {r0, r1, r2}
    4ff2:	e888 0007 	stmia.w	r8, {r0, r1, r2}

  for (uint8_t i = 0;; i++) {
    cache = m_vol->dirCache(&pos, FsCache::CACHE_FOR_READ);
    4ff6:	2200      	movs	r2, #0
    4ff8:	4641      	mov	r1, r8
    4ffa:	6a30      	ldr	r0, [r6, #32]
    4ffc:	fa5f f987 	uxtb.w	r9, r7
    5000:	f000 fc2e 	bl	5860 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
    if (!cache) {
    5004:	4605      	mov	r5, r0
    5006:	b130      	cbz	r0, 5016 <ExFatFile::syncDir()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    switch (cache[0]) {
    5008:	7803      	ldrb	r3, [r0, #0]
    500a:	2bc0      	cmp	r3, #192	; 0xc0
    500c:	d059      	beq.n	50c2 <ExFatFile::syncDir()+0xea>
    500e:	2bc1      	cmp	r3, #193	; 0xc1
    5010:	d02e      	beq.n	5070 <ExFatFile::syncDir()+0x98>
    5012:	2b85      	cmp	r3, #133	; 0x85
    5014:	d009      	beq.n	502a <ExFatFile::syncDir()+0x52>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5016:	f896 3032 	ldrb.w	r3, [r6, #50]	; 0x32
  return false;
    501a:	2000      	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    501c:	f043 0301 	orr.w	r3, r3, #1
    5020:	f886 3032 	strb.w	r3, [r6, #50]	; 0x32
  return false;
}
    5024:	b007      	add	sp, #28
    5026:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    502a:	f896 2031 	ldrb.w	r2, [r6, #49]	; 0x31
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    502e:	4b43      	ldr	r3, [pc, #268]	; (513c <ExFatFile::syncDir()+0x164>)
    5030:	f002 0237 	and.w	r2, r2, #55	; 0x37
      goto fail;
    }
    switch (cache[0]) {
      case EXFAT_TYPE_FILE:
        df = reinterpret_cast<DirFile_t*>(cache);
        setCount = df->setCount;
    5034:	f890 a001 	ldrb.w	sl, [r0, #1]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
    5038:	681b      	ldr	r3, [r3, #0]
    503a:	8082      	strh	r2, [r0, #4]
    503c:	b183      	cbz	r3, 5060 <ExFatFile::syncDir()+0x88>
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
    503e:	f10d 0207 	add.w	r2, sp, #7
    5042:	f10d 010a 	add.w	r1, sp, #10
    5046:	a802      	add	r0, sp, #8
    5048:	4798      	blx	r3
          df->modifyTimeMs = ms10;
          setLe16(df->modifyTime, time);
    504a:	f8bd 200a 	ldrh.w	r2, [sp, #10]
          setLe16(df->modifyDate, date);
    504e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
        setLe16(df->attributes, m_attributes & FILE_ATTR_COPY);
        if (FsDateTime::callback) {
          uint16_t date, time;
          uint8_t ms10;
          FsDateTime::callback(&date, &time, &ms10);
          df->modifyTimeMs = ms10;
    5052:	f89d 1007 	ldrb.w	r1, [sp, #7]
    5056:	81aa      	strh	r2, [r5, #12]
    5058:	7569      	strb	r1, [r5, #21]
    505a:	822a      	strh	r2, [r5, #16]
    505c:	81eb      	strh	r3, [r5, #14]
    505e:	826b      	strh	r3, [r5, #18]
          setLe16(df->modifyTime, time);
          setLe16(df->modifyDate, date);
          setLe16(df->accessTime, time);
          setLe16(df->accessDate, date);
        }
        m_vol->dataCacheDirty();
    5060:	6a32      	ldr	r2, [r6, #32]
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    5062:	f892 3210 	ldrb.w	r3, [r2, #528]	; 0x210
    5066:	f043 0301 	orr.w	r3, r3, #1
    506a:	f882 3210 	strb.w	r3, [r2, #528]	; 0x210
    506e:	782b      	ldrb	r3, [r5, #0]
    5070:	03e1      	lsls	r1, r4, #15
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5072:	f1a3 0085 	sub.w	r0, r3, #133	; 0x85
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5076:	2200      	movs	r2, #0
    5078:	ea41 0454 	orr.w	r4, r1, r4, lsr #1
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    507c:	fab0 f080 	clz	r0, r0
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    5080:	2101      	movs	r1, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5082:	fa13 f384 	uxtah	r3, r3, r4
}
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
    5086:	0940      	lsrs	r0, r0, #5
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5088:	b29c      	uxth	r4, r3
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    508a:	440a      	add	r2, r1
    508c:	03e3      	lsls	r3, r4, #15
    508e:	2103      	movs	r1, #3
    5090:	2a1f      	cmp	r2, #31
    5092:	ea43 0354 	orr.w	r3, r3, r4, lsr #1
    5096:	d809      	bhi.n	50ac <ExFatFile::syncDir()+0xd4>
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    5098:	5cac      	ldrb	r4, [r5, r2]
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    509a:	2a01      	cmp	r2, #1
    checksum = ((checksum << 15) | (checksum >> 1)) + data[i];
    509c:	fa14 f383 	uxtah	r3, r4, r3
    50a0:	b29c      	uxth	r4, r3
//==============================================================================
#else  // READ_ONLY
//------------------------------------------------------------------------------
static uint16_t exFatDirChecksum(const uint8_t* data, uint16_t checksum) {
  bool skip = data[0] == EXFAT_TYPE_FILE;
  for (size_t i = 0; i < 32; i += i == 1 && skip ? 3 : 1) {
    50a2:	d101      	bne.n	50a8 <ExFatFile::syncDir()+0xd0>
    50a4:	2800      	cmp	r0, #0
    50a6:	d1f0      	bne.n	508a <ExFatFile::syncDir()+0xb2>
    50a8:	2101      	movs	r1, #1
    50aa:	e7ee      	b.n	508a <ExFatFile::syncDir()+0xb2>
        DBG_FAIL_MACRO;
        goto fail;
        break;
    }
    checksum = exFatDirChecksum(cache, checksum);
    if (i == setCount) break;
    50ac:	45ca      	cmp	sl, r9
    50ae:	d026      	beq.n	50fe <ExFatFile::syncDir()+0x126>
    if (m_vol->dirSeek(&pos, 32) != 1) {
    50b0:	2220      	movs	r2, #32
    50b2:	4641      	mov	r1, r8
    50b4:	6a30      	ldr	r0, [r6, #32]
    50b6:	3701      	adds	r7, #1
    50b8:	f000 fbee 	bl	5898 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>
    50bc:	2801      	cmp	r0, #1
    50be:	d09a      	beq.n	4ff6 <ExFatFile::syncDir()+0x1e>
    50c0:	e7a9      	b.n	5016 <ExFatFile::syncDir()+0x3e>
        m_vol->dataCacheDirty();
        break;

      case EXFAT_TYPE_STREAM:
        ds = reinterpret_cast<DirStream_t*>(cache);
        if (isContiguous()) {
    50c2:	f896 3033 	ldrb.w	r3, [r6, #51]	; 0x33
    50c6:	f013 0f40 	tst.w	r3, #64	; 0x40
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
    50ca:	7843      	ldrb	r3, [r0, #1]
    50cc:	bf14      	ite	ne
    50ce:	f043 0302 	orrne.w	r3, r3, #2
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
    50d2:	f023 0302 	biceq.w	r3, r3, #2
    50d6:	7043      	strb	r3, [r0, #1]
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
        m_vol->dataCacheDirty();
    50d8:	6a30      	ldr	r0, [r6, #32]
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
        setLe32(ds->firstCluster, m_firstCluster);
    50da:	69f1      	ldr	r1, [r6, #28]
        if (isContiguous()) {
          ds->flags |= EXFAT_FLAG_CONTIGUOUS;
        } else {
          ds->flags &= ~EXFAT_FLAG_CONTIGUOUS;
        }
        setLe64(ds->validLength, m_validLength);
    50dc:	e9d6 2304 	ldrd	r2, r3, [r6, #16]
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    50e0:	6169      	str	r1, [r5, #20]
}
inline void setLe64(uint8_t* dst, uint64_t src) {
  *reinterpret_cast<uint64_t*>(dst) = src;
    50e2:	e9c5 2302 	strd	r2, r3, [r5, #8]
        setLe32(ds->firstCluster, m_firstCluster);
        setLe64(ds->dataLength, m_dataLength);
    50e6:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
    50ea:	e9c5 2306 	strd	r2, r3, [r5, #24]
    50ee:	f890 3210 	ldrb.w	r3, [r0, #528]	; 0x210
    50f2:	f043 0301 	orr.w	r3, r3, #1
    50f6:	f880 3210 	strb.w	r3, [r0, #528]	; 0x210
    50fa:	782b      	ldrb	r3, [r5, #0]
    50fc:	e7b8      	b.n	5070 <ExFatFile::syncDir()+0x98>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  df = reinterpret_cast<DirFile_t*>
       (m_vol->dirCache(&m_dirPos, FsCache::CACHE_FOR_WRITE));
    50fe:	4659      	mov	r1, fp
    5100:	2201      	movs	r2, #1
    5102:	6a30      	ldr	r0, [r6, #32]
    5104:	f000 fbac 	bl	5860 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>
  if (!df) {
    5108:	2800      	cmp	r0, #0
    510a:	d084      	beq.n	5016 <ExFatFile::syncDir()+0x3e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe16(df->setChecksum, checksum);
  if (!m_vol->cacheSync()) {
    510c:	6a35      	ldr	r5, [r6, #32]
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    510e:	8044      	strh	r4, [r0, #2]
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5110:	4628      	mov	r0, r5
    5112:	f7ff fa81 	bl	4618 <FsCache::sync()>
    5116:	2800      	cmp	r0, #0
    5118:	f43f af7d 	beq.w	5016 <ExFatFile::syncDir()+0x3e>
    511c:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5120:	f7ff fa7a 	bl	4618 <FsCache::sync()>
    5124:	2800      	cmp	r0, #0
    5126:	f43f af76 	beq.w	5016 <ExFatFile::syncDir()+0x3e>
    512a:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    512e:	6803      	ldr	r3, [r0, #0]
    5130:	699b      	ldr	r3, [r3, #24]
    5132:	4798      	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5134:	2800      	cmp	r0, #0
    5136:	f43f af6e 	beq.w	5016 <ExFatFile::syncDir()+0x3e>
    513a:	e773      	b.n	5024 <ExFatFile::syncDir()+0x4c>
    513c:	20036c3c 	.word	0x20036c3c

00005140 <ExFatFile::sync()>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    5140:	f890 2031 	ldrb.w	r2, [r0, #49]	; 0x31
    5144:	b192      	cbz	r2, 516c <ExFatFile::sync()+0x2c>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
    5146:	b538      	push	{r3, r4, r5, lr}
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5148:	f890 2033 	ldrb.w	r2, [r0, #51]	; 0x33
    514c:	0611      	lsls	r1, r2, #24
    514e:	d40f      	bmi.n	5170 <ExFatFile::sync()+0x30>
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
  }
  if (!m_vol->cacheSync()) {
    5150:	6a05      	ldr	r5, [r0, #32]
    5152:	4604      	mov	r4, r0
    5154:	4628      	mov	r0, r5
    5156:	f7ff fa5f 	bl	4618 <FsCache::sync()>
    515a:	b988      	cbnz	r0, 5180 <ExFatFile::sync()+0x40>
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    515c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return false;
    5160:	2000      	movs	r0, #0
    goto fail;
  }
  return true;

 fail:
  m_error |= WRITE_ERROR;
    5162:	f043 0301 	orr.w	r3, r3, #1
    5166:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return false;
}
    516a:	bd38      	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    516c:	2001      	movs	r0, #1
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    516e:	4770      	bx	lr
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5170:	f002 027f 	and.w	r2, r2, #127	; 0x7f
    5174:	f880 2033 	strb.w	r2, [r0, #51]	; 0x33
  return true;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    5178:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    return syncDir();
    517c:	f7ff bf2c 	b.w	4fd8 <ExFatFile::syncDir()>
    5180:	f505 7004 	add.w	r0, r5, #528	; 0x210
    5184:	f7ff fa48 	bl	4618 <FsCache::sync()>
    5188:	2800      	cmp	r0, #0
    518a:	d0e7      	beq.n	515c <ExFatFile::sync()+0x1c>
    518c:	f8d5 0440 	ldr.w	r0, [r5, #1088]	; 0x440
  bool fatPut(uint32_t cluster, uint32_t value);
  uint32_t chainSize(uint32_t cluster);
  bool freeChain(uint32_t cluster);
  uint16_t sectorMask() const {return m_sectorMask;}
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5190:	6803      	ldr	r3, [r0, #0]
    5192:	699b      	ldr	r3, [r3, #24]
    5194:	4798      	blx	r3
#endif  // USE_EXFAT_BITMAP_CACHE
    m_dataCache.init(dev);
  }
  bool cacheSync() {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.sync() && m_dataCache.sync() && syncDevice();
    5196:	2800      	cmp	r0, #0
    5198:	d0e0      	beq.n	515c <ExFatFile::sync()+0x1c>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::sync() {
  if (!isOpen()) {
    return true;
    519a:	2001      	movs	r0, #1
    519c:	bd38      	pop	{r3, r4, r5, pc}
    519e:	bf00      	nop

000051a0 <ExFatFile::addDirCluster()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    51a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    51a4:	f890 3031 	ldrb.w	r3, [r0, #49]	; 0x31

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
    51a8:	4604      	mov	r4, r0
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    51aa:	0659      	lsls	r1, r3, #25
    51ac:	d45f      	bmi.n	526e <ExFatFile::addDirCluster()+0xce>
    51ae:	6880      	ldr	r0, [r0, #8]
    51b0:	6a23      	ldr	r3, [r4, #32]
  uint8_t* cache;
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    51b2:	f8d3 343c 	ldr.w	r3, [r3, #1084]	; 0x43c
    51b6:	4418      	add	r0, r3
    51b8:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
    51bc:	d302      	bcc.n	51c4 <ExFatFile::addDirCluster()+0x24>
  }
  return sync();

 fail:
  return false;
}
    51be:	2000      	movs	r0, #0
    51c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  dl += m_vol->bytesPerCluster();
  if (dl >= 0X4000000) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    51c4:	4620      	mov	r0, r4
    51c6:	f7ff febf 	bl	4f48 <ExFatFile::addCluster()>
    51ca:	2800      	cmp	r0, #0
    51cc:	d0f7      	beq.n	51be <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  cache =  m_vol->cacheClear();
    51ce:	6a26      	ldr	r6, [r4, #32]
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    51d0:	f896 3210 	ldrb.w	r3, [r6, #528]	; 0x210
    51d4:	07da      	lsls	r2, r3, #31
    51d6:	d44e      	bmi.n	5276 <ExFatFile::addDirCluster()+0xd6>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    51d8:	f04f 33ff 	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    51dc:	2500      	movs	r5, #0
  uint8_t* clear() {
    if (isDirty() && !sync()) {
      return nullptr;
    }
    invalidate();
    return m_buffer;
    51de:	f506 7808 	add.w	r8, r6, #544	; 0x220
  if (!cache) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
    51e2:	f44f 7200 	mov.w	r2, #512	; 0x200
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    51e6:	f8c6 321c 	str.w	r3, [r6, #540]	; 0x21c
    51ea:	4629      	mov	r1, r5
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    51ec:	f886 5210 	strb.w	r5, [r6, #528]	; 0x210
    51f0:	4640      	mov	r0, r8
    51f2:	f006 f91b 	bl	b42c <memset>
  sector = m_vol->clusterStartSector(m_curCluster);
    51f6:	6a22      	ldr	r2, [r4, #32]
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    51f8:	69a7      	ldr	r7, [r4, #24]
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    51fa:	2601      	movs	r6, #1
    51fc:	f892 1445 	ldrb.w	r1, [r2, #1093]	; 0x445
    5200:	3f02      	subs	r7, #2
    5202:	f8d2 342c 	ldr.w	r3, [r2, #1068]	; 0x42c
    5206:	408f      	lsls	r7, r1
    5208:	441f      	add	r7, r3
    520a:	fa16 f301 	lsls.w	r3, r6, r1
    520e:	d010      	beq.n	5232 <ExFatFile::addDirCluster()+0x92>
    5210:	f8d2 0440 	ldr.w	r0, [r2, #1088]	; 0x440
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5214:	1979      	adds	r1, r7, r5
    5216:	4642      	mov	r2, r8
    5218:	3501      	adds	r5, #1
    521a:	6803      	ldr	r3, [r0, #0]
    521c:	69db      	ldr	r3, [r3, #28]
    521e:	4798      	blx	r3
    if (!m_vol->writeSector(sector + i, cache)) {
    5220:	2800      	cmp	r0, #0
    5222:	d0cc      	beq.n	51be <ExFatFile::addDirCluster()+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(cache, 0, m_vol->bytesPerSector());
  sector = m_vol->clusterStartSector(m_curCluster);
  for (uint32_t i = 0; i < m_vol->sectorsPerCluster(); i++) {
    5224:	6a22      	ldr	r2, [r4, #32]
    5226:	f892 3445 	ldrb.w	r3, [r2, #1093]	; 0x445
    522a:	fa06 f303 	lsl.w	r3, r6, r3
    522e:	42ab      	cmp	r3, r5
    5230:	d8ee      	bhi.n	5210 <ExFatFile::addDirCluster()+0x70>
    if (!m_vol->writeSector(sector + i, cache)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    5232:	f894 3031 	ldrb.w	r3, [r4, #49]	; 0x31
    5236:	065b      	lsls	r3, r3, #25
    5238:	d414      	bmi.n	5264 <ExFatFile::addDirCluster()+0xc4>
    m_flags |= FILE_FLAG_DIR_DIRTY;
    523a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    523e:	2700      	movs	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5240:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5244:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    m_dataLength  += m_vol->bytesPerCluster();
    5248:	f8d2 643c 	ldr.w	r6, [r2, #1084]	; 0x43c
    524c:	e9d4 2302 	ldrd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5250:	e9d4 0104 	ldrd	r0, r1, [r4, #16]
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    5254:	1992      	adds	r2, r2, r6
    5256:	417b      	adcs	r3, r7
    m_validLength += m_vol->bytesPerCluster();
    5258:	1980      	adds	r0, r0, r6
    525a:	4179      	adcs	r1, r7
      goto fail;
    }
  }
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    525c:	e9c4 2302 	strd	r2, r3, [r4, #8]
    m_validLength += m_vol->bytesPerCluster();
    5260:	e9c4 0104 	strd	r0, r1, [r4, #16]
  }
  return sync();
    5264:	4620      	mov	r0, r4

 fail:
  return false;
}
    5266:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  if (!isRoot()) {
    m_flags |= FILE_FLAG_DIR_DIRTY;
    m_dataLength  += m_vol->bytesPerCluster();
    m_validLength += m_vol->bytesPerCluster();
  }
  return sync();
    526a:	f7ff bf69 	b.w	5140 <ExFatFile::sync()>
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::addDirCluster() {
  uint32_t sector;
  uint32_t dl = isRoot() ? m_vol->rootLength() : m_dataLength;
    526e:	6a00      	ldr	r0, [r0, #32]
    5270:	f000 fc04 	bl	5a7c <ExFatPartition::rootLength()>
    5274:	e79c      	b.n	51b0 <ExFatFile::addDirCluster()+0x10>
    }
    return m_blockDev->writeSectors(sector, src, count);
  }
  /** \return Clear the cache and returns a pointer to the cache. */
  uint8_t* clear() {
    if (isDirty() && !sync()) {
    5276:	f506 7004 	add.w	r0, r6, #528	; 0x210
    527a:	f7ff f9cd 	bl	4618 <FsCache::sync()>
    527e:	2800      	cmp	r0, #0
    5280:	d1aa      	bne.n	51d8 <ExFatFile::addDirCluster()+0x38>
    5282:	e79c      	b.n	51be <ExFatFile::addDirCluster()+0x1e>

00005284 <ExFatFile::preAllocate(unsigned long long)>:
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5284:	ea52 0103 	orrs.w	r1, r2, r3
    5288:	d003      	beq.n	5292 <ExFatFile::preAllocate(unsigned long long)+0xe>
    528a:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
    528e:	0789      	lsls	r1, r1, #30
    5290:	d401      	bmi.n	5296 <ExFatFile::preAllocate(unsigned long long)+0x12>
  }
  return true;

 fail:
  return false;
}
    5292:	2000      	movs	r0, #0
    5294:	4770      	bx	lr
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
  uint32_t find;
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5296:	69c1      	ldr	r1, [r0, #28]
    5298:	2900      	cmp	r1, #0
    529a:	d1fa      	bne.n	5292 <ExFatFile::preAllocate(unsigned long long)+0xe>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::preAllocate(uint64_t length) {
    529c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    52a0:	f112 36ff 	adds.w	r6, r2, #4294967295
    52a4:	4680      	mov	r8, r0
    52a6:	6a00      	ldr	r0, [r0, #32]
    52a8:	461d      	mov	r5, r3
    52aa:	f143 37ff 	adc.w	r7, r3, #4294967295
    52ae:	4614      	mov	r4, r2
    52b0:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
    52b4:	3309      	adds	r3, #9
    52b6:	b2db      	uxtb	r3, r3
    52b8:	f1c3 0e20 	rsb	lr, r3, #32
    52bc:	fa26 f203 	lsr.w	r2, r6, r3
    52c0:	3b20      	subs	r3, #32
    52c2:	fa07 fe0e 	lsl.w	lr, r7, lr
    52c6:	fa27 f303 	lsr.w	r3, r7, r3
    52ca:	ea42 020e 	orr.w	r2, r2, lr
    52ce:	431a      	orrs	r2, r3
    52d0:	1c56      	adds	r6, r2, #1
  find = m_vol->bitmapFind(0, need);
    52d2:	4632      	mov	r2, r6
    52d4:	f000 f9f8 	bl	56c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  if (find < 2) {
    52d8:	2801      	cmp	r0, #1
  if (!length || !isWritable() || m_firstCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
  find = m_vol->bitmapFind(0, need);
    52da:	4607      	mov	r7, r0
  if (find < 2) {
    52dc:	d907      	bls.n	52ee <ExFatFile::preAllocate(unsigned long long)+0x6a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    52de:	4601      	mov	r1, r0
    52e0:	4632      	mov	r2, r6
    52e2:	2301      	movs	r3, #1
    52e4:	f8d8 0020 	ldr.w	r0, [r8, #32]
    52e8:	f000 fa48 	bl	577c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    52ec:	b910      	cbnz	r0, 52f4 <ExFatFile::preAllocate(unsigned long long)+0x70>
  }
  return true;

 fail:
  return false;
}
    52ee:	2000      	movs	r0, #0
    52f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    52f4:	f898 3033 	ldrb.w	r3, [r8, #51]	; 0x33
  if (!sync()) {
    52f8:	4640      	mov	r0, r8
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
    52fa:	f8c8 701c 	str.w	r7, [r8, #28]
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    52fe:	f063 033f 	orn	r3, r3, #63	; 0x3f
  }
  if (!m_vol->bitmapModify(find, need, 1)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_dataLength = length;
    5302:	e9c8 4502 	strd	r4, r5, [r8, #8]
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
    5306:	f888 3033 	strb.w	r3, [r8, #51]	; 0x33
  }
  return true;

 fail:
  return false;
}
    530a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    goto fail;
  }
  m_dataLength = length;
  m_firstCluster = find;
  m_flags |= FILE_FLAG_DIR_DIRTY | FILE_FLAG_CONTIGUOUS;
  if (!sync()) {
    530e:	f7ff bf17 	b.w	5140 <ExFatFile::sync()>
    5312:	bf00      	nop

00005314 <ExFatFile::truncate()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5314:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    5318:	079a      	lsls	r2, r3, #30
    531a:	d518      	bpl.n	534e <ExFatFile::truncate()+0x3a>

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    531c:	b5f0      	push	{r4, r5, r6, r7, lr}
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    531e:	69c5      	ldr	r5, [r0, #28]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool ExFatFile::truncate() {
    5320:	b083      	sub	sp, #12
  // error if not a normal file or read-only
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    5322:	b18d      	cbz	r5, 5348 <ExFatFile::truncate()+0x34>
      return true;
  }
  if (isContiguous()) {
    5324:	f003 0340 	and.w	r3, r3, #64	; 0x40
    5328:	4604      	mov	r4, r0
    532a:	f003 06ff 	and.w	r6, r3, #255	; 0xff
    532e:	b983      	cbnz	r3, 5352 <ExFatFile::truncate()+0x3e>
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
    5330:	6981      	ldr	r1, [r0, #24]
    5332:	2900      	cmp	r1, #0
    5334:	d142      	bne.n	53bc <ExFatFile::truncate()+0xa8>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
    } else {
      toFree = m_firstCluster;
    5336:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    5338:	61c1      	str	r1, [r0, #28]
    }
    if (toFree) {
      if (!m_vol->freeChain(toFree)) {
    533a:	4629      	mov	r1, r5
    533c:	6a20      	ldr	r0, [r4, #32]
    533e:	f000 faf3 	bl	5928 <ExFatPartition::freeChain(unsigned long)>
    5342:	bb38      	cbnz	r0, 5394 <ExFatFile::truncate()+0x80>
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    5344:	2000      	movs	r0, #0
    5346:	e000      	b.n	534a <ExFatFile::truncate()+0x36>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    5348:	2001      	movs	r0, #1
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
}
    534a:	b003      	add	sp, #12
    534c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();

 fail:
  return false;
    534e:	2000      	movs	r0, #0
}
    5350:	4770      	bx	lr
    5352:	6a00      	ldr	r0, [r0, #32]
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
    5354:	69a1      	ldr	r1, [r4, #24]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    5356:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
    535a:	e9d4 6702 	ldrd	r6, r7, [r4, #8]
    535e:	3209      	adds	r2, #9
    5360:	f116 36ff 	adds.w	r6, r6, #4294967295
    5364:	b2d2      	uxtb	r2, r2
    5366:	f147 37ff 	adc.w	r7, r7, #4294967295
    536a:	f1c2 0e20 	rsb	lr, r2, #32
    536e:	f1a2 0320 	sub.w	r3, r2, #32
    5372:	fa26 f202 	lsr.w	r2, r6, r2
    5376:	fa07 fe0e 	lsl.w	lr, r7, lr
    537a:	fa27 f303 	lsr.w	r3, r7, r3
    537e:	ea42 020e 	orr.w	r2, r2, lr
    5382:	431a      	orrs	r2, r3
    5384:	3201      	adds	r2, #1
    if (m_curCluster) {
    5386:	b1b1      	cbz	r1, 53b6 <ExFatFile::truncate()+0xa2>
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    5388:	3d01      	subs	r5, #1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    538a:	1c4b      	adds	r3, r1, #1
      nc -= 1 + m_curCluster - m_firstCluster;
    538c:	1a69      	subs	r1, r5, r1
      return true;
  }
  if (isContiguous()) {
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
    538e:	9301      	str	r3, [sp, #4]
      nc -= 1 + m_curCluster - m_firstCluster;
    5390:	440a      	add	r2, r1
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    5392:	bb0a      	cbnz	r2, 53d8 <ExFatFile::truncate()+0xc4>
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5394:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
  return sync();
    5398:	4620      	mov	r0, r4
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    539a:	e9d4 6700 	ldrd	r6, r7, [r4]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    539e:	f063 037f 	orn	r3, r3, #127	; 0x7f
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
    53a2:	e9c4 6702 	strd	r6, r7, [r4, #8]
  m_validLength = m_curPosition;
  m_flags |= FILE_FLAG_DIR_DIRTY;
    53a6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
        goto fail;
      }
    }
  }
  m_dataLength = m_curPosition;
  m_validLength = m_curPosition;
    53aa:	e9c4 6704 	strd	r6, r7, [r4, #16]
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return sync();
    53ae:	f7ff fec7 	bl	5140 <ExFatFile::sync()>

 fail:
  return false;
}
    53b2:	b003      	add	sp, #12
    53b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
    uint32_t nc = 1 + ((m_dataLength - 1) >> m_vol->bytesPerClusterShift());
    if (m_curCluster) {
      toFree = m_curCluster + 1;
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
    53b6:	9501      	str	r5, [sp, #4]
      m_firstCluster = 0;
    53b8:	61e1      	str	r1, [r4, #28]
    53ba:	e7ea      	b.n	5392 <ExFatFile::truncate()+0x7e>
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    53bc:	aa02      	add	r2, sp, #8
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    53be:	6a00      	ldr	r0, [r0, #32]
      goto fail;
    }
  } else {
    // need to free chain
    if (m_curCluster) {
      toFree = 0;
    53c0:	f842 6d04 	str.w	r6, [r2, #-4]!
      int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    53c4:	f000 fa94 	bl	58f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
    53c8:	b240      	sxtb	r0, r0
      if (fg < 0) {
    53ca:	2800      	cmp	r0, #0
    53cc:	dbba      	blt.n	5344 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
    53ce:	d10a      	bne.n	53e6 <ExFatFile::truncate()+0xd2>
      }
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (toFree) {
    53d0:	9d01      	ldr	r5, [sp, #4]
    53d2:	2d00      	cmp	r5, #0
    53d4:	d0de      	beq.n	5394 <ExFatFile::truncate()+0x80>
    53d6:	e7b0      	b.n	533a <ExFatFile::truncate()+0x26>
      nc -= 1 + m_curCluster - m_firstCluster;
    } else {
      toFree = m_firstCluster;
      m_firstCluster = 0;
    }
    if (nc && !m_vol->bitmapModify(toFree, nc, 0)) {
    53d8:	2300      	movs	r3, #0
    53da:	9901      	ldr	r1, [sp, #4]
    53dc:	f000 f9ce 	bl	577c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    53e0:	2800      	cmp	r0, #0
    53e2:	d1d7      	bne.n	5394 <ExFatFile::truncate()+0x80>
    53e4:	e7ae      	b.n	5344 <ExFatFile::truncate()+0x30>
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (fg) {
        // current cluster is end of chain
        if (!m_vol->fatPut(m_curCluster, EXFAT_EOC)) {
    53e6:	f04f 32ff 	mov.w	r2, #4294967295
    53ea:	69a1      	ldr	r1, [r4, #24]
    53ec:	6a20      	ldr	r0, [r4, #32]
    53ee:	f000 fa89 	bl	5904 <ExFatPartition::fatPut(unsigned long, unsigned long)>
    53f2:	2800      	cmp	r0, #0
    53f4:	d1ec      	bne.n	53d0 <ExFatFile::truncate()+0xbc>
    53f6:	e7a5      	b.n	5344 <ExFatFile::truncate()+0x30>

000053f8 <ExFatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    53f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    53fc:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
    5400:	b083      	sub	sp, #12
    5402:	4604      	mov	r4, r0

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5404:	079d      	lsls	r5, r3, #30

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t ExFatFile::write(const void* buf, size_t nbyte) {
    5406:	9200      	str	r2, [sp, #0]

  // number of bytes left to write  -  must be before goto statements
  size_t toWrite = nbyte;
  size_t n;
  // error if not an open file or is read-only
  if (!isWritable()) {
    5408:	d40a      	bmi.n	5420 <ExFatFile::write(void const*, unsigned int)+0x28>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    540a:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
  return -1;
    540e:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    5412:	f043 0301 	orr.w	r3, r3, #1
    5416:	f884 3032 	strb.w	r3, [r4, #50]	; 0x32
  return -1;
}
    541a:	b003      	add	sp, #12
    541c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    5420:	071a      	lsls	r2, r3, #28
    5422:	4688      	mov	r8, r1
    5424:	f100 8107 	bmi.w	5636 <ExFatFile::write(void const*, unsigned int)+0x23e>
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    5428:	9b00      	ldr	r3, [sp, #0]
    542a:	2b00      	cmp	r3, #0
    542c:	f000 8117 	beq.w	565e <ExFatFile::write(void const*, unsigned int)+0x266>
    5430:	4621      	mov	r1, r4
    5432:	9d00      	ldr	r5, [sp, #0]
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    5434:	f04f 0a01 	mov.w	sl, #1
    5438:	e8f1 2306 	ldrd	r2, r3, [r1], #24
    543c:	4693      	mov	fp, r2
    543e:	9101      	str	r1, [sp, #4]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5440:	6a20      	ldr	r0, [r4, #32]
    sectorOffset = clusterOffset & m_vol->sectorMask();
    if (clusterOffset == 0) {
      // start of new cluster
      if (m_curCluster != 0) {
    5442:	69a1      	ldr	r1, [r4, #24]
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    clusterOffset = m_curPosition & m_vol->clusterMask();
    5444:	f8d0 6438 	ldr.w	r6, [r0, #1080]	; 0x438
    5448:	ea06 060b 	and.w	r6, r6, fp
    sectorOffset = clusterOffset & m_vol->sectorMask();
    544c:	f3c6 0908 	ubfx	r9, r6, #0, #9
    if (clusterOffset == 0) {
    5450:	bb56      	cbnz	r6, 54a8 <ExFatFile::write(void const*, unsigned int)+0xb0>
      // start of new cluster
      if (m_curCluster != 0) {
    5452:	2900      	cmp	r1, #0
    5454:	f000 80bd 	beq.w	55d2 <ExFatFile::write(void const*, unsigned int)+0x1da>
        int fg;

        if (isContiguous()) {
    5458:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    545c:	065b      	lsls	r3, r3, #25
    545e:	f140 80d2 	bpl.w	5606 <ExFatFile::write(void const*, unsigned int)+0x20e>
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5462:	f890 2445 	ldrb.w	r2, [r0, #1093]	; 0x445
      // start of new cluster
      if (m_curCluster != 0) {
        int fg;

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
    5466:	69e3      	ldr	r3, [r4, #28]
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
    5468:	3209      	adds	r2, #9
    546a:	e9d4 bc02 	ldrd	fp, ip, [r4, #8]
    546e:	b2d2      	uxtb	r2, r2
    5470:	f11b 3bff 	adds.w	fp, fp, #4294967295
    5474:	f1c2 0e20 	rsb	lr, r2, #32
    5478:	f1a2 0720 	sub.w	r7, r2, #32
    547c:	f14c 3cff 	adc.w	ip, ip, #4294967295
    5480:	fa2b f202 	lsr.w	r2, fp, r2
    5484:	fa0c fe0e 	lsl.w	lr, ip, lr
    5488:	fa2c f707 	lsr.w	r7, ip, r7
    548c:	ea42 020e 	orr.w	r2, r2, lr
    5490:	433a      	orrs	r2, r7
    5492:	441a      	add	r2, r3
    5494:	4291      	cmp	r1, r2
    5496:	f0c0 80b3 	bcc.w	5600 <ExFatFile::write(void const*, unsigned int)+0x208>
            goto fail;
          }
        }
        if (fg == 0) {
          // add cluster if at end of chain
          if (!addCluster()) {
    549a:	4620      	mov	r0, r4
    549c:	f7ff fd54 	bl	4f48 <ExFatFile::addCluster()>
    54a0:	2800      	cmp	r0, #0
    54a2:	d0b2      	beq.n	540a <ExFatFile::write(void const*, unsigned int)+0x12>
    54a4:	6a20      	ldr	r0, [r4, #32]
    54a6:	69a1      	ldr	r1, [r4, #24]
        }
      }
    }
    // sector for data write
    sector = m_vol->clusterStartSector(m_curCluster) +
             (clusterOffset >> m_vol->bytesPerSectorShift());
    54a8:	0a76      	lsrs	r6, r6, #9
    54aa:	3902      	subs	r1, #2
    54ac:	f8d0 742c 	ldr.w	r7, [r0, #1068]	; 0x42c
  bool dataCacheSync() {return m_dataCache.sync();}
  //----------------------------------------------------------------------------
  uint32_t clusterMask() const {return m_clusterMask;}
  uint32_t clusterStartSector(uint32_t cluster) {
    return m_clusterHeapStartSector +
           ((cluster - 2) << m_sectorsPerClusterShift);
    54b0:	f890 e445 	ldrb.w	lr, [r0, #1093]	; 0x445
    54b4:	4437      	add	r7, r6
    54b6:	fa01 f10e 	lsl.w	r1, r1, lr
    54ba:	4439      	add	r1, r7

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
    54bc:	f1b9 0f00 	cmp.w	r9, #0
    54c0:	d15b      	bne.n	557a <ExFatFile::write(void const*, unsigned int)+0x182>
    54c2:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    54c6:	bf2c      	ite	cs
    54c8:	2200      	movcs	r2, #0
    54ca:	2201      	movcc	r2, #1
    54cc:	2a00      	cmp	r2, #0
    54ce:	d154      	bne.n	557a <ExFatFile::write(void const*, unsigned int)+0x182>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
    54d0:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
    54d4:	f0c0 8081 	bcc.w	55da <ExFatFile::write(void const*, unsigned int)+0x1e2>
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    54d8:	fa0a fe0e 	lsl.w	lr, sl, lr
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (toWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t ns = toWrite >> m_vol->bytesPerSectorShift();
    54dc:	0a6b      	lsrs	r3, r5, #9
    54de:	f8d0 c21c 	ldr.w	ip, [r0, #540]	; 0x21c
      // Limit writes to current cluster.
      uint32_t maxNs = m_vol->sectorsPerCluster()
                       - (clusterOffset >> m_vol->bytesPerSectorShift());
    54e2:	ebc6 060e 	rsb	r6, r6, lr
    54e6:	42b3      	cmp	r3, r6
    54e8:	bf28      	it	cs
    54ea:	4633      	movcs	r3, r6
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    54ec:	4561      	cmp	r1, ip
      if (ns > maxNs) {
        ns = maxNs;
      }
      n = ns << m_vol->bytesPerSectorShift();
    54ee:	ea4f 2743 	mov.w	r7, r3, lsl #9
    54f2:	d808      	bhi.n	5506 <ExFatFile::write(void const*, unsigned int)+0x10e>
    54f4:	185e      	adds	r6, r3, r1
    54f6:	45b4      	cmp	ip, r6
    54f8:	d205      	bcs.n	5506 <ExFatFile::write(void const*, unsigned int)+0x10e>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    54fa:	f04f 36ff 	mov.w	r6, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    54fe:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5502:	f8c0 621c 	str.w	r6, [r0, #540]	; 0x21c
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    5506:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    550a:	4642      	mov	r2, r8
    550c:	6806      	ldr	r6, [r0, #0]
    550e:	6a36      	ldr	r6, [r6, #32]
    5510:	47b0      	blx	r6
      if (!m_vol->cacheSafeWrite(sector, src, ns)) {
    5512:	2800      	cmp	r0, #0
    5514:	f43f af79 	beq.w	540a <ExFatFile::write(void const*, unsigned int)+0x12>
    5518:	4638      	mov	r0, r7
    551a:	2100      	movs	r1, #0
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    551c:	44b8      	add	r8, r7
    toWrite -= n;
    551e:	1bed      	subs	r5, r5, r7
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5520:	e9d4 2300 	ldrd	r2, r3, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5524:	e9d4 6704 	ldrd	r6, r7, [r4, #16]
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5528:	eb12 0b00 	adds.w	fp, r2, r0
    552c:	eb43 0c01 	adc.w	ip, r3, r1
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    5530:	4567      	cmp	r7, ip
    5532:	bf08      	it	eq
    5534:	455e      	cmpeq	r6, fp
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    5536:	e9c4 bc00 	strd	fp, ip, [r4]
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
    553a:	d207      	bcs.n	554c <ExFatFile::write(void const*, unsigned int)+0x154>
      m_flags |= FILE_FLAG_DIR_DIRTY;
    553c:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    5540:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_validLength = m_curPosition;
    5544:	e9c4 bc04 	strd	fp, ip, [r4, #16]
    }
    m_curPosition += n;
    src += n;
    toWrite -= n;
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
    5548:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    if (!seekSet(m_validLength)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  while (toWrite) {
    554c:	2d00      	cmp	r5, #0
    554e:	f47f af77 	bne.w	5440 <ExFatFile::write(void const*, unsigned int)+0x48>
    5552:	465a      	mov	r2, fp
    5554:	4663      	mov	r3, ip
    if (m_curPosition > m_validLength) {
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    5556:	e9d4 0102 	ldrd	r0, r1, [r4, #8]
    555a:	4299      	cmp	r1, r3
    555c:	bf08      	it	eq
    555e:	4290      	cmpeq	r0, r2
    5560:	d371      	bcc.n	5646 <ExFatFile::write(void const*, unsigned int)+0x24e>
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    5562:	4b40      	ldr	r3, [pc, #256]	; (5664 <ExFatFile::write(void const*, unsigned int)+0x26c>)
    5564:	681b      	ldr	r3, [r3, #0]
    5566:	2b00      	cmp	r3, #0
    5568:	d077      	beq.n	565a <ExFatFile::write(void const*, unsigned int)+0x262>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    556a:	f894 3033 	ldrb.w	r3, [r4, #51]	; 0x33
    556e:	9800      	ldr	r0, [sp, #0]
    5570:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5574:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
    5578:	e74f      	b.n	541a <ExFatFile::write(void const*, unsigned int)+0x22>
      // lesser of space and amount to write
      if (n > toWrite) {
        n = toWrite;
      }

      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
    557a:	f1b9 0f00 	cmp.w	r9, #0
    557e:	d126      	bne.n	55ce <ExFatFile::write(void const*, unsigned int)+0x1d6>
    5580:	e9d4 2304 	ldrd	r2, r3, [r4, #16]
    5584:	e9d4 6700 	ldrd	r6, r7, [r4]
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    5588:	429f      	cmp	r7, r3
    558a:	bf08      	it	eq
    558c:	4296      	cmpeq	r6, r2
    558e:	bf34      	ite	cc
    5590:	2201      	movcc	r2, #1
    5592:	2205      	movcs	r2, #5
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5594:	f500 7004 	add.w	r0, r0, #528	; 0x210
    5598:	f7ff f80e 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      cache = m_vol->dataCacheGet(sector, cacheOption);
      if (!cache) {
    559c:	2800      	cmp	r0, #0
    559e:	f43f af34 	beq.w	540a <ExFatFile::write(void const*, unsigned int)+0x12>
             (clusterOffset >> m_vol->bytesPerSectorShift());

    if (sectorOffset != 0 || toWrite < m_vol->bytesPerSector()) {
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    55a2:	f5c9 7700 	rsb	r7, r9, #512	; 0x200
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    55a6:	4448      	add	r0, r9
    55a8:	4641      	mov	r1, r8
    55aa:	42af      	cmp	r7, r5
    55ac:	bf28      	it	cs
    55ae:	462f      	movcs	r7, r5
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    55b0:	44b9      	add	r9, r7
      if (!cache) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = cache + sectorOffset;
      memcpy(dst, src, n);
    55b2:	463a      	mov	r2, r7
    55b4:	f003 fa4e 	bl	8a54 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    55b8:	f5b9 7f00 	cmp.w	r9, #512	; 0x200
    55bc:	d1ac      	bne.n	5518 <ExFatFile::write(void const*, unsigned int)+0x120>
  }
  uint32_t dataCacheSector() {return m_dataCache.sector();}
  bool dataCacheSync() {return m_dataCache.sync();}
    55be:	6a20      	ldr	r0, [r4, #32]
    55c0:	f500 7004 	add.w	r0, r0, #528	; 0x210
    55c4:	f7ff f828 	bl	4618 <FsCache::sync()>
        // Force write if sector is full - improves large writes.
        if (!m_vol->dataCacheSync()) {
    55c8:	2800      	cmp	r0, #0
    55ca:	d1a5      	bne.n	5518 <ExFatFile::write(void const*, unsigned int)+0x120>
    55cc:	e71d      	b.n	540a <ExFatFile::write(void const*, unsigned int)+0x12>
      if (sectorOffset == 0 && m_curPosition >= m_validLength) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    55ce:	2201      	movs	r2, #1
    55d0:	e7e0      	b.n	5594 <ExFatFile::write(void const*, unsigned int)+0x19c>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    55d2:	69e1      	ldr	r1, [r4, #28]
    55d4:	b1f1      	cbz	r1, 5614 <ExFatFile::write(void const*, unsigned int)+0x21c>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    55d6:	61a1      	str	r1, [r4, #24]
    55d8:	e766      	b.n	54a8 <ExFatFile::write(void const*, unsigned int)+0xb0>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    55da:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
    55de:	4299      	cmp	r1, r3
    55e0:	d022      	beq.n	5628 <ExFatFile::write(void const*, unsigned int)+0x230>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    55e2:	f8d0 0214 	ldr.w	r0, [r0, #532]	; 0x214
    55e6:	4642      	mov	r2, r8
    55e8:	6803      	ldr	r3, [r0, #0]
    55ea:	69db      	ldr	r3, [r3, #28]
    55ec:	4798      	blx	r3
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    55ee:	2800      	cmp	r0, #0
    55f0:	f43f af0b 	beq.w	540a <ExFatFile::write(void const*, unsigned int)+0x12>
    55f4:	f44f 7000 	mov.w	r0, #512	; 0x200
    55f8:	2100      	movs	r1, #0
         DBG_FAIL_MACRO;
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      n = m_vol->bytesPerSector();
    55fa:	f44f 7700 	mov.w	r7, #512	; 0x200
    55fe:	e78d      	b.n	551c <ExFatFile::write(void const*, unsigned int)+0x124>

        if (isContiguous()) {
          uint32_t lc = m_firstCluster;
          lc += (m_dataLength - 1) >> m_vol->bytesPerClusterShift();
          if (m_curCluster < lc) {
            m_curCluster++;
    5600:	3101      	adds	r1, #1
    5602:	61a1      	str	r1, [r4, #24]
    5604:	e750      	b.n	54a8 <ExFatFile::write(void const*, unsigned int)+0xb0>
            fg = 1;
          } else {
            fg = 0;
          }
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5606:	9a01      	ldr	r2, [sp, #4]
    5608:	f000 f972 	bl	58f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
        if (fg == 0) {
    560c:	2800      	cmp	r0, #0
    560e:	f47f af49 	bne.w	54a4 <ExFatFile::write(void const*, unsigned int)+0xac>
    5612:	e742      	b.n	549a <ExFatFile::write(void const*, unsigned int)+0xa2>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    5614:	4620      	mov	r0, r4
    5616:	f7ff fc97 	bl	4f48 <ExFatFile::addCluster()>
    561a:	2800      	cmp	r0, #0
    561c:	f43f aef5 	beq.w	540a <ExFatFile::write(void const*, unsigned int)+0x12>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    5620:	69a1      	ldr	r1, [r4, #24]
    5622:	6a20      	ldr	r0, [r4, #32]
    5624:	61e1      	str	r1, [r4, #28]
    5626:	e73f      	b.n	54a8 <ExFatFile::write(void const*, unsigned int)+0xb0>
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    5628:	f04f 33ff 	mov.w	r3, #4294967295
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    562c:	f880 2210 	strb.w	r2, [r0, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    5630:	f8c0 321c 	str.w	r3, [r0, #540]	; 0x21c
    5634:	e7d5      	b.n	55e2 <ExFatFile::write(void const*, unsigned int)+0x1ea>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_validLength)) {
    5636:	e9d0 2304 	ldrd	r2, r3, [r0, #16]
    563a:	f7ff f987 	bl	494c <ExFatFile::seekSet(unsigned long long)>
    563e:	2800      	cmp	r0, #0
    5640:	f43f aee3 	beq.w	540a <ExFatFile::write(void const*, unsigned int)+0x12>
    5644:	e6f0      	b.n	5428 <ExFatFile::write(void const*, unsigned int)+0x30>
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5646:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
    564a:	9800      	ldr	r0, [sp, #0]
    564c:	f061 017f 	orn	r1, r1, #127	; 0x7f
      m_flags |= FILE_FLAG_DIR_DIRTY;
      m_validLength = m_curPosition;
    }
  }
  if (m_curPosition > m_dataLength) {
    m_dataLength = m_curPosition;
    5650:	e9c4 2302 	strd	r2, r3, [r4, #8]
    // update fileSize and insure sync will update dir entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    5654:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
    5658:	e6df      	b.n	541a <ExFatFile::write(void const*, unsigned int)+0x22>
    565a:	9800      	ldr	r0, [sp, #0]
    565c:	e6dd      	b.n	541a <ExFatFile::write(void const*, unsigned int)+0x22>
    565e:	e9d4 2300 	ldrd	r2, r3, [r4]
    5662:	e778      	b.n	5556 <ExFatFile::write(void const*, unsigned int)+0x15e>
    5664:	20036c3c 	.word	0x20036c3c

00005668 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>:
    }
  }
  return 1;
}
//------------------------------------------------------------------------------
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    5668:	b538      	push	{r3, r4, r5, lr}
    566a:	460c      	mov	r4, r1
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    566c:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    5670:	4615      	mov	r5, r2
    5672:	f500 7004 	add.w	r0, r0, #528	; 0x210
    5676:	2200      	movs	r2, #0
    5678:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    567c:	f7fe ff9c 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
    return -1;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    5680:	b140      	cbz	r0, 5694 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x2c>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5682:	00a4      	lsls	r4, r4, #2
    5684:	f3c4 0408 	ubfx	r4, r4, #0, #9
    5688:	5903      	ldr	r3, [r0, r4]
    return -1;
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    568a:	1c5a      	adds	r2, r3, #1
    568c:	d004      	beq.n	5698 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]+0x30>
    return 0;
  }
  *value = next;
    568e:	602b      	str	r3, [r5, #0]
  return 1;
    5690:	2001      	movs	r0, #1
    5692:	bd38      	pop	{r3, r4, r5, pc}
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));

  cache = dataCacheGet(sector, FsCache::CACHE_FOR_READ);
  if (!cache) {
    return -1;
    5694:	20ff      	movs	r0, #255	; 0xff
    5696:	bd38      	pop	{r3, r4, r5, pc}
  }
  next = getLe32(cache + ((cluster << 2) & m_sectorMask));

  if (next == EXFAT_EOC) {
    return 0;
    5698:	2000      	movs	r0, #0
  }
  *value = next;
  return 1;
}
    569a:	bd38      	pop	{r3, r4, r5, pc}

0000569c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    569c:	b538      	push	{r3, r4, r5, lr}
    569e:	460c      	mov	r4, r1
    56a0:	f8d0 1424 	ldr.w	r1, [r0, #1060]	; 0x424
    56a4:	4615      	mov	r5, r2
    56a6:	f500 7004 	add.w	r0, r0, #528	; 0x210
    56aa:	2201      	movs	r2, #1
    56ac:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    56b0:	f7fe ff82 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
  cache = dataCacheGet(sector, FsCache::CACHE_FOR_WRITE);
  if (!cache) {
    56b4:	4603      	mov	r3, r0
    56b6:	b128      	cbz	r0, 56c4 <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]+0x28>
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    56b8:	00a4      	lsls	r4, r4, #2
    DBG_FAIL_MACRO;
    goto fail;
  }
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;
    56ba:	2001      	movs	r0, #1
    56bc:	f3c4 0408 	ubfx	r4, r4, #0, #9
    56c0:	511d      	str	r5, [r3, r4]
    56c2:	bd38      	pop	{r3, r4, r5, pc}

 fail:
  return false;
}
    56c4:	bd38      	pop	{r3, r4, r5, pc}
    56c6:	bf00      	nop

000056c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>:
#include "../common/DebugMacros.h"
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
    56c8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    56cc:	4680      	mov	r8, r0
    56ce:	4691      	mov	r9, r2
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    56d0:	468b      	mov	fp, r1
    56d2:	2900      	cmp	r1, #0
    56d4:	d043      	beq.n	575e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x96>
    56d6:	1e8f      	subs	r7, r1, #2
  if (start >= m_clusterCount) {
    56d8:	f8d8 3430 	ldr.w	r3, [r8, #1072]	; 0x430
    56dc:	429f      	cmp	r7, r3
    56de:	d23a      	bcs.n	5756 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x8e>
    56e0:	f007 0507 	and.w	r5, r7, #7
    56e4:	2301      	movs	r3, #1
    56e6:	f3c7 0ac8 	ubfx	sl, r7, #3, #9
    56ea:	fa03 f505 	lsl.w	r5, r3, r5
    56ee:	b2ed      	uxtb	r5, r5
    start = 0;
  }
  uint32_t endAlloc = start;
  uint32_t bgnAlloc = start;
    56f0:	463e      	mov	r6, r7
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
  }
  uint32_t endAlloc = start;
    56f2:	463c      	mov	r4, r7
  bool bitmapModify(uint32_t cluster, uint32_t count, bool value);
  //----------------------------------------------------------------------------
  // Cache functions.
  uint8_t* bitmapCacheGet(uint32_t sector, uint8_t option) {
#if USE_EXFAT_BITMAP_CACHE
    return m_bitmapCache.get(sector, option);
    56f4:	f8d8 142c 	ldr.w	r1, [r8, #1068]	; 0x42c
    56f8:	2200      	movs	r2, #0
    56fa:	4640      	mov	r0, r8
    56fc:	eb01 3114 	add.w	r1, r1, r4, lsr #12
    5700:	f7fe ff5a 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
  uint8_t mask = 1 << (start & 7);
  while (true) {
    uint32_t sector = m_clusterHeapStartSector +
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5704:	b1c0      	cbz	r0, 5738 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x70>
    5706:	f810 100a 	ldrb.w	r1, [r0, sl]
    570a:	e00a      	b.n	5722 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x5a>
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    570c:	454a      	cmp	r2, r9
    570e:	d029      	beq.n	5764 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x9c>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    5710:	42a7      	cmp	r7, r4
    5712:	d010      	beq.n	5736 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x6e>
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
    5714:	f8d8 2430 	ldr.w	r2, [r8, #1072]	; 0x430
    5718:	4294      	cmp	r4, r2
    571a:	d216      	bcs.n	574a <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x82>
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    571c:	f013 05ff 	ands.w	r5, r3, #255	; 0xff
    5720:	d00c      	beq.n	573c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x74>
        endAlloc++;
    5722:	3401      	adds	r4, #1
        if (!(mask & cache[i])) {
    5724:	420d      	tst	r5, r1
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
    5726:	ea4f 0345 	mov.w	r3, r5, lsl #1
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
    572a:	eba4 0206 	sub.w	r2, r4, r6
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
    572e:	d0ed      	beq.n	570c <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x44>
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    5730:	42a7      	cmp	r7, r4
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
    5732:	4626      	mov	r6, r4
            return bgnAlloc + 2;
          }
        } else {
          bgnAlloc = endAlloc;
        }
        if (endAlloc == start) {
    5734:	d1ee      	bne.n	5714 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x4c>
          return 1;
    5736:	2001      	movs	r0, #1
      mask = 1;
    }
    i = 0;
  }
  return 0;
}
    5738:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    573c:	f10a 0a01 	add.w	sl, sl, #1
          endAlloc = bgnAlloc = 0;
          i = sectorSize;
          break;
        }
      }
      mask = 1;
    5740:	2501      	movs	r5, #1
                     (endAlloc >> (m_bytesPerSectorShift + 3));
    cache = bitmapCacheGet(sector, FsCache::CACHE_FOR_READ);
    if (!cache) {
      return 0;
    }
    for (; i < sectorSize; i++) {
    5742:	f5ba 7f00 	cmp.w	sl, #512	; 0x200
    5746:	d1de      	bne.n	5706 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x3e>
    5748:	e001      	b.n	574e <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x86>
        }
        if (endAlloc == start) {
          return 1;
        }
        if (endAlloc >= m_clusterCount) {
          endAlloc = bgnAlloc = 0;
    574a:	2600      	movs	r6, #0
    574c:	4634      	mov	r4, r6
          break;
        }
      }
      mask = 1;
    }
    i = 0;
    574e:	f04f 0a00 	mov.w	sl, #0
    5752:	2501      	movs	r5, #1
    5754:	e7ce      	b.n	56f4 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x2c>
    5756:	2700      	movs	r7, #0
    5758:	2501      	movs	r5, #1
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
  if (start >= m_clusterCount) {
    start = 0;
    575a:	46ba      	mov	sl, r7
    575c:	e7c8      	b.n	56f0 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x28>
#include "ExFatVolume.h"
#include "../common/FsStructs.h"
//------------------------------------------------------------------------------
// return 0 if error, 1 if no space, else start cluster.
uint32_t ExFatPartition::bitmapFind(uint32_t cluster, uint32_t count) {
  uint32_t start = cluster ? cluster - 2 : m_bitmapStart;
    575e:	f8d0 7420 	ldr.w	r7, [r0, #1056]	; 0x420
    5762:	e7b9      	b.n	56d8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0x10>
    for (; i < sectorSize; i++) {
      for (; mask; mask <<= 1) {
        endAlloc++;
        if (!(mask & cache[i])) {
          if ((endAlloc - bgnAlloc) == count) {
            if (cluster == 0 && count == 1) {
    5764:	f1bb 0f00 	cmp.w	fp, #0
    5768:	d104      	bne.n	5774 <ExFatPartition::bitmapFind(unsigned long, unsigned long)+0xac>
    576a:	f1b9 0f01 	cmp.w	r9, #1
              // Start at found sector.  bitmapModify may increase this.
              m_bitmapStart = bgnAlloc;
    576e:	bf08      	it	eq
    5770:	f8c8 6420 	streq.w	r6, [r8, #1056]	; 0x420
            }
            return bgnAlloc + 2;
    5774:	1cb0      	adds	r0, r6, #2
    5776:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    577a:	bf00      	nop

0000577c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>:
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    577c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  uint32_t sector;
  uint32_t start = cluster - 2;
    5780:	3902      	subs	r1, #2
  }
  return 0;
}
//------------------------------------------------------------------------------
bool ExFatPartition::bitmapModify(uint32_t cluster,
                                  uint32_t count, bool value) {
    5782:	4615      	mov	r5, r2
    5784:	469a      	mov	sl, r3
  uint32_t start = cluster - 2;
  size_t i;
  uint8_t* cache;
  uint8_t mask;
  cluster -= 2;
  if ((start + count) > m_clusterCount) {
    5786:	f8d0 2430 	ldr.w	r2, [r0, #1072]	; 0x430
    578a:	194b      	adds	r3, r1, r5
    578c:	4293      	cmp	r3, r2
    578e:	d838      	bhi.n	5802 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    5790:	4680      	mov	r8, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    5792:	f1ba 0f00 	cmp.w	sl, #0
    5796:	d137      	bne.n	5808 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x8c>
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    }
  } else {
    if (start < m_bitmapStart) {
    5798:	f8d0 3420 	ldr.w	r3, [r0, #1056]	; 0x420
    579c:	4299      	cmp	r1, r3
      m_bitmapStart = start;
    579e:	bf38      	it	cc
    57a0:	f8c0 1420 	strcc.w	r1, [r0, #1056]	; 0x420
    }
  }
  mask = 1 << (start & 7);
    57a4:	f001 0407 	and.w	r4, r1, #7
    57a8:	2201      	movs	r2, #1
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    57aa:	f8d8 342c 	ldr.w	r3, [r8, #1068]	; 0x42c
  i = (start >> 3) & m_sectorMask;
    57ae:	f3c1 06c8 	ubfx	r6, r1, #3, #9
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    57b2:	fa02 f404 	lsl.w	r4, r2, r4
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
    57b6:	eb03 3911 	add.w	r9, r3, r1, lsr #12
  } else {
    if (start < m_bitmapStart) {
      m_bitmapStart = start;
    }
  }
  mask = 1 << (start & 7);
    57ba:	b2e4      	uxtb	r4, r4
    57bc:	2201      	movs	r2, #1
    57be:	4649      	mov	r1, r9
    57c0:	4640      	mov	r0, r8
  sector = m_clusterHeapStartSector +
                   (start >> (m_bytesPerSectorShift + 3));
  i = (start >> 3) & m_sectorMask;
  while (true) {
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    57c2:	4491      	add	r9, r2
    57c4:	f7fe fef8 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
    if (!cache) {
    57c8:	b1d8      	cbz	r0, 5802 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
    57ca:	1987      	adds	r7, r0, r6
    57cc:	f500 7000 	add.w	r0, r0, #512	; 0x200
    57d0:	f817 2b01 	ldrb.w	r2, [r7], #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
    57d4:	4222      	tst	r2, r4
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    57d6:	ea82 0204 	eor.w	r2, r2, r4
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    57da:	ea4f 0444 	mov.w	r4, r4, lsl #1
        if (value == static_cast<bool>(cache[i] & mask)) {
    57de:	bf14      	ite	ne
    57e0:	2601      	movne	r6, #1
    57e2:	2600      	moveq	r6, #0
    57e4:	4556      	cmp	r6, sl
    57e6:	d00c      	beq.n	5802 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x86>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
    57e8:	3d01      	subs	r5, #1
      for (; mask; mask <<= 1) {
        if (value == static_cast<bool>(cache[i] & mask)) {
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
    57ea:	f807 2c01 	strb.w	r2, [r7, #-1]
        if (--count == 0) {
    57ee:	d017      	beq.n	5820 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0xa4>
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
      for (; mask; mask <<= 1) {
    57f0:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
    57f4:	d1ee      	bne.n	57d4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x58>
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    57f6:	4287      	cmp	r7, r0
          return true;
        }
      }
      mask = 1;
    }
    i = 0;
    57f8:	4626      	mov	r6, r4
    57fa:	f04f 0401 	mov.w	r4, #1
    cache = bitmapCacheGet(sector++, FsCache::CACHE_FOR_WRITE);
    if (!cache) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    for (; i < m_bytesPerSector; i++) {
    57fe:	d1e7      	bne.n	57d0 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x54>
    5800:	e7dc      	b.n	57bc <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x40>
    }
    i = 0;
  }

 fail:
  return false;
    5802:	2000      	movs	r0, #0
    5804:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
  if ((start + count) > m_clusterCount) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (value) {
    if (start  <= m_bitmapStart && m_bitmapStart < (start + count)) {
    5808:	f8d0 0420 	ldr.w	r0, [r0, #1056]	; 0x420
    580c:	4283      	cmp	r3, r0
    580e:	d9c9      	bls.n	57a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
    5810:	4281      	cmp	r1, r0
    5812:	d8c7      	bhi.n	57a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
      m_bitmapStart = (start + count) < m_clusterCount ? start + count : 0;
    5814:	4293      	cmp	r3, r2
    5816:	bf28      	it	cs
    5818:	2300      	movcs	r3, #0
    581a:	f8c8 3420 	str.w	r3, [r8, #1056]	; 0x420
    581e:	e7c1      	b.n	57a4 <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)+0x28>
          DBG_FAIL_MACRO;
          goto fail;
        }
        cache[i] ^= mask;
        if (--count == 0) {
          return true;
    5820:	2001      	movs	r0, #1
    i = 0;
  }

 fail:
  return false;
}
    5822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    5826:	bf00      	nop

00005828 <ExFatPartition::chainSize(unsigned long)>:
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    5828:	b570      	push	{r4, r5, r6, lr}
    582a:	b082      	sub	sp, #8
    582c:	4605      	mov	r5, r0
  uint32_t n = 0;
    582e:	2400      	movs	r4, #0

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
    5830:	ae02      	add	r6, sp, #8
    5832:	f846 1d04 	str.w	r1, [r6, #-4]!
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    5836:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    583a:	9901      	ldr	r1, [sp, #4]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    583c:	3301      	adds	r3, #1
    583e:	4299      	cmp	r1, r3
    5840:	d902      	bls.n	5848 <ExFatPartition::chainSize(unsigned long)+0x20>
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    5842:	2000      	movs	r0, #0
    n++;
  } while (status);
  return n;
}
    5844:	b002      	add	sp, #8
    5846:	bd70      	pop	{r4, r5, r6, pc}
    5848:	4632      	mov	r2, r6
    584a:	4628      	mov	r0, r5
    584c:	f7ff ff0c 	bl	5668 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    5850:	3401      	adds	r4, #1
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    status = fatGet(cluster, & cluster);
    5852:	b240      	sxtb	r0, r0
    if (status < 0) return 0;
    5854:	2800      	cmp	r0, #0
    5856:	dbf4      	blt.n	5842 <ExFatPartition::chainSize(unsigned long)+0x1a>
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::chainSize(uint32_t cluster) {
  uint32_t n = 0;
  int8_t status;
  do {
    5858:	d1ed      	bne.n	5836 <ExFatPartition::chainSize(unsigned long)+0xe>
    status = fatGet(cluster, & cluster);
    if (status < 0) return 0;
    n++;
    585a:	4620      	mov	r0, r4
  } while (status);
  return n;
}
    585c:	b002      	add	sp, #8
    585e:	bd70      	pop	{r4, r5, r6, pc}

00005860 <ExFatPartition::dirCache(DirPos_t*, unsigned char)>:
//------------------------------------------------------------------------------
uint8_t* ExFatPartition::dirCache(DirPos_t* pos, uint8_t options) {
    5860:	b570      	push	{r4, r5, r6, lr}
    5862:	460e      	mov	r6, r1
    5864:	4604      	mov	r4, r0
#endif  // USE_EXFAT_BITMAP_CACHE
  }
  void dataCacheDirty() {m_dataCache.dirty();}
  void dataCacheInvalidate() {m_dataCache.invalidate();}
  uint8_t* dataCacheGet(uint32_t sector, uint8_t option) {
    return m_dataCache.get(sector, option);
    5866:	f8d0 5438 	ldr.w	r5, [r0, #1080]	; 0x438
    586a:	f500 7004 	add.w	r0, r0, #528	; 0x210
    586e:	6849      	ldr	r1, [r1, #4]
    5870:	6833      	ldr	r3, [r6, #0]
    5872:	4029      	ands	r1, r5
    5874:	f8d4 542c 	ldr.w	r5, [r4, #1068]	; 0x42c
    5878:	3b02      	subs	r3, #2
    587a:	f894 4445 	ldrb.w	r4, [r4, #1093]	; 0x445
    587e:	eb05 2151 	add.w	r1, r5, r1, lsr #9
    5882:	40a3      	lsls	r3, r4
    5884:	4419      	add	r1, r3
    5886:	f7fe fe97 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
  uint32_t sector = clusterStartSector(pos->cluster);
  sector += (m_clusterMask & pos->position) >> m_bytesPerSectorShift;
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
    588a:	b118      	cbz	r0, 5894 <ExFatPartition::dirCache(DirPos_t*, unsigned char)+0x34>
    588c:	6873      	ldr	r3, [r6, #4]
    588e:	f3c3 0308 	ubfx	r3, r3, #0, #9
    5892:	4418      	add	r0, r3
}
    5894:	bd70      	pop	{r4, r5, r6, pc}
    5896:	bf00      	nop

00005898 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)>:
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    5898:	b570      	push	{r4, r5, r6, lr}
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    589a:	684c      	ldr	r4, [r1, #4]
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    589c:	460d      	mov	r5, r1
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    589e:	f8d0 3438 	ldr.w	r3, [r0, #1080]	; 0x438
  uint8_t* cache = dataCacheGet(sector, options);
  return cache ? cache + (pos->position & m_sectorMask) : nullptr;
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
    58a2:	4606      	mov	r6, r0
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
    58a4:	18a1      	adds	r1, r4, r2
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    58a6:	401c      	ands	r4, r3
  pos->position += offset;
    58a8:	6069      	str	r1, [r5, #4]
  tmp >>= bytesPerClusterShift();
    58aa:	f890 3445 	ldrb.w	r3, [r0, #1093]	; 0x445
}
//------------------------------------------------------------------------------
// return -1 error, 0 EOC, 1 OK
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
    58ae:	4422      	add	r2, r4
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
    58b0:	3309      	adds	r3, #9
    58b2:	b2db      	uxtb	r3, r3
    58b4:	fa22 f403 	lsr.w	r4, r2, r3
  while (tmp--) {
    58b8:	b13c      	cbz	r4, 58ca <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x32>
    if (pos->isContiguous) {
    58ba:	7a2b      	ldrb	r3, [r5, #8]
    58bc:	b13b      	cbz	r3, 58ce <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x36>
      pos->cluster++;
    58be:	682b      	ldr	r3, [r5, #0]
    58c0:	3301      	adds	r3, #1
    58c2:	602b      	str	r3, [r5, #0]
    58c4:	3c01      	subs	r4, #1
int8_t ExFatPartition::dirSeek(DirPos_t* pos, uint32_t offset) {
  int8_t status;
  uint32_t tmp = (m_clusterMask & pos->position) + offset;
  pos->position += offset;
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    58c6:	2c00      	cmp	r4, #0
    58c8:	d1f7      	bne.n	58ba <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x22>
      if (status != 1) {
        return status;
      }
    }
  }
  return 1;
    58ca:	2001      	movs	r0, #1
    58cc:	bd70      	pop	{r4, r5, r6, pc}
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    58ce:	f8d6 3430 	ldr.w	r3, [r6, #1072]	; 0x430
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    58d2:	6829      	ldr	r1, [r5, #0]
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    58d4:	3301      	adds	r3, #1
    58d6:	4299      	cmp	r1, r3
    58d8:	d902      	bls.n	58e0 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x48>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    58da:	f04f 30ff 	mov.w	r0, #4294967295
        return status;
      }
    }
  }
  return 1;
}
    58de:	bd70      	pop	{r4, r5, r6, pc}
    58e0:	462a      	mov	r2, r5
    58e2:	4630      	mov	r0, r6
    58e4:	f7ff fec0 	bl	5668 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
  tmp >>= bytesPerClusterShift();
  while (tmp--) {
    if (pos->isContiguous) {
      pos->cluster++;
    } else {
      status = fatGet(pos->cluster, &pos->cluster);
    58e8:	b240      	sxtb	r0, r0
      if (status != 1) {
    58ea:	2801      	cmp	r0, #1
    58ec:	d0ea      	beq.n	58c4 <ExFatPartition::dirSeek(DirPos_t*, unsigned long)+0x2c>
    58ee:	bd70      	pop	{r4, r5, r6, pc}

000058f0 <ExFatPartition::fatGet(unsigned long, unsigned long*)>:
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    58f0:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    58f4:	3301      	adds	r3, #1
    58f6:	428b      	cmp	r3, r1
    58f8:	d201      	bcs.n	58fe <ExFatPartition::fatGet(unsigned long, unsigned long*)+0xe>
  if (next == EXFAT_EOC) {
    return 0;
  }
  *value = next;
  return 1;
}
    58fa:	20ff      	movs	r0, #255	; 0xff
    58fc:	4770      	bx	lr
    58fe:	f7ff beb3 	b.w	5668 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
    5902:	bf00      	nop

00005904 <ExFatPartition::fatPut(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5904:	2901      	cmp	r1, #1
    5906:	d90d      	bls.n	5924 <ExFatPartition::fatPut(unsigned long, unsigned long)+0x20>
    5908:	f8d0 3430 	ldr.w	r3, [r0, #1072]	; 0x430
    590c:	3301      	adds	r3, #1
    590e:	4299      	cmp	r1, r3
  }
  *value = next;
  return 1;
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
    5910:	b410      	push	{r4}
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5912:	d903      	bls.n	591c <ExFatPartition::fatPut(unsigned long, unsigned long)+0x18>
  setLe32(cache + ((cluster << 2) & m_sectorMask), value);
  return true;

 fail:
  return false;
}
    5914:	2000      	movs	r0, #0
    5916:	f85d 4b04 	ldr.w	r4, [sp], #4
    591a:	4770      	bx	lr
    591c:	f85d 4b04 	ldr.w	r4, [sp], #4
    5920:	f7ff bebc 	b.w	569c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    5924:	2000      	movs	r0, #0
    5926:	4770      	bx	lr

00005928 <ExFatPartition::freeChain(unsigned long)>:
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
    5928:	b5f0      	push	{r4, r5, r6, r7, lr}
    592a:	460c      	mov	r4, r1
    592c:	b083      	sub	sp, #12
    592e:	4605      	mov	r5, r0
  uint32_t next;
  uint32_t start = cluster;
    5930:	460f      	mov	r7, r1
uint8_t ExFatPartition::fatGet(uint32_t cluster, uint32_t* value) {
  uint8_t* cache;
  uint32_t next;
  uint32_t sector;

  if (cluster > (m_clusterCount + 1)) {
    5932:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    5936:	3301      	adds	r3, #1
    5938:	429c      	cmp	r4, r3
    593a:	d902      	bls.n	5942 <ExFatPartition::freeChain(unsigned long)+0x1a>
  } while (status);

  return true;

 fail:
  return false;
    593c:	2000      	movs	r0, #0
}
    593e:	b003      	add	sp, #12
    5940:	bdf0      	pop	{r4, r5, r6, r7, pc}
    5942:	4621      	mov	r1, r4
    5944:	aa01      	add	r2, sp, #4
    5946:	4628      	mov	r0, r5
    5948:	f7ff fe8e 	bl	5668 <ExFatPartition::fatGet(unsigned long, unsigned long*) [clone .part.3]>
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    594c:	2c01      	cmp	r4, #1
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    status = fatGet(cluster, &next);
    594e:	b246      	sxtb	r6, r0
    5950:	4621      	mov	r1, r4
    5952:	4628      	mov	r0, r5
}
//------------------------------------------------------------------------------
bool ExFatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  uint8_t* cache;
  if (cluster < 2 || cluster > (m_clusterCount + 1)) {
    5954:	d9f2      	bls.n	593c <ExFatPartition::freeChain(unsigned long)+0x14>
    5956:	0ff2      	lsrs	r2, r6, #31
    5958:	d1f0      	bne.n	593c <ExFatPartition::freeChain(unsigned long)+0x14>
    595a:	f8d5 3430 	ldr.w	r3, [r5, #1072]	; 0x430
    595e:	3301      	adds	r3, #1
    5960:	429c      	cmp	r4, r3
    5962:	d8eb      	bhi.n	593c <ExFatPartition::freeChain(unsigned long)+0x14>
    5964:	f7ff fe9a 	bl	569c <ExFatPartition::fatPut(unsigned long, unsigned long) [clone .part.4]>
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5968:	4639      	mov	r1, r7
    596a:	2300      	movs	r3, #0
    status = fatGet(cluster, &next);
    if (status < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (!fatPut(cluster, 0)) {
    596c:	2800      	cmp	r0, #0
    596e:	d0e5      	beq.n	593c <ExFatPartition::freeChain(unsigned long)+0x14>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    5970:	1c62      	adds	r2, r4, #1
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    5972:	4628      	mov	r0, r5
    }
    if (!fatPut(cluster, 0)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if ((cluster + 1) != next || status == 0) {
    5974:	9c01      	ldr	r4, [sp, #4]
    5976:	b10e      	cbz	r6, 597c <ExFatPartition::freeChain(unsigned long)+0x54>
    5978:	42a2      	cmp	r2, r4
    597a:	d0da      	beq.n	5932 <ExFatPartition::freeChain(unsigned long)+0xa>
      if (!bitmapModify(start, cluster - start + 1, 0)) {
    597c:	1bd2      	subs	r2, r2, r7
    597e:	f7ff fefd 	bl	577c <ExFatPartition::bitmapModify(unsigned long, unsigned long, bool)>
    5982:	2800      	cmp	r0, #0
    5984:	d0da      	beq.n	593c <ExFatPartition::freeChain(unsigned long)+0x14>
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    5986:	9c01      	ldr	r4, [sp, #4]
//------------------------------------------------------------------------------
bool ExFatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  uint32_t start = cluster;
  int8_t status;
  do {
    5988:	2e00      	cmp	r6, #0
    598a:	d0d8      	beq.n	593e <ExFatPartition::freeChain(unsigned long)+0x16>
    if ((cluster + 1) != next || status == 0) {
      if (!bitmapModify(start, cluster - start + 1, 0)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      start = next;
    598c:	4627      	mov	r7, r4
    598e:	e7d0      	b.n	5932 <ExFatPartition::freeChain(unsigned long)+0xa>

00005990 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>:
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    5990:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    5994:	2300      	movs	r3, #0
      }
    }
  }
}
//------------------------------------------------------------------------------
bool ExFatPartition::init(BlockDevice* dev, uint8_t part) {
    5996:	4604      	mov	r4, r0
    5998:	f04f 36ff 	mov.w	r6, #4294967295
    599c:	f500 7704 	add.w	r7, r0, #528	; 0x210
    59a0:	4615      	mov	r5, r2
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
  m_blockDev = dev;
    59a2:	f8c0 1440 	str.w	r1, [r0, #1088]	; 0x440
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    59a6:	6041      	str	r1, [r0, #4]
    59a8:	461a      	mov	r2, r3
    59aa:	f8c4 1214 	str.w	r1, [r4, #532]	; 0x214
    59ae:	4638      	mov	r0, r7
    59b0:	4619      	mov	r1, r3
  pbs_t* pbs;
  BpbExFat_t* bpb;
  MbrSector_t* mbr;
  MbrPart_t* mp;

  m_fatType = 0;
    59b2:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    59b6:	7023      	strb	r3, [r4, #0]
    59b8:	f884 3210 	strb.w	r3, [r4, #528]	; 0x210
    m_sector = 0XFFFFFFFF;
    59bc:	60e6      	str	r6, [r4, #12]
    59be:	f8c4 621c 	str.w	r6, [r4, #540]	; 0x21c
    59c2:	f7fe fdf9 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
  m_blockDev = dev;
  cacheInit(m_blockDev);
  cache = dataCacheGet(0, FsCache::CACHE_FOR_READ);
  if (part > 4 || !cache) {
    59c6:	2d04      	cmp	r5, #4
    59c8:	d80d      	bhi.n	59e6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    59ca:	4606      	mov	r6, r0
    59cc:	b158      	cbz	r0, 59e6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    59ce:	b96d      	cbnz	r5, 59ec <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x5c>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  pbs = reinterpret_cast<pbs_t*>(cache);
  if (strncmp(pbs->oemName, "EXFAT", 5)) {
    59d0:	2205      	movs	r2, #5
    59d2:	4929      	ldr	r1, [pc, #164]	; (5a78 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0xe8>)
    59d4:	1cf0      	adds	r0, r6, #3
    59d6:	f006 f821 	bl	ba1c <strncmp>
    59da:	4603      	mov	r3, r0
    59dc:	b918      	cbnz	r0, 59e6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    DBG_FAIL_MACRO;
    goto fail;
  }
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    59de:	f896 206c 	ldrb.w	r2, [r6, #108]	; 0x6c
    59e2:	2a09      	cmp	r2, #9
    59e4:	d01a      	beq.n	5a1c <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x8c>
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
  return true;

 fail:
  return false;
    59e6:	2000      	movs	r0, #0
    59e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (part >= 1) {
    mbr = reinterpret_cast<MbrSector_t*>(cache);
    mp = &mbr->part[part - 1];
    59ec:	1e6b      	subs	r3, r5, #1
    if ((mp->boot != 0 && mp->boot != 0X80) || mp->type == 0) {
    59ee:	eb00 1303 	add.w	r3, r0, r3, lsl #4
    59f2:	f893 21be 	ldrb.w	r2, [r3, #446]	; 0x1be
    59f6:	f012 027f 	ands.w	r2, r2, #127	; 0x7f
    59fa:	d1f4      	bne.n	59e6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
    59fc:	f893 31c2 	ldrb.w	r3, [r3, #450]	; 0x1c2
    5a00:	2b00      	cmp	r3, #0
    5a02:	d0f0      	beq.n	59e6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    5a04:	eb00 1505 	add.w	r5, r0, r5, lsl #4
    5a08:	4638      	mov	r0, r7
    5a0a:	f8d5 51b6 	ldr.w	r5, [r5, #438]	; 0x1b6
    5a0e:	4629      	mov	r1, r5
    5a10:	f7fe fdd2 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    volStart = getLe32(mp->relativeSectors);
    cache = dataCacheGet(volStart, FsCache::CACHE_FOR_READ);
    if (!cache) {
    5a14:	4606      	mov	r6, r0
    5a16:	2800      	cmp	r0, #0
    5a18:	d1da      	bne.n	59d0 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x40>
    5a1a:	e7e4      	b.n	59e6 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)+0x56>
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    5a1c:	6d32      	ldr	r2, [r6, #80]	; 0x50
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5a1e:	f04f 0801 	mov.w	r8, #1
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    5a22:	4601      	mov	r1, r0
    5a24:	4620      	mov	r0, r4
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    5a26:	eb02 0e05 	add.w	lr, r2, r5
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    5a2a:	4642      	mov	r2, r8
  bpb = reinterpret_cast<BpbExFat_t*>(pbs->bpb);
  if (bpb->bytesPerSectorShift != m_bytesPerSectorShift) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
    5a2c:	f8c4 e424 	str.w	lr, [r4, #1060]	; 0x424
  m_fatLength = getLe32(bpb->fatLength);
    5a30:	6d77      	ldr	r7, [r6, #84]	; 0x54
    5a32:	f8c4 7428 	str.w	r7, [r4, #1064]	; 0x428
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
    5a36:	6db7      	ldr	r7, [r6, #88]	; 0x58
    5a38:	443d      	add	r5, r7
    5a3a:	f8c4 542c 	str.w	r5, [r4, #1068]	; 0x42c
    5a3e:	6df5      	ldr	r5, [r6, #92]	; 0x5c
  m_clusterCount = getLe32(bpb->clusterCount);
    5a40:	f8c4 5430 	str.w	r5, [r4, #1072]	; 0x430
    5a44:	6e35      	ldr	r5, [r6, #96]	; 0x60
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
    5a46:	f8c4 5434 	str.w	r5, [r4, #1076]	; 0x434
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    5a4a:	f896 506d 	ldrb.w	r5, [r6, #109]	; 0x6d
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
    5a4e:	f8c4 3420 	str.w	r3, [r4, #1056]	; 0x420
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5a52:	f105 0309 	add.w	r3, r5, #9
  m_fatStartSector = volStart + getLe32(bpb->fatOffset);
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
    5a56:	f884 5445 	strb.w	r5, [r4, #1093]	; 0x445
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5a5a:	fa08 f303 	lsl.w	r3, r8, r3
  m_clusterMask = m_bytesPerCluster - 1;
    5a5e:	1e5d      	subs	r5, r3, #1
  m_fatLength = getLe32(bpb->fatLength);
  m_clusterHeapStartSector = volStart + getLe32(bpb->clusterHeapOffset);
  m_clusterCount = getLe32(bpb->clusterCount);
  m_rootDirectoryCluster = getLe32(bpb->rootDirectoryCluster);
  m_sectorsPerClusterShift = bpb->sectorsPerClusterShift;
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
    5a60:	f8c4 343c 	str.w	r3, [r4, #1084]	; 0x43c
  m_clusterMask = m_bytesPerCluster - 1;
    5a64:	f8c4 5438 	str.w	r5, [r4, #1080]	; 0x438
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
    5a68:	f7ff fe2e 	bl	56c8 <ExFatPartition::bitmapFind(unsigned long, unsigned long)>
  m_fatType = FAT_TYPE_EXFAT;
    5a6c:	2340      	movs	r3, #64	; 0x40
  return true;
    5a6e:	4640      	mov	r0, r8
  m_bytesPerCluster = 1UL << (m_bytesPerSectorShift + m_sectorsPerClusterShift);
  m_clusterMask = m_bytesPerCluster - 1;
  // Set m_bitmapStart to first free cluster.
  m_bitmapStart = 0;
  bitmapFind(0, 1);
  m_fatType = FAT_TYPE_EXFAT;
    5a70:	f884 3444 	strb.w	r3, [r4, #1092]	; 0x444
  return true;
    5a74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5a78:	200009e8 	.word	0x200009e8

00005a7c <ExFatPartition::rootLength()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
uint32_t ExFatPartition::rootLength() {
    5a7c:	b510      	push	{r4, lr}
    5a7e:	4604      	mov	r4, r0
  uint32_t nc = chainSize(m_rootDirectoryCluster);
    5a80:	f8d0 1434 	ldr.w	r1, [r0, #1076]	; 0x434
    5a84:	f7ff fed0 	bl	5828 <ExFatPartition::chainSize(unsigned long)>
  return nc << bytesPerClusterShift();
    5a88:	f894 3445 	ldrb.w	r3, [r4, #1093]	; 0x445
    5a8c:	3309      	adds	r3, #9
    5a8e:	b2db      	uxtb	r3, r3
}
    5a90:	4098      	lsls	r0, r3
    5a92:	bd10      	pop	{r4, pc}

00005a94 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)>:
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    5a94:	b34b      	cbz	r3, 5aea <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x56>
  }
  return true;
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
    5a96:	b470      	push	{r4, r5, r6}
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    5a98:	8844      	ldrh	r4, [r0, #2]
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    5a9a:	2c7e      	cmp	r4, #126	; 0x7e
    5a9c:	d81f      	bhi.n	5ade <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
    5a9e:	4413      	add	r3, r2
    5aa0:	3002      	adds	r0, #2
    5aa2:	440a      	add	r2, r1
    5aa4:	4419      	add	r1, r3
    5aa6:	f812 3b01 	ldrb.w	r3, [r2], #1
    5aaa:	b2e4      	uxtb	r4, r4
  }
  return left;
}
//------------------------------------------------------------------------------
static char toUpper(char c) {
  return c - ('a' <= c && c <= 'z' ? 'a' - 'A' : 0);
    5aac:	f1a3 0661 	sub.w	r6, r3, #97	; 0x61
    5ab0:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
    5ab4:	2e19      	cmp	r6, #25
    5ab6:	bf94      	ite	ls
    5ab8:	2620      	movls	r6, #32
    5aba:	2600      	movhi	r6, #0
    5abc:	2d19      	cmp	r5, #25
    5abe:	eba3 0306 	sub.w	r3, r3, r6
    5ac2:	bf94      	ite	ls
    5ac4:	2520      	movls	r5, #32
    5ac6:	2500      	movhi	r5, #0
    5ac8:	b2db      	uxtb	r3, r3
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    5aca:	1b64      	subs	r4, r4, r5
    5acc:	b2e4      	uxtb	r4, r4
    5ace:	429c      	cmp	r4, r3
    5ad0:	d105      	bne.n	5ade <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x4a>
}
//------------------------------------------------------------------------------
bool exFatCmpName(const DirName_t* unicode,
                  const char* name, size_t offset, size_t n) {
  uint16_t u;
  for (size_t i = 0; i < n; i++) {
    5ad2:	428a      	cmp	r2, r1
    5ad4:	d006      	beq.n	5ae4 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x50>
    5ad6:	f830 4f02 	ldrh.w	r4, [r0, #2]!
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
    5ada:	2c7e      	cmp	r4, #126	; 0x7e
    5adc:	d9e3      	bls.n	5aa6 <exFatCmpName(DirName_t const*, char const*, unsigned int, unsigned int)+0x12>
      return false;
    5ade:	2000      	movs	r0, #0
    }
  }
  return true;
}
    5ae0:	bc70      	pop	{r4, r5, r6}
    5ae2:	4770      	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    5ae4:	2001      	movs	r0, #1
}
    5ae6:	bc70      	pop	{r4, r5, r6}
    5ae8:	4770      	bx	lr
    u = getLe16(unicode->unicode + 2*i);
    if (u >= 0x7F  || toUpper(name[i + offset]) != toUpper(u)) {
      return false;
    }
  }
  return true;
    5aea:	2001      	movs	r0, #1
}
    5aec:	4770      	bx	lr
    5aee:	bf00      	nop

00005af0 <exFatHashName(char const*, unsigned int, unsigned short)>:
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    5af0:	b1d1      	cbz	r1, 5b28 <exFatHashName(char const*, unsigned int, unsigned short)+0x38>
    5af2:	4401      	add	r1, r0
    hash = ((hash << 15) | (hash >> 1)) + (c >> 8);
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
    5af4:	b430      	push	{r4, r5}
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    5af6:	f810 4b01 	ldrb.w	r4, [r0], #1
    5afa:	03d3      	lsls	r3, r2, #15
    5afc:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
    if ('a' <= c && c <= 'z') {
    5b00:	f1a4 0361 	sub.w	r3, r4, #97	; 0x61
      c -= 'a' - 'A';
    5b04:	f1a4 0520 	sub.w	r5, r4, #32
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
    5b08:	2b19      	cmp	r3, #25
      c -= 'a' - 'A';
    5b0a:	bf98      	it	ls
    5b0c:	b2ec      	uxtbls	r4, r5
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    5b0e:	4281      	cmp	r1, r0
    uint8_t c = name[i];
    if ('a' <= c && c <= 'z') {
      c -= 'a' - 'A';
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    5b10:	fa14 f282 	uxtah	r2, r4, r2
    5b14:	b292      	uxth	r2, r2
    5b16:	ea4f 33c2 	mov.w	r3, r2, lsl #15
    5b1a:	ea43 0252 	orr.w	r2, r3, r2, lsr #1
    5b1e:	b292      	uxth	r2, r2
  }
  return hash;
}
//------------------------------------------------------------------------------
uint16_t exFatHashName(const char* name, size_t n, uint16_t hash) {
  for (size_t i = 0; i < n; i++) {
    5b20:	d1e9      	bne.n	5af6 <exFatHashName(char const*, unsigned int, unsigned short)+0x6>
    }
    hash = ((hash << 15) | (hash >> 1)) + c;
    hash = ((hash << 15) | (hash >> 1));
  }
  return hash;
}
    5b22:	4610      	mov	r0, r2
    5b24:	bc30      	pop	{r4, r5}
    5b26:	4770      	bx	lr
    5b28:	4610      	mov	r0, r2
    5b2a:	4770      	bx	lr

00005b2c <FatFile::openRoot(FatVolume*) [clone .part.38]>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
    5b2c:	b538      	push	{r3, r4, r5, lr}
    5b2e:	460d      	mov	r5, r1
    5b30:	4604      	mov	r4, r0
  // error if file is already open
  if (isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(this, 0, sizeof(FatFile));
    5b32:	2224      	movs	r2, #36	; 0x24
    5b34:	2100      	movs	r1, #0
    5b36:	f005 fc79 	bl	b42c <memset>

  m_vol = vol;
    5b3a:	60a5      	str	r5, [r4, #8]
  switch (vol->fatType()) {
    5b3c:	79eb      	ldrb	r3, [r5, #7]
    5b3e:	2b10      	cmp	r3, #16
    5b40:	d008      	beq.n	5b54 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x28>
    5b42:	2b20      	cmp	r3, #32
    5b44:	d104      	bne.n	5b50 <FatFile::openRoot(FatVolume*) [clone .part.38]+0x24>
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5b46:	2340      	movs	r3, #64	; 0x40
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b48:	2001      	movs	r0, #1
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    break;

  case 32:
    m_attributes = FILE_ATTR_ROOT32;
    5b4a:	7023      	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b4c:	70a0      	strb	r0, [r4, #2]
    5b4e:	bd38      	pop	{r3, r4, r5, pc}
  return true;

 fail:
  return false;
    5b50:	2000      	movs	r0, #0
}
    5b52:	bd38      	pop	{r3, r4, r5, pc}
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5b54:	2320      	movs	r3, #32
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b56:	2001      	movs	r0, #1
  switch (vol->fatType()) {
#if FAT12_SUPPORT
  case 12:
#endif  // FAT12_SUPPORT
  case 16:
    m_attributes = FILE_ATTR_ROOT_FIXED;
    5b58:	7023      	strb	r3, [r4, #0]
  default:
    DBG_FAIL_MACRO;
    goto fail;
  }
  // read only
  m_flags = FILE_FLAG_READ;
    5b5a:	70a0      	strb	r0, [r4, #2]
    5b5c:	bd38      	pop	{r3, r4, r5, pc}
    5b5e:	bf00      	nop

00005b60 <FatFile::addCluster()>:
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5b60:	4602      	mov	r2, r0
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5b62:	b538      	push	{r3, r4, r5, lr}
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
    5b64:	f852 5f10 	ldr.w	r5, [r2, #16]!
#include "../common/DebugMacros.h"
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
// Add a cluster to a file.
bool FatFile::addCluster() {
    5b68:	4604      	mov	r4, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  uint32_t cc = m_curCluster;
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    5b6a:	6880      	ldr	r0, [r0, #8]
    5b6c:	4629      	mov	r1, r5
    5b6e:	f001 f86d 	bl	6c4c <FatPartition::allocateCluster(unsigned long, unsigned long*)>
    5b72:	b150      	cbz	r0, 5b8a <FatFile::addCluster()+0x2a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    5b74:	b155      	cbz	r5, 5b8c <FatFile::addCluster()+0x2c>
    m_flags |= FILE_FLAG_CONTIGUOUS;
  } else if (m_curCluster != (cc + 1)) {
    5b76:	6923      	ldr	r3, [r4, #16]
    5b78:	3501      	adds	r5, #1
    5b7a:	42ab      	cmp	r3, r5
    m_flags &= ~FILE_FLAG_CONTIGUOUS;
    5b7c:	78a3      	ldrb	r3, [r4, #2]
    5b7e:	bf18      	it	ne
    5b80:	f003 03bf 	andne.w	r3, r3, #191	; 0xbf
  }
  m_flags |= FILE_FLAG_DIR_DIRTY;
    5b84:	f063 037f 	orn	r3, r3, #127	; 0x7f
    5b88:	70a3      	strb	r3, [r4, #2]
  return false;
#else  // USE_FAT_FILE_FLAG_CONTIGUOUS
  m_flags |= FILE_FLAG_DIR_DIRTY;
  return m_vol->allocateCluster(m_curCluster, &m_curCluster);
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
    5b8a:	bd38      	pop	{r3, r4, r5, pc}
  if (!m_vol->allocateCluster(m_curCluster, &m_curCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (cc == 0) {
    m_flags |= FILE_FLAG_CONTIGUOUS;
    5b8c:	78a3      	ldrb	r3, [r4, #2]
    5b8e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    5b92:	e7f7      	b.n	5b84 <FatFile::addCluster()+0x24>

00005b94 <FatFile::addDirCluster()>:
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
}
//------------------------------------------------------------------------------
// Add a cluster to a directory file and zero the cluster.
// Return with first sector of cluster in the cache.
bool FatFile::addDirCluster() {
    5b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t sector;
  cache_t* pc;

  if (isRootFixed()) {
    5b98:	7803      	ldrb	r3, [r0, #0]
    5b9a:	f003 0320 	and.w	r3, r3, #32
    5b9e:	b92b      	cbnz	r3, 5bac <FatFile::addDirCluster()+0x18>
    5ba0:	f003 04ff 	and.w	r4, r3, #255	; 0xff
    DBG_FAIL_MACRO;
    goto fail;
  }
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    5ba4:	6941      	ldr	r1, [r0, #20]
    5ba6:	4b20      	ldr	r3, [pc, #128]	; (5c28 <FatFile::addDirCluster()+0x94>)
    5ba8:	4299      	cmp	r1, r3
    5baa:	d903      	bls.n	5bb4 <FatFile::addDirCluster()+0x20>
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
  return true;

 fail:
  return false;
    5bac:	2600      	movs	r6, #0
}
    5bae:	4630      	mov	r0, r6
    5bb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5bb4:	4605      	mov	r5, r0
  // max folder size
  if (m_curPosition >= 512UL*4095) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (!addCluster()) {
    5bb6:	f7ff ffd3 	bl	5b60 <FatFile::addCluster()>
    5bba:	4606      	mov	r6, r0
    5bbc:	2800      	cmp	r0, #0
    5bbe:	d0f5      	beq.n	5bac <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  sector = m_vol->clusterStartSector(m_curCluster);
    5bc0:	68a9      	ldr	r1, [r5, #8]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5bc2:	2205      	movs	r2, #5
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5bc4:	692b      	ldr	r3, [r5, #16]
    5bc6:	798f      	ldrb	r7, [r1, #6]
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5bc8:	f101 0024 	add.w	r0, r1, #36	; 0x24
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
  }
  uint32_t clusterStartSector(uint32_t cluster) const {
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
    5bcc:	3b02      	subs	r3, #2
    5bce:	6949      	ldr	r1, [r1, #20]
    5bd0:	40bb      	lsls	r3, r7
    5bd2:	185f      	adds	r7, r3, r1
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5bd4:	4639      	mov	r1, r7
    5bd6:	f7fe fcef 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
  pc = m_vol->cacheFetchData(sector, FsCache::CACHE_RESERVE_FOR_WRITE);
  if (!pc) {
    5bda:	4680      	mov	r8, r0
    5bdc:	2800      	cmp	r0, #0
    5bde:	d0e5      	beq.n	5bac <FatFile::addDirCluster()+0x18>
    DBG_FAIL_MACRO;
    goto fail;
  }
  memset(pc, 0, m_vol->bytesPerSector());
    5be0:	f44f 7200 	mov.w	r2, #512	; 0x200
    5be4:	4621      	mov	r1, r4
    5be6:	f005 fc21 	bl	b42c <memset>
  // zero rest of clusters
  for (uint8_t i = 1; i < m_vol->sectorsPerCluster(); i++) {
    5bea:	68ab      	ldr	r3, [r5, #8]
    5bec:	791a      	ldrb	r2, [r3, #4]
    5bee:	2a01      	cmp	r2, #1
    5bf0:	d910      	bls.n	5c14 <FatFile::addDirCluster()+0x80>
    5bf2:	2401      	movs	r4, #1
    5bf4:	e004      	b.n	5c00 <FatFile::addDirCluster()+0x6c>
    5bf6:	68ab      	ldr	r3, [r5, #8]
    5bf8:	b2e4      	uxtb	r4, r4
    5bfa:	791a      	ldrb	r2, [r3, #4]
    5bfc:	42a2      	cmp	r2, r4
    5bfe:	d909      	bls.n	5c14 <FatFile::addDirCluster()+0x80>
    5c00:	6818      	ldr	r0, [r3, #0]
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
  }
  bool writeSector(uint32_t sector, const uint8_t* src) {
    return m_blockDev->writeSector(sector, src);
    5c02:	19e1      	adds	r1, r4, r7
    5c04:	4642      	mov	r2, r8
    5c06:	3401      	adds	r4, #1
    5c08:	6803      	ldr	r3, [r0, #0]
    5c0a:	69db      	ldr	r3, [r3, #28]
    5c0c:	4798      	blx	r3
    if (!m_vol->writeSector(sector + i, pc->data)) {
    5c0e:	2800      	cmp	r0, #0
    5c10:	d1f1      	bne.n	5bf6 <FatFile::addDirCluster()+0x62>
    5c12:	e7cb      	b.n	5bac <FatFile::addDirCluster()+0x18>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Set position to EOF to avoid inconsistent curCluster/curPosition.
  m_curPosition += m_vol->bytesPerCluster();
    5c14:	799b      	ldrb	r3, [r3, #6]
    5c16:	f44f 7200 	mov.w	r2, #512	; 0x200
    5c1a:	6969      	ldr	r1, [r5, #20]
    5c1c:	fa02 f303 	lsl.w	r3, r2, r3
    5c20:	fa11 f383 	uxtah	r3, r1, r3
    5c24:	616b      	str	r3, [r5, #20]
    5c26:	e7c2      	b.n	5bae <FatFile::addDirCluster()+0x1a>
    5c28:	001ffdff 	.word	0x001ffdff

00005c2c <FatFile::cacheDirEntry(unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// cache a file's directory entry
// return pointer to cached entry or null for failure
DirFat_t* FatFile::cacheDirEntry(uint8_t action) {
    5c2c:	b510      	push	{r4, lr}
    5c2e:	4604      	mov	r4, r0
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5c30:	6880      	ldr	r0, [r0, #8]
    5c32:	460a      	mov	r2, r1
    5c34:	3024      	adds	r0, #36	; 0x24
    5c36:	69a1      	ldr	r1, [r4, #24]
    5c38:	f7fe fcbe 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
  cache_t* pc;
  pc = m_vol->cacheFetchData(m_dirSector, action);
  if (!pc) {
    5c3c:	b120      	cbz	r0, 5c48 <FatFile::cacheDirEntry(unsigned char)+0x1c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return pc->dir + (m_dirIndex & 0XF);
    5c3e:	88a3      	ldrh	r3, [r4, #4]
    5c40:	f003 030f 	and.w	r3, r3, #15
    5c44:	eb00 1043 	add.w	r0, r0, r3, lsl #5

 fail:
  return nullptr;
}
    5c48:	bd10      	pop	{r4, pc}
    5c4a:	bf00      	nop

00005c4c <FatFile::sync() [clone .part.42]>:
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5c4c:	b530      	push	{r4, r5, lr}
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5c4e:	f990 3002 	ldrsb.w	r3, [r0, #2]
 fail:
  m_curCluster = tmp;
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
    5c52:	b083      	sub	sp, #12
    5c54:	4604      	mov	r4, r0
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    5c56:	2b00      	cmp	r3, #0
    5c58:	db19      	blt.n	5c8e <FatFile::sync() [clone .part.42]+0x42>
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
  }
  if (m_vol->cacheSync()) {
    5c5a:	68a5      	ldr	r5, [r4, #8]
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5c5c:	f105 0024 	add.w	r0, r5, #36	; 0x24
    5c60:	f7fe fcda 	bl	4618 <FsCache::sync()>
    5c64:	b930      	cbnz	r0, 5c74 <FatFile::sync() [clone .part.42]+0x28>
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    5c66:	7863      	ldrb	r3, [r4, #1]
  return false;
    5c68:	2000      	movs	r0, #0
    return true;
  }
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
    5c6a:	f043 0301 	orr.w	r3, r3, #1
    5c6e:	7063      	strb	r3, [r4, #1]
  return false;
}
    5c70:	b003      	add	sp, #12
    5c72:	bd30      	pop	{r4, r5, pc}
    5c74:	f505 700d 	add.w	r0, r5, #564	; 0x234
    5c78:	f7fe fcce 	bl	4618 <FsCache::sync()>
    5c7c:	2800      	cmp	r0, #0
    5c7e:	d0f2      	beq.n	5c66 <FatFile::sync() [clone .part.42]+0x1a>
    5c80:	6828      	ldr	r0, [r5, #0]
  }
  bool readSector(uint32_t sector, uint8_t* dst) {
    return m_blockDev->readSector(sector, dst);
  }
  bool syncDevice() {
    return m_blockDev->syncDevice();
    5c82:	6803      	ldr	r3, [r0, #0]
    5c84:	699b      	ldr	r3, [r3, #24]
    5c86:	4798      	blx	r3
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
  }
  bool cacheSync() {
    return m_cache.sync() && m_fatCache.sync() && syncDevice();
    5c88:	2800      	cmp	r0, #0
    5c8a:	d0ec      	beq.n	5c66 <FatFile::sync() [clone .part.42]+0x1a>
    5c8c:	e7f0      	b.n	5c70 <FatFile::sync() [clone .part.42]+0x24>
  uint8_t ms10;
  if (!isOpen()) {
    return true;
  }
  if (m_flags & FILE_FLAG_DIR_DIRTY) {
    DirFat_t* dir = cacheDirEntry(FsCache::CACHE_FOR_WRITE);
    5c8e:	2101      	movs	r1, #1
    5c90:	f7ff ffcc 	bl	5c2c <FatFile::cacheDirEntry(unsigned char)>
    // check for deleted by another open file object
    if (!dir || dir->name[0] == FAT_NAME_DELETED) {
    5c94:	4605      	mov	r5, r0
    5c96:	2800      	cmp	r0, #0
    5c98:	d0e5      	beq.n	5c66 <FatFile::sync() [clone .part.42]+0x1a>
    5c9a:	7803      	ldrb	r3, [r0, #0]
    5c9c:	2be5      	cmp	r3, #229	; 0xe5
    5c9e:	d0e2      	beq.n	5c66 <FatFile::sync() [clone .part.42]+0x1a>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // do not set filesize for dir files
    if (isFile()) {
    5ca0:	7823      	ldrb	r3, [r4, #0]
    5ca2:	071b      	lsls	r3, r3, #28
    5ca4:	d501      	bpl.n	5caa <FatFile::sync() [clone .part.42]+0x5e>
      setLe32(dir->fileSize, m_fileSize);
    5ca6:	69e3      	ldr	r3, [r4, #28]
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    5ca8:	61c3      	str	r3, [r0, #28]
    }

    // update first cluster fields
    setLe16(dir->firstClusterLow, m_firstCluster & 0XFFFF);
    5caa:	6a23      	ldr	r3, [r4, #32]
    setLe16(dir->firstClusterHigh, m_firstCluster >> 16);

    // set modify time if user supplied a callback date/time function
    if (FsDateTime::callback) {
    5cac:	490b      	ldr	r1, [pc, #44]	; (5cdc <FatFile::sync() [clone .part.42]+0x90>)
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    5cae:	0c1a      	lsrs	r2, r3, #16
    5cb0:	836b      	strh	r3, [r5, #26]
    5cb2:	680b      	ldr	r3, [r1, #0]
    5cb4:	82aa      	strh	r2, [r5, #20]
    5cb6:	b163      	cbz	r3, 5cd2 <FatFile::sync() [clone .part.42]+0x86>
      FsDateTime::callback(&date, &time, &ms10);
    5cb8:	f10d 0203 	add.w	r2, sp, #3
    5cbc:	f10d 0106 	add.w	r1, sp, #6
    5cc0:	a801      	add	r0, sp, #4
    5cc2:	4798      	blx	r3
      setLe16(dir->modifyDate, date);
    5cc4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
    5cc8:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    5ccc:	832b      	strh	r3, [r5, #24]
    5cce:	826b      	strh	r3, [r5, #18]
    5cd0:	82ea      	strh	r2, [r5, #22]
      setLe16(dir->accessDate, date);
      setLe16(dir->modifyTime, time);
    }
    // clear directory dirty
    m_flags &= ~FILE_FLAG_DIR_DIRTY;
    5cd2:	78a3      	ldrb	r3, [r4, #2]
    5cd4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
    5cd8:	70a3      	strb	r3, [r4, #2]
    5cda:	e7be      	b.n	5c5a <FatFile::sync() [clone .part.42]+0xe>
    5cdc:	20036c3c 	.word	0x20036c3c

00005ce0 <FatFile::close()>:

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5ce0:	b510      	push	{r4, lr}
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5ce2:	7803      	ldrb	r3, [r0, #0]

 fail:
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
    5ce4:	4604      	mov	r4, r0
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5ce6:	b923      	cbnz	r3, 5cf2 <FatFile::close()+0x12>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5ce8:	2300      	movs	r3, #0
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    return true;
    5cea:	2001      	movs	r0, #1
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5cec:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    5cee:	70a3      	strb	r3, [r4, #2]
  return rtn;
}
    5cf0:	bd10      	pop	{r4, pc}
    5cf2:	f7ff ffab 	bl	5c4c <FatFile::sync() [clone .part.42]>
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5cf6:	2300      	movs	r3, #0
    5cf8:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
    5cfa:	70a3      	strb	r3, [r4, #2]
  return rtn;
}
    5cfc:	bd10      	pop	{r4, pc}
    5cfe:	bf00      	nop

00005d00 <FatFile::isBusy()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::isBusy() {
    5d00:	6883      	ldr	r3, [r0, #8]
    5d02:	6818      	ldr	r0, [r3, #0]
  /**
   * Check for BlockDevice busy.
   *
   * \return true if busy else false.
   */
  bool isBusy() {return m_blockDev->isBusy();}
    5d04:	6803      	ldr	r3, [r0, #0]
    5d06:	689b      	ldr	r3, [r3, #8]
    5d08:	4718      	bx	r3
    5d0a:	bf00      	nop

00005d0c <FatFile::open(FatFile*, char const*, int)>:
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5d10:	4606      	mov	r6, r0
    5d12:	b092      	sub	sp, #72	; 0x48
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    5d14:	2000      	movs	r0, #0
    5d16:	460d      	mov	r5, r1
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5d18:	7831      	ldrb	r1, [r6, #0]
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, const char* path, oflag_t oflag) {
    5d1a:	9201      	str	r2, [sp, #4]
    5d1c:	f88d 0024 	strb.w	r0, [sp, #36]	; 0x24
    5d20:	f88d 0025 	strb.w	r0, [sp, #37]	; 0x25
    5d24:	f88d 0026 	strb.w	r0, [sp, #38]	; 0x26
  FatFile tmpDir;
  fname_t fname;

  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    5d28:	b921      	cbnz	r1, 5d34 <FatFile::open(FatFile*, char const*, int)+0x28>
    5d2a:	4698      	mov	r8, r3
    5d2c:	782b      	ldrb	r3, [r5, #0]
    5d2e:	f013 0f70 	tst.w	r3, #112	; 0x70
    5d32:	d103      	bne.n	5d3c <FatFile::open(FatFile*, char const*, int)+0x30>
    close();
  }
  return open(dirFile, &fname, oflag);

 fail:
  return false;
    5d34:	2000      	movs	r0, #0
}
    5d36:	b012      	add	sp, #72	; 0x48
    5d38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  // error if already open
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    5d3c:	7813      	ldrb	r3, [r2, #0]
    5d3e:	4610      	mov	r0, r2
    5d40:	2b2f      	cmp	r3, #47	; 0x2f
    5d42:	d029      	beq.n	5d98 <FatFile::open(FatFile*, char const*, int)+0x8c>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d44:	2700      	movs	r7, #0
    5d46:	e002      	b.n	5d4e <FatFile::open(FatFile*, char const*, int)+0x42>
    5d48:	9801      	ldr	r0, [sp, #4]
  return nullptr;
}
//------------------------------------------------------------------------------
bool FatFile::close() {
  bool rtn = sync();
  m_attributes = FILE_ATTR_CLOSED;
    5d4a:	7037      	strb	r7, [r6, #0]
  m_flags = 0;
    5d4c:	70b7      	strb	r7, [r6, #2]
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5d4e:	aa01      	add	r2, sp, #4
    5d50:	a903      	add	r1, sp, #12
    5d52:	f000 fb9b 	bl	648c <FatFile::parsePathName(char const*, fname_t*, char const**)>
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d56:	aa03      	add	r2, sp, #12
    5d58:	4629      	mov	r1, r5
    5d5a:	2300      	movs	r3, #0
      goto fail;
    }
    dirFile = &tmpDir;
  }
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
    5d5c:	2800      	cmp	r0, #0
    5d5e:	d0e9      	beq.n	5d34 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5d60:	9c01      	ldr	r4, [sp, #4]
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d62:	4630      	mov	r0, r6
  while (1) {
    if (!parsePathName(path, &fname, &path)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (*path == 0) {
    5d64:	7824      	ldrb	r4, [r4, #0]
    5d66:	b334      	cbz	r4, 5db6 <FatFile::open(FatFile*, char const*, int)+0xaa>
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d68:	f000 fd32 	bl	67d0 <FatFile::open(FatFile*, fname_t*, int)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5d6c:	4635      	mov	r5, r6
    5d6e:	ac09      	add	r4, sp, #36	; 0x24
      goto fail;
    }
    if (*path == 0) {
      break;
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
    5d70:	2800      	cmp	r0, #0
    5d72:	d0df      	beq.n	5d34 <FatFile::open(FatFile*, char const*, int)+0x28>
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d74:	f896 e000 	ldrb.w	lr, [r6]
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5d78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5d7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5d7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    5d7e:	f8d5 c000 	ldr.w	ip, [r5]
    dirFile = &tmpDir;
    5d82:	ad09      	add	r5, sp, #36	; 0x24
    }
    if (!open(dirFile, &fname, O_RDONLY)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    tmpDir = *this;
    5d84:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    5d86:	f8c4 c000 	str.w	ip, [r4]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5d8a:	f1be 0f00 	cmp.w	lr, #0
    5d8e:	d0db      	beq.n	5d48 <FatFile::open(FatFile*, char const*, int)+0x3c>
    5d90:	4630      	mov	r0, r6
    5d92:	f7ff ff5b 	bl	5c4c <FatFile::sync() [clone .part.42]>
    5d96:	e7d7      	b.n	5d48 <FatFile::open(FatFile*, char const*, int)+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
      path++;
    5d98:	3001      	adds	r0, #1
    5d9a:	9001      	str	r0, [sp, #4]
  if (isOpen() || !dirFile->isDir()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isDirSeparator(*path)) {
    while (isDirSeparator(*path)) {
    5d9c:	7803      	ldrb	r3, [r0, #0]
    5d9e:	2b2f      	cmp	r3, #47	; 0x2f
    5da0:	d0fa      	beq.n	5d98 <FatFile::open(FatFile*, char const*, int)+0x8c>
      path++;
    }
    if (*path == 0) {
    5da2:	b18b      	cbz	r3, 5dc8 <FatFile::open(FatFile*, char const*, int)+0xbc>
    5da4:	68a9      	ldr	r1, [r5, #8]
    5da6:	a809      	add	r0, sp, #36	; 0x24
    5da8:	f7ff fec0 	bl	5b2c <FatFile::openRoot(FatVolume*) [clone .part.38]>
      return openRoot(dirFile->m_vol);
    }
    if (!tmpDir.openRoot(dirFile->m_vol)) {
    5dac:	2800      	cmp	r0, #0
    5dae:	d0c1      	beq.n	5d34 <FatFile::open(FatFile*, char const*, int)+0x28>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile = &tmpDir;
    5db0:	ad09      	add	r5, sp, #36	; 0x24
    5db2:	9801      	ldr	r0, [sp, #4]
    5db4:	e7c6      	b.n	5d44 <FatFile::open(FatFile*, char const*, int)+0x38>
    }
    tmpDir = *this;
    dirFile = &tmpDir;
    close();
  }
  return open(dirFile, &fname, oflag);
    5db6:	4643      	mov	r3, r8
    5db8:	aa03      	add	r2, sp, #12
    5dba:	4629      	mov	r1, r5
    5dbc:	4630      	mov	r0, r6
    5dbe:	f000 fd07 	bl	67d0 <FatFile::open(FatFile*, fname_t*, int)>

 fail:
  return false;
}
    5dc2:	b012      	add	sp, #72	; 0x48
    5dc4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5dc8:	68a9      	ldr	r1, [r5, #8]
    5dca:	4630      	mov	r0, r6
    5dcc:	f7ff feae 	bl	5b2c <FatFile::openRoot(FatVolume*) [clone .part.38]>
    5dd0:	e7b1      	b.n	5d36 <FatFile::open(FatFile*, char const*, int)+0x2a>
    5dd2:	bf00      	nop

00005dd4 <FatFile::open(FatVolume*, char const*, int)>:
bool FatFile::open(const char* path, oflag_t oflag) {
  return open(FatVolume::cwv(), path, oflag);
}
//------------------------------------------------------------------------------
bool FatFile::open(FatVolume* vol, const char* path, oflag_t oflag) {
  return vol && open(vol->vwd(), path, oflag);
    5dd4:	b119      	cbz	r1, 5dde <FatFile::open(FatVolume*, char const*, int)+0xa>
    5dd6:	f201 4144 	addw	r1, r1, #1092	; 0x444
    5dda:	f7ff bf97 	b.w	5d0c <FatFile::open(FatFile*, char const*, int)>
}
    5dde:	4608      	mov	r0, r1
    5de0:	4770      	bx	lr
    5de2:	bf00      	nop

00005de4 <FatFile::openRoot(FatVolume*)>:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::openRoot(FatVolume* vol) {
  // error if file is already open
  if (isOpen()) {
    5de4:	7803      	ldrb	r3, [r0, #0]
    5de6:	b10b      	cbz	r3, 5dec <FatFile::openRoot(FatVolume*)+0x8>
  m_flags = FILE_FLAG_READ;
  return true;

 fail:
  return false;
}
    5de8:	2000      	movs	r0, #0
    5dea:	4770      	bx	lr
    5dec:	f7ff be9e 	b.w	5b2c <FatFile::openRoot(FatVolume*) [clone .part.38]>

00005df0 <FatFile::preAllocate(unsigned long)>:
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5df0:	b909      	cbnz	r1, 5df6 <FatFile::preAllocate(unsigned long)+0x6>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5df2:	2000      	movs	r0, #0
}
    5df4:	4770      	bx	lr

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
    5df6:	b538      	push	{r3, r4, r5, lr}
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5df8:	7883      	ldrb	r3, [r0, #2]
    5dfa:	079b      	lsls	r3, r3, #30
    5dfc:	d401      	bmi.n	5e02 <FatFile::preAllocate(unsigned long)+0x12>
  m_flags |= FILE_FLAG_DIR_DIRTY;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
    5dfe:	2000      	movs	r0, #0
    5e00:	bd38      	pop	{r3, r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::preAllocate(uint32_t length) {
  uint32_t need;
  if (!length || !isWritable() || m_firstCluster) {
    5e02:	6a03      	ldr	r3, [r0, #32]
    5e04:	2b00      	cmp	r3, #0
    5e06:	d1fa      	bne.n	5dfe <FatFile::preAllocate(unsigned long)+0xe>
    5e08:	4604      	mov	r4, r0
    DBG_FAIL_MACRO;
    goto fail;
  }
  need = 1 + ((length - 1) >> m_vol->bytesPerClusterShift());
    5e0a:	6880      	ldr	r0, [r0, #8]
    5e0c:	460d      	mov	r5, r1
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    5e0e:	3901      	subs	r1, #1
    5e10:	7983      	ldrb	r3, [r0, #6]
    5e12:	f104 0220 	add.w	r2, r4, #32
    5e16:	3309      	adds	r3, #9
    5e18:	b2db      	uxtb	r3, r3
    5e1a:	40d9      	lsrs	r1, r3
    5e1c:	3101      	adds	r1, #1
    5e1e:	f000 ff57 	bl	6cd0 <FatPartition::allocContiguous(unsigned long, unsigned long*)>
    5e22:	2800      	cmp	r0, #0
    5e24:	d0eb      	beq.n	5dfe <FatFile::preAllocate(unsigned long)+0xe>
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5e26:	78a3      	ldrb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5e28:	7822      	ldrb	r2, [r4, #0]
  }
  m_fileSize = length;

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5e2a:	f063 031f 	orn	r3, r3, #31
  // allocate clusters
  if (!m_vol->allocContiguous(need, &m_firstCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_fileSize = length;
    5e2e:	61e5      	str	r5, [r4, #28]

#if USE_FAT_FILE_FLAG_CONTIGUOUS
  // Mark contiguous and insure sync() will update dir entry
  m_flags |= FILE_FLAG_PREALLOCATE | FILE_FLAG_CONTIGUOUS | FILE_FLAG_DIR_DIRTY;
    5e30:	70a3      	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    5e32:	b902      	cbnz	r2, 5e36 <FatFile::preAllocate(unsigned long)+0x46>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  return sync();

 fail:
  return false;
}
    5e34:	bd38      	pop	{r3, r4, r5, pc}
    5e36:	4620      	mov	r0, r4
    5e38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    5e3c:	f7ff bf06 	b.w	5c4c <FatFile::sync() [clone .part.42]>

00005e40 <FatFile::read(void*, unsigned int)>:
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5e40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5e44:	7883      	ldrb	r3, [r0, #2]
  m_curPosition = curPosition;
  m_curCluster = curCluster;
  return c;
}
//------------------------------------------------------------------------------
int FatFile::read(void* buf, size_t nbyte) {
    5e46:	b083      	sub	sp, #12
    5e48:	4605      	mov	r5, r0
  size_t toRead;
  uint32_t sector;  // raw device sector number
  cache_t* pc;

  // error if not open for read
  if (!isReadable()) {
    5e4a:	07df      	lsls	r7, r3, #31
    5e4c:	f140 8090 	bpl.w	5f70 <FatFile::read(void*, unsigned int)+0x130>
    5e50:	460f      	mov	r7, r1
    5e52:	7801      	ldrb	r1, [r0, #0]
    5e54:	4691      	mov	r9, r2
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    5e56:	070e      	lsls	r6, r1, #28
    5e58:	f100 8093 	bmi.w	5f82 <FatFile::read(void*, unsigned int)+0x142>
    uint32_t tmp32 = m_fileSize - m_curPosition;
    if (nbyte >= tmp32) {
      nbyte = tmp32;
    }
  } else if (isRootFixed()) {
    5e5c:	068c      	lsls	r4, r1, #26
    5e5e:	d508      	bpl.n	5e72 <FatFile::read(void*, unsigned int)+0x32>
    uint16_t tmp16 = 32*m_vol->m_rootDirEntryCount - (uint16_t)m_curPosition;
    5e60:	6882      	ldr	r2, [r0, #8]
    if (nbyte > tmp16) {
    5e62:	6943      	ldr	r3, [r0, #20]
    5e64:	8912      	ldrh	r2, [r2, #8]
    5e66:	ebc3 1342 	rsb	r3, r3, r2, lsl #5
    5e6a:	b29b      	uxth	r3, r3
    5e6c:	4599      	cmp	r9, r3
    5e6e:	bf28      	it	cs
    5e70:	4699      	movcs	r9, r3
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5e72:	f1b9 0f00 	cmp.w	r9, #0
    5e76:	f000 80aa 	beq.w	5fce <FatFile::read(void*, unsigned int)+0x18e>
    5e7a:	696b      	ldr	r3, [r5, #20]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    if (isRootFixed()) {
    5e7c:	0688      	lsls	r0, r1, #26
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5e7e:	464e      	mov	r6, r9
    5e80:	f04f 0800 	mov.w	r8, #0
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5e84:	f105 0a10 	add.w	sl, r5, #16
    }
  }
  toRead = nbyte;
  while (toRead) {
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5e88:	68aa      	ldr	r2, [r5, #8]
    5e8a:	f3c3 0408 	ubfx	r4, r3, #0, #9
    if (isRootFixed()) {
    5e8e:	d540      	bpl.n	5f12 <FatFile::read(void*, unsigned int)+0xd2>
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    5e90:	6a11      	ldr	r1, [r2, #32]
    5e92:	eb01 2153 	add.w	r1, r1, r3, lsr #9
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5e96:	2c00      	cmp	r4, #0
    5e98:	d154      	bne.n	5f44 <FatFile::read(void*, unsigned int)+0x104>
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
    5e9a:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    5e9e:	d351      	bcc.n	5f44 <FatFile::read(void*, unsigned int)+0x104>
    5ea0:	6b13      	ldr	r3, [r2, #48]	; 0x30
        || sector == m_vol->cacheSectorNumber()) {
    5ea2:	4299      	cmp	r1, r3
    5ea4:	d04e      	beq.n	5f44 <FatFile::read(void*, unsigned int)+0x104>
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
    5ea6:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    5eaa:	d373      	bcc.n	5f94 <FatFile::read(void*, unsigned int)+0x154>
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
      if (!isRootFixed()) {
    5eac:	7828      	ldrb	r0, [r5, #0]
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
#if USE_MULTI_SECTOR_IO
    } else if (toRead >= 2*m_vol->bytesPerSector()) {
      uint32_t ns = toRead >> m_vol->bytesPerSectorShift();
    5eae:	ea4f 2b56 	mov.w	fp, r6, lsr #9
      if (!isRootFixed()) {
    5eb2:	0680      	lsls	r0, r0, #26
    5eb4:	d405      	bmi.n	5ec2 <FatFile::read(void*, unsigned int)+0x82>
        uint32_t mb = m_vol->sectorsPerCluster() - sectorOfCluster;
    5eb6:	7910      	ldrb	r0, [r2, #4]
    5eb8:	ebc8 0000 	rsb	r0, r8, r0
    5ebc:	4583      	cmp	fp, r0
    5ebe:	bf28      	it	cs
    5ec0:	4683      	movcs	fp, r0
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    5ec2:	4299      	cmp	r1, r3
        if (mb < ns) {
          ns = mb;
        }
      }
      n = ns << m_vol->bytesPerSectorShift();
    5ec4:	ea4f 244b 	mov.w	r4, fp, lsl #9
    5ec8:	d80d      	bhi.n	5ee6 <FatFile::read(void*, unsigned int)+0xa6>
    5eca:	eb01 000b 	add.w	r0, r1, fp
    5ece:	4283      	cmp	r3, r0
    5ed0:	d209      	bcs.n	5ee6 <FatFile::read(void*, unsigned int)+0xa6>
   * \param[in] count Number of sectors to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool cacheSafeRead(uint32_t sector, uint8_t* dst, size_t count) {
    if (isCached(sector, count) && !sync()) {
    5ed2:	f102 0024 	add.w	r0, r2, #36	; 0x24
    5ed6:	9101      	str	r1, [sp, #4]
    5ed8:	9200      	str	r2, [sp, #0]
    5eda:	f7fe fb9d 	bl	4618 <FsCache::sync()>
    5ede:	9a00      	ldr	r2, [sp, #0]
    5ee0:	9901      	ldr	r1, [sp, #4]
    5ee2:	2800      	cmp	r0, #0
    5ee4:	d044      	beq.n	5f70 <FatFile::read(void*, unsigned int)+0x130>
      return false;
    }
    return m_blockDev->readSectors(sector, dst, count);
    5ee6:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5ee8:	465b      	mov	r3, fp
    5eea:	463a      	mov	r2, r7
    5eec:	f8d0 e000 	ldr.w	lr, [r0]
    5ef0:	f8de b010 	ldr.w	fp, [lr, #16]
    5ef4:	47d8      	blx	fp
      if (!m_vol->cacheSafeRead(sector, dst, ns)) {
    5ef6:	2800      	cmp	r0, #0
    5ef8:	d03a      	beq.n	5f70 <FatFile::read(void*, unsigned int)+0x130>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    m_curPosition += n;
    5efa:	696b      	ldr	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5efc:	1b36      	subs	r6, r6, r4
      if (!m_vol->cacheSafeRead(sector, dst)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    dst += n;
    5efe:	4427      	add	r7, r4
    m_curPosition += n;
    5f00:	4423      	add	r3, r4
    5f02:	616b      	str	r3, [r5, #20]
    if (nbyte > tmp16) {
      nbyte = tmp16;
    }
  }
  toRead = nbyte;
  while (toRead) {
    5f04:	d063      	beq.n	5fce <FatFile::read(void*, unsigned int)+0x18e>
    5f06:	7829      	ldrb	r1, [r5, #0]
    size_t n;
    offset = m_curPosition & m_vol->sectorMask();  // offset in sector
    5f08:	f3c3 0408 	ubfx	r4, r3, #0, #9
    5f0c:	68aa      	ldr	r2, [r5, #8]
    if (isRootFixed()) {
    5f0e:	0688      	lsls	r0, r1, #26
    5f10:	d4be      	bmi.n	5e90 <FatFile::read(void*, unsigned int)+0x50>
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    5f12:	f892 8005 	ldrb.w	r8, [r2, #5]
    5f16:	ea08 2853 	and.w	r8, r8, r3, lsr #9
      sector = m_vol->rootDirStart()
               + (m_curPosition >> m_vol->bytesPerSectorShift());
    } else {
      sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
      if (offset == 0 && sectorOfCluster == 0) {
    5f1a:	2c00      	cmp	r4, #0
    5f1c:	d138      	bne.n	5f90 <FatFile::read(void*, unsigned int)+0x150>
    5f1e:	f1b8 0f00 	cmp.w	r8, #0
    5f22:	d135      	bne.n	5f90 <FatFile::read(void*, unsigned int)+0x150>
        // start of new cluster
        if (m_curPosition == 0) {
    5f24:	2b00      	cmp	r3, #0
    5f26:	d13f      	bne.n	5fa8 <FatFile::read(void*, unsigned int)+0x168>
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    5f28:	0648      	lsls	r0, r1, #25
    5f2a:	bf4c      	ite	mi
    5f2c:	6a13      	ldrmi	r3, [r2, #32]
    5f2e:	6a2b      	ldrpl	r3, [r5, #32]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
          m_curCluster++;
    5f30:	612b      	str	r3, [r5, #16]
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      }
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    5f32:	7991      	ldrb	r1, [r2, #6]
    5f34:	3b02      	subs	r3, #2
    5f36:	6950      	ldr	r0, [r2, #20]
    5f38:	408b      	lsls	r3, r1
    5f3a:	eb08 0100 	add.w	r1, r8, r0
    5f3e:	4419      	add	r1, r3
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
    5f40:	2c00      	cmp	r4, #0
    5f42:	d0aa      	beq.n	5e9a <FatFile::read(void*, unsigned int)+0x5a>
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    5f44:	f102 0024 	add.w	r0, r2, #36	; 0x24
    5f48:	2200      	movs	r2, #0
    5f4a:	f7fe fb35 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
      if (n > toRead) {
        n = toRead;
      }
      // read sector to cache and copy data to caller
      pc = m_vol->cacheFetchData(sector, FsCache::CACHE_FOR_READ);
      if (!pc) {
    5f4e:	b178      	cbz	r0, 5f70 <FatFile::read(void*, unsigned int)+0x130>
      sector = m_vol->clusterStartSector(m_curCluster) + sectorOfCluster;
    }
    if (offset != 0 || toRead < m_vol->bytesPerSector()
        || sector == m_vol->cacheSectorNumber()) {
      // amount to be read from current sector
      n = m_vol->bytesPerSector() - offset;
    5f50:	f5c4 7300 	rsb	r3, r4, #512	; 0x200
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* src = pc->data + offset;
      memcpy(dst, src, n);
    5f54:	1901      	adds	r1, r0, r4
    5f56:	4638      	mov	r0, r7
    5f58:	42b3      	cmp	r3, r6
    5f5a:	bf28      	it	cs
    5f5c:	4633      	movcs	r3, r6
    5f5e:	461a      	mov	r2, r3
    5f60:	461c      	mov	r4, r3
    5f62:	f002 fd77 	bl	8a54 <memcpy>
    5f66:	e7c8      	b.n	5efa <FatFile::read(void*, unsigned int)+0xba>
          if (fg < 0) {
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
            if (isDir()) {
    5f68:	782b      	ldrb	r3, [r5, #0]
    5f6a:	f013 0f70 	tst.w	r3, #112	; 0x70
    5f6e:	d12f      	bne.n	5fd0 <FatFile::read(void*, unsigned int)+0x190>
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    5f70:	786b      	ldrb	r3, [r5, #1]
  return -1;
    5f72:	f04f 30ff 	mov.w	r0, #4294967295
    toRead -= n;
  }
  return nbyte - toRead;

 fail:
  m_error |= READ_ERROR;
    5f76:	f043 0302 	orr.w	r3, r3, #2
    5f7a:	706b      	strb	r3, [r5, #1]
  return -1;
}
    5f7c:	b003      	add	sp, #12
    5f7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (isFile()) {
    uint32_t tmp32 = m_fileSize - m_curPosition;
    5f82:	69c3      	ldr	r3, [r0, #28]
    5f84:	6942      	ldr	r2, [r0, #20]
    5f86:	1a9b      	subs	r3, r3, r2
    5f88:	4599      	cmp	r9, r3
    5f8a:	bf28      	it	cs
    5f8c:	4699      	movcs	r9, r3
    5f8e:	e770      	b.n	5e72 <FatFile::read(void*, unsigned int)+0x32>
    5f90:	692b      	ldr	r3, [r5, #16]
    5f92:	e7ce      	b.n	5f32 <FatFile::read(void*, unsigned int)+0xf2>
  bool cacheSafeRead(uint32_t sector, uint8_t* dst) {
    if (isCached(sector)) {
      memcpy(dst, m_buffer, 512);
      return true;
    }
    return m_blockDev->readSector(sector, dst);
    5f94:	6a90      	ldr	r0, [r2, #40]	; 0x28
    5f96:	463a      	mov	r2, r7
    5f98:	6803      	ldr	r3, [r0, #0]
    5f9a:	68db      	ldr	r3, [r3, #12]
    5f9c:	4798      	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeRead(sector, dst)) {
    5f9e:	2800      	cmp	r0, #0
    5fa0:	d0e6      	beq.n	5f70 <FatFile::read(void*, unsigned int)+0x130>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5fa2:	f44f 7400 	mov.w	r4, #512	; 0x200
    5fa6:	e7a8      	b.n	5efa <FatFile::read(void*, unsigned int)+0xba>
        // start of new cluster
        if (m_curPosition == 0) {
          // use first cluster in file
          m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        } else if (isFile() && isContiguous()) {
    5fa8:	0709      	lsls	r1, r1, #28
    5faa:	d505      	bpl.n	5fb8 <FatFile::read(void*, unsigned int)+0x178>
    5fac:	78ab      	ldrb	r3, [r5, #2]
    5fae:	065b      	lsls	r3, r3, #25
    5fb0:	d502      	bpl.n	5fb8 <FatFile::read(void*, unsigned int)+0x178>
          m_curCluster++;
    5fb2:	692b      	ldr	r3, [r5, #16]
    5fb4:	3301      	adds	r3, #1
    5fb6:	e7bb      	b.n	5f30 <FatFile::read(void*, unsigned int)+0xf0>
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        } else {
          // get next cluster from FAT
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    5fb8:	4610      	mov	r0, r2
    5fba:	6929      	ldr	r1, [r5, #16]
    5fbc:	4652      	mov	r2, sl
    5fbe:	f000 fdd9 	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    5fc2:	2800      	cmp	r0, #0
    5fc4:	dbd4      	blt.n	5f70 <FatFile::read(void*, unsigned int)+0x130>
            DBG_FAIL_MACRO;
            goto fail;
          }
          if (fg == 0) {
    5fc6:	d0cf      	beq.n	5f68 <FatFile::read(void*, unsigned int)+0x128>
    5fc8:	68aa      	ldr	r2, [r5, #8]
    5fca:	692b      	ldr	r3, [r5, #16]
    5fcc:	e7b1      	b.n	5f32 <FatFile::read(void*, unsigned int)+0xf2>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // read single sector
      n = m_vol->bytesPerSector();
    5fce:	2600      	movs	r6, #0
    }
    dst += n;
    m_curPosition += n;
    toRead -= n;
  }
  return nbyte - toRead;
    5fd0:	ebc6 0009 	rsb	r0, r6, r9

 fail:
  m_error |= READ_ERROR;
  return -1;
}
    5fd4:	b003      	add	sp, #12
    5fd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5fda:	bf00      	nop

00005fdc <FatFile::peek()>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
int FatFile::peek() {
    5fdc:	b570      	push	{r4, r5, r6, lr}
    5fde:	b082      	sub	sp, #8
   * \return For success read returns the next byte in the file as an int.
   * If an error occurs or end of file is reached -1 is returned.
   */
  int read() {
    uint8_t b;
    return read(&b, 1) == 1 ? b : -1;
    5fe0:	2201      	movs	r2, #1
    5fe2:	4604      	mov	r4, r0
  uint32_t curPosition = m_curPosition;
    5fe4:	6946      	ldr	r6, [r0, #20]
    5fe6:	f10d 0107 	add.w	r1, sp, #7
  uint32_t curCluster = m_curCluster;
    5fea:	6905      	ldr	r5, [r0, #16]
    5fec:	f7ff ff28 	bl	5e40 <FatFile::read(void*, unsigned int)>
    5ff0:	2801      	cmp	r0, #1
  int c = read();
  m_curPosition = curPosition;
    5ff2:	6166      	str	r6, [r4, #20]
    5ff4:	bf0c      	ite	eq
    5ff6:	f89d 0007 	ldrbeq.w	r0, [sp, #7]
    5ffa:	f04f 30ff 	movne.w	r0, #4294967295
  m_curCluster = curCluster;
    5ffe:	6125      	str	r5, [r4, #16]
  return c;
}
    6000:	b002      	add	sp, #8
    6002:	bd70      	pop	{r4, r5, r6, pc}

00006004 <FatFile::readDirCache(bool)>:
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6004:	6943      	ldr	r3, [r0, #20]
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    6006:	b530      	push	{r4, r5, lr}
  uint8_t i = (m_curPosition >> 5) & 0XF;
    6008:	f3c3 1543 	ubfx	r5, r3, #5, #4
  }
}
//------------------------------------------------------------------------------
// Read next directory entry into the cache
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
    600c:	b083      	sub	sp, #12
    600e:	4604      	mov	r4, r0
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    6010:	fab5 f285 	clz	r2, r5
    6014:	0952      	lsrs	r2, r2, #5
    6016:	428a      	cmp	r2, r1
    6018:	d207      	bcs.n	602a <FatFile::readDirCache(bool)+0x26>
      }
      goto fail;
    }
    m_curPosition += 31;
  } else {
    m_curPosition += 32;
    601a:	3320      	adds	r3, #32
    601c:	6143      	str	r3, [r0, #20]
  static const uint8_t CACHE_RESERVE_FOR_WRITE =
    CACHE_STATUS_DIRTY | CACHE_OPTION_NO_READ;
  //----------------------------------------------------------------------------
  /** \return Cache buffer address. */
  uint8_t* cacheBuffer() {
    return m_buffer;
    601e:	68a0      	ldr	r0, [r4, #8]
    6020:	3034      	adds	r0, #52	; 0x34
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;
    6022:	eb00 1045 	add.w	r0, r0, r5, lsl #5

 fail:
  return nullptr;
}
    6026:	b003      	add	sp, #12
    6028:	bd30      	pop	{r4, r5, pc}
// Assumes file is correctly positioned
DirFat_t* FatFile::readDirCache(bool skipReadOk) {
  uint8_t i = (m_curPosition >> 5) & 0XF;

  if (i == 0 || !skipReadOk) {
    int8_t n = read(&n, 1);
    602a:	2201      	movs	r2, #1
    602c:	f10d 0107 	add.w	r1, sp, #7
    6030:	f7ff ff06 	bl	5e40 <FatFile::read(void*, unsigned int)>
    6034:	b240      	sxtb	r0, r0
    if  (n != 1) {
    6036:	2801      	cmp	r0, #1
    6038:	d103      	bne.n	6042 <FatFile::readDirCache(bool)+0x3e>
      if (n != 0) {
        DBG_FAIL_MACRO;
      }
      goto fail;
    }
    m_curPosition += 31;
    603a:	6963      	ldr	r3, [r4, #20]
    603c:	331f      	adds	r3, #31
    603e:	6163      	str	r3, [r4, #20]
    6040:	e7ed      	b.n	601e <FatFile::readDirCache(bool)+0x1a>
  }
  // return pointer to entry
  return reinterpret_cast<DirFat_t*>(m_vol->cacheAddress()) + i;

 fail:
  return nullptr;
    6042:	2000      	movs	r0, #0
    6044:	e7ef      	b.n	6026 <FatFile::readDirCache(bool)+0x22>
    6046:	bf00      	nop

00006048 <FatFile::seekSet(unsigned long)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::seekSet(uint32_t pos) {
    6048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    604c:	7803      	ldrb	r3, [r0, #0]
    604e:	4604      	mov	r4, r0
  uint32_t nCur;
  uint32_t nNew;
  uint32_t tmp = m_curCluster;
    6050:	6907      	ldr	r7, [r0, #16]
  // error if file not open
  if (!isOpen()) {
    6052:	b1b3      	cbz	r3, 6082 <FatFile::seekSet(unsigned long)+0x3a>
    6054:	460d      	mov	r5, r1
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    6056:	6941      	ldr	r1, [r0, #20]
    6058:	42a9      	cmp	r1, r5
    605a:	d02c      	beq.n	60b6 <FatFile::seekSet(unsigned long)+0x6e>
    return true;
  }
  if (pos == 0) {
    605c:	b945      	cbnz	r5, 6070 <FatFile::seekSet(unsigned long)+0x28>
    605e:	7883      	ldrb	r3, [r0, #2]
    // set position to start of file
    m_curCluster = 0;
    6060:	6105      	str	r5, [r0, #16]
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    6062:	f023 0320 	bic.w	r3, r3, #32
      goto fail;
    }
  }

 done:
  m_curPosition = pos;
    6066:	6165      	str	r5, [r4, #20]
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;
    6068:	2001      	movs	r0, #1
    }
  }

 done:
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
    606a:	70a3      	strb	r3, [r4, #2]
  return true;
    606c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (pos == 0) {
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    6070:	0718      	lsls	r0, r3, #28
    6072:	d40a      	bmi.n	608a <FatFile::seekSet(unsigned long)+0x42>
    if (pos > m_fileSize) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (isRootFixed()) {
    6074:	069a      	lsls	r2, r3, #26
    6076:	d50b      	bpl.n	6090 <FatFile::seekSet(unsigned long)+0x48>
    6078:	68a3      	ldr	r3, [r4, #8]
    if (pos <= 32*m_vol->rootDirEntryCount()) {
    607a:	891b      	ldrh	r3, [r3, #8]
    607c:	ebb5 1f43 	cmp.w	r5, r3, lsl #5
    6080:	d930      	bls.n	60e4 <FatFile::seekSet(unsigned long)+0x9c>
  m_curPosition = pos;
  m_flags &= ~FILE_FLAG_PREALLOCATE;
  return true;

 fail:
  m_curCluster = tmp;
    6082:	6127      	str	r7, [r4, #16]
  return false;
    6084:	2000      	movs	r0, #0
    6086:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // set position to start of file
    m_curCluster = 0;
    goto done;
  }
  if (isFile()) {
    if (pos > m_fileSize) {
    608a:	69e2      	ldr	r2, [r4, #28]
    608c:	4295      	cmp	r5, r2
    608e:	d8f8      	bhi.n	6082 <FatFile::seekSet(unsigned long)+0x3a>
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    6090:	f8d4 e008 	ldr.w	lr, [r4, #8]
    6094:	1e6e      	subs	r6, r5, #1
    6096:	78a2      	ldrb	r2, [r4, #2]
    6098:	f89e 0006 	ldrb.w	r0, [lr, #6]
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    609c:	f012 0f40 	tst.w	r2, #64	; 0x40
    }
    DBG_FAIL_MACRO;
    goto fail;
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
    60a0:	f100 0009 	add.w	r0, r0, #9
    60a4:	b2c0      	uxtb	r0, r0
    60a6:	fa26 f600 	lsr.w	r6, r6, r0
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    60aa:	d007      	beq.n	60bc <FatFile::seekSet(unsigned long)+0x74>
    m_curCluster = m_firstCluster + nNew;
    60ac:	6a21      	ldr	r1, [r4, #32]
    goto done;
    60ae:	4613      	mov	r3, r2
  }
  // calculate cluster index for new position
  nNew = (pos - 1) >> (m_vol->bytesPerClusterShift());
#if USE_FAT_FILE_FLAG_CONTIGUOUS
  if (isContiguous()) {
    m_curCluster = m_firstCluster + nNew;
    60b0:	440e      	add	r6, r1
    60b2:	6126      	str	r6, [r4, #16]
    goto done;
    60b4:	e7d5      	b.n	6062 <FatFile::seekSet(unsigned long)+0x1a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Optimize O_APPEND writes.
  if (pos == m_curPosition) {
    return true;
    60b6:	2001      	movs	r0, #1
  return true;

 fail:
  m_curCluster = tmp;
  return false;
}
    60b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    m_curCluster = m_firstCluster + nNew;
    goto done;
  }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());
    60bc:	1e4a      	subs	r2, r1, #1
    60be:	fa22 f000 	lsr.w	r0, r2, r0

  if (nNew < nCur || m_curPosition == 0) {
    60c2:	4286      	cmp	r6, r0
    60c4:	d310      	bcc.n	60e8 <FatFile::seekSet(unsigned long)+0xa0>
    60c6:	b179      	cbz	r1, 60e8 <FatFile::seekSet(unsigned long)+0xa0>
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
    60c8:	1a36      	subs	r6, r6, r0
  }
  while (nNew--) {
    if (m_vol->fatGet(m_curCluster, &m_curCluster) <= 0) {
    60ca:	f104 0810 	add.w	r8, r4, #16
    60ce:	e006      	b.n	60de <FatFile::seekSet(unsigned long)+0x96>
    60d0:	6921      	ldr	r1, [r4, #16]
    60d2:	3e01      	subs	r6, #1
    60d4:	68a0      	ldr	r0, [r4, #8]
    60d6:	f000 fd4d 	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    60da:	2800      	cmp	r0, #0
    60dc:	ddd1      	ble.n	6082 <FatFile::seekSet(unsigned long)+0x3a>
    60de:	4642      	mov	r2, r8
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
  } else {
    // advance from curPosition
    nNew -= nCur;
  }
  while (nNew--) {
    60e0:	2e00      	cmp	r6, #0
    60e2:	d1f5      	bne.n	60d0 <FatFile::seekSet(unsigned long)+0x88>
    60e4:	78a3      	ldrb	r3, [r4, #2]
    60e6:	e7bc      	b.n	6062 <FatFile::seekSet(unsigned long)+0x1a>
  // calculate cluster index for current position
  nCur = (m_curPosition - 1) >> (m_vol->bytesPerClusterShift());

  if (nNew < nCur || m_curPosition == 0) {
    // must follow chain from first cluster
    m_curCluster = isRoot32() ? m_vol->rootDirStart() : m_firstCluster;
    60e8:	065b      	lsls	r3, r3, #25
    60ea:	bf4c      	ite	mi
    60ec:	f8de 3020 	ldrmi.w	r3, [lr, #32]
    60f0:	6a23      	ldrpl	r3, [r4, #32]
    60f2:	6123      	str	r3, [r4, #16]
    60f4:	e7e9      	b.n	60ca <FatFile::seekSet(unsigned long)+0x82>
    60f6:	bf00      	nop

000060f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>:
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    60f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    60fc:	460d      	mov	r5, r1
    60fe:	4690      	mov	r8, r2
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    6100:	2100      	movs	r1, #0
    6102:	2224      	movs	r2, #36	; 0x24
  return false;
}
//------------------------------------------------------------------------------
// open a cached directory entry.
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
    6104:	4604      	mov	r4, r0
    6106:	461f      	mov	r7, r3
    6108:	f89d 6018 	ldrb.w	r6, [sp, #24]
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
    610c:	f005 f98e 	bl	b42c <memset>
  // location of entry in cache
  m_vol = dirFile->m_vol;
    6110:	68a8      	ldr	r0, [r5, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    6112:	f008 030f 	and.w	r3, r8, #15
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    6116:	6a29      	ldr	r1, [r5, #32]
    6118:	f100 0234 	add.w	r2, r0, #52	; 0x34
bool FatFile::openCachedEntry(FatFile* dirFile, uint16_t dirIndex,
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
    611c:	60a0      	str	r0, [r4, #8]
  m_dirIndex = dirIndex;
  m_dirCluster = dirFile->m_firstCluster;
    611e:	60e1      	str	r1, [r4, #12]
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;
    6120:	eb02 1243 	add.w	r2, r2, r3, lsl #5
                              oflag_t oflag, uint8_t lfnOrd) {
  uint32_t firstCluster;
  memset(this, 0, sizeof(FatFile));
  // location of entry in cache
  m_vol = dirFile->m_vol;
  m_dirIndex = dirIndex;
    6124:	f8a4 8004 	strh.w	r8, [r4, #4]
    6128:	7ad1      	ldrb	r1, [r2, #11]
  m_dirCluster = dirFile->m_firstCluster;
  DirFat_t* dir = reinterpret_cast<DirFat_t*>(m_vol->cacheAddress());
  dir += 0XF & dirIndex;

  // Must be file or subdirectory.
  if (!isFileOrSubdir(dir)) {
    612a:	070d      	lsls	r5, r1, #28
    612c:	d411      	bmi.n	6152 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
    612e:	f001 0117 	and.w	r1, r1, #23
    6132:	7021      	strb	r1, [r4, #0]
  if (isFileDir(dir)) {
    6134:	7ad3      	ldrb	r3, [r2, #11]
    6136:	f013 0f18 	tst.w	r3, #24
    613a:	d102      	bne.n	6142 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x4a>
    m_attributes |= FILE_ATTR_FILE;
    613c:	f041 0108 	orr.w	r1, r1, #8
    6140:	7021      	strb	r1, [r4, #0]
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    6142:	f007 0303 	and.w	r3, r7, #3
  }
  m_attributes = dir->attributes & FILE_ATTR_COPY;
  if (isFileDir(dir)) {
    m_attributes |= FILE_ATTR_FILE;
  }
  m_lfnOrd = lfnOrd;
    6146:	70e6      	strb	r6, [r4, #3]

  switch (oflag & O_ACCMODE) {
    6148:	2b01      	cmp	r3, #1
    614a:	d008      	beq.n	615e <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x66>
    614c:	2b02      	cmp	r3, #2
    614e:	d02a      	beq.n	61a6 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xae>
    6150:	b323      	cbz	r3, 619c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xa4>
    goto fail;
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
    6152:	2300      	movs	r3, #0
    6154:	7023      	strb	r3, [r4, #0]
  m_flags = 0;
  return false;
    6156:	4618      	mov	r0, r3
  }
  return true;

 fail:
  m_attributes = FILE_ATTR_CLOSED;
  m_flags = 0;
    6158:	70a3      	strb	r3, [r4, #2]
  return false;
    615a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
      break;

    case O_WRONLY:
      m_flags = FILE_FLAG_WRITE;
    615e:	2302      	movs	r3, #2
    6160:	70a3      	strb	r3, [r4, #2]
      DBG_FAIL_MACRO;
      goto fail;
  }

  if (m_flags & FILE_FLAG_WRITE) {
    if (isSubDir() || isReadOnly()) {
    6162:	7821      	ldrb	r1, [r4, #0]
    6164:	f011 0f11 	tst.w	r1, #17
    6168:	d1f3      	bne.n	6152 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    616a:	b259      	sxtb	r1, r3
    616c:	f407 6580 	and.w	r5, r7, #1024	; 0x400
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);
    6170:	f007 0308 	and.w	r3, r7, #8
    6174:	430b      	orrs	r3, r1
    6176:	b2db      	uxtb	r3, r3
    6178:	70a3      	strb	r3, [r4, #2]

  m_dirSector = m_vol->cacheSectorNumber();

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);
    617a:	f8b2 e014 	ldrh.w	lr, [r2, #20]
    617e:	8b51      	ldrh	r1, [r2, #26]
    6180:	6b06      	ldr	r6, [r0, #48]	; 0x30
    6182:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
      goto fail;
    }
  }
  m_flags |= (oflag & O_APPEND ? FILE_FLAG_APPEND : 0);

  m_dirSector = m_vol->cacheSectorNumber();
    6186:	61a6      	str	r6, [r4, #24]

  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    6188:	b185      	cbz	r5, 61ac <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xb4>
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    618a:	b9d1      	cbnz	r1, 61c2 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xca>
      DBG_FAIL_MACRO;
      goto fail;
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
    618c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    6190:	70a3      	strb	r3, [r4, #2]
  } else {
    m_firstCluster = firstCluster;
    m_fileSize = getLe32(dir->fileSize);
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    6192:	047b      	lsls	r3, r7, #17
    6194:	d40e      	bmi.n	61b4 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0xbc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  return true;
    6196:	2001      	movs	r0, #1
    6198:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  }
  m_lfnOrd = lfnOrd;

  switch (oflag & O_ACCMODE) {
    case O_RDONLY:
      if (oflag & O_TRUNC) {
    619c:	f417 6580 	ands.w	r5, r7, #1024	; 0x400
    61a0:	d1d7      	bne.n	6152 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    61a2:	2101      	movs	r1, #1
    61a4:	e7e4      	b.n	6170 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x78>
      }
      m_flags = FILE_FLAG_READ;
      break;

    case O_RDWR:
      m_flags = FILE_FLAG_READ | FILE_FLAG_WRITE;
    61a6:	2303      	movs	r3, #3
    61a8:	70a3      	strb	r3, [r4, #2]
      break;
    61aa:	e7da      	b.n	6162 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x6a>
    }

    // need to update directory entry
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else {
    m_firstCluster = firstCluster;
    61ac:	6221      	str	r1, [r4, #32]
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    61ae:	69d3      	ldr	r3, [r2, #28]
    m_fileSize = getLe32(dir->fileSize);
    61b0:	61e3      	str	r3, [r4, #28]
    61b2:	e7ee      	b.n	6192 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9a>
  }
  if ((oflag & O_AT_END) && !seekSet(m_fileSize)) {
    61b4:	69e1      	ldr	r1, [r4, #28]
    61b6:	4620      	mov	r0, r4
    61b8:	f7ff ff46 	bl	6048 <FatFile::seekSet(unsigned long)>
    61bc:	2800      	cmp	r0, #0
    61be:	d1ea      	bne.n	6196 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x9e>
    61c0:	e7c7      	b.n	6152 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
  // copy first cluster number for directory fields
  firstCluster = ((uint32_t)getLe16(dir->firstClusterHigh) << 16)
                 | getLe16(dir->firstClusterLow);

  if (oflag & O_TRUNC) {
    if (firstCluster && !m_vol->freeChain(firstCluster)) {
    61c2:	f000 fddf 	bl	6d84 <FatPartition::freeChain(unsigned long)>
    61c6:	2800      	cmp	r0, #0
    61c8:	d0c3      	beq.n	6152 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x5a>
    61ca:	78a3      	ldrb	r3, [r4, #2]
    61cc:	e7de      	b.n	618c <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)+0x94>
    61ce:	bf00      	nop

000061d0 <FatFile::sync()>:
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    61d0:	7803      	ldrb	r3, [r0, #0]
    61d2:	b10b      	cbz	r3, 61d8 <FatFile::sync()+0x8>
    61d4:	f7ff bd3a 	b.w	5c4c <FatFile::sync() [clone .part.42]>
  DBG_FAIL_MACRO;

 fail:
  m_error |= WRITE_ERROR;
  return false;
}
    61d8:	2001      	movs	r0, #1
    61da:	4770      	bx	lr

000061dc <FatFile::truncate()>:
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
  uint32_t toFree;
  // error if not a normal file or read-only
  if (!isWritable()) {
    61dc:	7883      	ldrb	r3, [r0, #2]
    61de:	079b      	lsls	r3, r3, #30
    61e0:	d51a      	bpl.n	6218 <FatFile::truncate()+0x3c>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
    61e2:	6a03      	ldr	r3, [r0, #32]
    61e4:	b1b3      	cbz	r3, 6214 <FatFile::truncate()+0x38>
      return true;
  }
  if (m_curCluster) {
    61e6:	6901      	ldr	r1, [r0, #16]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::truncate() {
    61e8:	b510      	push	{r4, lr}
    61ea:	4604      	mov	r4, r0
    61ec:	b082      	sub	sp, #8
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    61ee:	b9f1      	cbnz	r1, 622e <FatFile::truncate()+0x52>
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
  } else {
    toFree = m_firstCluster;
    61f0:	9301      	str	r3, [sp, #4]
    m_firstCluster = 0;
    61f2:	6201      	str	r1, [r0, #32]
  }
  if (toFree) {
    if (!m_vol->freeChain(toFree)) {
    61f4:	4619      	mov	r1, r3
    61f6:	68a0      	ldr	r0, [r4, #8]
    61f8:	f000 fdc4 	bl	6d84 <FatPartition::freeChain(unsigned long)>
    61fc:	b1a8      	cbz	r0, 622a <FatFile::truncate()+0x4e>
    }
  }
  m_fileSize = m_curPosition;

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    61fe:	78a3      	ldrb	r3, [r4, #2]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    6200:	6961      	ldr	r1, [r4, #20]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    6202:	f063 037f 	orn	r3, r3, #127	; 0x7f
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    6206:	7822      	ldrb	r2, [r4, #0]
    if (!m_vol->freeChain(toFree)) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  m_fileSize = m_curPosition;
    6208:	61e1      	str	r1, [r4, #28]

  // need to update directory entry
  m_flags |= FILE_FLAG_DIR_DIRTY;
    620a:	70a3      	strb	r3, [r4, #2]
}
//------------------------------------------------------------------------------
bool FatFile::sync() {
  uint16_t date, time;
  uint8_t ms10;
  if (!isOpen()) {
    620c:	b9ea      	cbnz	r2, 624a <FatFile::truncate()+0x6e>
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    620e:	2001      	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    6210:	b002      	add	sp, #8
    6212:	bd10      	pop	{r4, pc}
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (m_firstCluster == 0) {
      return true;
    6214:	2001      	movs	r0, #1
  }
  return true;

 fail:
  return false;
}
    6216:	4770      	bx	lr
    goto fail;
  }
  return true;

 fail:
  return false;
    6218:	2000      	movs	r0, #0
}
    621a:	4770      	bx	lr
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    621c:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    6220:	6921      	ldr	r1, [r4, #16]
    6222:	68a0      	ldr	r0, [r4, #8]
    6224:	f000 fcde 	bl	6be4 <FatPartition::fatPut(unsigned long, unsigned long)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
      // current cluster is end of chain
      if (!m_vol->fatPutEOC(m_curCluster)) {
    6228:	b958      	cbnz	r0, 6242 <FatFile::truncate()+0x66>
    goto fail;
  }
  return true;

 fail:
  return false;
    622a:	2000      	movs	r0, #0
    622c:	e7f0      	b.n	6210 <FatFile::truncate()+0x34>
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    622e:	2300      	movs	r3, #0
    6230:	aa02      	add	r2, sp, #8
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6232:	6880      	ldr	r0, [r0, #8]
  }
  if (m_firstCluster == 0) {
      return true;
  }
  if (m_curCluster) {
    toFree = 0;
    6234:	f842 3d04 	str.w	r3, [r2, #-4]!
    int8_t fg = m_vol->fatGet(m_curCluster, &toFree);
    6238:	f000 fc9c 	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    623c:	2800      	cmp	r0, #0
    623e:	dbf4      	blt.n	622a <FatFile::truncate()+0x4e>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg) {
    6240:	d1ec      	bne.n	621c <FatFile::truncate()+0x40>
    }
  } else {
    toFree = m_firstCluster;
    m_firstCluster = 0;
  }
  if (toFree) {
    6242:	9b01      	ldr	r3, [sp, #4]
    6244:	2b00      	cmp	r3, #0
    6246:	d0da      	beq.n	61fe <FatFile::truncate()+0x22>
    6248:	e7d4      	b.n	61f4 <FatFile::truncate()+0x18>
    624a:	4620      	mov	r0, r4
    624c:	f7ff fcfe 	bl	5c4c <FatFile::sync() [clone .part.42]>
    6250:	e7de      	b.n	6210 <FatFile::truncate()+0x34>
    6252:	bf00      	nop

00006254 <FatFile::write(void const*, unsigned int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
size_t FatFile::write(const void* buf, size_t nbyte) {
    6254:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    6258:	7883      	ldrb	r3, [r0, #2]
    625a:	4604      	mov	r4, r0
  uint8_t cacheOption;
  // number of bytes left to write  -  must be before goto statements
  size_t nToWrite = nbyte;
  size_t n;
  // error if not a normal file or is read-only
  if (!isWritable()) {
    625c:	079d      	lsls	r5, r3, #30
    625e:	d407      	bmi.n	6270 <FatFile::write(void const*, unsigned int)+0x1c>
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6260:	7863      	ldrb	r3, [r4, #1]
  return -1;
    6262:	f04f 30ff 	mov.w	r0, #4294967295
  }
  return nbyte;

 fail:
  // return for write error
  m_error |= WRITE_ERROR;
    6266:	f043 0301 	orr.w	r3, r3, #1
    626a:	7063      	strb	r3, [r4, #1]
  return -1;
    626c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6270:	4690      	mov	r8, r2
  if (!isWritable()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    6272:	071a      	lsls	r2, r3, #28
    6274:	460f      	mov	r7, r1
    6276:	f100 80d1 	bmi.w	641c <FatFile::write(void const*, unsigned int)+0x1c8>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    627a:	6962      	ldr	r2, [r4, #20]
    627c:	43d3      	mvns	r3, r2
    627e:	4598      	cmp	r8, r3
    6280:	d8ee      	bhi.n	6260 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6282:	f1b8 0f00 	cmp.w	r8, #0
    6286:	f000 80d0 	beq.w	642a <FatFile::write(void const*, unsigned int)+0x1d6>
    628a:	4646      	mov	r6, r8
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    628c:	f04f 0a00 	mov.w	sl, #0
    m_sector = 0XFFFFFFFF;
    6290:	f04f 39ff 	mov.w	r9, #4294967295
    6294:	e03d      	b.n	6312 <FatFile::write(void const*, unsigned int)+0xbe>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    6296:	f1bb 0f00 	cmp.w	fp, #0
    629a:	d141      	bne.n	6320 <FatFile::write(void const*, unsigned int)+0xcc>
      // start of new cluster
      if (m_curCluster != 0) {
    629c:	6921      	ldr	r1, [r4, #16]
    629e:	2900      	cmp	r1, #0
    62a0:	d073      	beq.n	638a <FatFile::write(void const*, unsigned int)+0x136>
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
    62a2:	78a3      	ldrb	r3, [r4, #2]
    62a4:	065b      	lsls	r3, r3, #25
    62a6:	f140 8091 	bpl.w	63cc <FatFile::write(void const*, unsigned int)+0x178>
    62aa:	69e3      	ldr	r3, [r4, #28]
    62ac:	4293      	cmp	r3, r2
    62ae:	f240 808d 	bls.w	63cc <FatFile::write(void const*, unsigned int)+0x178>
          m_curCluster++;
    62b2:	1c4b      	adds	r3, r1, #1
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    62b4:	3901      	subs	r1, #1
      // start of new cluster
      if (m_curCluster != 0) {
#if USE_FAT_FILE_FLAG_CONTIGUOUS
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
    62b6:	6123      	str	r3, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    62b8:	f890 e006 	ldrb.w	lr, [r0, #6]
    62bc:	6943      	ldr	r3, [r0, #20]
    62be:	fa01 f10e 	lsl.w	r1, r1, lr
    62c2:	442b      	add	r3, r5
    62c4:	4419      	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    62c6:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    62ca:	d23c      	bcs.n	6346 <FatFile::write(void const*, unsigned int)+0xf2>
    62cc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
    62d0:	4635      	mov	r5, r6
    62d2:	bf28      	it	cs
    62d4:	f44f 7500 	movcs.w	r5, #512	; 0x200
      // lesser of space and amount to write
      if (n > nToWrite) {
        n = nToWrite;
      }

      if (sectorOffset == 0 &&
    62d8:	69e3      	ldr	r3, [r4, #28]
    62da:	4293      	cmp	r3, r2
    62dc:	d902      	bls.n	62e4 <FatFile::write(void const*, unsigned int)+0x90>
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
    62de:	78a3      	ldrb	r3, [r4, #2]
    62e0:	069b      	lsls	r3, r3, #26
    62e2:	d52e      	bpl.n	6342 <FatFile::write(void const*, unsigned int)+0xee>
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
    62e4:	2205      	movs	r2, #5
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    62e6:	3024      	adds	r0, #36	; 0x24
    62e8:	f7fe f966 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
      }
      pc = m_vol->cacheFetchData(sector, cacheOption);
      if (!pc) {
    62ec:	2800      	cmp	r0, #0
    62ee:	d0b7      	beq.n	6260 <FatFile::write(void const*, unsigned int)+0xc>
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    62f0:	4458      	add	r0, fp
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    62f2:	44ab      	add	fp, r5
      if (!pc) {
        DBG_FAIL_MACRO;
        goto fail;
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
    62f4:	462a      	mov	r2, r5
    62f6:	4639      	mov	r1, r7
    62f8:	f002 fbac 	bl	8a54 <memcpy>
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
    62fc:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
    6300:	f000 8084 	beq.w	640c <FatFile::write(void const*, unsigned int)+0x1b8>
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    6304:	6962      	ldr	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    6306:	1b76      	subs	r6, r6, r5
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    src += n;
    6308:	442f      	add	r7, r5
      if (!m_vol->cacheSafeWrite(sector, src)) {
        DBG_FAIL_MACRO;
        goto fail;
      }
    }
    m_curPosition += n;
    630a:	442a      	add	r2, r5
    630c:	6162      	str	r2, [r4, #20]
  // Don't exceed max fileSize.
  if (nbyte > (0XFFFFFFFF - m_curPosition)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  while (nToWrite) {
    630e:	f000 808c 	beq.w	642a <FatFile::write(void const*, unsigned int)+0x1d6>
    uint8_t sectorOfCluster = m_vol->sectorOfCluster(m_curPosition);
    6312:	68a0      	ldr	r0, [r4, #8]
    uint16_t sectorOffset = m_curPosition & m_vol->sectorMask();
    6314:	f3c2 0b08 	ubfx	fp, r2, #0, #9
  }
  //----------------------------------------------------------------------------
  bool allocateCluster(uint32_t current, uint32_t* next);
  bool allocContiguous(uint32_t count, uint32_t* firstCluster);
  uint8_t sectorOfCluster(uint32_t position) const {
    return (position >> 9) & m_clusterSectorMask;
    6318:	7945      	ldrb	r5, [r0, #5]
    if (sectorOfCluster == 0 && sectorOffset == 0) {
    631a:	ea15 2552 	ands.w	r5, r5, r2, lsr #9
    631e:	d0ba      	beq.n	6296 <FatFile::write(void const*, unsigned int)+0x42>
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    6320:	6923      	ldr	r3, [r4, #16]
    6322:	f890 e006 	ldrb.w	lr, [r0, #6]
    6326:	1e99      	subs	r1, r3, #2
    6328:	6943      	ldr	r3, [r0, #20]
    632a:	fa01 fe0e 	lsl.w	lr, r1, lr
    632e:	18e9      	adds	r1, r5, r3
    6330:	4471      	add	r1, lr

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6332:	f1bb 0f00 	cmp.w	fp, #0
    6336:	d0c6      	beq.n	62c6 <FatFile::write(void const*, unsigned int)+0x72>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    6338:	f5cb 7500 	rsb	r5, fp, #512	; 0x200
    633c:	42b5      	cmp	r5, r6
    633e:	bf28      	it	cs
    6340:	4635      	movcs	r5, r6
         (m_curPosition >= m_fileSize || m_flags & FILE_FLAG_PREALLOCATE)) {
        // start of new sector don't need to read into cache
        cacheOption = FsCache::CACHE_RESERVE_FOR_WRITE;
      } else {
        // rewrite part of sector
        cacheOption = FsCache::CACHE_FOR_WRITE;
    6342:	2201      	movs	r2, #1
    6344:	e7cf      	b.n	62e6 <FatFile::write(void const*, unsigned int)+0x92>
          DBG_FAIL_MACRO;
          goto fail;
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
    6346:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
    634a:	d331      	bcc.n	63b0 <FatFile::write(void const*, unsigned int)+0x15c>
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    634c:	f890 e004 	ldrb.w	lr, [r0, #4]
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
    6350:	0a73      	lsrs	r3, r6, #9
    6352:	6b02      	ldr	r2, [r0, #48]	; 0x30
        }
      }
#if USE_MULTI_SECTOR_IO
    } else if (nToWrite >= 2*m_vol->bytesPerSector()) {
      // use multiple sector write command
      uint32_t maxSectors = m_vol->sectorsPerCluster() - sectorOfCluster;
    6354:	ebc5 050e 	rsb	r5, r5, lr
    6358:	42ab      	cmp	r3, r5
    635a:	bf28      	it	cs
    635c:	462b      	movcs	r3, r5
   * \param[in] sector Start sector of the range.
   * \param[in] count Number of sectors in the range.
   * \return true if a sector in the range is cached.
   */
  bool isCached(uint32_t sector, size_t count) {
    return sector <= m_sector && m_sector < (sector + count);
    635e:	428a      	cmp	r2, r1
      uint32_t nSector = nToWrite >> m_vol->bytesPerSectorShift();
      if (nSector > maxSectors) {
        nSector = maxSectors;
      }
      n = nSector << m_vol->bytesPerSectorShift();
    6360:	ea4f 2543 	mov.w	r5, r3, lsl #9
    6364:	d307      	bcc.n	6376 <FatFile::write(void const*, unsigned int)+0x122>
    6366:	eb03 0e01 	add.w	lr, r3, r1
    636a:	4572      	cmp	r2, lr
    636c:	d203      	bcs.n	6376 <FatFile::write(void const*, unsigned int)+0x122>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    636e:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    6372:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src, size_t count) {
     if (isCached(sector, count)) {
      invalidate();
    }
    return m_blockDev->writeSectors(sector, src, count);
    6376:	6a80      	ldr	r0, [r0, #40]	; 0x28
    6378:	463a      	mov	r2, r7
    637a:	f8d0 e000 	ldr.w	lr, [r0]
    637e:	f8de b020 	ldr.w	fp, [lr, #32]
    6382:	47d8      	blx	fp
      if (!m_vol->cacheSafeWrite(sector, src, nSector)) {
    6384:	2800      	cmp	r0, #0
    6386:	d1bd      	bne.n	6304 <FatFile::write(void const*, unsigned int)+0xb0>
    6388:	e76a      	b.n	6260 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
        }
      } else {
        if (m_firstCluster == 0) {
    638a:	6a21      	ldr	r1, [r4, #32]
    638c:	b379      	cbz	r1, 63ee <FatFile::write(void const*, unsigned int)+0x19a>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
        } else {
          m_curCluster = m_firstCluster;
    638e:	6121      	str	r1, [r4, #16]
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    6390:	3902      	subs	r1, #2
    6392:	7982      	ldrb	r2, [r0, #6]
    6394:	6943      	ldr	r3, [r0, #20]

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    6396:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
        }
      }
    }
    // sector for data write
    uint32_t sector = m_vol->clusterStartSector(m_curCluster)
                      + sectorOfCluster;
    639a:	fa01 f102 	lsl.w	r1, r1, r2
    639e:	4419      	add	r1, r3

    if (sectorOffset != 0 || nToWrite < m_vol->bytesPerSector()) {
    63a0:	d2d1      	bcs.n	6346 <FatFile::write(void const*, unsigned int)+0xf2>
      // partial sector - must use cache
      // max space in sector
      n = m_vol->bytesPerSector() - sectorOffset;
    63a2:	f5cb 7500 	rsb	r5, fp, #512	; 0x200
    63a6:	6962      	ldr	r2, [r4, #20]
    63a8:	42b5      	cmp	r5, r6
    63aa:	bf28      	it	cs
    63ac:	4635      	movcs	r5, r6
    63ae:	e793      	b.n	62d8 <FatFile::write(void const*, unsigned int)+0x84>
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool cacheSafeWrite(uint32_t sector, const uint8_t* src) {
    if (isCached(sector)) {
    63b0:	6b03      	ldr	r3, [r0, #48]	; 0x30
    63b2:	428b      	cmp	r3, r1
    63b4:	d025      	beq.n	6402 <FatFile::write(void const*, unsigned int)+0x1ae>
      invalidate();
    }
    return m_blockDev->writeSector(sector, src);
    63b6:	6a80      	ldr	r0, [r0, #40]	; 0x28
    63b8:	463a      	mov	r2, r7
    63ba:	6803      	ldr	r3, [r0, #0]
    63bc:	69db      	ldr	r3, [r3, #28]
    63be:	4798      	blx	r3
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
      if (!m_vol->cacheSafeWrite(sector, src)) {
    63c0:	2800      	cmp	r0, #0
    63c2:	f43f af4d 	beq.w	6260 <FatFile::write(void const*, unsigned int)+0xc>
        goto fail;
      }
#endif  // USE_MULTI_SECTOR_IO
    } else {
      // use single sector write command
      n = m_vol->bytesPerSector();
    63c6:	f44f 7500 	mov.w	r5, #512	; 0x200
    63ca:	e79b      	b.n	6304 <FatFile::write(void const*, unsigned int)+0xb0>
        int8_t fg;
        if (isContiguous() && m_fileSize > m_curPosition) {
          m_curCluster++;
          fg = 1;
        } else {
          fg = m_vol->fatGet(m_curCluster, &m_curCluster);
    63cc:	f104 0210 	add.w	r2, r4, #16
    63d0:	f000 fbd0 	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
          if (fg < 0) {
    63d4:	2800      	cmp	r0, #0
    63d6:	f6ff af43 	blt.w	6260 <FatFile::write(void const*, unsigned int)+0xc>
        if (fg < 0) {
          DBG_FAIL_MACRO;
          goto fail;
        }
#endif  // USE_FAT_FILE_FLAG_CONTIGUOUS
        if (fg == 0) {
    63da:	d105      	bne.n	63e8 <FatFile::write(void const*, unsigned int)+0x194>
          // add cluster if at end of chain
          if (!addCluster()) {
    63dc:	4620      	mov	r0, r4
    63de:	f7ff fbbf 	bl	5b60 <FatFile::addCluster()>
    63e2:	2800      	cmp	r0, #0
    63e4:	f43f af3c 	beq.w	6260 <FatFile::write(void const*, unsigned int)+0xc>
    63e8:	6921      	ldr	r1, [r4, #16]
    63ea:	68a0      	ldr	r0, [r4, #8]
    63ec:	e7d0      	b.n	6390 <FatFile::write(void const*, unsigned int)+0x13c>
          }
        }
      } else {
        if (m_firstCluster == 0) {
          // allocate first cluster of file
          if (!addCluster()) {
    63ee:	4620      	mov	r0, r4
    63f0:	f7ff fbb6 	bl	5b60 <FatFile::addCluster()>
    63f4:	2800      	cmp	r0, #0
    63f6:	f43f af33 	beq.w	6260 <FatFile::write(void const*, unsigned int)+0xc>
            DBG_FAIL_MACRO;
            goto fail;
          }
          m_firstCluster = m_curCluster;
    63fa:	6921      	ldr	r1, [r4, #16]
    63fc:	68a0      	ldr	r0, [r4, #8]
    63fe:	6221      	str	r1, [r4, #32]
    6400:	e7c6      	b.n	6390 <FatFile::write(void const*, unsigned int)+0x13c>
    m_blockDev = blockDev;
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6402:	f880 a024 	strb.w	sl, [r0, #36]	; 0x24
    m_sector = 0XFFFFFFFF;
    6406:	f8c0 9030 	str.w	r9, [r0, #48]	; 0x30
    640a:	e7d4      	b.n	63b6 <FatFile::write(void const*, unsigned int)+0x162>
  }
  void cacheInvalidate() {
    m_cache.invalidate();
  }
  bool cacheSyncData() {
    return m_cache.sync();
    640c:	68a0      	ldr	r0, [r4, #8]
    640e:	3024      	adds	r0, #36	; 0x24
    6410:	f7fe f902 	bl	4618 <FsCache::sync()>
      }
      uint8_t* dst = pc->data + sectorOffset;
      memcpy(dst, src, n);
      if (m_vol->bytesPerSector() == (n + sectorOffset)) {
        // Force write if sector is full - improves large writes.
        if (!m_vol->cacheSyncData()) {
    6414:	2800      	cmp	r0, #0
    6416:	f47f af75 	bne.w	6304 <FatFile::write(void const*, unsigned int)+0xb0>
    641a:	e721      	b.n	6260 <FatFile::write(void const*, unsigned int)+0xc>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // seek to end of file if append flag
  if ((m_flags & FILE_FLAG_APPEND)) {
    if (!seekSet(m_fileSize)) {
    641c:	69c1      	ldr	r1, [r0, #28]
    641e:	f7ff fe13 	bl	6048 <FatFile::seekSet(unsigned long)>
    6422:	2800      	cmp	r0, #0
    6424:	f43f af1c 	beq.w	6260 <FatFile::write(void const*, unsigned int)+0xc>
    6428:	e727      	b.n	627a <FatFile::write(void const*, unsigned int)+0x26>
    }
    m_curPosition += n;
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    642a:	69e3      	ldr	r3, [r4, #28]
    642c:	4293      	cmp	r3, r2
    642e:	d309      	bcc.n	6444 <FatFile::write(void const*, unsigned int)+0x1f0>
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
  } else if (FsDateTime::callback) {
    6430:	4b0a      	ldr	r3, [pc, #40]	; (645c <FatFile::write(void const*, unsigned int)+0x208>)
    6432:	681b      	ldr	r3, [r3, #0]
    6434:	b173      	cbz	r3, 6454 <FatFile::write(void const*, unsigned int)+0x200>
    // insure sync will update modified date and time
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6436:	78a3      	ldrb	r3, [r4, #2]
    6438:	4640      	mov	r0, r8
    643a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    643e:	70a3      	strb	r3, [r4, #2]
    6440:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    m_flags |= FILE_FLAG_DIR_DIRTY;
    6444:	78a3      	ldrb	r3, [r4, #2]
    6446:	4640      	mov	r0, r8
    src += n;
    nToWrite -= n;
  }
  if (m_curPosition > m_fileSize) {
    // update fileSize and insure sync will update dir entry
    m_fileSize = m_curPosition;
    6448:	61e2      	str	r2, [r4, #28]
    m_flags |= FILE_FLAG_DIR_DIRTY;
    644a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    644e:	70a3      	strb	r3, [r4, #2]
    6450:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    6454:	4640      	mov	r0, r8
    6456:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    645a:	bf00      	nop
    645c:	20036c3c 	.word	0x20036c3c

00006460 <lfnGetChar(DirLfn_t*, unsigned char)>:
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    6460:	2904      	cmp	r1, #4
    6462:	d90b      	bls.n	647c <lfnGetChar(DirLfn_t*, unsigned char)+0x1c>
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    6464:	290a      	cmp	r1, #10
    6466:	d905      	bls.n	6474 <lfnGetChar(DirLfn_t*, unsigned char)+0x14>
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    6468:	290c      	cmp	r1, #12
    646a:	d80c      	bhi.n	6486 <lfnGetChar(DirLfn_t*, unsigned char)+0x26>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    646c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    6470:	88c8      	ldrh	r0, [r1, #6]
    6472:	4770      	bx	lr
    6474:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    6478:	8888      	ldrh	r0, [r1, #4]
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
    647a:	4770      	bx	lr
    647c:	eb00 0141 	add.w	r1, r0, r1, lsl #1
    6480:	f8b1 0001 	ldrh.w	r0, [r1, #1]
 * \param[in] i Index of character.
 * \return The 16-bit character.
 */
static uint16_t lfnGetChar(DirLfn_t* ldir, uint8_t i) {
  if (i < 5) {
    return getLe16(ldir->unicode1 + 2*i);
    6484:	4770      	bx	lr
  } else if (i < 11) {
    return getLe16(ldir->unicode2 + 2*i - 10);
  } else if (i < 13) {
    return getLe16(ldir->unicode3 + 2*i - 22);
  }
  return 0;
    6486:	2000      	movs	r0, #0
}
    6488:	4770      	bx	lr
    648a:	bf00      	nop

0000648c <FatFile::parsePathName(char const*, fname_t*, char const**)>:
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    648c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int len = 0;
  int si;
  int dot;

  // Skip leading spaces.
  while (*path == ' ') {
    6490:	7803      	ldrb	r3, [r0, #0]
    6492:	2b20      	cmp	r3, #32
    6494:	d103      	bne.n	649e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12>
    6496:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    649a:	2b20      	cmp	r3, #32
    649c:	d0fb      	beq.n	6496 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa>
    path++;
  }
  fname->lfn = path;
    649e:	6088      	str	r0, [r1, #8]

  for (len = 0; ; len++) {
    c = path[len];
    64a0:	7803      	ldrb	r3, [r0, #0]
    if (c == 0 || isDirSeparator(c)) {
    64a2:	2b2f      	cmp	r3, #47	; 0x2f
    64a4:	f000 8122 	beq.w	66ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
    64a8:	2b00      	cmp	r3, #0
    64aa:	f000 811f 	beq.w	66ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x260>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    64ae:	2b5c      	cmp	r3, #92	; 0x5c
    64b0:	d025      	beq.n	64fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    64b2:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
    64b6:	b2e4      	uxtb	r4, r4
    64b8:	2c1a      	cmp	r4, #26
    64ba:	d923      	bls.n	6504 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x78>
    64bc:	1c46      	adds	r6, r0, #1
  m_firstCluster = file->m_dirCluster;
  return true;
}
//------------------------------------------------------------------------------
bool FatFile::parsePathName(const char* path,
                            fname_t* fname, const char** ptr) {
    64be:	2500      	movs	r5, #0
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    64c0:	f8df e248 	ldr.w	lr, [pc, #584]	; 670c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>
    64c4:	e003      	b.n	64ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    64c6:	2c1a      	cmp	r4, #26
    64c8:	fa2e f704 	lsr.w	r7, lr, r4
    64cc:	d922      	bls.n	6514 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x88>
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    64ce:	f1a3 043e 	sub.w	r4, r3, #62	; 0x3e
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    64d2:	3501      	adds	r5, #1
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    64d4:	f1a3 0c20 	sub.w	ip, r3, #32
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    64d8:	46b0      	mov	r8, r6
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    64da:	2c01      	cmp	r4, #1
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    64dc:	462f      	mov	r7, r5
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
      c == ':' || c == '<' || c == '>' || c == '?' || c == '|') {
    64de:	d90e      	bls.n	64fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    64e0:	2b7c      	cmp	r3, #124	; 0x7c
    64e2:	d00c      	beq.n	64fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
      break;
    }
    if (!lfnLegalChar(c)) {
    64e4:	f1bc 0f5e 	cmp.w	ip, #94	; 0x5e
    64e8:	d809      	bhi.n	64fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    64ea:	f816 3b01 	ldrb.w	r3, [r6], #1
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    64ee:	f1a3 0422 	sub.w	r4, r3, #34	; 0x22
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    64f2:	2b2f      	cmp	r3, #47	; 0x2f
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    64f4:	b2e4      	uxtb	r4, r4
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    c = path[len];
    if (c == 0 || isDirSeparator(c)) {
    64f6:	d012      	beq.n	651e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
    64f8:	b18b      	cbz	r3, 651e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x92>
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    64fa:	2b5c      	cmp	r3, #92	; 0x5c
    64fc:	d1e3      	bne.n	64c6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x3a>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    64fe:	2000      	movs	r0, #0
    6500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6504:	4d81      	ldr	r5, [pc, #516]	; (670c <FatFile::parsePathName(char const*, fname_t*, char const**)+0x280>)
    6506:	fa25 f404 	lsr.w	r4, r5, r4
    650a:	07e5      	lsls	r5, r4, #31
    650c:	d5d6      	bpl.n	64bc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x30>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    650e:	2000      	movs	r0, #0
    6510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  name[k] = '\0';
  return k;
}
//------------------------------------------------------------------------------
inline bool lfnLegalChar(uint8_t c) {
  if (c == '/' || c == '\\' || c == '"' || c == '*' ||
    6514:	07fc      	lsls	r4, r7, #31
    6516:	d5da      	bpl.n	64ce <FatFile::parsePathName(char const*, fname_t*, char const**)+0x42>
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;

 fail:
  return false;
    6518:	2000      	movs	r0, #0
    651a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    651e:	2b20      	cmp	r3, #32
    6520:	d002      	beq.n	6528 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
    6522:	2b2f      	cmp	r3, #47	; 0x2f
    6524:	f040 80df 	bne.w	66e6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x25a>
    6528:	1c6b      	adds	r3, r5, #1
    652a:	4403      	add	r3, r0
    652c:	461e      	mov	r6, r3
    652e:	f813 4b01 	ldrb.w	r4, [r3], #1
    6532:	2c20      	cmp	r4, #32
    6534:	d0fa      	beq.n	652c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
    6536:	2c2f      	cmp	r4, #47	; 0x2f
    6538:	d0f8      	beq.n	652c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xa0>
  *ptr = &path[end];
    653a:	6016      	str	r6, [r2, #0]

  // Back over spaces and dots.
  while (len) {
    653c:	b1b5      	cbz	r5, 656c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    653e:	4407      	add	r7, r0
    6540:	f817 3c01 	ldrb.w	r3, [r7, #-1]
    if (c != '.' && c != ' ') {
    6544:	2b20      	cmp	r3, #32
    6546:	d001      	beq.n	654c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc0>
    6548:	2b2e      	cmp	r3, #46	; 0x2e
    654a:	d10a      	bne.n	6562 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xd6>
    654c:	1e6b      	subs	r3, r5, #1
    654e:	18c4      	adds	r4, r0, r3
      break;
    }
    len--;
    6550:	461d      	mov	r5, r3
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];

  // Back over spaces and dots.
  while (len) {
    6552:	b15b      	cbz	r3, 656c <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe0>
    c = path[len - 1];
    6554:	f814 2d01 	ldrb.w	r2, [r4, #-1]!
    6558:	3b01      	subs	r3, #1
    if (c != '.' && c != ' ') {
    655a:	2a2e      	cmp	r2, #46	; 0x2e
    655c:	d0f8      	beq.n	6550 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
    655e:	2a20      	cmp	r2, #32
    6560:	d0f6      	beq.n	6550 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xc4>
      break;
    }
    len--;
  }
  // Max length of LFN is 255.
  if (len > 255) {
    6562:	2dff      	cmp	r5, #255	; 0xff
    6564:	dccb      	bgt.n	64fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    6566:	462f      	mov	r7, r5
    6568:	1e6c      	subs	r4, r5, #1
    656a:	e002      	b.n	6572 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
    656c:	f04f 34ff 	mov.w	r4, #4294967295
    6570:	462f      	mov	r7, r5
    6572:	f101 030c 	add.w	r3, r1, #12
    6576:	f101 0617 	add.w	r6, r1, #23
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    657a:	2220      	movs	r2, #32
  // Max length of LFN is 255.
  if (len > 255) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
    657c:	604f      	str	r7, [r1, #4]
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
    657e:	f803 2f01 	strb.w	r2, [r3, #1]!
    DBG_FAIL_MACRO;
    goto fail;
  }
  fname->len = len;
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    6582:	42b3      	cmp	r3, r6
    6584:	d1fb      	bne.n	657e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xf2>
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    6586:	7803      	ldrb	r3, [r0, #0]
    6588:	2b2e      	cmp	r3, #46	; 0x2e
    658a:	d002      	beq.n	6592 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x106>
    658c:	2b20      	cmp	r3, #32
    658e:	f040 80a6 	bne.w	66de <FatFile::parsePathName(char const*, fname_t*, char const**)+0x252>
    6592:	4606      	mov	r6, r0
    6594:	2300      	movs	r3, #0
    6596:	f816 2f01 	ldrb.w	r2, [r6, #1]!
    659a:	3301      	adds	r3, #1
    659c:	2a2e      	cmp	r2, #46	; 0x2e
    659e:	d0fa      	beq.n	6596 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    65a0:	2a20      	cmp	r2, #32
    65a2:	d0f8      	beq.n	6596 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x10a>
    65a4:	f04f 0e00 	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
    65a8:	1c62      	adds	r2, r4, #1
    65aa:	d00b      	beq.n	65c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    65ac:	5d06      	ldrb	r6, [r0, r4]
    65ae:	1902      	adds	r2, r0, r4
    65b0:	2e2e      	cmp	r6, #46	; 0x2e
    65b2:	d104      	bne.n	65be <FatFile::parsePathName(char const*, fname_t*, char const**)+0x132>
    65b4:	e006      	b.n	65c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    65b6:	f812 6d01 	ldrb.w	r6, [r2, #-1]!
    65ba:	2e2e      	cmp	r6, #46	; 0x2e
    65bc:	d002      	beq.n	65c4 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x138>
    65be:	f114 34ff 	adds.w	r4, r4, #4294967295
    65c2:	d2f8      	bcs.n	65b6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x12a>
  for (; si < len; si++) {
    65c4:	429d      	cmp	r5, r3
    65c6:	f04f 0900 	mov.w	r9, #0
    65ca:	f340 809c 	ble.w	6706 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x27a>
    65ce:	f04f 0c07 	mov.w	ip, #7
    65d2:	f04f 0808 	mov.w	r8, #8
    65d6:	464e      	mov	r6, r9
    65d8:	46ca      	mov	sl, r9
    c = path[si];
    65da:	5cc2      	ldrb	r2, [r0, r3]
    if (c == ' ' || (c == '.' && dot != si)) {
    65dc:	2a20      	cmp	r2, #32
    65de:	d003      	beq.n	65e8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x15c>
    65e0:	2a2e      	cmp	r2, #46	; 0x2e
    65e2:	d117      	bne.n	6614 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
    65e4:	429c      	cmp	r4, r3
    65e6:	d015      	beq.n	6614 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x188>
      is83 = false;
    65e8:	f04f 0e00 	mov.w	lr, #0
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    65ec:	3301      	adds	r3, #1
    65ee:	42ab      	cmp	r3, r5
    65f0:	dbf3      	blt.n	65da <FatFile::parsePathName(char const*, fname_t*, char const**)+0x14e>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    65f2:	7b4b      	ldrb	r3, [r1, #13]
    65f4:	2b20      	cmp	r3, #32
    65f6:	d082      	beq.n	64fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    65f8:	f1be 0f00 	cmp.w	lr, #0
    65fc:	d057      	beq.n	66ae <FatFile::parsePathName(char const*, fname_t*, char const**)+0x222>
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    65fe:	ea1a 0f09 	tst.w	sl, r9
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    fname->sfn[fname->seqPos + 1] = '1';
  }
  return true;
    6602:	f04f 0001 	mov.w	r0, #1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
    6606:	bf18      	it	ne
    6608:	f04f 0902 	movne.w	r9, #2
    660c:	f881 9000 	strb.w	r9, [r1]
    6610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  /** Check for a legal 8.3 character.
   * \param[in] c Character to be checked.
   * \return true for a legal 8.3 character.
   */
  static bool legal83Char(uint8_t c) {
    if (c == '"' || c == '|') {
    6614:	2a22      	cmp	r2, #34	; 0x22
    6616:	d007      	beq.n	6628 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    6618:	2a7c      	cmp	r2, #124	; 0x7c
    661a:	d005      	beq.n	6628 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // *+,./
    if (0X2A <= c && c <= 0X2F && c != 0X2D) {
    661c:	f1a2 072a 	sub.w	r7, r2, #42	; 0x2a
    6620:	2f05      	cmp	r7, #5
    6622:	d814      	bhi.n	664e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    6624:	2a2d      	cmp	r2, #45	; 0x2d
    6626:	d012      	beq.n	664e <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1c2>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    6628:	429c      	cmp	r4, r3
    662a:	d01c      	beq.n	6666 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1da>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    662c:	4566      	cmp	r6, ip
    662e:	bf94      	ite	ls
    6630:	2200      	movls	r2, #0
    6632:	2201      	movhi	r2, #1
    6634:	bba2      	cbnz	r2, 66a0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x214>
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
      is83 = false;
    6636:	4696      	mov	lr, r2
      c = '_';
    6638:	225f      	movs	r2, #95	; 0x5f
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
        uc |= bit;
      }
      fname->sfn[i++] = c;
    663a:	1c77      	adds	r7, r6, #1
    663c:	eb01 0b06 	add.w	fp, r1, r6
    6640:	b2fe      	uxtb	r6, r7
    6642:	f88b 200d 	strb.w	r2, [fp, #13]
      if (i < 7) {
    6646:	2e06      	cmp	r6, #6
    6648:	d8d0      	bhi.n	65ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
        fname->seqPos = i;
    664a:	730e      	strb	r6, [r1, #12]
    664c:	e7ce      	b.n	65ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
      return false;
    }
    // :;<=>?
    if (0X3A <= c && c <= 0X3F) {
    664e:	f1a2 073a 	sub.w	r7, r2, #58	; 0x3a
    6652:	2f05      	cmp	r7, #5
    6654:	d9e8      	bls.n	6628 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      return false;
    }
    // [\]
    if (0X5B <= c && c <= 0X5D) {
    6656:	f1a2 075b 	sub.w	r7, r2, #91	; 0x5b
    665a:	2f02      	cmp	r7, #2
    665c:	d9e4      	bls.n	6628 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
    c = path[si];
    if (c == ' ' || (c == '.' && dot != si)) {
      is83 = false;
      continue;
    }
    if (!legal83Char(c) && si != dot) {
    665e:	f1a2 0721 	sub.w	r7, r2, #33	; 0x21
    6662:	2f5d      	cmp	r7, #93	; 0x5d
    6664:	d8e0      	bhi.n	6628 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x19c>
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
    6666:	429c      	cmp	r4, r3
    6668:	d00a      	beq.n	6680 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
    666a:	4566      	cmp	r6, ip
    666c:	d808      	bhi.n	6680 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1f4>
      si = dot;
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
    666e:	f1a2 0761 	sub.w	r7, r2, #97	; 0x61
    6672:	2f19      	cmp	r7, #25
    6674:	d82c      	bhi.n	66d0 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x244>
        c += 'A' - 'a';
    6676:	3a20      	subs	r2, #32
        lc |= bit;
    6678:	ea48 0909 	orr.w	r9, r8, r9
      in = 10;  // Max index for full 8.3 name.
      i = 8;    // Place for extension.
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
    667c:	b2d2      	uxtb	r2, r2
    667e:	e7dc      	b.n	663a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    6680:	f1bc 0f0a 	cmp.w	ip, #10
    6684:	d00f      	beq.n	66a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
    6686:	429c      	cmp	r4, r3
    6688:	d01b      	beq.n	66c2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x236>
        is83 = false;
      }
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
    668a:	429c      	cmp	r4, r3
    668c:	db0b      	blt.n	66a6 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x21a>
    668e:	4623      	mov	r3, r4
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    6690:	f04f 0c0a 	mov.w	ip, #10
      i = 8;    // Place for extension.
    6694:	2608      	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    6696:	f04f 0810 	mov.w	r8, #16
        // Done - extension longer than three characters.
        is83 = false;
        break;
      }
      if (si != dot) {
        is83 = false;
    669a:	f04f 0e00 	mov.w	lr, #0
    669e:	e7a5      	b.n	65ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    if (!legal83Char(c) && si != dot) {
      is83 = false;
      c = '_';
    }
    if (si == dot || i > in) {
      if (in == 10) {
    66a0:	f1bc 0f0a 	cmp.w	ip, #10
    66a4:	d1f1      	bne.n	668a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1fe>
      if (i < 7) {
        fname->seqPos = i;
      }
    }
  }
  if (fname->sfn[0] == ' ') {
    66a6:	7b4b      	ldrb	r3, [r1, #13]
    66a8:	2b20      	cmp	r3, #32
    66aa:	f43f af28 	beq.w	64fe <FatFile::parsePathName(char const*, fname_t*, char const**)+0x72>

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    66ae:	7b0b      	ldrb	r3, [r1, #12]
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    66b0:	2001      	movs	r0, #1
    fname->sfn[fname->seqPos] = '~';
    66b2:	247e      	movs	r4, #126	; 0x7e
    fname->sfn[fname->seqPos + 1] = '1';
    66b4:	2231      	movs	r2, #49	; 0x31

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    fname->sfn[fname->seqPos] = '~';
    66b6:	440b      	add	r3, r1
  }

  if (is83) {
    fname->flags = lc & uc ? FNAME_FLAG_MIXED_CASE : lc;
  } else {
    fname->flags = FNAME_FLAG_LOST_CHARS;
    66b8:	7008      	strb	r0, [r1, #0]
    fname->sfn[fname->seqPos] = '~';
    66ba:	735c      	strb	r4, [r3, #13]
    fname->sfn[fname->seqPos + 1] = '1';
    66bc:	739a      	strb	r2, [r3, #14]
    66be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    66c2:	4623      	mov	r3, r4
      // Break if no dot and base-name is longer than eight characters.
      if (si > dot) {
        break;
      }
      si = dot;
      in = 10;  // Max index for full 8.3 name.
    66c4:	f04f 0c0a 	mov.w	ip, #10
      i = 8;    // Place for extension.
    66c8:	2608      	movs	r6, #8
      bit = FAT_CASE_LC_EXT;  // bit for extension.
    66ca:	f04f 0810 	mov.w	r8, #16
    66ce:	e78d      	b.n	65ec <FatFile::parsePathName(char const*, fname_t*, char const**)+0x160>
    } else {
      if ('a' <= c && c <= 'z') {
        c += 'A' - 'a';
        lc |= bit;
      } else if ('A' <= c && c <= 'Z') {
    66d0:	f1a2 0741 	sub.w	r7, r2, #65	; 0x41
    66d4:	2f19      	cmp	r7, #25
    66d6:	d8b0      	bhi.n	663a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
        uc |= bit;
    66d8:	ea48 0a0a 	orr.w	sl, r8, sl
    66dc:	e7ad      	b.n	663a <FatFile::parsePathName(char const*, fname_t*, char const**)+0x1ae>
  // Blank file short name.
  for (uint8_t k = 0; k < 11; k++) {
    fname->sfn[k] = ' ';
  }
  // skip leading spaces and dots.
  for (si = 0; path[si] == '.' || path[si] == ' '; si++) {}
    66de:	f04f 0e01 	mov.w	lr, #1
    66e2:	2300      	movs	r3, #0
    66e4:	e760      	b.n	65a8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x11c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    66e6:	f8c2 8000 	str.w	r8, [r2]
    66ea:	e728      	b.n	653e <FatFile::parsePathName(char const*, fname_t*, char const**)+0xb2>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    66ec:	2b2f      	cmp	r3, #47	; 0x2f
  *ptr = &path[end];
    66ee:	f04f 0700 	mov.w	r7, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
    66f2:	d001      	beq.n	66f8 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x26c>
    66f4:	2b20      	cmp	r3, #32
    66f6:	d101      	bne.n	66fc <FatFile::parsePathName(char const*, fname_t*, char const**)+0x270>
  while (*path == ' ') {
    path++;
  }
  fname->lfn = path;

  for (len = 0; ; len++) {
    66f8:	463d      	mov	r5, r7
    66fa:	e715      	b.n	6528 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x9c>
      goto fail;
    }
  }
  // Advance to next path component.
  for (end = len; path[end] ==  ' ' || isDirSeparator(path[end]); end++) {}
  *ptr = &path[end];
    66fc:	6010      	str	r0, [r2, #0]
    66fe:	f04f 34ff 	mov.w	r4, #4294967295
    6702:	463d      	mov	r5, r7
    6704:	e735      	b.n	6572 <FatFile::parsePathName(char const*, fname_t*, char const**)+0xe6>
  // Not 8.3 if leading dot or space.
  is83 = !si;

  // find last dot.
  for (dot = len - 1; dot >= 0 && path[dot] != '.'; dot--) {}
  for (; si < len; si++) {
    6706:	46ca      	mov	sl, r9
    6708:	e773      	b.n	65f2 <FatFile::parsePathName(char const*, fname_t*, char const**)+0x166>
    670a:	bf00      	nop
    670c:	05000101 	.word	0x05000101

00006710 <FatFile::lfnUniqueSfn(fname_t*)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
    6710:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    6714:	460e      	mov	r6, r1
    6716:	4604      	mov	r4, r0
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    6718:	f04f 0802 	mov.w	r8, #2
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    671c:	f04f 097e 	mov.w	r9, #126	; 0x7e
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::lfnUniqueSfn(fname_t* fname) {
  const uint8_t FIRST_HASH_SEQ = 2;  // min value is 2
  uint8_t pos = fname->seqPos;
    6720:	7b0f      	ldrb	r7, [r1, #12]
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6722:	f101 050d 	add.w	r5, r1, #13
  for (uint8_t seq = 2; seq < 100; seq++) {
    if (seq < FIRST_HASH_SEQ) {
      fname->sfn[pos + 1] = '0' + seq;
    } else {
      DBG_PRINT_IF(seq > FIRST_HASH_SEQ);
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
    6726:	6870      	ldr	r0, [r6, #4]
    6728:	68b1      	ldr	r1, [r6, #8]
    672a:	eb08 0300 	add.w	r3, r8, r0
    672e:	b29b      	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6730:	b148      	cbz	r0, 6746 <FatFile::lfnUniqueSfn(fname_t*)+0x36>
    6732:	4408      	add	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    6734:	f811 2b01 	ldrb.w	r2, [r1], #1
    6738:	eb03 1343 	add.w	r3, r3, r3, lsl #5
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    673c:	4288      	cmp	r0, r1
    // hash = hash * 33 ^ str[i];
    hash = ((hash << 5) + hash) ^ str[i];
    673e:	ea83 0302 	eor.w	r3, r3, r2
    6742:	b29b      	uxth	r3, r3
}
//------------------------------------------------------------------------------
// Daniel Bernstein University of Illinois at Chicago.
// Original had + instead of ^
static uint16_t Bernstein(uint16_t hash, const char *str, size_t len) {
  for (size_t i = 0; i < len; i++) {
    6744:	d1f6      	bne.n	6734 <FatFile::lfnUniqueSfn(fname_t*)+0x24>
    6746:	2f03      	cmp	r7, #3
    6748:	bf28      	it	cs
    674a:	2703      	movcs	r7, #3
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    674c:	1d3a      	adds	r2, r7, #4
    674e:	b2d2      	uxtb	r2, r2
        uint8_t h = hex & 0XF;
    6750:	f003 010f 	and.w	r1, r3, #15
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6754:	f102 3eff 	add.w	lr, r2, #4294967295
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
    6758:	091b      	lsrs	r3, r3, #4
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    675a:	2909      	cmp	r1, #9
    675c:	f101 0037 	add.w	r0, r1, #55	; 0x37
    6760:	bf98      	it	ls
    6762:	f101 0030 	addls.w	r0, r1, #48	; 0x30
    6766:	18b1      	adds	r1, r6, r2
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    6768:	fa5f f28e 	uxtb.w	r2, lr
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
    676c:	7348      	strb	r0, [r1, #13]
      hex = Bernstein(seq + fname->len, fname->lfn, fname->len);
      if (pos > 3) {
        // Make space in name for ~HHHH.
        pos = 3;
      }
      for (uint8_t i = pos + 4 ; i > pos; i--) {
    676e:	4297      	cmp	r7, r2
    6770:	d3ee      	bcc.n	6750 <FatFile::lfnUniqueSfn(fname_t*)+0x40>
        uint8_t h = hex & 0XF;
        fname->sfn[i] = h < 10 ? h + '0' : h + 'A' - 10;
        hex >>= 4;
      }
    }
    fname->sfn[pos] = '~';
    6772:	19f3      	adds	r3, r6, r7
   * \return true for success or false for failure.
   */
  bool rename(FatFile* dirFile, const char* newPath);
  /** Set the file's current position to zero. */
  void rewind() {
    seekSet(0);
    6774:	2100      	movs	r1, #0
    6776:	4620      	mov	r0, r4
    6778:	f883 900d 	strb.w	r9, [r3, #13]
    677c:	f7ff fc64 	bl	6048 <FatFile::seekSet(unsigned long)>
    rewind();
    while (1) {
      dir = readDirCache(true);
    6780:	2101      	movs	r1, #1
    6782:	4620      	mov	r0, r4
    6784:	f7ff fc3e 	bl	6004 <FatFile::readDirCache(bool)>
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6788:	220b      	movs	r2, #11
    }
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
    678a:	4603      	mov	r3, r0
    678c:	b1b0      	cbz	r0, 67bc <FatFile::lfnUniqueSfn(fname_t*)+0xac>
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    678e:	f890 e000 	ldrb.w	lr, [r0]
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    6792:	4601      	mov	r1, r0
    6794:	4628      	mov	r0, r5
          goto done;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    6796:	f1be 0f00 	cmp.w	lr, #0
    679a:	d015      	beq.n	67c8 <FatFile::lfnUniqueSfn(fname_t*)+0xb8>
        goto done;
      }
      if (isFileOrSubdir(dir) && !memcmp(fname->sfn, dir->name, 11)) {
    679c:	7adb      	ldrb	r3, [r3, #11]
    679e:	071b      	lsls	r3, r3, #28
    67a0:	d4ee      	bmi.n	6780 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    67a2:	f004 fdad 	bl	b300 <memcmp>
    67a6:	2800      	cmp	r0, #0
    67a8:	d1ea      	bne.n	6780 <FatFile::lfnUniqueSfn(fname_t*)+0x70>
    67aa:	f108 0801 	add.w	r8, r8, #1
    67ae:	fa1f f888 	uxth.w	r8, r8
  uint16_t hex;

  DBG_HALT_IF(!(fname->flags & FNAME_FLAG_LOST_CHARS));
  DBG_HALT_IF(fname->sfn[pos] != '~' && fname->sfn[pos + 1] != '1');

  for (uint8_t seq = 2; seq < 100; seq++) {
    67b2:	f1b8 0f64 	cmp.w	r8, #100	; 0x64
    67b6:	d1b6      	bne.n	6726 <FatFile::lfnUniqueSfn(fname_t*)+0x16>
 fail:
  return false;

 done:
  return true;
}
    67b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    fname->sfn[pos] = '~';
    rewind();
    while (1) {
      dir = readDirCache(true);
      if (!dir) {
        if (!getError()) {
    67bc:	7860      	ldrb	r0, [r4, #1]
    67be:	fab0 f080 	clz	r0, r0
    67c2:	0940      	lsrs	r0, r0, #5
    67c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

 fail:
  return false;

 done:
  return true;
    67c8:	2001      	movs	r0, #1
    67ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    67ce:	bf00      	nop

000067d0 <FatFile::open(FatFile*, fname_t*, int)>:

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    67d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    67d4:	780c      	ldrb	r4, [r1, #0]

 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
    67d6:	b08d      	sub	sp, #52	; 0x34
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;

  if (!dirFile->isDir() || isOpen()) {
    67d8:	f014 0f70 	tst.w	r4, #112	; 0x70
    67dc:	d001      	beq.n	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    67de:	7804      	ldrb	r4, [r0, #0]
    67e0:	b11c      	cbz	r4, 67ea <FatFile::open(FatFile*, fname_t*, int)+0x1a>
    goto fail;
  }
  return true;

 fail:
  return false;
    67e2:	2000      	movs	r0, #0
}
    67e4:	b00d      	add	sp, #52	; 0x34
    67e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    67ea:	7814      	ldrb	r4, [r2, #0]
  uint16_t curIndex;
  uint16_t date;
  uint16_t time;
  DirFat_t* dir;
  DirLfn_t* ldir;
  size_t len = fname->len;
    67ec:	f8d2 a004 	ldr.w	sl, [r2, #4]
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    67f0:	07a4      	lsls	r4, r4, #30
    67f2:	d148      	bne.n	6886 <FatFile::open(FatFile*, fname_t*, int)+0xb6>
    67f4:	2701      	movs	r7, #1
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
  uint8_t checksum = 0;
  uint8_t ms10;
  uint16_t freeIndex = 0;
    67f6:	f04f 0900 	mov.w	r9, #0
    67fa:	460e      	mov	r6, r1
    67fc:	9306      	str	r3, [sp, #24]
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    67fe:	f102 030d 	add.w	r3, r2, #13
    6802:	9008      	str	r0, [sp, #32]
    6804:	4649      	mov	r1, r9
    6806:	4630      	mov	r0, r6
    6808:	4693      	mov	fp, r2
    680a:	9304      	str	r3, [sp, #16]
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
  uint8_t freeNeed;
  uint8_t freeFound = 0;
    680c:	464c      	mov	r4, r9
  uint8_t order = 0;
  uint8_t checksum = 0;
    680e:	f8cd 901c 	str.w	r9, [sp, #28]
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
  uint8_t lfnOrd = 0;
    6812:	46c8      	mov	r8, r9
  uint8_t freeNeed;
  uint8_t freeFound = 0;
  uint8_t order = 0;
    6814:	f8cd 900c 	str.w	r9, [sp, #12]
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool FatFile::open(FatFile* dirFile, fname_t* fname, oflag_t oflag) {
  bool fnameFound = false;
    6818:	f8cd 9014 	str.w	r9, [sp, #20]
    681c:	f7ff fc14 	bl	6048 <FatFile::seekSet(unsigned long)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    6820:	6975      	ldr	r5, [r6, #20]
    dir = dirFile->readDirCache(true);
    6822:	2101      	movs	r1, #1
    6824:	4630      	mov	r0, r6
    6826:	f7ff fbed 	bl	6004 <FatFile::readDirCache(bool)>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    682a:	f3c5 154f 	ubfx	r5, r5, #5, #16
    dir = dirFile->readDirCache(true);
    if (!dir) {
    682e:	4603      	mov	r3, r0
    6830:	2800      	cmp	r0, #0
    6832:	f000 80b9 	beq.w	69a8 <FatFile::open(FatFile*, fname_t*, int)+0x1d8>
        goto fail;
      }
      // At EOF
      goto create;
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
    6836:	7802      	ldrb	r2, [r0, #0]
    6838:	f1a2 01e5 	sub.w	r1, r2, #229	; 0xe5
    683c:	fab1 f181 	clz	r1, r1
    6840:	0949      	lsrs	r1, r1, #5
    6842:	2a00      	cmp	r2, #0
    6844:	d035      	beq.n	68b2 <FatFile::open(FatFile*, fname_t*, int)+0xe2>
    6846:	2900      	cmp	r1, #0
    6848:	d133      	bne.n	68b2 <FatFile::open(FatFile*, fname_t*, int)+0xe2>
      if (dir->name[0] == FAT_NAME_FREE) {
        goto create;
      }
    } else {
      if (freeFound < freeNeed) {
        freeFound = 0;
    684a:	42bc      	cmp	r4, r7
    684c:	bf38      	it	cc
    684e:	2400      	movcc	r4, #0
      }
    }
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
    6850:	2a2e      	cmp	r2, #46	; 0x2e
    6852:	d02b      	beq.n	68ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    6854:	bb51      	cbnz	r1, 68ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    6856:	7ad8      	ldrb	r0, [r3, #11]
      lfnOrd = 0;
    } else if (isLongName(dir)) {
    6858:	280f      	cmp	r0, #15
    685a:	d05d      	beq.n	6918 <FatFile::open(FatFile*, fname_t*, int)+0x148>
          // Not found.
          lfnOrd = 0;
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
    685c:	0702      	lsls	r2, r0, #28
    685e:	d425      	bmi.n	68ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (lfnOrd) {
    6860:	f1b8 0f00 	cmp.w	r8, #0
    6864:	f040 8162 	bne.w	6b2c <FatFile::open(FatFile*, fname_t*, int)+0x35c>
          goto found;
        }
        DBG_FAIL_MACRO;
        goto fail;
      }
      if (!memcmp(dir->name, fname->sfn, sizeof(fname->sfn))) {
    6868:	4618      	mov	r0, r3
    686a:	220b      	movs	r2, #11
    686c:	9904      	ldr	r1, [sp, #16]
    686e:	f004 fd47 	bl	b300 <memcmp>
    6872:	2800      	cmp	r0, #0
    6874:	d1d4      	bne.n	6820 <FatFile::open(FatFile*, fname_t*, int)+0x50>
        if (!(fname->flags & FNAME_FLAG_LOST_CHARS)) {
    6876:	f89b 3000 	ldrb.w	r3, [fp]
    687a:	07d8      	lsls	r0, r3, #31
    687c:	f140 816b 	bpl.w	6b56 <FatFile::open(FatFile*, fname_t*, int)+0x386>
          goto found;
        }
        fnameFound = true;
    6880:	2301      	movs	r3, #1
    6882:	9305      	str	r3, [sp, #20]
    6884:	e7cc      	b.n	6820 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  if (!dirFile->isDir() || isOpen()) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;
    6886:	f10a 040c 	add.w	r4, sl, #12
    688a:	4fb8      	ldr	r7, [pc, #736]	; (6b6c <FatFile::open(FatFile*, fname_t*, int)+0x39c>)
    688c:	fba7 4704 	umull	r4, r7, r7, r4
    6890:	08bf      	lsrs	r7, r7, #2
    6892:	3701      	adds	r7, #1
    6894:	b2ff      	uxtb	r7, r7
    6896:	e7ae      	b.n	67f6 <FatFile::open(FatFile*, fname_t*, int)+0x26>
        if (order != (freeNeed - 1)) {
          continue;
        }
        lfnOrd = order;
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
    6898:	9803      	ldr	r0, [sp, #12]
    689a:	3801      	subs	r0, #1
    689c:	b2c0      	uxtb	r0, r0
    689e:	4282      	cmp	r2, r0
    68a0:	9003      	str	r0, [sp, #12]
    68a2:	d103      	bne.n	68ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    68a4:	7b5a      	ldrb	r2, [r3, #13]
    68a6:	9807      	ldr	r0, [sp, #28]
    68a8:	4282      	cmp	r2, r0
    68aa:	d046      	beq.n	693a <FatFile::open(FatFile*, fname_t*, int)+0x16a>
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
          // Not found.
          lfnOrd = 0;
    68ac:	f04f 0800 	mov.w	r8, #0
    68b0:	e7b6      	b.n	6820 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  // Number of directory entries needed.
  freeNeed = fname->flags & FNAME_FLAG_NEED_LFN ? 1 + (len + 12)/13 : 1;

  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    68b2:	2c00      	cmp	r4, #0
    68b4:	bf08      	it	eq
    68b6:	46a9      	moveq	r9, r5
    }
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == FAT_NAME_FREE) {
      if (freeFound == 0) {
        freeIndex = curIndex;
      }
      if (freeFound < freeNeed) {
    68b8:	42bc      	cmp	r4, r7
    68ba:	d201      	bcs.n	68c0 <FatFile::open(FatFile*, fname_t*, int)+0xf0>
        freeFound++;
    68bc:	3401      	adds	r4, #1
    68be:	b2e4      	uxtb	r4, r4
      }
      if (dir->name[0] == FAT_NAME_FREE) {
    68c0:	2a00      	cmp	r2, #0
    68c2:	d1c5      	bne.n	6850 <FatFile::open(FatFile*, fname_t*, int)+0x80>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    68c4:	9a06      	ldr	r2, [sp, #24]
    68c6:	4613      	mov	r3, r2
    68c8:	059a      	lsls	r2, r3, #22
    68ca:	d58a      	bpl.n	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    68cc:	f003 0303 	and.w	r3, r3, #3
    68d0:	3b01      	subs	r3, #1
    68d2:	2b01      	cmp	r3, #1
    68d4:	d885      	bhi.n	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    68d6:	2c00      	cmp	r4, #0
    68d8:	bf18      	it	ne
    68da:	464d      	movne	r5, r9
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    68dc:	42bc      	cmp	r4, r7
    68de:	d303      	bcc.n	68e8 <FatFile::open(FatFile*, fname_t*, int)+0x118>
    68e0:	e06f      	b.n	69c2 <FatFile::open(FatFile*, fname_t*, int)+0x1f2>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    68e2:	b2dc      	uxtb	r4, r3
  // If at EOF start in next cluster.
  if (freeFound == 0) {
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    68e4:	42a7      	cmp	r7, r4
    68e6:	d96c      	bls.n	69c2 <FatFile::open(FatFile*, fname_t*, int)+0x1f2>
    dir = dirFile->readDirCache();
    68e8:	2100      	movs	r1, #0
    68ea:	4630      	mov	r0, r6
    68ec:	f7ff fb8a 	bl	6004 <FatFile::readDirCache(bool)>
        goto fail;
      }
      // EOF if no error.
      break;
    }
    freeFound++;
    68f0:	1c63      	adds	r3, r4, #1
    freeIndex = curIndex;
  }

  while (freeFound < freeNeed) {
    dir = dirFile->readDirCache();
    if (!dir) {
    68f2:	2800      	cmp	r0, #0
    68f4:	d1f5      	bne.n	68e2 <FatFile::open(FatFile*, fname_t*, int)+0x112>
      if (dirFile->getError()) {
    68f6:	7873      	ldrb	r3, [r6, #1]
    68f8:	b12b      	cbz	r3, 6906 <FatFile::open(FatFile*, fname_t*, int)+0x136>
    68fa:	e772      	b.n	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    68fc:	68b3      	ldr	r3, [r6, #8]
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    68fe:	b2e4      	uxtb	r4, r4
    if (!dirFile->addDirCluster()) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
    6900:	791b      	ldrb	r3, [r3, #4]
    6902:	2b01      	cmp	r3, #1
    6904:	d85d      	bhi.n	69c2 <FatFile::open(FatFile*, fname_t*, int)+0x1f2>
      // EOF if no error.
      break;
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    6906:	42a7      	cmp	r7, r4
    6908:	d95b      	bls.n	69c2 <FatFile::open(FatFile*, fname_t*, int)+0x1f2>
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    690a:	4630      	mov	r0, r6
    }
    // Done if more than one sector per cluster.  Max freeNeed is 21.
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
    690c:	3410      	adds	r4, #16
    }
    freeFound++;
  }
  while (freeFound < freeNeed) {
    // Will fail if FAT16 root.
    if (!dirFile->addDirCluster()) {
    690e:	f7ff f941 	bl	5b94 <FatFile::addDirCluster()>
    6912:	2800      	cmp	r0, #0
    6914:	d1f2      	bne.n	68fc <FatFile::open(FatFile*, fname_t*, int)+0x12c>
    6916:	e764      	b.n	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    // skip empty slot or '.' or '..'
    if (dir->name[0] == FAT_NAME_DELETED || dir->name[0] == '.') {
      lfnOrd = 0;
    } else if (isLongName(dir)) {
      ldir = reinterpret_cast<DirLfn_t*>(dir);
      if (!lfnOrd) {
    6918:	f1b8 0f00 	cmp.w	r8, #0
    691c:	d1bc      	bne.n	6898 <FatFile::open(FatFile*, fname_t*, int)+0xc8>
        if ((ldir->order & FAT_ORDER_LAST_LONG_ENTRY) == 0) {
    691e:	0651      	lsls	r1, r2, #25
    6920:	f57f af7e 	bpl.w	6820 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          continue;
        }
        order = ldir->order & 0X1F;
    6924:	f002 021f 	and.w	r2, r2, #31
    6928:	4611      	mov	r1, r2
    692a:	9203      	str	r2, [sp, #12]
        if (order != (freeNeed - 1)) {
    692c:	1e7a      	subs	r2, r7, #1
    692e:	4291      	cmp	r1, r2
    6930:	f47f af76 	bne.w	6820 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          continue;
        }
        lfnOrd = order;
        checksum = ldir->checksum;
    6934:	7b5a      	ldrb	r2, [r3, #13]
        }
        order = ldir->order & 0X1F;
        if (order != (freeNeed - 1)) {
          continue;
        }
        lfnOrd = order;
    6936:	4688      	mov	r8, r1
        checksum = ldir->checksum;
    6938:	9207      	str	r2, [sp, #28]
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    693a:	9a03      	ldr	r2, [sp, #12]
    693c:	3a01      	subs	r2, #1
    693e:	eb02 0542 	add.w	r5, r2, r2, lsl #1
    6942:	eb02 0585 	add.w	r5, r2, r5, lsl #2
      if (k >= len) {
    6946:	45aa      	cmp	sl, r5
        checksum = ldir->checksum;
      } else if (ldir->order != --order || checksum != ldir->checksum) {
        lfnOrd = 0;
        continue;
      }
      size_t k = 13*(order - 1);
    6948:	462a      	mov	r2, r5
      if (k >= len) {
    694a:	d9af      	bls.n	68ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
    694c:	f105 010d 	add.w	r1, r5, #13
    6950:	f8cd 8024 	str.w	r8, [sp, #36]	; 0x24
    6954:	4688      	mov	r8, r1
    6956:	e015      	b.n	6984 <FatFile::open(FatFile*, fname_t*, int)+0x1b4>
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    6958:	f1bc 0f19 	cmp.w	ip, #25
    695c:	f101 0020 	add.w	r0, r1, #32
    6960:	bf98      	it	ls
    6962:	b2c1      	uxtbls	r1, r0
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6964:	f8db 0008 	ldr.w	r0, [fp, #8]
    6968:	5c82      	ldrb	r2, [r0, r2]
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    696a:	f1a2 0041 	sub.w	r0, r2, #65	; 0x41
    696e:	f102 0c20 	add.w	ip, r2, #32
    6972:	2819      	cmp	r0, #25
    6974:	bf98      	it	ls
    6976:	fa5f f28c 	uxtbls.w	r2, ip
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    697a:	4291      	cmp	r1, r2
    697c:	d196      	bne.n	68ac <FatFile::open(FatFile*, fname_t*, int)+0xdc>
      if (k >= len) {
        // Not found.
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
    697e:	45c6      	cmp	lr, r8
    6980:	4672      	mov	r2, lr
    6982:	d01b      	beq.n	69bc <FatFile::open(FatFile*, fname_t*, int)+0x1ec>
        uint16_t u = lfnGetChar(ldir, i);
    6984:	1b51      	subs	r1, r2, r5
    6986:	4618      	mov	r0, r3
    6988:	b2c9      	uxtb	r1, r1
    698a:	f7ff fd69 	bl	6460 <lfnGetChar(DirLfn_t*, unsigned char)>
        if (k == len) {
    698e:	4592      	cmp	sl, r2
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    6990:	f102 0e01 	add.w	lr, r2, #1
    6994:	b2c1      	uxtb	r1, r0
        lfnOrd = 0;
        continue;
      }
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
    6996:	f000 80c2 	beq.w	6b1e <FatFile::open(FatFile*, fname_t*, int)+0x34e>
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    699a:	28ff      	cmp	r0, #255	; 0xff
}
#if USE_LONG_FILE_NAMES
//------------------------------------------------------------------------------
// Saves about 90 bytes of flash on 328 over tolower().
inline char lfnToLower(char c) {
  return 'A' <= c && c <= 'Z' ? c + 'a' - 'A' : c;
    699c:	f1a1 0c41 	sub.w	ip, r1, #65	; 0x41
            // Not found.
            lfnOrd = 0;
          }
          break;
        }
        if (u > 255 || lfnToLower(u) != lfnToLower(fname->lfn[k++])) {
    69a0:	d9da      	bls.n	6958 <FatFile::open(FatFile*, fname_t*, int)+0x188>
          // Not found.
          lfnOrd = 0;
    69a2:	f04f 0800 	mov.w	r8, #0
    69a6:	e73b      	b.n	6820 <FatFile::open(FatFile*, fname_t*, int)+0x50>
  dirFile->rewind();
  while (1) {
    curIndex = dirFile->m_curPosition/32;
    dir = dirFile->readDirCache(true);
    if (!dir) {
      if (dirFile->getError()) {
    69a8:	7873      	ldrb	r3, [r6, #1]
    69aa:	2b00      	cmp	r3, #0
    69ac:	f47f af19 	bne.w	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
  }
  goto open;

 create:
  // don't create unless O_CREAT and write mode
  if (!(oflag & O_CREAT) || !isWriteMode(oflag)) {
    69b0:	9a06      	ldr	r2, [sp, #24]
    69b2:	4613      	mov	r3, r2
    69b4:	059a      	lsls	r2, r3, #22
    69b6:	f57f af14 	bpl.w	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    69ba:	e787      	b.n	68cc <FatFile::open(FatFile*, fname_t*, int)+0xfc>
    69bc:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    69c0:	e72e      	b.n	6820 <FatFile::open(FatFile*, fname_t*, int)+0x50>
    if (dirFile->m_vol->sectorsPerCluster() > 1) {
      break;
    }
    freeFound += 16;
  }
  if (fnameFound) {
    69c2:	9b05      	ldr	r3, [sp, #20]
    69c4:	b133      	cbz	r3, 69d4 <FatFile::open(FatFile*, fname_t*, int)+0x204>
    if (!dirFile->lfnUniqueSfn(fname)) {
    69c6:	4659      	mov	r1, fp
    69c8:	4630      	mov	r0, r6
    69ca:	f7ff fea1 	bl	6710 <FatFile::lfnUniqueSfn(fname_t*)>
    69ce:	2800      	cmp	r0, #0
    69d0:	f43f af07 	beq.w	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      goto fail;
    }
  }
  if (!dirFile->seekSet(32UL*freeIndex)) {
    69d4:	0169      	lsls	r1, r5, #5
    69d6:	4630      	mov	r0, r6
    69d8:	f7ff fb36 	bl	6048 <FatFile::seekSet(unsigned long)>
    69dc:	2800      	cmp	r0, #0
    69de:	f43f af00 	beq.w	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
    69e2:	3f01      	subs	r7, #1
  for (order = lfnOrd ; order ; order--) {
    69e4:	f017 08ff 	ands.w	r8, r7, #255	; 0xff
    69e8:	d058      	beq.n	6a9c <FatFile::open(FatFile*, fname_t*, int)+0x2cc>
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    69ea:	f048 0340 	orr.w	r3, r8, #64	; 0x40
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    69ee:	4647      	mov	r7, r8
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    69f0:	2400      	movs	r4, #0
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    69f2:	b2db      	uxtb	r3, r3
    69f4:	9303      	str	r3, [sp, #12]
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    ldir = reinterpret_cast<DirLfn_t*>(dirFile->readDirCache());
    69f6:	2100      	movs	r1, #0
    69f8:	4630      	mov	r0, r6
    69fa:	f7ff fb03 	bl	6004 <FatFile::readDirCache(bool)>
    if (!ldir) {
    69fe:	2800      	cmp	r0, #0
    6a00:	f43f aeef 	beq.w	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    6a04:	f8d6 c008 	ldr.w	ip, [r6, #8]
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a08:	45b8      	cmp	r8, r7
    6a0a:	9b03      	ldr	r3, [sp, #12]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6a0c:	f04f 090f 	mov.w	r9, #15
    invalidate();
    return m_buffer;
  }
  /** Set current sector dirty. */
  void dirty() {
    m_status |= CACHE_STATUS_DIRTY;
    6a10:	f89c e024 	ldrb.w	lr, [ip, #36]	; 0x24
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a14:	bf14      	ite	ne
    6a16:	463a      	movne	r2, r7
    6a18:	461a      	moveq	r2, r3
    6a1a:	f10b 010c 	add.w	r1, fp, #12
    6a1e:	f04e 0e01 	orr.w	lr, lr, #1
    6a22:	f10b 0517 	add.w	r5, fp, #23
#include "FatFile.h"
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
    6a26:	2300      	movs	r3, #0
    6a28:	f88c e024 	strb.w	lr, [ip, #36]	; 0x24
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    6a2c:	7304      	strb	r4, [r0, #12]
    if (!ldir) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    6a2e:	7002      	strb	r2, [r0, #0]
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    6a30:	f880 900b 	strb.w	r9, [r0, #11]
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6a34:	ea4f 0e53 	mov.w	lr, r3, lsr #1
    6a38:	f811 cf01 	ldrb.w	ip, [r1, #1]!
    6a3c:	ea4e 13c3 	orr.w	r3, lr, r3, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6a40:	42a9      	cmp	r1, r5
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6a42:	fa5c f383 	uxtab	r3, ip, r3
    6a46:	b2db      	uxtb	r3, r3
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6a48:	d1f4      	bne.n	6a34 <FatFile::open(FatFile*, fname_t*, int)+0x264>
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6a4a:	f002 021f 	and.w	r2, r2, #31
    }
    dirFile->m_vol->cacheDirty();
    ldir->order = order == lfnOrd ? FAT_ORDER_LAST_LONG_ENTRY | order : order;
    ldir->attributes = FAT_ATTRIB_LONG_NAME;
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    6a4e:	7343      	strb	r3, [r0, #13]
    6a50:	1d01      	adds	r1, r0, #4
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
    6a52:	f8db 5008 	ldr.w	r5, [fp, #8]
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6a56:	3a01      	subs	r2, #1
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6a58:	8344      	strh	r4, [r0, #26]
  for (uint8_t i = 0; i < 13; i++, k++) {
    6a5a:	2300      	movs	r3, #0
    setLe16(ldir->unicode3 + 2*i - 22, c);
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
    6a5c:	eb02 0042 	add.w	r0, r2, r2, lsl #1
    6a60:	eb02 0280 	add.w	r2, r2, r0, lsl #2
    6a64:	e009      	b.n	6a7a <FatFile::open(FatFile*, fname_t*, int)+0x2aa>
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    setLe16(ldir->unicode1 + 2*i, c);
  } else if (i < 11) {
    6a66:	2b0a      	cmp	r3, #10
    6a68:	bf94      	ite	ls
    6a6a:	8008      	strhls	r0, [r1, #0]
    6a6c:	8048      	strhhi	r0, [r1, #2]
  }
}
//------------------------------------------------------------------------------
static void lfnPutName(DirLfn_t* ldir, const char* name, size_t n) {
  size_t k = 13*((ldir->order & 0X1F) - 1);
  for (uint8_t i = 0; i < 13; i++, k++) {
    6a6e:	3301      	adds	r3, #1
    6a70:	3201      	adds	r2, #1
    6a72:	3102      	adds	r1, #2
    6a74:	b2db      	uxtb	r3, r3
    6a76:	2b0d      	cmp	r3, #13
    6a78:	d00c      	beq.n	6a94 <FatFile::open(FatFile*, fname_t*, int)+0x2c4>
    uint16_t c = k < n ? name[k] : k == n ? 0 : 0XFFFF;
    6a7a:	4592      	cmp	sl, r2
    6a7c:	bf14      	ite	ne
    6a7e:	f04f 30ff 	movne.w	r0, #4294967295
    6a82:	2000      	moveq	r0, #0
    6a84:	bf8c      	ite	hi
    6a86:	5ca8      	ldrbhi	r0, [r5, r2]
    6a88:	b280      	uxthls	r0, r0
 * \param[in] ldir Pointer to long file name directory entry.
 * \param[in] i Index of character.
 * \param[in] c  The 16-bit character.
 */
static void lfnPutChar(DirLfn_t* ldir, uint8_t i, uint16_t c) {
  if (i < 5) {
    6a8a:	2b04      	cmp	r3, #4
    6a8c:	d8eb      	bhi.n	6a66 <FatFile::open(FatFile*, fname_t*, int)+0x296>
    6a8e:	f821 0c03 	strh.w	r0, [r1, #-3]
    6a92:	e7ec      	b.n	6a6e <FatFile::open(FatFile*, fname_t*, int)+0x29e>
  if (!dirFile->seekSet(32UL*freeIndex)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  lfnOrd = freeNeed - 1;
  for (order = lfnOrd ; order ; order--) {
    6a94:	3f01      	subs	r7, #1
    6a96:	f017 07ff 	ands.w	r7, r7, #255	; 0xff
    6a9a:	d1ac      	bne.n	69f6 <FatFile::open(FatFile*, fname_t*, int)+0x226>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6a9c:	6975      	ldr	r5, [r6, #20]
  dir = dirFile->readDirCache();
    6a9e:	2100      	movs	r1, #0
    6aa0:	4630      	mov	r0, r6
    6aa2:	f7ff faaf 	bl	6004 <FatFile::readDirCache(bool)>
    ldir->mustBeZero1 = 0;
    ldir->checksum = lfnChecksum(fname->sfn);
    setLe16(ldir->mustBeZero2, 0);
    lfnPutName(ldir, fname->lfn, len);
  }
  curIndex = dirFile->m_curPosition/32;
    6aa6:	f3c5 154f 	ubfx	r5, r5, #5, #16
  dir = dirFile->readDirCache();
  if (!dir) {
    6aaa:	4604      	mov	r4, r0
    6aac:	2800      	cmp	r0, #0
    6aae:	f43f ae98 	beq.w	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
    6ab2:	2220      	movs	r2, #32
    6ab4:	2100      	movs	r1, #0
    6ab6:	f004 fcb9 	bl	b42c <memset>
  memcpy(dir->name, fname->sfn, 11);
    6aba:	465b      	mov	r3, fp

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;

  // Set timestamps.
  if (FsDateTime::callback) {
    6abc:	4a2c      	ldr	r2, [pc, #176]	; (6b70 <FatFile::open(FatFile*, fname_t*, int)+0x3a0>)
    DBG_FAIL_MACRO;
    goto fail;
  }
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);
    6abe:	f853 0f0d 	ldr.w	r0, [r3, #13]!
    6ac2:	6859      	ldr	r1, [r3, #4]
    6ac4:	6020      	str	r0, [r4, #0]
    6ac6:	6061      	str	r1, [r4, #4]
    6ac8:	8919      	ldrh	r1, [r3, #8]
    6aca:	7a9b      	ldrb	r3, [r3, #10]
    6acc:	8121      	strh	r1, [r4, #8]
    6ace:	72a3      	strb	r3, [r4, #10]

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6ad0:	f89b 3000 	ldrb.w	r3, [fp]

  // Set timestamps.
  if (FsDateTime::callback) {
    6ad4:	6817      	ldr	r7, [r2, #0]
  // initialize as empty file
  memset(dir, 0, sizeof(DirFat_t));
  memcpy(dir->name, fname->sfn, 11);

  // Set base-name and extension lower case bits.
  dir->caseFlags =  (FAT_CASE_LC_BASE | FAT_CASE_LC_EXT) & fname->flags;
    6ad6:	f003 0318 	and.w	r3, r3, #24
    6ada:	7323      	strb	r3, [r4, #12]

  // Set timestamps.
  if (FsDateTime::callback) {
    6adc:	2f00      	cmp	r7, #0
    6ade:	d03e      	beq.n	6b5e <FatFile::open(FatFile*, fname_t*, int)+0x38e>
    // call user date/time function
    FsDateTime::callback(&date, &time, &ms10);
    6ae0:	f10d 022b 	add.w	r2, sp, #43	; 0x2b
    6ae4:	f10d 012e 	add.w	r1, sp, #46	; 0x2e
    6ae8:	a80b      	add	r0, sp, #44	; 0x2c
    6aea:	47b8      	blx	r7
    6aec:	f8bd 102c 	ldrh.w	r1, [sp, #44]	; 0x2c
    6af0:	f8bd 202e 	ldrh.w	r2, [sp, #46]	; 0x2e
    setLe16(dir->createDate, date);
    setLe16(dir->createTime, time);
    dir->createTimeMs = ms10;
    6af4:	f89d 302b 	ldrb.w	r3, [sp, #43]	; 0x2b
    6af8:	8221      	strh	r1, [r4, #16]
    6afa:	81e2      	strh	r2, [r4, #14]
    6afc:	7363      	strb	r3, [r4, #13]
      setLe16(dir->createTime, FS_DEFAULT_TIME);
      setLe16(dir->modifyTime, FS_DEFAULT_TIME);
    }
  }
  // Force write of entry to device.
  dirFile->m_vol->cacheDirty();
    6afe:	68b2      	ldr	r2, [r6, #8]
    6b00:	f892 3024 	ldrb.w	r3, [r2, #36]	; 0x24
    6b04:	f043 0301 	orr.w	r3, r3, #1
    6b08:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24

 open:
  // open entry in cache.
  if (!openCachedEntry(dirFile, curIndex, oflag, lfnOrd)) {
    6b0c:	f8cd 8000 	str.w	r8, [sp]
    6b10:	462a      	mov	r2, r5
    6b12:	9b06      	ldr	r3, [sp, #24]
    6b14:	4631      	mov	r1, r6
    6b16:	9808      	ldr	r0, [sp, #32]
    6b18:	f7ff faee 	bl	60f8 <FatFile::openCachedEntry(FatFile*, unsigned short, int, unsigned char)>
    6b1c:	e662      	b.n	67e4 <FatFile::open(FatFile*, fname_t*, int)+0x14>
      for (uint8_t i = 0; i < 13; i++) {
        uint16_t u = lfnGetChar(ldir, i);
        if (k == len) {
          if (u != 0) {
            // Not found.
            lfnOrd = 0;
    6b1e:	2800      	cmp	r0, #0
    6b20:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
    6b24:	bf18      	it	ne
    6b26:	f04f 0800 	movne.w	r8, #0
    6b2a:	e679      	b.n	6820 <FatFile::open(FatFile*, fname_t*, int)+0x50>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6b2c:	9a03      	ldr	r2, [sp, #12]
    6b2e:	2a01      	cmp	r2, #1
    6b30:	f47f ae57 	bne.w	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6b34:	1e5c      	subs	r4, r3, #1
    6b36:	460a      	mov	r2, r1
    6b38:	330a      	adds	r3, #10
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6b3a:	0850      	lsrs	r0, r2, #1
    6b3c:	f814 1f01 	ldrb.w	r1, [r4, #1]!
    6b40:	ea40 12c2 	orr.w	r2, r0, r2, lsl #7
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6b44:	429c      	cmp	r4, r3
    sum = (((sum & 1) << 7) | ((sum & 0xfe) >> 1)) + name[i];
    6b46:	fa51 f282 	uxtab	r2, r1, r2
    6b4a:	b2d2      	uxtb	r2, r2
#include "FatVolume.h"
//------------------------------------------------------------------------------
//
uint8_t FatFile::lfnChecksum(uint8_t* name) {
  uint8_t sum = 0;
  for (uint8_t i = 0; i < 11; i++) {
    6b4c:	d1f5      	bne.n	6b3a <FatFile::open(FatFile*, fname_t*, int)+0x36a>
          break;
        }
      }
    } else if (isFileOrSubdir(dir)) {
      if (lfnOrd) {
        if (1 == order && lfnChecksum(dir->name) == checksum) {
    6b4e:	9b07      	ldr	r3, [sp, #28]
    6b50:	4293      	cmp	r3, r2
    6b52:	f47f ae46 	bne.w	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    }
  }

 found:
  // Don't open if create only.
  if (oflag & O_EXCL) {
    6b56:	9b06      	ldr	r3, [sp, #24]
    6b58:	0519      	lsls	r1, r3, #20
    6b5a:	d5d7      	bpl.n	6b0c <FatFile::open(FatFile*, fname_t*, int)+0x33c>
    6b5c:	e641      	b.n	67e2 <FatFile::open(FatFile*, fname_t*, int)+0x12>
    6b5e:	f245 2321 	movw	r3, #21025	; 0x5221
    6b62:	8223      	strh	r3, [r4, #16]
    6b64:	8323      	strh	r3, [r4, #24]
    6b66:	8263      	strh	r3, [r4, #18]
    6b68:	e7c9      	b.n	6afe <FatFile::open(FatFile*, fname_t*, int)+0x32e>
    6b6a:	bf00      	nop
    6b6c:	4ec4ec4f 	.word	0x4ec4ec4f
    6b70:	20036c3c 	.word	0x20036c3c

00006b74 <FatPartition::fatGet(unsigned long, unsigned long*)>:
  uint32_t sector;
  uint32_t next;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6b74:	2901      	cmp	r1, #1
    6b76:	d932      	bls.n	6bde <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
    6b78:	69c3      	ldr	r3, [r0, #28]
    6b7a:	4299      	cmp	r1, r3
    6b7c:	d82f      	bhi.n	6bde <FatPartition::fatGet(unsigned long, unsigned long*)+0x6a>
 fail:
  return false;
}
//------------------------------------------------------------------------------
// Fetch a FAT entry - return -1 error, 0 EOC, else 1.
int8_t FatPartition::fatGet(uint32_t cluster, uint32_t* value) {
    6b7e:	b570      	push	{r4, r5, r6, lr}
    6b80:	79c3      	ldrb	r3, [r0, #7]
    6b82:	4616      	mov	r6, r2
    6b84:	4605      	mov	r5, r0
    6b86:	460c      	mov	r4, r1
  if (cluster < 2 || cluster > m_lastCluster) {
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6b88:	2b20      	cmp	r3, #32
    6b8a:	d019      	beq.n	6bc0 <FatPartition::fatGet(unsigned long, unsigned long*)+0x4c>
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe32(reinterpret_cast<uint8_t*>
                  (&pc->fat32[cluster & (m_sectorMask >> 2)]));
  } else if (fatType() == 16) {
    6b8c:	2b10      	cmp	r3, #16
    6b8e:	d114      	bne.n	6bba <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
  FsCache m_cache;
#if USE_SEPARATE_FAT_CACHE
  FsCache m_fatCache;
  cache_t* cacheFetchFat(uint32_t sector, uint8_t options) {
    options |= FsCache::CACHE_STATUS_MIRROR_FAT;
    return reinterpret_cast<cache_t*>(m_fatCache.get(sector, options));
    6b90:	6983      	ldr	r3, [r0, #24]
    6b92:	f3c1 2107 	ubfx	r1, r1, #8, #8
    6b96:	2202      	movs	r2, #2
    6b98:	f500 700d 	add.w	r0, r0, #564	; 0x234
    6b9c:	4419      	add	r1, r3
    6b9e:	f7fd fd0b 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    6ba2:	b150      	cbz	r0, 6bba <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6ba4:	b2e1      	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    next = getLe16(reinterpret_cast<uint8_t*>
                  (&pc->fat16[cluster & (m_sectorMask >> 1)]));
    6ba6:	f830 3011 	ldrh.w	r3, [r0, r1, lsl #1]
    next = cluster & 1 ? tmp >> 4 : tmp & 0XFFF;
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    6baa:	69ea      	ldr	r2, [r5, #28]
    6bac:	4293      	cmp	r3, r2
    6bae:	d802      	bhi.n	6bb6 <FatPartition::fatGet(unsigned long, unsigned long*)+0x42>
    return 0;
  }
  *value = next;
    6bb0:	6033      	str	r3, [r6, #0]
  return 1;
    6bb2:	2001      	movs	r0, #1
    6bb4:	bd70      	pop	{r4, r5, r6, pc}
  } else {
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (isEOC(next)) {
    return 0;
    6bb6:	2000      	movs	r0, #0
  *value = next;
  return 1;

 fail:
  return -1;
}
    6bb8:	bd70      	pop	{r4, r5, r6, pc}
  }
  *value = next;
  return 1;

 fail:
  return -1;
    6bba:	f04f 30ff 	mov.w	r0, #4294967295
    6bbe:	bd70      	pop	{r4, r5, r6, pc}
    6bc0:	6981      	ldr	r1, [r0, #24]
    6bc2:	2202      	movs	r2, #2
    6bc4:	f500 700d 	add.w	r0, r0, #564	; 0x234
    6bc8:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6bcc:	f7fd fcf4 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_READ);
    if (!pc) {
    6bd0:	2800      	cmp	r0, #0
    6bd2:	d0f2      	beq.n	6bba <FatPartition::fatGet(unsigned long, unsigned long*)+0x46>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6bd4:	f004 017f 	and.w	r1, r4, #127	; 0x7f
    6bd8:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
    6bdc:	e7e5      	b.n	6baa <FatPartition::fatGet(unsigned long, unsigned long*)+0x36>
  }
  *value = next;
  return 1;

 fail:
  return -1;
    6bde:	f04f 30ff 	mov.w	r0, #4294967295
}
    6be2:	4770      	bx	lr

00006be4 <FatPartition::fatPut(unsigned long, unsigned long)>:
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6be4:	2901      	cmp	r1, #1
    6be6:	d91d      	bls.n	6c24 <FatPartition::fatPut(unsigned long, unsigned long)+0x40>
 fail:
  return -1;
}
//------------------------------------------------------------------------------
// Store a FAT entry
bool FatPartition::fatPut(uint32_t cluster, uint32_t value) {
    6be8:	b538      	push	{r3, r4, r5, lr}
  uint32_t sector;
  cache_t* pc;

  // error if reserved cluster of beyond FAT
  if (cluster < 2 || cluster > m_lastCluster) {
    6bea:	69c3      	ldr	r3, [r0, #28]
    6bec:	4299      	cmp	r1, r3
    6bee:	d806      	bhi.n	6bfe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
    6bf0:	79c3      	ldrb	r3, [r0, #7]
    6bf2:	4615      	mov	r5, r2
    6bf4:	460c      	mov	r4, r1
    DBG_FAIL_MACRO;
    goto fail;
  }

  if (fatType() == 32) {
    6bf6:	2b20      	cmp	r3, #32
    6bf8:	d016      	beq.n	6c28 <FatPartition::fatPut(unsigned long, unsigned long)+0x44>
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
  }

  if (fatType() == 16) {
    6bfa:	2b10      	cmp	r3, #16
    6bfc:	d001      	beq.n	6c02 <FatPartition::fatPut(unsigned long, unsigned long)+0x1e>
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    6bfe:	2000      	movs	r0, #0
    6c00:	bd38      	pop	{r3, r4, r5, pc}
    6c02:	6983      	ldr	r3, [r0, #24]
    6c04:	f3c1 2107 	ubfx	r1, r1, #8, #8
    6c08:	f500 700d 	add.w	r0, r0, #564	; 0x234
    6c0c:	2203      	movs	r2, #3
    6c0e:	4419      	add	r1, r3
    6c10:	f7fd fcd2 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>

  if (fatType() == 16) {
    cluster &= 0XFFFF;
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 1) );
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    6c14:	4603      	mov	r3, r0
    6c16:	2800      	cmp	r0, #0
    6c18:	d0f1      	beq.n	6bfe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}
inline uint64_t getLe64(const uint8_t* src) {
  return *reinterpret_cast<const uint64_t*>(src);
}
inline void setLe16(uint8_t* dst, uint16_t src) {
  *reinterpret_cast<uint16_t*>(dst) = src;
    6c1a:	b2e1      	uxtb	r1, r4
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe16(reinterpret_cast<uint8_t*>
           (&pc->fat16[cluster & (m_sectorMask >> 1)]), value);
    return true;
    6c1c:	2001      	movs	r0, #1
    6c1e:	f823 5011 	strh.w	r5, [r3, r1, lsl #1]
    goto fail;
  }

 fail:
  return false;
}
    6c22:	bd38      	pop	{r3, r4, r5, pc}
    DBG_FAIL_MACRO;
    goto fail;
  }

 fail:
  return false;
    6c24:	2000      	movs	r0, #0
}
    6c26:	4770      	bx	lr
    6c28:	6981      	ldr	r1, [r0, #24]
    6c2a:	2203      	movs	r2, #3
    6c2c:	f500 700d 	add.w	r0, r0, #564	; 0x234
    6c30:	eb01 11d4 	add.w	r1, r1, r4, lsr #7
    6c34:	f7fd fcc0 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
  }

  if (fatType() == 32) {
    sector = m_fatStartSector + (cluster >> (m_bytesPerSectorShift - 2));
    pc = cacheFetchFat(sector, FsCache::CACHE_FOR_WRITE);
    if (!pc) {
    6c38:	4603      	mov	r3, r0
    6c3a:	2800      	cmp	r0, #0
    6c3c:	d0df      	beq.n	6bfe <FatPartition::fatPut(unsigned long, unsigned long)+0x1a>
}

inline void setLe32(uint8_t* dst, uint32_t src) {
  *reinterpret_cast<uint32_t*>(dst) = src;
    6c3e:	f004 017f 	and.w	r1, r4, #127	; 0x7f
      DBG_FAIL_MACRO;
      goto fail;
    }
    setLe32(reinterpret_cast<uint8_t*>
           (&pc->fat32[cluster & (m_sectorMask >> 2)]), value);
    return true;
    6c42:	2001      	movs	r0, #1
    6c44:	f843 5021 	str.w	r5, [r3, r1, lsl #2]
    6c48:	bd38      	pop	{r3, r4, r5, pc}
    6c4a:	bf00      	nop

00006c4c <FatPartition::allocateCluster(unsigned long, unsigned long*)>:
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6c50:	68c4      	ldr	r4, [r0, #12]
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c52:	b082      	sub	sp, #8
    6c54:	4605      	mov	r5, r0
    6c56:	460f      	mov	r7, r1
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6c58:	428c      	cmp	r4, r1
#define DBG_FILE "FatPartition.cpp"
#include "../common/DebugMacros.h"
#include "../common/FsStructs.h"
#include "FatPartition.h"
//------------------------------------------------------------------------------
bool FatPartition::allocateCluster(uint32_t current, uint32_t* next) {
    6c5a:	4690      	mov	r8, r2
  uint32_t find;
  bool setStart;
  if (m_allocSearchStart < current) {
    6c5c:	d235      	bcs.n	6cca <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x7e>
    6c5e:	460c      	mov	r4, r1
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
    6c60:	2600      	movs	r6, #0
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6c62:	3401      	adds	r4, #1
    6c64:	69eb      	ldr	r3, [r5, #28]
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6c66:	aa01      	add	r2, sp, #4
    6c68:	4628      	mov	r0, r5
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6c6a:	429c      	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6c6c:	4621      	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6c6e:	d908      	bls.n	6c82 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x36>
      if (setStart) {
    6c70:	bb36      	cbnz	r6, 6cc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
        // Can't find space, checked all clusters.
        DBG_FAIL_MACRO;
        goto fail;
      }
      find = m_allocSearchStart;
    6c72:	68ec      	ldr	r4, [r5, #12]
      setStart = true;
    6c74:	2601      	movs	r6, #1
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6c76:	aa01      	add	r2, sp, #4
    6c78:	4628      	mov	r0, r5
  } else {
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    6c7a:	3401      	adds	r4, #1
    if (find > m_lastCluster) {
    6c7c:	429c      	cmp	r4, r3
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6c7e:	4621      	mov	r1, r4
    find = m_allocSearchStart;
    setStart = true;
  }
  while (1) {
    find++;
    if (find > m_lastCluster) {
    6c80:	d8f6      	bhi.n	6c70 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x24>
      }
      find = m_allocSearchStart;
      setStart = true;
      continue;
    }
    if (find == current) {
    6c82:	42a7      	cmp	r7, r4
    6c84:	d01c      	beq.n	6cc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      // Can't find space, already searched clusters after current.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(find, &f);
    6c86:	f7ff ff75 	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6c8a:	2800      	cmp	r0, #0
    6c8c:	db18      	blt.n	6cc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (fg && f == 0) {
    6c8e:	d0e8      	beq.n	6c62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    6c90:	9b01      	ldr	r3, [sp, #4]
    6c92:	2b00      	cmp	r3, #0
    6c94:	d1e5      	bne.n	6c62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
      break;
    }
  }
  if (setStart) {
    6c96:	b106      	cbz	r6, 6c9a <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x4e>
    m_allocSearchStart = find;
    6c98:	60ec      	str	r4, [r5, #12]
    return m_dataStartSector + ((cluster - 2) << m_sectorsPerClusterShift);
  }
  int8_t fatGet(uint32_t cluster, uint32_t* value);
  bool fatPut(uint32_t cluster, uint32_t value);
  bool fatPutEOC(uint32_t cluster) {
    return fatPut(cluster, 0x0FFFFFFF);
    6c9a:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    6c9e:	4621      	mov	r1, r4
    6ca0:	4628      	mov	r0, r5
    6ca2:	f7ff ff9f 	bl	6be4 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // Mark end of chain.
  if (!fatPutEOC(find)) {
    6ca6:	4606      	mov	r6, r0
    6ca8:	b150      	cbz	r0, 6cc0 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x74>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    6caa:	b917      	cbnz	r7, 6cb2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x66>
      DBG_FAIL_MACRO;
      goto fail;
    }
  }
  updateFreeClusterCount(-1);
  *next = find;
    6cac:	f8c8 4000 	str.w	r4, [r8]
  return true;
    6cb0:	e007      	b.n	6cc2 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x76>
    DBG_FAIL_MACRO;
    goto fail;
  }
  if (current) {
    // Link clusters.
    if (!fatPut(current, find)) {
    6cb2:	4639      	mov	r1, r7
    6cb4:	4628      	mov	r0, r5
    6cb6:	4622      	mov	r2, r4
    6cb8:	f7ff ff94 	bl	6be4 <FatPartition::fatPut(unsigned long, unsigned long)>
    6cbc:	2800      	cmp	r0, #0
    6cbe:	d1f5      	bne.n	6cac <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x60>
  updateFreeClusterCount(-1);
  *next = find;
  return true;

 fail:
  return false;
    6cc0:	2600      	movs	r6, #0
}
    6cc2:	4630      	mov	r0, r6
    6cc4:	b002      	add	sp, #8
    6cc6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    // Try to keep file contiguous. Start just after current cluster.
    find = current;
    setStart = false;
  } else {
    find = m_allocSearchStart;
    setStart = true;
    6cca:	2601      	movs	r6, #1
    6ccc:	e7c9      	b.n	6c62 <FatPartition::allocateCluster(unsigned long, unsigned long*)+0x16>
    6cce:	bf00      	nop

00006cd0 <FatPartition::allocContiguous(unsigned long, unsigned long*)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    6cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    6cd4:	68c5      	ldr	r5, [r0, #12]
 fail:
  return false;
}
//------------------------------------------------------------------------------
// find a contiguous group of clusters
bool FatPartition::allocContiguous(uint32_t count, uint32_t* firstCluster) {
    6cd6:	b083      	sub	sp, #12
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6cd8:	69c3      	ldr	r3, [r0, #28]
  // start of group
  uint32_t bgnCluster;
  // end of group
  uint32_t endCluster;
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;
    6cda:	1c6f      	adds	r7, r5, #1

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6cdc:	429f      	cmp	r7, r3
    6cde:	d82d      	bhi.n	6d3c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x6c>
    6ce0:	4692      	mov	sl, r2
    6ce2:	4689      	mov	r9, r1
    6ce4:	4683      	mov	fp, r0
    6ce6:	3502      	adds	r5, #2
    6ce8:	f04f 0801 	mov.w	r8, #1
    6cec:	e006      	b.n	6cfc <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2c>
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    6cee:	454a      	cmp	r2, r9
    6cf0:	d029      	beq.n	6d46 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x76>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6cf2:	f8db 201c 	ldr.w	r2, [fp, #28]
    6cf6:	3501      	adds	r5, #1
    6cf8:	4293      	cmp	r3, r2
    6cfa:	d81f      	bhi.n	6d3c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x6c>
    6cfc:	1e6e      	subs	r6, r5, #1
      // Can't find space.
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    6cfe:	aa01      	add	r2, sp, #4
    6d00:	4658      	mov	r0, fp
    6d02:	4631      	mov	r1, r6
    6d04:	f7ff ff36 	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6d08:	2800      	cmp	r0, #0
      if (bgnCluster != endCluster) {
        setStart = false;
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    } else if ((endCluster - bgnCluster + 1) == count) {
    6d0a:	eba5 0207 	sub.w	r2, r5, r7
    6d0e:	462b      	mov	r3, r5
    6d10:	fab0 f080 	clz	r0, r0
      DBG_FAIL_MACRO;
      goto fail;
    }
    uint32_t f;
    int8_t fg = fatGet(endCluster, &f);
    if (fg < 0) {
    6d14:	db12      	blt.n	6d3c <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x6c>
    6d16:	9c01      	ldr	r4, [sp, #4]
    6d18:	0940      	lsrs	r0, r0, #5
    6d1a:	2c00      	cmp	r4, #0
    6d1c:	bf0c      	ite	eq
    6d1e:	4604      	moveq	r4, r0
    6d20:	f040 0401 	orrne.w	r4, r0, #1
      DBG_FAIL_MACRO;
      goto fail;
    }
    if (f || fg == 0) {
    6d24:	2c00      	cmp	r4, #0
    6d26:	d0e2      	beq.n	6cee <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x1e>
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6d28:	f8db 201c 	ldr.w	r2, [fp, #28]
      goto fail;
    }
    if (f || fg == 0) {
      // don't update search start if unallocated clusters before endCluster.
      if (bgnCluster != endCluster) {
        setStart = false;
    6d2c:	42b7      	cmp	r7, r6
    6d2e:	bf18      	it	ne
    6d30:	f04f 0800 	movne.w	r8, #0
      }
      // cluster in use try next cluster as bgnCluster
      bgnCluster = endCluster + 1;
    6d34:	462f      	mov	r7, r5
    6d36:	3501      	adds	r5, #1
  // Start at cluster after last allocated cluster.
  endCluster = bgnCluster = m_allocSearchStart + 1;

  // search the FAT for free clusters
  while (1) {
    if (endCluster > m_lastCluster) {
    6d38:	4293      	cmp	r3, r2
    6d3a:	d9df      	bls.n	6cfc <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x2c>
  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;

 fail:
  return false;
    6d3c:	2400      	movs	r4, #0
}
    6d3e:	4620      	mov	r0, r4
    6d40:	b003      	add	sp, #12
    6d42:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      break;
    }
    endCluster++;
  }
  // Remember possible next free cluster.
  if (setStart) {
    6d46:	f1b8 0f00 	cmp.w	r8, #0
    6d4a:	d001      	beq.n	6d50 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x80>
    m_allocSearchStart = endCluster;
    6d4c:	f8cb 600c 	str.w	r6, [fp, #12]
    6d50:	f06f 4270 	mvn.w	r2, #4026531840	; 0xf0000000
    6d54:	4631      	mov	r1, r6
    6d56:	4658      	mov	r0, fp
    6d58:	f7ff ff44 	bl	6be4 <FatPartition::fatPut(unsigned long, unsigned long)>
  }
  // mark end of chain
  if (!fatPutEOC(endCluster)) {
    6d5c:	4605      	mov	r5, r0
    6d5e:	2800      	cmp	r0, #0
    6d60:	d0ed      	beq.n	6d3e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x6e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    6d62:	42b7      	cmp	r7, r6
    6d64:	d209      	bcs.n	6d7a <FatPartition::allocContiguous(unsigned long, unsigned long*)+0xaa>
    if (!fatPut(endCluster - 1, endCluster)) {
    6d66:	1e71      	subs	r1, r6, #1
    6d68:	4632      	mov	r2, r6
    6d6a:	4658      	mov	r0, fp
    6d6c:	460e      	mov	r6, r1
    6d6e:	f7ff ff39 	bl	6be4 <FatPartition::fatPut(unsigned long, unsigned long)>
    6d72:	2800      	cmp	r0, #0
    6d74:	d0e3      	beq.n	6d3e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x6e>
  if (!fatPutEOC(endCluster)) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  // link clusters
  while (endCluster > bgnCluster) {
    6d76:	42be      	cmp	r6, r7
    6d78:	d8f5      	bhi.n	6d66 <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x96>
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
  return true;
    6d7a:	462c      	mov	r4, r5
  }
  // Maintain count of free clusters.
  updateFreeClusterCount(-count);

  // return first cluster number to caller
  *firstCluster = bgnCluster;
    6d7c:	f8ca 7000 	str.w	r7, [sl]
  return true;
    6d80:	e7dd      	b.n	6d3e <FatPartition::allocContiguous(unsigned long, unsigned long*)+0x6e>
    6d82:	bf00      	nop

00006d84 <FatPartition::freeChain(unsigned long)>:
 fail:
  return false;
}
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
    6d84:	b570      	push	{r4, r5, r6, lr}
    6d86:	4605      	mov	r5, r0
    6d88:	b082      	sub	sp, #8
    6d8a:	460c      	mov	r4, r1
    6d8c:	e009      	b.n	6da2 <FatPartition::freeChain(unsigned long)+0x1e>
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6d8e:	f7ff ff29 	bl	6be4 <FatPartition::fatPut(unsigned long, unsigned long)>
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6d92:	1e62      	subs	r2, r4, #1
    if (fg < 0) {
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6d94:	b180      	cbz	r0, 6db8 <FatPartition::freeChain(unsigned long)+0x34>
      DBG_FAIL_MACRO;
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
    6d96:	68eb      	ldr	r3, [r5, #12]
    6d98:	429c      	cmp	r4, r3
      m_allocSearchStart = cluster - 1;
    }
    cluster = next;
    6d9a:	9c01      	ldr	r4, [sp, #4]
      goto fail;
    }
    // Add one to count of free clusters.
    updateFreeClusterCount(1);
    if (cluster < m_allocSearchStart) {
      m_allocSearchStart = cluster - 1;
    6d9c:	bf38      	it	cc
    6d9e:	60ea      	strcc	r2, [r5, #12]
//------------------------------------------------------------------------------
// free a cluster chain
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    6da0:	b15e      	cbz	r6, 6dba <FatPartition::freeChain(unsigned long)+0x36>
    fg = fatGet(cluster, &next);
    6da2:	aa01      	add	r2, sp, #4
    6da4:	4621      	mov	r1, r4
    6da6:	4628      	mov	r0, r5
    6da8:	f7ff fee4 	bl	6b74 <FatPartition::fatGet(unsigned long, unsigned long*)>
    if (fg < 0) {
    6dac:	1e06      	subs	r6, r0, #0
      DBG_FAIL_MACRO;
      goto fail;
    }
    // free cluster
    if (!fatPut(cluster, 0)) {
    6dae:	4621      	mov	r1, r4
    6db0:	f04f 0200 	mov.w	r2, #0
    6db4:	4628      	mov	r0, r5
bool FatPartition::freeChain(uint32_t cluster) {
  uint32_t next;
  int8_t fg;
  do {
    fg = fatGet(cluster, &next);
    if (fg < 0) {
    6db6:	daea      	bge.n	6d8e <FatPartition::freeChain(unsigned long)+0xa>
  } while (fg);

  return true;

 fail:
  return false;
    6db8:	2000      	movs	r0, #0
}
    6dba:	b002      	add	sp, #8
    6dbc:	bd70      	pop	{r4, r5, r6, pc}
    6dbe:	bf00      	nop

00006dc0 <FatPartition::init(BlockDeviceInterface*, unsigned char)>:

 fail:
  return -1;
}
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
    6dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6dc2:	4604      	mov	r4, r0
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6dc4:	2300      	movs	r3, #0
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    m_sector = 0XFFFFFFFF;
    6dc6:	f04f 30ff 	mov.w	r0, #4294967295
  m_allocSearchStart = 1;
    6dca:	2501      	movs	r5, #1
//------------------------------------------------------------------------------
bool FatPartition::init(BlockDevice* dev, uint8_t part) {
  uint32_t clusterCount;
  uint32_t totalSectors;
  uint32_t volumeStartSector = 0;
  m_blockDev = dev;
    6dcc:	6021      	str	r1, [r4, #0]
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6dce:	4616      	mov	r6, r2
  }
  /** Initialize the cache.
   * \param[in] blockDev Block device for this cache.
   */
  void init(BlockDevice* blockDev) {
    m_blockDev = blockDev;
    6dd0:	62a1      	str	r1, [r4, #40]	; 0x28
    6dd2:	f8c4 1238 	str.w	r1, [r4, #568]	; 0x238
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
  m_allocSearchStart = 1;
    6dd6:	60e5      	str	r5, [r4, #12]
  m_blockDev = dev;
  pbs_t* pbs;
  BpbFat32_t* bpb;
  MbrSector_t* mbr;
  uint8_t tmp;
  m_fatType = 0;
    6dd8:	71e3      	strb	r3, [r4, #7]
    invalidate();
  }
  /** Invalidate current cache sector. */
  void invalidate() {
    m_status = 0;
    6dda:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
    6dde:	f884 3234 	strb.w	r3, [r4, #564]	; 0x234
    m_sector = 0XFFFFFFFF;
    6de2:	6320      	str	r0, [r4, #48]	; 0x30
    6de4:	f8c4 0240 	str.w	r0, [r4, #576]	; 0x240
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.init(dev);
#endif  // USE_SEPARATE_FAT_CACHE
  // if part == 0 assume super floppy with FAT boot sector in sector zero
  // if part > 0 assume mbr volume with partition table
  if (part) {
    6de8:	b1da      	cbz	r2, 6e22 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x62>
    if (part > 4) {
    6dea:	2a04      	cmp	r2, #4
    6dec:	d901      	bls.n	6df2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x32>
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    6dee:	2000      	movs	r0, #0
    6df0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  bool cacheSync() {
    return m_cache.sync() && syncDevice();
  }
#endif  // USE_SEPARATE_FAT_CACHE
  cache_t* cacheFetchData(uint32_t sector, uint8_t options) {
    return reinterpret_cast<cache_t*>(m_cache.get(sector, options));
    6df2:	f104 0524 	add.w	r5, r4, #36	; 0x24
    6df6:	461a      	mov	r2, r3
    6df8:	4619      	mov	r1, r3
    6dfa:	4628      	mov	r0, r5
    6dfc:	f7fd fbdc 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
      DBG_FAIL_MACRO;
      goto fail;
    }
    mbr = reinterpret_cast<MbrSector_t*>
          (cacheFetchData(0, FsCache::CACHE_FOR_READ));
    MbrPart_t* mp = mbr->part + part - 1;
    6e00:	f06f 4370 	mvn.w	r3, #4026531840	; 0xf0000000
    6e04:	f500 71df 	add.w	r1, r0, #446	; 0x1be
    6e08:	4433      	add	r3, r6
    6e0a:	011b      	lsls	r3, r3, #4
    6e0c:	18ca      	adds	r2, r1, r3

    if (!mbr || mp->type == 0 || (mp->boot != 0 && mp->boot != 0X80)) {
    6e0e:	2800      	cmp	r0, #0
    6e10:	d0ed      	beq.n	6dee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6e12:	7910      	ldrb	r0, [r2, #4]
    6e14:	2800      	cmp	r0, #0
    6e16:	d0ea      	beq.n	6dee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6e18:	5ccb      	ldrb	r3, [r1, r3]
    6e1a:	065b      	lsls	r3, r3, #25
    6e1c:	d1e7      	bne.n	6dee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6e1e:	6896      	ldr	r6, [r2, #8]
    6e20:	e001      	b.n	6e26 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x66>
    6e22:	f104 0524 	add.w	r5, r4, #36	; 0x24
    6e26:	4628      	mov	r0, r5
    6e28:	2200      	movs	r2, #0
    6e2a:	4631      	mov	r1, r6
    6e2c:	f7fd fbc4 	bl	45b8 <FsCache::get(unsigned long, unsigned char)>
    volumeStartSector = getLe32(mp->relativeSectors);
  }
  pbs = reinterpret_cast<pbs_t*>
        (cacheFetchData(volumeStartSector, FsCache::CACHE_FOR_READ));
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    6e30:	2800      	cmp	r0, #0
    6e32:	d0dc      	beq.n	6dee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6e34:	7c03      	ldrb	r3, [r0, #16]
    6e36:	2b02      	cmp	r3, #2
    6e38:	d1d9      	bne.n	6dee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    6e3a:	f8b0 300b 	ldrh.w	r3, [r0, #11]
    6e3e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    6e42:	d1d4      	bne.n	6dee <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x2e>
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6e44:	7b42      	ldrb	r2, [r0, #13]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6e46:	2500      	movs	r5, #0
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6e48:	1e53      	subs	r3, r2, #1
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e4a:	2a01      	cmp	r2, #1
  bpb = reinterpret_cast<BpbFat32_t*>(pbs->bpb);
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
    6e4c:	7122      	strb	r2, [r4, #4]
  m_clusterSectorMask = m_sectorsPerCluster - 1;
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
    6e4e:	71a5      	strb	r5, [r4, #6]
  if (!pbs || bpb->fatCount != 2 || getLe16(bpb->bytesPerSector) != 512) {
    DBG_FAIL_MACRO;
    goto fail;
  }
  m_sectorsPerCluster = bpb->sectorsPerCluster;
  m_clusterSectorMask = m_sectorsPerCluster - 1;
    6e50:	7163      	strb	r3, [r4, #5]
  // determine shift that is same as multiply by m_sectorsPerCluster
  m_sectorsPerClusterShift = 0;
  for (tmp = 1; m_sectorsPerCluster != tmp; tmp <<= 1) {
    6e52:	d00f      	beq.n	6e74 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb4>
    6e54:	2501      	movs	r5, #1
    6e56:	4629      	mov	r1, r5
    6e58:	e000      	b.n	6e5c <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9c>
    6e5a:	461d      	mov	r5, r3
    6e5c:	0049      	lsls	r1, r1, #1
    6e5e:	1c6b      	adds	r3, r5, #1
    6e60:	b2c9      	uxtb	r1, r1
    6e62:	b2db      	uxtb	r3, r3
    6e64:	428a      	cmp	r2, r1
    6e66:	d004      	beq.n	6e72 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xb2>
    if (tmp == 0) {
    6e68:	2b09      	cmp	r3, #9
    6e6a:	d1f6      	bne.n	6e5a <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x9a>
    6e6c:	71a5      	strb	r5, [r4, #6]
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    6e6e:	2000      	movs	r0, #0
    6e70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e72:	71a5      	strb	r5, [r4, #6]
      DBG_FAIL_MACRO;
      goto fail;
    }
    m_sectorsPerClusterShift++;
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
    6e74:	8ac7      	ldrh	r7, [r0, #22]
    6e76:	6127      	str	r7, [r4, #16]
  if (m_sectorsPerFat == 0) {
    6e78:	b90f      	cbnz	r7, 6e7e <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xbe>
    6e7a:	6a47      	ldr	r7, [r0, #36]	; 0x24
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
    6e7c:	6127      	str	r7, [r4, #16]
void lbaToMbrChs(uint8_t* chs, uint32_t capacityMB, uint32_t lba);
//-----------------------------------------------------------------------------
#if !defined(USE_SIMPLE_LITTLE_ENDIAN) || USE_SIMPLE_LITTLE_ENDIAN
// assumes CPU is little-endian and handles alignment issues.
inline uint16_t getLe16(const uint8_t* src) {
  return *reinterpret_cast<const uint16_t*>(src);
    6e7e:	f8b0 1011 	ldrh.w	r1, [r0, #17]
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6e82:	89c3      	ldrh	r3, [r0, #14]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6e84:	014a      	lsls	r2, r1, #5
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);
    6e86:	8121      	strh	r1, [r4, #8]
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6e88:	4433      	add	r3, r6
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6e8a:	f202 12ff 	addw	r2, r2, #511	; 0x1ff

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6e8e:	eb03 0147 	add.w	r1, r3, r7, lsl #1
  }
  m_sectorsPerFat = getLe16(bpb->sectorsPerFat16);
  if (m_sectorsPerFat == 0) {
    m_sectorsPerFat = getLe32(bpb->sectorsPerFat32);
  }
  m_fatStartSector = volumeStartSector + getLe16(bpb->reservedSectorCount);
    6e92:	61a3      	str	r3, [r4, #24]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
    6e94:	f8b0 3013 	ldrh.w	r3, [r0, #19]
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    6e98:	eb01 2262 	add.w	r2, r1, r2, asr #9

  // count for FAT16 zero for FAT32
  m_rootDirEntryCount = getLe16(bpb->rootDirEntryCount);

  // directory start for FAT16 dataStart for FAT32
  m_rootDirStart = m_fatStartSector + 2 * m_sectorsPerFat;
    6e9c:	6221      	str	r1, [r4, #32]
  // data start for FAT16 and FAT32
  m_dataStartSector = m_rootDirStart +
    ((32 * m_rootDirEntryCount + m_bytesPerSector - 1)/m_bytesPerSector);
    6e9e:	6162      	str	r2, [r4, #20]

  // total sectors for FAT16 or FAT32
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    6ea0:	b1b3      	cbz	r3, 6ed0 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x110>
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6ea2:	1ab6      	subs	r6, r6, r2
  m_lastCluster = clusterCount + 1;

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6ea4:	f640 72f4 	movw	r2, #4084	; 0xff4
  totalSectors = getLe16(bpb->totalSectors16);
  if (totalSectors == 0) {
    totalSectors = getLe32(bpb->totalSectors32);
  }
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);
    6ea8:	4433      	add	r3, r6

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
    6eaa:	fa23 f505 	lsr.w	r5, r3, r5
  m_lastCluster = clusterCount + 1;
    6eae:	1c6b      	adds	r3, r5, #1

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6eb0:	4295      	cmp	r5, r2
  // total data sectors
  clusterCount = totalSectors - (m_dataStartSector - volumeStartSector);

  // divide by cluster size to get cluster count
  clusterCount >>= m_sectorsPerClusterShift;
  m_lastCluster = clusterCount + 1;
    6eb2:	61e3      	str	r3, [r4, #28]

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    6eb4:	d911      	bls.n	6eda <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x11a>
    m_fatType = 12;
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    6eb6:	f64f 73f4 	movw	r3, #65524	; 0xfff4
    6eba:	429d      	cmp	r5, r3
    6ebc:	d90a      	bls.n	6ed4 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x114>
}
inline uint32_t getLe32(const uint8_t* src) {
  return *reinterpret_cast<const uint32_t*>(src);
    6ebe:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    m_fatType = 32;
    6ec0:	2320      	movs	r3, #32
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
  } else {
    m_rootDirStart = getLe32(bpb->fat32RootCluster);
    6ec2:	6222      	str	r2, [r4, #32]
    m_fatType = 32;
    6ec4:	71e3      	strb	r3, [r4, #7]
  }
  /** Set the offset to the second FAT for mirroring.
   * \param[in] offset Sector offset to second FAT.
   */
  void setMirrorOffset(uint32_t offset) {
    m_mirrorOffset = offset;
    6ec6:	62e7      	str	r7, [r4, #44]	; 0x2c
  }
  m_cache.setMirrorOffset(m_sectorsPerFat);
#if USE_SEPARATE_FAT_CACHE
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;
    6ec8:	2001      	movs	r0, #1
    6eca:	f8c4 723c 	str.w	r7, [r4, #572]	; 0x23c
    6ece:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ed0:	6a03      	ldr	r3, [r0, #32]
    6ed2:	e7e6      	b.n	6ea2 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0xe2>
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    }
  } else if (clusterCount < 65525) {
    m_fatType = 16;
    6ed4:	2310      	movs	r3, #16
    6ed6:	71e3      	strb	r3, [r4, #7]
    6ed8:	e7f5      	b.n	6ec6 <FatPartition::init(BlockDeviceInterface*, unsigned char)+0x106>

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    6eda:	230c      	movs	r3, #12
  m_fatCache.setMirrorOffset(m_sectorsPerFat);
#endif  // USE_SEPARATE_FAT_CACHE
  return true;

 fail:
  return false;
    6edc:	2000      	movs	r0, #0

  // Indicate unknown number of free clusters.
  setFreeClusterCount(-1);
  // FAT type is determined by cluster count
  if (clusterCount < 4085) {
    m_fatType = 12;
    6ede:	71e3      	strb	r3, [r4, #7]
    if (!FAT12_SUPPORT) {
      DBG_FAIL_MACRO;
      goto fail;
    6ee0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6ee2:	bf00      	nop

00006ee4 <FsBaseFile::close()>:
    *m_xFile = *from.m_xFile;
  }
  return *this;
}
//------------------------------------------------------------------------------
bool FsBaseFile::close() {
    6ee4:	b510      	push	{r4, lr}
    6ee6:	4604      	mov	r4, r0
  if (m_fFile && m_fFile->close()) {
    6ee8:	6b80      	ldr	r0, [r0, #56]	; 0x38
    6eea:	b128      	cbz	r0, 6ef8 <FsBaseFile::close()+0x14>
    6eec:	f7fe fef8 	bl	5ce0 <FatFile::close()>
    6ef0:	b110      	cbz	r0, 6ef8 <FsBaseFile::close()+0x14>
    m_fFile = nullptr;
    6ef2:	2300      	movs	r3, #0
    6ef4:	63a3      	str	r3, [r4, #56]	; 0x38
    return true;
    6ef6:	bd10      	pop	{r4, pc}
  }
  if (m_xFile && m_xFile->close()) {
    6ef8:	6be0      	ldr	r0, [r4, #60]	; 0x3c
    6efa:	b128      	cbz	r0, 6f08 <FsBaseFile::close()+0x24>
    6efc:	f7fd fb94 	bl	4628 <ExFatFile::close()>
    6f00:	b110      	cbz	r0, 6f08 <FsBaseFile::close()+0x24>
    m_xFile = nullptr;
    6f02:	2300      	movs	r3, #0
    6f04:	63e3      	str	r3, [r4, #60]	; 0x3c
    6f06:	bd10      	pop	{r4, pc}
    return true;
  }
  return false;
    6f08:	2000      	movs	r0, #0
}
    6f0a:	bd10      	pop	{r4, pc}

00006f0c <FsBaseFile::open(FsVolume*, char const*, int)>:
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    6f0c:	b3c9      	cbz	r1, 6f82 <FsBaseFile::open(FsVolume*, char const*, int)+0x76>
    m_xFile = nullptr;
  }
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
    6f0e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6f12:	460c      	mov	r4, r1
    6f14:	4605      	mov	r5, r0
    6f16:	4698      	mov	r8, r3
    6f18:	4617      	mov	r7, r2
  if (!vol) {
    return false;
  }
  close();
    6f1a:	f7ff ffe3 	bl	6ee4 <FsBaseFile::close()>
  if (vol->m_fVol) {
    6f1e:	f8d4 6480 	ldr.w	r6, [r4, #1152]	; 0x480
    6f22:	b1ae      	cbz	r6, 6f50 <FsBaseFile::open(FsVolume*, char const*, int)+0x44>
 * \brief Basic file class.
 */
class FatFile {
 public:
  /** Create an instance. */
  FatFile() {}
    6f24:	2600      	movs	r6, #0
    m_fFile = new (m_fileMem) FatFile;
    6f26:	4629      	mov	r1, r5
    6f28:	2024      	movs	r0, #36	; 0x24
    6f2a:	f000 f82f 	bl	6f8c <operator new(unsigned int, unsigned long*)>
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6f2e:	4643      	mov	r3, r8
    6f30:	7006      	strb	r6, [r0, #0]
    6f32:	463a      	mov	r2, r7
    6f34:	7046      	strb	r6, [r0, #1]
    6f36:	7086      	strb	r6, [r0, #2]
  if (!vol) {
    return false;
  }
  close();
  if (vol->m_fVol) {
    m_fFile = new (m_fileMem) FatFile;
    6f38:	63a8      	str	r0, [r5, #56]	; 0x38
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
    6f3a:	f8d4 1480 	ldr.w	r1, [r4, #1152]	; 0x480
    6f3e:	f7fe ff49 	bl	5dd4 <FatFile::open(FatVolume*, char const*, int)>
    6f42:	b110      	cbz	r0, 6f4a <FsBaseFile::open(FsVolume*, char const*, int)+0x3e>
      return true;
    6f44:	2001      	movs	r0, #1
    6f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    }
    m_fFile = nullptr;
    6f4a:	63a8      	str	r0, [r5, #56]	; 0x38
    6f4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  } else if (vol->m_xVol) {
    6f50:	f8d4 3484 	ldr.w	r3, [r4, #1156]	; 0x484
    6f54:	b1bb      	cbz	r3, 6f86 <FsBaseFile::open(FsVolume*, char const*, int)+0x7a>
    m_xFile = new (m_fileMem) ExFatFile;
    6f56:	4629      	mov	r1, r5
    6f58:	2038      	movs	r0, #56	; 0x38
    6f5a:	f000 f817 	bl	6f8c <operator new(unsigned int, unsigned long*)>
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6f5e:	4643      	mov	r3, r8
 * \brief Basic file class.
 */
class ExFatFile {
 public:
  /** Create an instance. */
  ExFatFile() {}
    6f60:	f880 6031 	strb.w	r6, [r0, #49]	; 0x31
    6f64:	463a      	mov	r2, r7
    6f66:	f880 6032 	strb.w	r6, [r0, #50]	; 0x32
    6f6a:	f880 6033 	strb.w	r6, [r0, #51]	; 0x33
    if (m_fFile && m_fFile->open(vol->m_fVol, path, oflag)) {
      return true;
    }
    m_fFile = nullptr;
  } else if (vol->m_xVol) {
    m_xFile = new (m_fileMem) ExFatFile;
    6f6e:	63e8      	str	r0, [r5, #60]	; 0x3c
    if (m_xFile && m_xFile->open(vol->m_xVol, path, oflag)) {
    6f70:	f8d4 1484 	ldr.w	r1, [r4, #1156]	; 0x484
    6f74:	f7fd ffe0 	bl	4f38 <ExFatFile::open(ExFatVolume*, char const*, int)>
    6f78:	2800      	cmp	r0, #0
    6f7a:	d1e3      	bne.n	6f44 <FsBaseFile::open(FsVolume*, char const*, int)+0x38>
      return true;
    }
    m_xFile = nullptr;
    6f7c:	63e8      	str	r0, [r5, #60]	; 0x3c
  }
  return false;
}
    6f7e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6f82:	2000      	movs	r0, #0
      return true;
    }
    m_xFile = nullptr;
  }
  return false;
}
    6f84:	4770      	bx	lr
  return false;
}
//------------------------------------------------------------------------------
bool FsBaseFile::open(FsVolume* vol, const char* path, oflag_t oflag) {
  if (!vol) {
    return false;
    6f86:	2000      	movs	r0, #0
    6f88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006f8c <operator new(unsigned int, unsigned long*)>:
 */
#include "FsNew.h"
void* operator new(size_t size, newalign_t* ptr) {
  (void)size;
  return ptr;
}
    6f8c:	4608      	mov	r0, r1
    6f8e:	4770      	bx	lr

00006f90 <FsVolume::begin(BlockDeviceInterface*)>:
 * DEALINGS IN THE SOFTWARE.
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
    6f90:	b570      	push	{r4, r5, r6, lr}
    6f92:	4604      	mov	r4, r0
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6f94:	2600      	movs	r6, #0
  m_xVol = new (m_volMem) ExFatVolume;
    6f96:	f44f 6090 	mov.w	r0, #1152	; 0x480
 */
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
    6f9a:	f8c4 1488 	str.w	r1, [r4, #1160]	; 0x488
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
    6f9e:	4621      	mov	r1, r4
#include "FsLib.h"
FsVolume* FsVolume::m_cwv = nullptr;
//------------------------------------------------------------------------------
bool FsVolume::begin(BlockDevice* blockDev) {
  m_blockDev = blockDev;
  m_fVol = nullptr;
    6fa0:	f8c4 6480 	str.w	r6, [r4, #1152]	; 0x480
  m_xVol = new (m_volMem) ExFatVolume;
    6fa4:	f7ff fff2 	bl	6f8c <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6fa8:	2201      	movs	r2, #1
 * \class ExFatPartition
 * \brief Access exFat partitions on raw file devices.
 */
class ExFatPartition {
 public:
  ExFatPartition() {}
    6faa:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    6fae:	4605      	mov	r5, r0
    6fb0:	f880 6479 	strb.w	r6, [r0, #1145]	; 0x479
    6fb4:	f880 647a 	strb.w	r6, [r0, #1146]	; 0x47a
    6fb8:	f880 647b 	strb.w	r6, [r0, #1147]	; 0x47b
    6fbc:	f8c4 0484 	str.w	r0, [r4, #1156]	; 0x484
    6fc0:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    6fc4:	f7fe fce4 	bl	5990 <ExFatPartition::init(BlockDeviceInterface*, unsigned char)>
    6fc8:	b9f0      	cbnz	r0, 7008 <FsVolume::begin(BlockDeviceInterface*)+0x78>
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6fca:	2600      	movs	r6, #0
  m_fVol = new (m_volMem) FatVolume;
    6fcc:	4621      	mov	r1, r4
    6fce:	f44f 608d 	mov.w	r0, #1128	; 0x468
  m_fVol = nullptr;
  m_xVol = new (m_volMem) ExFatVolume;
  if (m_xVol && m_xVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_xVol = nullptr;
    6fd2:	f8c4 6484 	str.w	r6, [r4, #1156]	; 0x484
  m_fVol = new (m_volMem) FatVolume;
    6fd6:	f7ff ffd9 	bl	6f8c <operator new(unsigned int, unsigned long*)>
   * \param[in] setCwv Set current working volume if true.
   * \param[in] part partition to initialize.
   * \return true for success or false for failure.
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
    6fda:	2201      	movs	r2, #1
 */
class FatPartition {
 public:
  /** Create an instance of FatPartition
   */
  FatPartition() {}
    6fdc:	71c6      	strb	r6, [r0, #7]
    6fde:	4605      	mov	r5, r0
    6fe0:	f880 6444 	strb.w	r6, [r0, #1092]	; 0x444
    6fe4:	f880 6445 	strb.w	r6, [r0, #1093]	; 0x445
    6fe8:	f880 6446 	strb.w	r6, [r0, #1094]	; 0x446
    6fec:	f8c4 0480 	str.w	r0, [r4, #1152]	; 0x480
    6ff0:	f8d4 1488 	ldr.w	r1, [r4, #1160]	; 0x488
    6ff4:	f7ff fee4 	bl	6dc0 <FatPartition::init(BlockDeviceInterface*, unsigned char)>
    6ff8:	b9c0      	cbnz	r0, 702c <FsVolume::begin(BlockDeviceInterface*)+0x9c>
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    6ffa:	2300      	movs	r3, #0
    6ffc:	4a14      	ldr	r2, [pc, #80]	; (7050 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  m_fVol = nullptr;
  return false;
    6ffe:	4618      	mov	r0, r3
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
  m_fVol = nullptr;
    7000:	f8c4 3480 	str.w	r3, [r4, #1152]	; 0x480
  m_xVol = nullptr;
  m_fVol = new (m_volMem) FatVolume;
  if (m_fVol && m_fVol->begin(m_blockDev, false)) {
    goto done;
  }
  m_cwv = nullptr;
    7004:	6013      	str	r3, [r2, #0]
  return false;

 done:
  m_cwv = this;
  return true;
}
    7006:	bd70      	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    7008:	f505 6689 	add.w	r6, r5, #1096	; 0x448
    700c:	4630      	mov	r0, r6
    700e:	f7fd fb0b 	bl	4628 <ExFatFile::close()>
    return m_vwd.openRoot(this);
    7012:	4629      	mov	r1, r5
    7014:	4630      	mov	r0, r6
    7016:	f7fd fb17 	bl	4648 <ExFatFile::openRoot(ExFatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    701a:	2800      	cmp	r0, #0
    701c:	d0d5      	beq.n	6fca <FsVolume::begin(BlockDeviceInterface*)+0x3a>
      return false;
    }
    if (setCwv || !m_cwv) {
    701e:	4b0d      	ldr	r3, [pc, #52]	; (7054 <FsVolume::begin(BlockDeviceInterface*)+0xc4>)
    7020:	681a      	ldr	r2, [r3, #0]
    7022:	b192      	cbz	r2, 704a <FsVolume::begin(BlockDeviceInterface*)+0xba>
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    7024:	4b0a      	ldr	r3, [pc, #40]	; (7050 <FsVolume::begin(BlockDeviceInterface*)+0xc0>)
  return true;
    7026:	2001      	movs	r0, #1
  m_cwv = nullptr;
  m_fVol = nullptr;
  return false;

 done:
  m_cwv = this;
    7028:	601c      	str	r4, [r3, #0]
  return true;
    702a:	bd70      	pop	{r4, r5, r6, pc}
  /**
   * Set volume working directory to root.
   * \return true for success or false for failure.
   */
  bool chdir() {
    m_vwd.close();
    702c:	f205 4644 	addw	r6, r5, #1092	; 0x444
    7030:	4630      	mov	r0, r6
    7032:	f7fe fe55 	bl	5ce0 <FatFile::close()>
    return m_vwd.openRoot(this);
    7036:	4629      	mov	r1, r5
    7038:	4630      	mov	r0, r6
    703a:	f7fe fed3 	bl	5de4 <FatFile::openRoot(FatVolume*)>
   */
  bool begin(BlockDevice* dev, bool setCwv = true, uint8_t part = 1) {
    if (!init(dev, part)) {
      return false;
    }
    if (!chdir()) {
    703e:	2800      	cmp	r0, #0
    7040:	d0db      	beq.n	6ffa <FsVolume::begin(BlockDeviceInterface*)+0x6a>
      return false;
    }
    if (setCwv || !m_cwv) {
    7042:	4b05      	ldr	r3, [pc, #20]	; (7058 <FsVolume::begin(BlockDeviceInterface*)+0xc8>)
    7044:	681a      	ldr	r2, [r3, #0]
    7046:	2a00      	cmp	r2, #0
    7048:	d1ec      	bne.n	7024 <FsVolume::begin(BlockDeviceInterface*)+0x94>
      m_cwv = this;
    704a:	601d      	str	r5, [r3, #0]
    704c:	e7ea      	b.n	7024 <FsVolume::begin(BlockDeviceInterface*)+0x94>
    704e:	bf00      	nop
    7050:	20036c48 	.word	0x20036c48
    7054:	20036c40 	.word	0x20036c40
    7058:	20036c44 	.word	0x20036c44

0000705c <sdIrs()>:
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
    705c:	4b08      	ldr	r3, [pc, #32]	; (7080 <sdIrs()+0x24>)
    705e:	2100      	movs	r1, #0
  m_irqstat = SDHC_IRQSTAT;
    7060:	4a08      	ldr	r2, [pc, #32]	; (7084 <sdIrs()+0x28>)
  SDHC_IRQSTAT = m_irqstat;
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
    7062:	4809      	ldr	r0, [pc, #36]	; (7088 <sdIrs()+0x2c>)
#endif  // USE_DEBUG_MODE
  return false;
}
//==============================================================================
// ISR
static void sdIrs() {
    7064:	b410      	push	{r4}
  SDHC_IRQSIGEN = 0;
    7066:	6399      	str	r1, [r3, #56]	; 0x38
  m_irqstat = SDHC_IRQSTAT;
    7068:	6b1c      	ldr	r4, [r3, #48]	; 0x30
    706a:	6014      	str	r4, [r2, #0]
  SDHC_IRQSTAT = m_irqstat;
    706c:	6812      	ldr	r2, [r2, #0]
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
#endif
  m_dmaBusy = false;
}
    706e:	f85d 4b04 	ldr.w	r4, [sp], #4
//==============================================================================
// ISR
static void sdIrs() {
  SDHC_IRQSIGEN = 0;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
    7072:	631a      	str	r2, [r3, #48]	; 0x30
#if defined(__IMXRT1062__)
  SDHC_MIX_CTRL &= ~(SDHC_MIX_CTRL_AC23EN | SDHC_MIX_CTRL_DMAEN);
    7074:	6c9a      	ldr	r2, [r3, #72]	; 0x48
    7076:	f022 0281 	bic.w	r2, r2, #129	; 0x81
    707a:	649a      	str	r2, [r3, #72]	; 0x48
#endif
  m_dmaBusy = false;
    707c:	7001      	strb	r1, [r0, #0]
}
    707e:	4770      	bx	lr
    7080:	402c0000 	.word	0x402c0000
    7084:	20036c74 	.word	0x20036c74
    7088:	20036c8c 	.word	0x20036c8c

0000708c <isBusyCommandComplete()>:
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
//------------------------------------------------------------------------------
static bool isBusyCommandComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_CC | SDHC_IRQSTAT_CMD_ERROR));
    708c:	4b03      	ldr	r3, [pc, #12]	; (709c <isBusyCommandComplete()+0x10>)
    708e:	4804      	ldr	r0, [pc, #16]	; (70a0 <isBusyCommandComplete()+0x14>)
    7090:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7092:	4018      	ands	r0, r3
}
    7094:	fab0 f080 	clz	r0, r0
    7098:	0940      	lsrs	r0, r0, #5
    709a:	4770      	bx	lr
    709c:	402c0000 	.word	0x402c0000
    70a0:	000f0001 	.word	0x000f0001

000070a4 <isBusyCommandInhibit()>:
//------------------------------------------------------------------------------
static bool isBusyCommandInhibit() {
  return SDHC_PRSSTAT & SDHC_PRSSTAT_CIHB;
    70a4:	4b02      	ldr	r3, [pc, #8]	; (70b0 <isBusyCommandInhibit()+0xc>)
    70a6:	6a58      	ldr	r0, [r3, #36]	; 0x24
}
    70a8:	f000 0001 	and.w	r0, r0, #1
    70ac:	4770      	bx	lr
    70ae:	bf00      	nop
    70b0:	402c0000 	.word	0x402c0000

000070b4 <isBusyDat()>:
//------------------------------------------------------------------------------
static bool isBusyDat() {
  return SDHC_PRSSTAT & (1 << 24) ? false : true;
    70b4:	4b03      	ldr	r3, [pc, #12]	; (70c4 <isBusyDat()+0x10>)
    70b6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    70b8:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
}
    70bc:	f3c0 6000 	ubfx	r0, r0, #24, #1
    70c0:	4770      	bx	lr
    70c2:	bf00      	nop
    70c4:	402c0000 	.word	0x402c0000

000070c8 <isBusyDMA()>:
//------------------------------------------------------------------------------
static bool isBusyDMA() {
  return m_dmaBusy;
    70c8:	4b01      	ldr	r3, [pc, #4]	; (70d0 <isBusyDMA()+0x8>)
    70ca:	7818      	ldrb	r0, [r3, #0]
}
    70cc:	4770      	bx	lr
    70ce:	bf00      	nop
    70d0:	20036c8c 	.word	0x20036c8c

000070d4 <isBusyFifoRead()>:
//------------------------------------------------------------------------------
static bool isBusyFifoRead() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BREN);
    70d4:	4b03      	ldr	r3, [pc, #12]	; (70e4 <isBusyFifoRead()+0x10>)
    70d6:	6a58      	ldr	r0, [r3, #36]	; 0x24
    70d8:	f480 6000 	eor.w	r0, r0, #2048	; 0x800
}
    70dc:	f3c0 20c0 	ubfx	r0, r0, #11, #1
    70e0:	4770      	bx	lr
    70e2:	bf00      	nop
    70e4:	402c0000 	.word	0x402c0000

000070e8 <isBusyFifoWrite()>:
//------------------------------------------------------------------------------
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
    70e8:	4b03      	ldr	r3, [pc, #12]	; (70f8 <isBusyFifoWrite()+0x10>)
    70ea:	6a58      	ldr	r0, [r3, #36]	; 0x24
    70ec:	f480 6080 	eor.w	r0, r0, #1024	; 0x400
}
    70f0:	f3c0 2080 	ubfx	r0, r0, #10, #1
    70f4:	4770      	bx	lr
    70f6:	bf00      	nop
    70f8:	402c0000 	.word	0x402c0000

000070fc <isBusyTransferComplete()>:
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    70fc:	4b03      	ldr	r3, [pc, #12]	; (710c <isBusyTransferComplete()+0x10>)
    70fe:	4804      	ldr	r0, [pc, #16]	; (7110 <isBusyTransferComplete()+0x14>)
    7100:	6b1b      	ldr	r3, [r3, #48]	; 0x30
    7102:	4018      	ands	r0, r3
}
    7104:	fab0 f080 	clz	r0, r0
    7108:	0940      	lsrs	r0, r0, #5
    710a:	4770      	bx	lr
    710c:	402c0000 	.word	0x402c0000
    7110:	117f0002 	.word	0x117f0002

00007114 <setSdclk(unsigned long)>:
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    7114:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7118:	4b2b      	ldr	r3, [pc, #172]	; (71c8 <setSdclk(unsigned long)+0xb4>)
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    711a:	492c      	ldr	r1, [pc, #176]	; (71cc <setSdclk(unsigned long)+0xb8>)
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
    711c:	fb02 f000 	mul.w	r0, r2, r0
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
    7120:	6a49      	ldr	r1, [r1, #36]	; 0x24
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7122:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
    7126:	4b2a      	ldr	r3, [pc, #168]	; (71d0 <setSdclk(unsigned long)+0xbc>)
    7128:	f3c1 21c2 	ubfx	r1, r1, #11, #3
    712c:	f002 023f 	and.w	r2, r2, #63	; 0x3f
    7130:	3101      	adds	r1, #1
    7132:	fba3 2302 	umull	r2, r3, r3, r2
  }
  d[15] = 0;
  return true;
}
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
    7136:	b4f0      	push	{r4, r5, r6, r7}
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
}
//------------------------------------------------------------------------------
static uint32_t baseClock() {
  uint32_t divider = ((CCM_CSCDR1 >> 11) & 0x7) + 1;
  return (528000000U * 3)/((CCM_ANALOG_PFD_528 & 0x3F)/6)/divider;
    7138:	089b      	lsrs	r3, r3, #2
    713a:	4d26      	ldr	r5, [pc, #152]	; (71d4 <setSdclk(unsigned long)+0xc0>)
    713c:	fbb5 f5f3 	udiv	r5, r5, r3
    7140:	fbb5 f5f1 	udiv	r5, r5, r1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7144:	ebb0 1f15 	cmp.w	r0, r5, lsr #4
    7148:	d238      	bcs.n	71bc <setSdclk(unsigned long)+0xa8>
    714a:	2201      	movs	r2, #1
    714c:	e001      	b.n	7152 <setSdclk(unsigned long)+0x3e>
    714e:	2aff      	cmp	r2, #255	; 0xff
    7150:	d805      	bhi.n	715e <setSdclk(unsigned long)+0x4a>
    sdclkfs <<= 1;
    7152:	0052      	lsls	r2, r2, #1
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    7154:	0113      	lsls	r3, r2, #4
    7156:	fbb5 f3f3 	udiv	r3, r5, r3
    715a:	4298      	cmp	r0, r3
    715c:	d3f7      	bcc.n	714e <setSdclk(unsigned long)+0x3a>
    715e:	0851      	lsrs	r1, r2, #1
    7160:	020f      	lsls	r7, r1, #8
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7162:	fbb5 f3f2 	udiv	r3, r5, r2
    7166:	4298      	cmp	r0, r3
    7168:	d22b      	bcs.n	71c2 <setSdclk(unsigned long)+0xae>
    716a:	0054      	lsls	r4, r2, #1
    716c:	2101      	movs	r1, #1
    716e:	e000      	b.n	7172 <setSdclk(unsigned long)+0x5e>
    7170:	461c      	mov	r4, r3
    dvs++;
    7172:	1c4e      	adds	r6, r1, #1
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    7174:	fbb5 f3f4 	udiv	r3, r5, r4
    7178:	4298      	cmp	r0, r3
    717a:	eb02 0304 	add.w	r3, r2, r4
    717e:	d21b      	bcs.n	71b8 <setSdclk(unsigned long)+0xa4>
    7180:	2e10      	cmp	r6, #16
    7182:	4631      	mov	r1, r6
    7184:	d1f4      	bne.n	7170 <setSdclk(unsigned long)+0x5c>
    7186:	23f0      	movs	r3, #240	; 0xf0
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7188:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    718c:	4e12      	ldr	r6, [pc, #72]	; (71d8 <setSdclk(unsigned long)+0xc4>)
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    718e:	4913      	ldr	r1, [pc, #76]	; (71dc <setSdclk(unsigned long)+0xc8>)
    7190:	fb02 f404 	mul.w	r4, r2, r4
  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    7194:	4812      	ldr	r0, [pc, #72]	; (71e0 <setSdclk(unsigned long)+0xcc>)

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    7196:	4632      	mov	r2, r6
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    dvs++;
  }
  m_sdClkKhz = base/(1000*sdclkfs*dvs);
    7198:	fbb5 f5f4 	udiv	r5, r5, r4
    719c:	600d      	str	r5, [r1, #0]
  // Disable SDHC clock.
  SDHC_SYSCTL &= ~SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)

  // Change dividers.
  uint32_t sysctl = SDHC_SYSCTL & ~(SDHC_SYSCTL_DTOCV_MASK
    719e:	6af1      	ldr	r1, [r6, #44]	; 0x2c
                    | SDHC_SYSCTL_DVS_MASK | SDHC_SYSCTL_SDCLKFS_MASK);

  SDHC_SYSCTL = sysctl | SDHC_SYSCTL_DTOCV(0x0E) | SDHC_SYSCTL_DVS(dvs)
                | SDHC_SYSCTL_SDCLKFS(sdclkfs);
    71a0:	4008      	ands	r0, r1
    71a2:	f440 2060 	orr.w	r0, r0, #917504	; 0xe0000
    71a6:	ea40 0107 	orr.w	r1, r0, r7
    71aa:	4319      	orrs	r1, r3
    71ac:	62f1      	str	r1, [r6, #44]	; 0x2c

  // Wait until the SDHC clock is stable.
  while (!(SDHC_PRSSTAT & SDHC_PRSSTAT_SDSTB)) {
    71ae:	6a53      	ldr	r3, [r2, #36]	; 0x24
    71b0:	071b      	lsls	r3, r3, #28
    71b2:	d5fc      	bpl.n	71ae <setSdclk(unsigned long)+0x9a>

#if defined(__MK64FX512__) || defined(__MK66FX1M0__)
  // Enable the SDHC clock.
  SDHC_SYSCTL |= SDHC_SYSCTL_SDCLKEN;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
    71b4:	bcf0      	pop	{r4, r5, r6, r7}
    71b6:	4770      	bx	lr
    71b8:	010b      	lsls	r3, r1, #4
    71ba:	e7e5      	b.n	7188 <setSdclk(unsigned long)+0x74>
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
  uint32_t maxSdclk = 1000*kHzMax;
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    71bc:	2700      	movs	r7, #0
//------------------------------------------------------------------------------
static void setSdclk(uint32_t kHzMax) {
  const uint32_t DVS_LIMIT = 0X10;
  const uint32_t SDCLKFS_LIMIT = 0X100;
  uint32_t dvs = 1;
  uint32_t sdclkfs = 1;
    71be:	2201      	movs	r2, #1
    71c0:	e7cf      	b.n	7162 <setSdclk(unsigned long)+0x4e>
  uint32_t base = baseClock();

  while ((base/(sdclkfs*DVS_LIMIT) > maxSdclk) && (sdclkfs < SDCLKFS_LIMIT)) {
    sdclkfs <<= 1;
  }
  while ((base/(sdclkfs*dvs) > maxSdclk) && (dvs < DVS_LIMIT)) {
    71c2:	4614      	mov	r4, r2
    71c4:	2300      	movs	r3, #0
    71c6:	e7df      	b.n	7188 <setSdclk(unsigned long)+0x74>
    71c8:	400d8000 	.word	0x400d8000
    71cc:	400fc000 	.word	0x400fc000
    71d0:	aaaaaaab 	.word	0xaaaaaaab
    71d4:	5e69ec00 	.word	0x5e69ec00
    71d8:	402c0000 	.word	0x402c0000
    71dc:	20036c90 	.word	0x20036c90
    71e0:	fff0000f 	.word	0xfff0000f

000071e4 <SdioCard::errorCode() const>:
  }
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::errorCode() const {
  return m_errorCode;
    71e4:	4b01      	ldr	r3, [pc, #4]	; (71ec <SdioCard::errorCode() const+0x8>)
}
    71e6:	7818      	ldrb	r0, [r3, #0]
    71e8:	4770      	bx	lr
    71ea:	bf00      	nop
    71ec:	20001124 	.word	0x20001124

000071f0 <SdioCard::errorData() const>:
//------------------------------------------------------------------------------
uint32_t SdioCard::errorData() const {
  return m_irqstat;
    71f0:	4b01      	ldr	r3, [pc, #4]	; (71f8 <SdioCard::errorData() const+0x8>)
    71f2:	6818      	ldr	r0, [r3, #0]
}
    71f4:	4770      	bx	lr
    71f6:	bf00      	nop
    71f8:	20036c74 	.word	0x20036c74

000071fc <SdioCard::readCID(CID*)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    71fc:	b430      	push	{r4, r5}
  memcpy(cid, &m_cid, 16);
    71fe:	4c05      	ldr	r4, [pc, #20]	; (7214 <SdioCard::readCID(CID*)+0x18>)
//------------------------------------------------------------------------------
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
    7200:	460d      	mov	r5, r1
  memcpy(cid, &m_cid, 16);
    7202:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7204:	6028      	str	r0, [r5, #0]
  return true;
}
    7206:	2001      	movs	r0, #1
uint32_t SdioCard::kHzSdClk() {
  return m_sdClkKhz;
}
//------------------------------------------------------------------------------
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
    7208:	6069      	str	r1, [r5, #4]
    720a:	60aa      	str	r2, [r5, #8]
    720c:	60eb      	str	r3, [r5, #12]
  return true;
}
    720e:	bc30      	pop	{r4, r5}
    7210:	4770      	bx	lr
    7212:	bf00      	nop
    7214:	20036c50 	.word	0x20036c50

00007218 <SdioCard::readCSD(csd_t*)>:
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    7218:	b430      	push	{r4, r5}
  memcpy(csd, &m_csd, 16);
    721a:	4c05      	ldr	r4, [pc, #20]	; (7230 <SdioCard::readCSD(csd_t*)+0x18>)
bool SdioCard::readCID(cid_t* cid) {
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
    721c:	460d      	mov	r5, r1
  memcpy(csd, &m_csd, 16);
    721e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
    7220:	6028      	str	r0, [r5, #0]
  return true;
}
    7222:	2001      	movs	r0, #1
  memcpy(cid, &m_cid, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
    7224:	6069      	str	r1, [r5, #4]
    7226:	60aa      	str	r2, [r5, #8]
    7228:	60eb      	str	r3, [r5, #12]
  return true;
}
    722a:	bc30      	pop	{r4, r5}
    722c:	4770      	bx	lr
    722e:	bf00      	nop
    7230:	20036c7c 	.word	0x20036c7c

00007234 <SdioCard::readOCR(unsigned long*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7234:	4b02      	ldr	r3, [pc, #8]	; (7240 <SdioCard::readOCR(unsigned long*)+0xc>)
  return true;
}
    7236:	2001      	movs	r0, #1
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
    7238:	681b      	ldr	r3, [r3, #0]
    723a:	600b      	str	r3, [r1, #0]
  return true;
}
    723c:	4770      	bx	lr
    723e:	bf00      	nop
    7240:	20036c68 	.word	0x20036c68

00007244 <SdioCard::~SdioCard()>:
    7244:	4770      	bx	lr
    7246:	bf00      	nop

00007248 <waitTimeout(bool (*)())>:
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
    7248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    724a:	4605      	mov	r5, r0
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    724c:	4f07      	ldr	r7, [pc, #28]	; (726c <waitTimeout(bool (*)())+0x24>)
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
    724e:	f001 fe63 	bl	8f18 <micros>
    7252:	4606      	mov	r6, r0
    7254:	e004      	b.n	7260 <waitTimeout(bool (*)())+0x18>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7256:	f001 fe5f 	bl	8f18 <micros>
    725a:	1b80      	subs	r0, r0, r6
    725c:	42b8      	cmp	r0, r7
    725e:	d803      	bhi.n	7268 <waitTimeout(bool (*)())+0x20>
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool waitTimeout(bool (*fcn)()) {
  uint32_t m = micros();
  while (fcn()) {
    7260:	47a8      	blx	r5
    7262:	4604      	mov	r4, r0
    7264:	2800      	cmp	r0, #0
    7266:	d1f6      	bne.n	7256 <waitTimeout(bool (*)())+0xe>
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      return true;
    }
  }
  return false;  // Caller will set errorCode.
}
    7268:	4620      	mov	r0, r4
    726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    726c:	000f4240 	.word	0x000f4240

00007270 <yieldTimeout(bool (*)())>:
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7270:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  m_busyFcn = fcn;
    7274:	f8df 8040 	ldr.w	r8, [pc, #64]	; 72b8 <yieldTimeout(bool (*)())+0x48>
  }
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
    7278:	4605      	mov	r5, r0
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    727a:	4f0e      	ldr	r7, [pc, #56]	; (72b4 <yieldTimeout(bool (*)())+0x44>)
  return true;
}
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
    727c:	f8c8 0000 	str.w	r0, [r8]
  uint32_t m = micros();
    7280:	f001 fe4a 	bl	8f18 <micros>
    7284:	4606      	mov	r6, r0
    7286:	e006      	b.n	7296 <yieldTimeout(bool (*)())+0x26>
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
    7288:	f001 fe46 	bl	8f18 <micros>
    728c:	1b80      	subs	r0, r0, r6
    728e:	42b8      	cmp	r0, r7
    7290:	d80a      	bhi.n	72a8 <yieldTimeout(bool (*)())+0x38>
    7292:	f003 f93f 	bl	a514 <yield>
//------------------------------------------------------------------------------
// Return true if timeout occurs.
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    7296:	47a8      	blx	r5
    7298:	4604      	mov	r4, r0
    729a:	2800      	cmp	r0, #0
    729c:	d1f4      	bne.n	7288 <yieldTimeout(bool (*)())+0x18>
      m_busyFcn = 0;
      return true;
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
    729e:	f8c8 0000 	str.w	r0, [r8]
  return false;  // Caller will set errorCode.
}
    72a2:	4620      	mov	r0, r4
    72a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    72a8:	2300      	movs	r3, #0
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    72aa:	4620      	mov	r0, r4
static bool yieldTimeout(bool (*fcn)()) {
  m_busyFcn = fcn;
  uint32_t m = micros();
  while (fcn()) {
    if ((micros() - m) > BUSY_TIMEOUT_MICROS) {
      m_busyFcn = 0;
    72ac:	f8c8 3000 	str.w	r3, [r8]
    }
    SysCall::yield();
  }
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
    72b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    72b4:	000f4240 	.word	0x000f4240
    72b8:	20036c60 	.word	0x20036c60

000072bc <SdioCard::~SdioCard()>:
    72bc:	b510      	push	{r4, lr}
    72be:	4604      	mov	r4, r0
    72c0:	210c      	movs	r1, #12
    72c2:	f002 fffb 	bl	a2bc <operator delete(void*, unsigned int)>
    72c6:	4620      	mov	r0, r4
    72c8:	bd10      	pop	{r4, pc}
    72ca:	bf00      	nop

000072cc <enableGPIO(bool) [clone .part.0]>:
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    72cc:	4b0f      	ldr	r3, [pc, #60]	; (730c <enableGPIO(bool) [clone .part.0]+0x40>)
    72ce:	2200      	movs	r2, #0

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    72d0:	f247 01a0 	movw	r1, #28832	; 0x70a0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    72d4:	f44f 5085 	mov.w	r0, #4256	; 0x10a0
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    72d8:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    72dc:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    72e0:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    72e4:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    72e8:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    72ec:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8

  const uint32_t DATA_MASK = CLOCK_MASK | IOMUXC_SW_PAD_CTL_PAD_PUE |
                             IOMUXC_SW_PAD_CTL_PAD_PUS(1);
  if (enable) {
    gpioMux(0);
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_04 = DATA_MASK;   // DAT2
    72f0:	f8c3 13bc 	str.w	r1, [r3, #956]	; 0x3bc
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_05 = DATA_MASK;   // DAT3
    72f4:	f8c3 13c0 	str.w	r1, [r3, #960]	; 0x3c0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_00 = DATA_MASK;   // CMD
    72f8:	f8c3 13ac 	str.w	r1, [r3, #940]	; 0x3ac
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_01 = CLOCK_MASK;  // CLK
    72fc:	f8c3 03b0 	str.w	r0, [r3, #944]	; 0x3b0
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_02 = DATA_MASK;   // DAT0
    7300:	f8c3 13b4 	str.w	r1, [r3, #948]	; 0x3b4
    IOMUXC_SW_PAD_CTL_PAD_GPIO_SD_B0_03 = DATA_MASK;   // DAT1
    7304:	f8c3 13b8 	str.w	r1, [r3, #952]	; 0x3b8
    7308:	4770      	bx	lr
    730a:	bf00      	nop
    730c:	401f8000 	.word	0x401f8000

00007310 <SdioCard::type() const>:
  return true;
}
//------------------------------------------------------------------------------
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
    7310:	4b05      	ldr	r3, [pc, #20]	; (7328 <SdioCard::type() const+0x18>)
    7312:	781b      	ldrb	r3, [r3, #0]
    7314:	b133      	cbz	r3, 7324 <SdioCard::type() const+0x14>
    7316:	4b05      	ldr	r3, [pc, #20]	; (732c <SdioCard::type() const+0x1c>)
    7318:	781b      	ldrb	r3, [r3, #0]
    731a:	2b00      	cmp	r3, #0
    731c:	bf14      	ite	ne
    731e:	2003      	movne	r0, #3
    7320:	2002      	moveq	r0, #2
    7322:	4770      	bx	lr
    7324:	2001      	movs	r0, #1
}
    7326:	4770      	bx	lr
    7328:	20036c4c 	.word	0x20036c4c
    732c:	20036c64 	.word	0x20036c64

00007330 <cardCommand(unsigned long, unsigned long)>:
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7330:	b538      	push	{r3, r4, r5, lr}
    7332:	4604      	mov	r4, r0
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7334:	4814      	ldr	r0, [pc, #80]	; (7388 <cardCommand(unsigned long, unsigned long)+0x58>)
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
}
//------------------------------------------------------------------------------
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
    7336:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    7338:	f7ff ff86 	bl	7248 <waitTimeout(bool (*)())>
    733c:	bb08      	cbnz	r0, 7382 <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    733e:	4b13      	ldr	r3, [pc, #76]	; (738c <cardCommand(unsigned long, unsigned long)+0x5c>)
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    7340:	02a1      	lsls	r1, r4, #10
static bool cardCommand(uint32_t xfertyp, uint32_t arg) {
  DBG_IRQSTAT();
  if (waitTimeout(isBusyCommandInhibit)) {
    return false;  // Caller will set errorCode.
  }
  SDHC_CMDARG = arg;
    7342:	609d      	str	r5, [r3, #8]
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    7344:	d507      	bpl.n	7356 <cardCommand(unsigned long, unsigned long)+0x26>
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    7346:	6c99      	ldr	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    7348:	b2e2      	uxtb	r2, r4
  }
  SDHC_CMDARG = arg;
#if defined(__IMXRT1062__)
  // Set MIX_CTRL if data transfer.
  if (xfertyp & SDHC_XFERTYP_DPSEL) {
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    734a:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
    734e:	6499      	str	r1, [r3, #72]	; 0x48
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
    7350:	6c99      	ldr	r1, [r3, #72]	; 0x48
    7352:	430a      	orrs	r2, r1
    7354:	649a      	str	r2, [r3, #72]	; 0x48
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
    7356:	f024 04ff 	bic.w	r4, r4, #255	; 0xff
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    735a:	4d0c      	ldr	r5, [pc, #48]	; (738c <cardCommand(unsigned long, unsigned long)+0x5c>)
  if (waitTimeout(isBusyCommandComplete)) {
    735c:	480c      	ldr	r0, [pc, #48]	; (7390 <cardCommand(unsigned long, unsigned long)+0x60>)
    SDHC_MIX_CTRL &= ~SDHC_MIX_CTRL_MASK;
    SDHC_MIX_CTRL |= xfertyp & SDHC_MIX_CTRL_MASK;
  }
  xfertyp &= ~SDHC_MIX_CTRL_MASK;
#endif  // defined(__IMXRT1062__)
  SDHC_XFERTYP = xfertyp;
    735e:	60ec      	str	r4, [r5, #12]
  if (waitTimeout(isBusyCommandComplete)) {
    7360:	f7ff ff72 	bl	7248 <waitTimeout(bool (*)())>
    7364:	b968      	cbnz	r0, 7382 <cardCommand(unsigned long, unsigned long)+0x52>
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
    7366:	6b2a      	ldr	r2, [r5, #48]	; 0x30
    7368:	4b0a      	ldr	r3, [pc, #40]	; (7394 <cardCommand(unsigned long, unsigned long)+0x64>)
    736a:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    736c:	681a      	ldr	r2, [r3, #0]
    736e:	632a      	str	r2, [r5, #48]	; 0x30

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7370:	681a      	ldr	r2, [r3, #0]
    7372:	07d2      	lsls	r2, r2, #31
    7374:	d505      	bpl.n	7382 <cardCommand(unsigned long, unsigned long)+0x52>
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
    7376:	681b      	ldr	r3, [r3, #0]
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7378:	f413 2f70 	tst.w	r3, #983040	; 0xf0000
    737c:	d101      	bne.n	7382 <cardCommand(unsigned long, unsigned long)+0x52>
    737e:	2001      	movs	r0, #1
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
    7380:	bd38      	pop	{r3, r4, r5, pc}
    return false;  // Caller will set errorCode.
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
    7382:	2000      	movs	r0, #0
    7384:	bd38      	pop	{r3, r4, r5, pc}
    7386:	bf00      	nop
    7388:	000070a5 	.word	0x000070a5
    738c:	402c0000 	.word	0x402c0000
    7390:	0000708d 	.word	0x0000708d
    7394:	20036c74 	.word	0x20036c74

00007398 <isBusyCMD13()>:
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
    7398:	b508      	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    739a:	4b07      	ldr	r3, [pc, #28]	; (73b8 <isBusyCMD13()+0x20>)
    739c:	4807      	ldr	r0, [pc, #28]	; (73bc <isBusyCMD13()+0x24>)
    739e:	6819      	ldr	r1, [r3, #0]
    73a0:	f7ff ffc6 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    73a4:	b130      	cbz	r0, 73b4 <isBusyCMD13()+0x1c>
    73a6:	4b06      	ldr	r3, [pc, #24]	; (73c0 <isBusyCMD13()+0x28>)
    73a8:	6918      	ldr	r0, [r3, #16]
    73aa:	f480 7080 	eor.w	r0, r0, #256	; 0x100
    73ae:	f3c0 2000 	ubfx	r0, r0, #8, #1
    73b2:	bd08      	pop	{r3, pc}
    73b4:	2001      	movs	r0, #1
}
//------------------------------------------------------------------------------
static bool isBusyCMD13() {
  return !(statusCMD13() & CARD_STATUS_READY_FOR_DATA);
}
    73b6:	bd08      	pop	{r3, pc}
    73b8:	20036c6c 	.word	0x20036c6c
    73bc:	0d1a0000 	.word	0x0d1a0000
    73c0:	402c0000 	.word	0x402c0000

000073c4 <SdioCard::status()>:
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
    73c4:	b508      	push	{r3, lr}
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
  }
}
//------------------------------------------------------------------------------
static uint32_t statusCMD13() {
  return cardCommand(CMD13_XFERTYP, m_rca) ? SDHC_CMDRSP0 : 0;
    73c6:	4b04      	ldr	r3, [pc, #16]	; (73d8 <SdioCard::status()+0x14>)
    73c8:	4804      	ldr	r0, [pc, #16]	; (73dc <SdioCard::status()+0x18>)
    73ca:	6819      	ldr	r1, [r3, #0]
    73cc:	f7ff ffb0 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    73d0:	b108      	cbz	r0, 73d6 <SdioCard::status()+0x12>
    73d2:	4b03      	ldr	r3, [pc, #12]	; (73e0 <SdioCard::status()+0x1c>)
    73d4:	6918      	ldr	r0, [r3, #16]
  return sdCardCapacity(&m_csd);
}
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
    73d6:	bd08      	pop	{r3, pc}
    73d8:	20036c6c 	.word	0x20036c6c
    73dc:	0d1a0000 	.word	0x0d1a0000
    73e0:	402c0000 	.word	0x402c0000

000073e4 <readReg16(unsigned long, void*)>:
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    73e4:	4b14      	ldr	r3, [pc, #80]	; (7438 <readReg16(unsigned long, void*)+0x54>)
  }
  return waitDmaStatus();
}
//------------------------------------------------------------------------------
// Read 16 byte CID or CSD register.
static bool readReg16(uint32_t xfertyp, void* data) {
    73e6:	b570      	push	{r4, r5, r6, lr}
    73e8:	460e      	mov	r6, r1
    73ea:	b084      	sub	sp, #16
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    73ec:	6819      	ldr	r1, [r3, #0]
    73ee:	f7ff ff9f 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    73f2:	b1f0      	cbz	r0, 7432 <readReg16(unsigned long, void*)+0x4e>
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    73f4:	4911      	ldr	r1, [pc, #68]	; (743c <readReg16(unsigned long, void*)+0x58>)
    73f6:	f106 050f 	add.w	r5, r6, #15
  for (int i = 0; i < 15; i++) {
    73fa:	2300      	movs	r3, #0
static bool readReg16(uint32_t xfertyp, void* data) {
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
    73fc:	690a      	ldr	r2, [r1, #16]
    73fe:	9200      	str	r2, [sp, #0]
    7400:	694c      	ldr	r4, [r1, #20]
    7402:	9401      	str	r4, [sp, #4]
    7404:	698c      	ldr	r4, [r1, #24]
    7406:	9402      	str	r4, [sp, #8]
    7408:	69c9      	ldr	r1, [r1, #28]
    740a:	9103      	str	r1, [sp, #12]
    740c:	e001      	b.n	7412 <readReg16(unsigned long, void*)+0x2e>
    740e:	f854 2c10 	ldr.w	r2, [r4, #-16]
  for (int i = 0; i < 15; i++) {
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7412:	f003 0103 	and.w	r1, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    7416:	3301      	adds	r3, #1
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7418:	00c9      	lsls	r1, r1, #3
    741a:	f023 0403 	bic.w	r4, r3, #3
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    741e:	2b0f      	cmp	r3, #15
    d[14 - i] = sr[i/4] >> 8*(i%4);
    7420:	fa22 f201 	lsr.w	r2, r2, r1
    7424:	a904      	add	r1, sp, #16
    7426:	f805 2d01 	strb.w	r2, [r5, #-1]!
    742a:	440c      	add	r4, r1
  uint8_t* d = reinterpret_cast<uint8_t*>(data);
  if (!cardCommand(xfertyp, m_rca)) {
    return false;  // Caller will set errorCode.
  }
  uint32_t sr[] = {SDHC_CMDRSP0, SDHC_CMDRSP1, SDHC_CMDRSP2, SDHC_CMDRSP3};
  for (int i = 0; i < 15; i++) {
    742c:	d1ef      	bne.n	740e <readReg16(unsigned long, void*)+0x2a>
    d[14 - i] = sr[i/4] >> 8*(i%4);
  }
  d[15] = 0;
    742e:	2300      	movs	r3, #0
    7430:	73f3      	strb	r3, [r6, #15]
  return true;
}
    7432:	b004      	add	sp, #16
    7434:	bd70      	pop	{r4, r5, r6, pc}
    7436:	bf00      	nop
    7438:	20036c6c 	.word	0x20036c6c
    743c:	402c0000 	.word	0x402c0000

00007440 <waitDmaStatus() [clone .part.5]>:
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    return false;  // Caller will set errorCode.
  }
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7440:	4b05      	ldr	r3, [pc, #20]	; (7458 <waitDmaStatus() [clone .part.5]+0x18>)
    7442:	6818      	ldr	r0, [r3, #0]
    7444:	f010 0002 	ands.w	r0, r0, #2
    7448:	d005      	beq.n	7456 <waitDmaStatus() [clone .part.5]+0x16>
    744a:	681b      	ldr	r3, [r3, #0]
    744c:	4803      	ldr	r0, [pc, #12]	; (745c <waitDmaStatus() [clone .part.5]+0x1c>)
    744e:	4018      	ands	r0, r3
    7450:	fab0 f080 	clz	r0, r0
    7454:	0940      	lsrs	r0, r0, #5
}
    7456:	4770      	bx	lr
    7458:	20036c74 	.word	0x20036c74
    745c:	117f0000 	.word	0x117f0000

00007460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>:
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
}
//------------------------------------------------------------------------------
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
    7460:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7462:	f012 0403 	ands.w	r4, r2, #3
    7466:	bf18      	it	ne
    7468:	2401      	movne	r4, #1
    746a:	2b00      	cmp	r3, #0
    746c:	bf08      	it	eq
    746e:	f044 0401 	orreq.w	r4, r4, #1
  if ((3 & (uint32_t)buf) || n == 0) {
    7472:	b144      	cbz	r4, 7486 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x26>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7474:	491e      	ldr	r1, [pc, #120]	; (74f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    7476:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    7478:	4b1e      	ldr	r3, [pc, #120]	; (74f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    747a:	f240 12f7 	movw	r2, #503	; 0x1f7
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    747e:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7480:	601a      	str	r2, [r3, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    7482:	2000      	movs	r0, #0
    7484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7486:	4606      	mov	r6, r0
static bool rdWrSectors(uint32_t xfertyp,
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    7488:	481b      	ldr	r0, [pc, #108]	; (74f8 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x98>)
    748a:	461d      	mov	r5, r3
    748c:	460f      	mov	r7, r1
    748e:	4614      	mov	r4, r2
    7490:	f7ff feee 	bl	7270 <yieldTimeout(bool (*)())>
    7494:	bb10      	cbnz	r0, 74dc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x7c>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    7496:	042b      	lsls	r3, r5, #16
    7498:	4a18      	ldr	r2, [pc, #96]	; (74fc <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x9c>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    749a:	4d19      	ldr	r5, [pc, #100]	; (7500 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa0>)
    749c:	f04f 0e01 	mov.w	lr, #1
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    74a0:	401a      	ands	r2, r3
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    74a2:	4918      	ldr	r1, [pc, #96]	; (7504 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa4>)
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    74a4:	f885 e000 	strb.w	lr, [r5]
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    74a8:	4b17      	ldr	r3, [pc, #92]	; (7508 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xa8>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    74aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    74ae:	6008      	str	r0, [r1, #0]
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    74b0:	4d16      	ldr	r5, [pc, #88]	; (750c <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xac>)
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74b2:	4917      	ldr	r1, [pc, #92]	; (7510 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb0>)
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
    74b4:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
    74b6:	605a      	str	r2, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    74b8:	639d      	str	r5, [r3, #56]	; 0x38
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74ba:	780b      	ldrb	r3, [r1, #0]
    74bc:	b9b3      	cbnz	r3, 74ec <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x8c>
    74be:	0279      	lsls	r1, r7, #9
    74c0:	4630      	mov	r0, r6
    74c2:	f7ff ff35 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    74c6:	2800      	cmp	r0, #0
    74c8:	d0db      	beq.n	7482 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    74ca:	4812      	ldr	r0, [pc, #72]	; (7514 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0xb4>)
    74cc:	f7ff fed0 	bl	7270 <yieldTimeout(bool (*)())>
    74d0:	2800      	cmp	r0, #0
    74d2:	d1d6      	bne.n	7482 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    return false;
  }
  return waitDmaStatus();
}
    74d4:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    74d8:	f7ff bfb2 	b.w	7440 <waitDmaStatus() [clone .part.5]>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    74dc:	4904      	ldr	r1, [pc, #16]	; (74f0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x90>)
    74de:	200a      	movs	r0, #10
  m_errorLine = line;
    74e0:	4b04      	ldr	r3, [pc, #16]	; (74f4 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x94>)
    74e2:	f44f 72fd 	mov.w	r2, #506	; 0x1fa
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    74e6:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    74e8:	601a      	str	r2, [r3, #0]
                       uint32_t sector, uint8_t* buf, size_t n) {
  if ((3 & (uint32_t)buf) || n == 0) {
    return sdError(SD_CARD_ERROR_DMA);
  }
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    74ea:	e7ca      	b.n	7482 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x22>
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)buf;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(n) | SDHC_BLKATTR_BLKSIZE(512);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(xfertyp, m_highCapacity ? sector : 512*sector)) {
    74ec:	4639      	mov	r1, r7
    74ee:	e7e7      	b.n	74c0 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)+0x60>
    74f0:	20001124 	.word	0x20001124
    74f4:	20036c94 	.word	0x20036c94
    74f8:	00007399 	.word	0x00007399
    74fc:	1fff0000 	.word	0x1fff0000
    7500:	20036c8c 	.word	0x20036c8c
    7504:	20036c74 	.word	0x20036c74
    7508:	402c0000 	.word	0x402c0000
    750c:	117f0002 	.word	0x117f0002
    7510:	20036c64 	.word	0x20036c64
    7514:	000070c9 	.word	0x000070c9

00007518 <SdioCard::sectorCount()>:
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    7518:	4919      	ldr	r1, [pc, #100]	; (7580 <SdioCard::sectorCount()+0x68>)
//------------------------------------------------------------------------------
bool SdioCard::readStop() {
  return transferStop();
}
//------------------------------------------------------------------------------
uint32_t SdioCard::sectorCount() {
    751a:	b470      	push	{r4, r5, r6}
    751c:	780b      	ldrb	r3, [r1, #0]
    751e:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    7522:	d011      	beq.n	7548 <SdioCard::sectorCount()+0x30>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    7524:	2b40      	cmp	r3, #64	; 0x40
    7526:	d002      	beq.n	752e <SdioCard::sectorCount()+0x16>
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
  } else {
    return 0;
    7528:	2000      	movs	r0, #0
  return sdCardCapacity(&m_csd);
}
    752a:	bc70      	pop	{r4, r5, r6}
    752c:	4770      	bx	lr
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    752e:	7a4b      	ldrb	r3, [r1, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    7530:	79cc      	ldrb	r4, [r1, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    7532:	1c5a      	adds	r2, r3, #1
    7534:	7a08      	ldrb	r0, [r1, #8]
    7536:	f004 033f 	and.w	r3, r4, #63	; 0x3f
    753a:	eb02 4303 	add.w	r3, r2, r3, lsl #16
    753e:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    7542:	bc70      	pop	{r4, r5, r6}
    7544:	0280      	lsls	r0, r0, #10
    7546:	4770      	bx	lr
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    7548:	7a4d      	ldrb	r5, [r1, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    754a:	798b      	ldrb	r3, [r1, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    754c:	79ca      	ldrb	r2, [r1, #7]
    754e:	f005 0503 	and.w	r5, r5, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    7552:	7a88      	ldrb	r0, [r1, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7554:	f003 0303 	and.w	r3, r3, #3
    7558:	006d      	lsls	r5, r5, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    755a:	794c      	ldrb	r4, [r1, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    755c:	0092      	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    755e:	7a0e      	ldrb	r6, [r1, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    7560:	ea45 10d0 	orr.w	r0, r5, r0, lsr #7
    7564:	f004 010f 	and.w	r1, r4, #15
    7568:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
    756c:	4408      	add	r0, r1
    756e:	ea43 1396 	orr.w	r3, r3, r6, lsr #6
    7572:	3807      	subs	r0, #7
    7574:	3301      	adds	r3, #1
    7576:	bc70      	pop	{r4, r5, r6}
    7578:	fa03 f000 	lsl.w	r0, r3, r0
    757c:	4770      	bx	lr
    757e:	bf00      	nop
    7580:	20036c7c 	.word	0x20036c7c

00007584 <SdioCard::isBusy()>:
  return m_errorLine;
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    7584:	7a03      	ldrb	r3, [r0, #8]
    7586:	07db      	lsls	r3, r3, #31
    7588:	d503      	bpl.n	7592 <SdioCard::isBusy()+0xe>
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    758a:	4b0e      	ldr	r3, [pc, #56]	; (75c4 <SdioCard::isBusy()+0x40>)
    758c:	681b      	ldr	r3, [r3, #0]
    758e:	b193      	cbz	r3, 75b6 <SdioCard::isBusy()+0x32>
    7590:	4718      	bx	r3
  } else {
    if (m_transferActive) {
    7592:	4b0d      	ldr	r3, [pc, #52]	; (75c8 <SdioCard::isBusy()+0x44>)
    7594:	781b      	ldrb	r3, [r3, #0]
    7596:	b933      	cbnz	r3, 75a6 <SdioCard::isBusy()+0x22>
#else  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
      return false;
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    }
    // Use DAT0 low as busy.
    return SDHC_PRSSTAT & (1 << 24) ? false : true;
    7598:	4b0c      	ldr	r3, [pc, #48]	; (75cc <SdioCard::isBusy()+0x48>)
    759a:	6a58      	ldr	r0, [r3, #36]	; 0x24
    759c:	f080 7080 	eor.w	r0, r0, #16777216	; 0x1000000
    75a0:	f3c0 6000 	ubfx	r0, r0, #24, #1
  }
#else  // ENABLE_TEENSY_SDIO_MOD
  return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    75a4:	4770      	bx	lr
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    75a6:	4b09      	ldr	r3, [pc, #36]	; (75cc <SdioCard::isBusy()+0x48>)
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    75a8:	4809      	ldr	r0, [pc, #36]	; (75d0 <SdioCard::isBusy()+0x4c>)
static bool isBusyFifoWrite() {
  return !(SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN);
}
//------------------------------------------------------------------------------
static bool isBusyTransferComplete() {
  return !(SDHC_IRQSTAT & (SDHC_IRQSTAT_TC | SDHC_IRQSTAT_ERROR));
    75aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
  } else {
    if (m_transferActive) {
      if (isBusyTransferComplete()) {
    75ac:	4018      	ands	r0, r3
    75ae:	fab0 f080 	clz	r0, r0
    75b2:	0940      	lsrs	r0, r0, #5
    75b4:	4770      	bx	lr
}
//------------------------------------------------------------------------------
bool SdioCard::isBusy() {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_sdioConfig.useDma()) {
    return m_busyFcn ? m_busyFcn() : m_initDone && isBusyCMD13();
    75b6:	4b07      	ldr	r3, [pc, #28]	; (75d4 <SdioCard::isBusy()+0x50>)
    75b8:	7818      	ldrb	r0, [r3, #0]
    75ba:	2800      	cmp	r0, #0
    75bc:	d0f2      	beq.n	75a4 <SdioCard::isBusy()+0x20>
    75be:	f7ff beeb 	b.w	7398 <isBusyCMD13()>
    75c2:	bf00      	nop
    75c4:	20036c60 	.word	0x20036c60
    75c8:	20036c70 	.word	0x20036c70
    75cc:	402c0000 	.word	0x402c0000
    75d0:	117f0002 	.word	0x117f0002
    75d4:	20036c78 	.word	0x20036c78

000075d8 <SdioCard::erase(unsigned long, unsigned long)>:
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    75d8:	b570      	push	{r4, r5, r6, lr}
    75da:	4616      	mov	r6, r2
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    75dc:	7a42      	ldrb	r2, [r0, #9]
  enableGPIO(true);
  m_initDone = true;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
    75de:	460d      	mov	r5, r1
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    75e0:	bb6a      	cbnz	r2, 763e <SdioCard::erase(unsigned long, unsigned long)+0x66>
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    75e2:	4a30      	ldr	r2, [pc, #192]	; (76a4 <SdioCard::erase(unsigned long, unsigned long)+0xcc>)
    75e4:	7a93      	ldrb	r3, [r2, #10]
    75e6:	f003 0040 	and.w	r0, r3, #64	; 0x40
    75ea:	f000 04ff 	and.w	r4, r0, #255	; 0xff
    75ee:	b198      	cbz	r0, 7618 <SdioCard::erase(unsigned long, unsigned long)+0x40>
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
      // error card can't erase specified area
      return sdError(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
    }
  }
  if (!m_highCapacity) {
    75f0:	4b2d      	ldr	r3, [pc, #180]	; (76a8 <SdioCard::erase(unsigned long, unsigned long)+0xd0>)
    75f2:	781b      	ldrb	r3, [r3, #0]
    75f4:	b90b      	cbnz	r3, 75fa <SdioCard::erase(unsigned long, unsigned long)+0x22>
    firstSector <<= 9;
    75f6:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    75f8:	0276      	lsls	r6, r6, #9
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    75fa:	4629      	mov	r1, r5
    75fc:	482b      	ldr	r0, [pc, #172]	; (76ac <SdioCard::erase(unsigned long, unsigned long)+0xd4>)
    75fe:	f7ff fe97 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7602:	4604      	mov	r4, r0
    7604:	bb18      	cbnz	r0, 764e <SdioCard::erase(unsigned long, unsigned long)+0x76>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7606:	492a      	ldr	r1, [pc, #168]	; (76b0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    7608:	200f      	movs	r0, #15
  m_errorLine = line;
    760a:	4b2a      	ldr	r3, [pc, #168]	; (76b4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    760c:	f44f 723c 	mov.w	r2, #752	; 0x2f0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7610:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7612:	601a      	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7614:	4620      	mov	r0, r4
    7616:	bd70      	pop	{r4, r5, r6, pc}
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    7618:	f003 033f 	and.w	r3, r3, #63	; 0x3f
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  // check for single sector erase
  if (!m_csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (m_csd.v1.sector_size_high << 1) | m_csd.v1.sector_size_low;
    761c:	7ad1      	ldrb	r1, [r2, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    761e:	1c72      	adds	r2, r6, #1
    7620:	005b      	lsls	r3, r3, #1
    7622:	432a      	orrs	r2, r5
    7624:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    7628:	4213      	tst	r3, r2
    762a:	d0e1      	beq.n	75f0 <SdioCard::erase(unsigned long, unsigned long)+0x18>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    762c:	4920      	ldr	r1, [pc, #128]	; (76b0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    762e:	2027      	movs	r0, #39	; 0x27
  m_errorLine = line;
    7630:	4b20      	ldr	r3, [pc, #128]	; (76b4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    7632:	f44f 723a 	mov.w	r2, #744	; 0x2e8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7636:	7008      	strb	r0, [r1, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    7638:	4620      	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    763a:	601a      	str	r2, [r3, #0]
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    763c:	bd70      	pop	{r4, r5, r6, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::erase(uint32_t firstSector, uint32_t lastSector) {
#if ENABLE_TEENSY_SDIO_MOD
  if (m_curState != IDLE_STATE && !syncDevice()) {
    763e:	6803      	ldr	r3, [r0, #0]
    7640:	699b      	ldr	r3, [r3, #24]
    7642:	4798      	blx	r3
    7644:	4604      	mov	r4, r0
    7646:	2800      	cmp	r0, #0
    7648:	d1cb      	bne.n	75e2 <SdioCard::erase(unsigned long, unsigned long)+0xa>
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
  }
  return true;
}
    764a:	4620      	mov	r0, r4
    764c:	bd70      	pop	{r4, r5, r6, pc}
    lastSector <<= 9;
  }
  if (!cardCommand(CMD32_XFERTYP, firstSector)) {
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
    764e:	4631      	mov	r1, r6
    7650:	4819      	ldr	r0, [pc, #100]	; (76b8 <SdioCard::erase(unsigned long, unsigned long)+0xe0>)
    7652:	f7ff fe6d 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7656:	4604      	mov	r4, r0
    7658:	b938      	cbnz	r0, 766a <SdioCard::erase(unsigned long, unsigned long)+0x92>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    765a:	4915      	ldr	r1, [pc, #84]	; (76b0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    765c:	2010      	movs	r0, #16
  m_errorLine = line;
    765e:	4b15      	ldr	r3, [pc, #84]	; (76b4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    7660:	f240 22f3 	movw	r2, #755	; 0x2f3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7664:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7666:	601a      	str	r2, [r3, #0]
    7668:	e7d4      	b.n	7614 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    return sdError(SD_CARD_ERROR_CMD32);
  }
  if (!cardCommand(CMD33_XFERTYP, lastSector)) {
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    766a:	2100      	movs	r1, #0
    766c:	4813      	ldr	r0, [pc, #76]	; (76bc <SdioCard::erase(unsigned long, unsigned long)+0xe4>)
    766e:	f7ff fe5f 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7672:	4604      	mov	r4, r0
    7674:	b938      	cbnz	r0, 7686 <SdioCard::erase(unsigned long, unsigned long)+0xae>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7676:	490e      	ldr	r1, [pc, #56]	; (76b0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    7678:	2011      	movs	r0, #17
  m_errorLine = line;
    767a:	4b0e      	ldr	r3, [pc, #56]	; (76b4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    767c:	f240 22f6 	movw	r2, #758	; 0x2f6
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7680:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7682:	601a      	str	r2, [r3, #0]
    7684:	e7c6      	b.n	7614 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
     return sdError(SD_CARD_ERROR_CMD33);
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    7686:	480e      	ldr	r0, [pc, #56]	; (76c0 <SdioCard::erase(unsigned long, unsigned long)+0xe8>)
    7688:	f7ff fdde 	bl	7248 <waitTimeout(bool (*)())>
    768c:	2800      	cmp	r0, #0
    768e:	d0c1      	beq.n	7614 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7690:	4907      	ldr	r1, [pc, #28]	; (76b0 <SdioCard::erase(unsigned long, unsigned long)+0xd8>)
    7692:	2028      	movs	r0, #40	; 0x28
  m_errorLine = line;
    7694:	4b07      	ldr	r3, [pc, #28]	; (76b4 <SdioCard::erase(unsigned long, unsigned long)+0xdc>)
    7696:	f240 22f9 	movw	r2, #761	; 0x2f9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    769a:	7008      	strb	r0, [r1, #0]
  }
  if (!cardCommand(CMD38_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD38);
  }
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_ERASE_TIMEOUT);
    769c:	2400      	movs	r4, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    769e:	601a      	str	r2, [r3, #0]
    76a0:	e7b8      	b.n	7614 <SdioCard::erase(unsigned long, unsigned long)+0x3c>
    76a2:	bf00      	nop
    76a4:	20036c7c 	.word	0x20036c7c
    76a8:	20036c64 	.word	0x20036c64
    76ac:	201a0000 	.word	0x201a0000
    76b0:	20001124 	.word	0x20001124
    76b4:	20036c94 	.word	0x20036c94
    76b8:	211a0000 	.word	0x211a0000
    76bc:	261b0000 	.word	0x261b0000
    76c0:	00007399 	.word	0x00007399

000076c4 <waitTransferComplete() [clone .part.10]>:
  }
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
    76c4:	b510      	push	{r4, lr}
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    76c6:	480e      	ldr	r0, [pc, #56]	; (7700 <waitTransferComplete() [clone .part.10]+0x3c>)
  m_transferActive = false;
    76c8:	2400      	movs	r4, #0
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
    76ca:	f7ff fdbd 	bl	7248 <waitTimeout(bool (*)())>
  m_transferActive = false;
    76ce:	490d      	ldr	r1, [pc, #52]	; (7704 <waitTransferComplete() [clone .part.10]+0x40>)
  m_irqstat = SDHC_IRQSTAT;
    76d0:	4a0d      	ldr	r2, [pc, #52]	; (7708 <waitTransferComplete() [clone .part.10]+0x44>)
    76d2:	4b0e      	ldr	r3, [pc, #56]	; (770c <waitTransferComplete() [clone .part.10]+0x48>)
static bool waitTransferComplete() {
  if (!m_transferActive) {
    return true;
  }
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
    76d4:	700c      	strb	r4, [r1, #0]
  m_irqstat = SDHC_IRQSTAT;
    76d6:	6b11      	ldr	r1, [r2, #48]	; 0x30
    76d8:	6019      	str	r1, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    76da:	6819      	ldr	r1, [r3, #0]
    76dc:	6311      	str	r1, [r2, #48]	; 0x30
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    76de:	b918      	cbnz	r0, 76e8 <waitTransferComplete() [clone .part.10]+0x24>
    76e0:	681a      	ldr	r2, [r3, #0]
    76e2:	4b0b      	ldr	r3, [pc, #44]	; (7710 <waitTransferComplete() [clone .part.10]+0x4c>)
    76e4:	4013      	ands	r3, r2
    76e6:	b143      	cbz	r3, 76fa <waitTransferComplete() [clone .part.10]+0x36>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76e8:	490a      	ldr	r1, [pc, #40]	; (7714 <waitTransferComplete() [clone .part.10]+0x50>)
    76ea:	241f      	movs	r4, #31
  m_errorLine = line;
    76ec:	4b0a      	ldr	r3, [pc, #40]	; (7718 <waitTransferComplete() [clone .part.10]+0x54>)
    76ee:	f240 227e 	movw	r2, #638	; 0x27e
  bool timeOut = waitTimeout(isBusyTransferComplete);
  m_transferActive = false;
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
    76f2:	2000      	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    76f4:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    76f6:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
}
    76f8:	bd10      	pop	{r4, pc}
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  if (timeOut || (m_irqstat & SDHC_IRQSTAT_ERROR)) {
    return sdError(SD_CARD_ERROR_TRANSFER_COMPLETE);
  }
  return true;
    76fa:	2001      	movs	r0, #1
    76fc:	bd10      	pop	{r4, pc}
    76fe:	bf00      	nop
    7700:	000070fd 	.word	0x000070fd
    7704:	20036c70 	.word	0x20036c70
    7708:	402c0000 	.word	0x402c0000
    770c:	20036c74 	.word	0x20036c74
    7710:	117f0000 	.word	0x117f0000
    7714:	20001124 	.word	0x20001124
    7718:	20036c94 	.word	0x20036c94

0000771c <SdioCard::readStop()>:
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
    771c:	b538      	push	{r3, r4, r5, lr}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    771e:	4c18      	ldr	r4, [pc, #96]	; (7780 <SdioCard::readStop()+0x64>)
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    7720:	2100      	movs	r1, #0
    7722:	4818      	ldr	r0, [pc, #96]	; (7784 <SdioCard::readStop()+0x68>)
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
}
//------------------------------------------------------------------------------
static bool transferStop() {
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7724:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    7726:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    772a:	62a3      	str	r3, [r4, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    772c:	f7ff fe00 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7730:	4605      	mov	r5, r0
    7732:	b940      	cbnz	r0, 7746 <SdioCard::readStop()+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7734:	4914      	ldr	r1, [pc, #80]	; (7788 <SdioCard::readStop()+0x6c>)
    7736:	2009      	movs	r0, #9
  m_errorLine = line;
    7738:	4b14      	ldr	r3, [pc, #80]	; (778c <SdioCard::readStop()+0x70>)
    773a:	f240 223f 	movw	r2, #575	; 0x23f
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    773e:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    7740:	601a      	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7742:	4628      	mov	r0, r5
    7744:	bd38      	pop	{r3, r4, r5, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    7746:	4812      	ldr	r0, [pc, #72]	; (7790 <SdioCard::readStop()+0x74>)
    7748:	f7ff fd92 	bl	7270 <yieldTimeout(bool (*)())>
    774c:	b970      	cbnz	r0, 776c <SdioCard::readStop()+0x50>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    774e:	6a63      	ldr	r3, [r4, #36]	; 0x24
    7750:	079b      	lsls	r3, r3, #30
    7752:	d5f6      	bpl.n	7742 <SdioCard::readStop()+0x26>
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    7754:	6b61      	ldr	r1, [r4, #52]	; 0x34
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    7756:	4628      	mov	r0, r5
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    7758:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    775a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
  }
  if (SDHC_PRSSTAT & SDHC_PRSSTAT_CDIHB) {
    // This should not happen after above fix.
    // Save registers before reset DAT lines.
    uint32_t irqsststen = SDHC_IRQSTATEN;
    uint32_t proctl = SDHC_PROCTL & ~SDHC_PROCTL_SABGREQ;
    775c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    // Do reset to clear CDIHB.  Should be a better way!
    SDHC_SYSCTL |= SDHC_SYSCTL_RSTD;
    7760:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
    7764:	62e2      	str	r2, [r4, #44]	; 0x2c
    // Restore registers.
    SDHC_IRQSTATEN = irqsststen;
    7766:	6361      	str	r1, [r4, #52]	; 0x34
    SDHC_PROCTL = proctl;
    7768:	62a3      	str	r3, [r4, #40]	; 0x28
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    776a:	bd38      	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    776c:	4906      	ldr	r1, [pc, #24]	; (7788 <SdioCard::readStop()+0x6c>)
    776e:	200a      	movs	r0, #10
  m_errorLine = line;
    7770:	4b06      	ldr	r3, [pc, #24]	; (778c <SdioCard::readStop()+0x70>)
    7772:	f240 2243 	movw	r2, #579	; 0x243
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
//  if (yieldTimeout(isBusyCMD13)) {
  if (yieldTimeout(isBusyDat)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7776:	2500      	movs	r5, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7778:	7008      	strb	r0, [r1, #0]
  m_errorLine = line;
    777a:	601a      	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStop() {
  return transferStop();
}
    777c:	4628      	mov	r0, r5
    777e:	bd38      	pop	{r3, r4, r5, pc}
    7780:	402c0000 	.word	0x402c0000
    7784:	0cdb0000 	.word	0x0cdb0000
    7788:	20001124 	.word	0x20001124
    778c:	20036c94 	.word	0x20036c94
    7790:	000070b5 	.word	0x000070b5

00007794 <SdioCard::writeData(unsigned char const*)>:
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7794:	b570      	push	{r4, r5, r6, lr}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    7796:	4e1e      	ldr	r6, [pc, #120]	; (7810 <SdioCard::writeData(unsigned char const*)+0x7c>)
uint8_t SdioCard::type() const {
  return  m_version2 ? m_highCapacity ?
          SD_CARD_TYPE_SDHC : SD_CARD_TYPE_SD2 : SD_CARD_TYPE_SD1;
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
    7798:	460d      	mov	r5, r1
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    779a:	7833      	ldrb	r3, [r6, #0]
    779c:	2b00      	cmp	r3, #0
    779e:	d131      	bne.n	7804 <SdioCard::writeData(unsigned char const*)+0x70>
  if (!waitTransferComplete()) {
    return false;
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    77a0:	4b1c      	ldr	r3, [pc, #112]	; (7814 <SdioCard::writeData(unsigned char const*)+0x80>)
    77a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    77a4:	05d1      	lsls	r1, r2, #23
    77a6:	d407      	bmi.n	77b8 <SdioCard::writeData(unsigned char const*)+0x24>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    77a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    77aa:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    77ae:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    77b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    77b2:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    77b6:	629a      	str	r2, [r3, #40]	; 0x28
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    77b8:	4c16      	ldr	r4, [pc, #88]	; (7814 <SdioCard::writeData(unsigned char const*)+0x80>)
  if (waitTimeout(isBusyFifoWrite)) {
    77ba:	4817      	ldr	r0, [pc, #92]	; (7818 <SdioCard::writeData(unsigned char const*)+0x84>)
  const uint32_t* p32 = reinterpret_cast<const uint32_t*>(src);
  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_WTA)) {
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    77bc:	6aa3      	ldr	r3, [r4, #40]	; 0x28
    77be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
    77c2:	62a3      	str	r3, [r4, #40]	; 0x28
  if (waitTimeout(isBusyFifoWrite)) {
    77c4:	f7ff fd40 	bl	7248 <waitTimeout(bool (*)())>
    77c8:	b998      	cbnz	r0, 77f2 <SdioCard::writeData(unsigned char const*)+0x5e>
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    77ca:	4620      	mov	r0, r4
    77cc:	1f2b      	subs	r3, r5, #4
    77ce:	f505 74fe 	add.w	r4, r5, #508	; 0x1fc
    77d2:	6a42      	ldr	r2, [r0, #36]	; 0x24
    77d4:	0552      	lsls	r2, r2, #21
    77d6:	d5fc      	bpl.n	77d2 <SdioCard::writeData(unsigned char const*)+0x3e>
    77d8:	f103 0140 	add.w	r1, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      SDHC_DATPORT = p32[i];
    77dc:	f853 2f04 	ldr.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    77e0:	4299      	cmp	r1, r3
      SDHC_DATPORT = p32[i];
    77e2:	6202      	str	r2, [r0, #32]
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BWEN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    77e4:	d1fa      	bne.n	77dc <SdioCard::writeData(unsigned char const*)+0x48>
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    77e6:	428c      	cmp	r4, r1
    77e8:	460b      	mov	r3, r1
    77ea:	d1f2      	bne.n	77d2 <SdioCard::writeData(unsigned char const*)+0x3e>
      SDHC_DATPORT = p32[i];
    }
    p32 += FIFO_WML;
  }
#if ENABLE_TEENSY_SDIO_MOD
  m_transferActive = true;
    77ec:	2001      	movs	r0, #1
    77ee:	7030      	strb	r0, [r6, #0]
    77f0:	bd70      	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77f2:	490a      	ldr	r1, [pc, #40]	; (781c <SdioCard::writeData(unsigned char const*)+0x88>)
    77f4:	2421      	movs	r4, #33	; 0x21
  m_errorLine = line;
    77f6:	4b0a      	ldr	r3, [pc, #40]	; (7820 <SdioCard::writeData(unsigned char const*)+0x8c>)
    77f8:	f44f 727d 	mov.w	r2, #1012	; 0x3f4
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
  if (waitTimeout(isBusyFifoWrite)) {
    return sdError(SD_CARD_ERROR_WRITE_FIFO);
    77fc:	2000      	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    77fe:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7800:	601a      	str	r2, [r3, #0]
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    7802:	bd70      	pop	{r4, r5, r6, pc}
    7804:	f7ff ff5e 	bl	76c4 <waitTransferComplete() [clone .part.10]>
}
//------------------------------------------------------------------------------
bool SdioCard::writeData(const uint8_t* src) {
  DBG_IRQSTAT();
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    7808:	2800      	cmp	r0, #0
    780a:	d1c9      	bne.n	77a0 <SdioCard::writeData(unsigned char const*)+0xc>
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
    780c:	bd70      	pop	{r4, r5, r6, pc}
    780e:	bf00      	nop
    7810:	20036c70 	.word	0x20036c70
    7814:	402c0000 	.word	0x402c0000
    7818:	000070e9 	.word	0x000070e9
    781c:	20001124 	.word	0x20001124
    7820:	20036c94 	.word	0x20036c94

00007824 <SdioCard::writeStart(unsigned long)>:
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7824:	b510      	push	{r4, lr}
  if (yieldTimeout(isBusyCMD13)) {
    7826:	4814      	ldr	r0, [pc, #80]	; (7878 <SdioCard::writeStart(unsigned long)+0x54>)
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
    7828:	460c      	mov	r4, r1
  if (yieldTimeout(isBusyCMD13)) {
    782a:	f7ff fd21 	bl	7270 <yieldTimeout(bool (*)())>
    782e:	b9c8      	cbnz	r0, 7864 <SdioCard::writeStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7830:	4b12      	ldr	r3, [pc, #72]	; (787c <SdioCard::writeStart(unsigned long)+0x58>)

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    7832:	f44f 7000 	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7836:	4912      	ldr	r1, [pc, #72]	; (7880 <SdioCard::writeStart(unsigned long)+0x5c>)
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7838:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    783a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    783e:	629a      	str	r2, [r3, #40]	; 0x28

#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    7840:	6058      	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7842:	780b      	ldrb	r3, [r1, #0]
    7844:	b963      	cbnz	r3, 7860 <SdioCard::writeStart(unsigned long)+0x3c>
    7846:	0261      	lsls	r1, r4, #9
    7848:	480e      	ldr	r0, [pc, #56]	; (7884 <SdioCard::writeStart(unsigned long)+0x60>)
    784a:	f7ff fd71 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    784e:	b930      	cbnz	r0, 785e <SdioCard::writeStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7850:	490d      	ldr	r1, [pc, #52]	; (7888 <SdioCard::writeStart(unsigned long)+0x64>)
    7852:	240e      	movs	r4, #14
  m_errorLine = line;
    7854:	4b0d      	ldr	r3, [pc, #52]	; (788c <SdioCard::writeStart(unsigned long)+0x68>)
    7856:	f44f 628d 	mov.w	r2, #1128	; 0x468
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    785a:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    785c:	601a      	str	r2, [r3, #0]
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD25);
  }
  return true;
}
    785e:	bd10      	pop	{r4, pc}
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)
  if (!cardCommand(CMD25_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7860:	4621      	mov	r1, r4
    7862:	e7f1      	b.n	7848 <SdioCard::writeStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7864:	4908      	ldr	r1, [pc, #32]	; (7888 <SdioCard::writeStart(unsigned long)+0x64>)
    7866:	200a      	movs	r0, #10
  m_errorLine = line;
    7868:	4b08      	ldr	r3, [pc, #32]	; (788c <SdioCard::writeStart(unsigned long)+0x68>)
    786a:	f240 425c 	movw	r2, #1116	; 0x45c
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    786e:	7008      	strb	r0, [r1, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7870:	2000      	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7872:	601a      	str	r2, [r3, #0]
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeStart(uint32_t sector) {
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7874:	bd10      	pop	{r4, pc}
    7876:	bf00      	nop
    7878:	00007399 	.word	0x00007399
    787c:	402c0000 	.word	0x402c0000
    7880:	20036c64 	.word	0x20036c64
    7884:	193a0020 	.word	0x193a0020
    7888:	20001124 	.word	0x20001124
    788c:	20036c94 	.word	0x20036c94

00007890 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7892:	4606      	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    7894:	7a00      	ldrb	r0, [r0, #8]
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    7896:	460c      	mov	r4, r1
    7898:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    789a:	07c0      	lsls	r0, r0, #31
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
    789c:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    789e:	d413      	bmi.n	78c8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
      return sdError(SD_CARD_ERROR_CMD25);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    78a0:	b183      	cbz	r3, 78c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    78a2:	440f      	add	r7, r1
    78a4:	e001      	b.n	78aa <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1a>
    78a6:	42bc      	cmp	r4, r7
    78a8:	d00c      	beq.n	78c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
      if (!writeSector(sector + i, src + i*512UL)) {
    78aa:	6833      	ldr	r3, [r6, #0]
    78ac:	462a      	mov	r2, r5
    78ae:	4621      	mov	r1, r4
    78b0:	4630      	mov	r0, r6
    78b2:	69db      	ldr	r3, [r3, #28]
    78b4:	f505 7500 	add.w	r5, r5, #512	; 0x200
    78b8:	3401      	adds	r4, #1
    78ba:	4798      	blx	r3
    78bc:	2800      	cmp	r0, #0
    78be:	d1f2      	bne.n	78a6 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x16>
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
        if (!writeSector(sector, ptr)) {
          return false;  // writeSector will set errorCode.
    78c0:	2000      	movs	r0, #0
    78c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (!writeSector(sector + i, src + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    78c4:	2001      	movs	r0, #1
    78c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
    78c8:	0790      	lsls	r0, r2, #30
    78ca:	d012      	beq.n	78f2 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    78cc:	2b00      	cmp	r3, #0
    78ce:	d0f9      	beq.n	78c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
    78d0:	440f      	add	r7, r1
    78d2:	e001      	b.n	78d8 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x48>
    78d4:	42a7      	cmp	r7, r4
    78d6:	d0f5      	beq.n	78c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
        if (!writeSector(sector, ptr)) {
    78d8:	6833      	ldr	r3, [r6, #0]
    78da:	462a      	mov	r2, r5
    78dc:	4621      	mov	r1, r4
    78de:	4630      	mov	r0, r6
    78e0:	69db      	ldr	r3, [r3, #28]
//------------------------------------------------------------------------------
bool SdioCard::writeSectors(uint32_t sector, const uint8_t* src, size_t n) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr = const_cast<uint8_t*>(src);
    if (3 & (uint32_t)ptr) {
      for (size_t i = 0; i < n; i++, sector++, ptr += 512) {
    78e2:	f505 7500 	add.w	r5, r5, #512	; 0x200
    78e6:	3401      	adds	r4, #1
        if (!writeSector(sector, ptr)) {
    78e8:	4798      	blx	r3
    78ea:	2800      	cmp	r0, #0
    78ec:	d1f2      	bne.n	78d4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x44>
          return false;  // writeSector will set errorCode.
    78ee:	2000      	movs	r0, #0
    78f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD25_DMA_XFERTYP, sector, ptr, n)) {
    78f2:	4806      	ldr	r0, [pc, #24]	; (790c <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x7c>)
    78f4:	f7ff fdb4 	bl	7460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    78f8:	2800      	cmp	r0, #0
    78fa:	d1e3      	bne.n	78c4 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    78fc:	4904      	ldr	r1, [pc, #16]	; (7910 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x80>)
    78fe:	240e      	movs	r4, #14
  m_errorLine = line;
    7900:	4b04      	ldr	r3, [pc, #16]	; (7914 <SdioCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x84>)
    7902:	f240 424e 	movw	r2, #1102	; 0x44e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7906:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7908:	601a      	str	r2, [r3, #0]
    790a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    790c:	193a0027 	.word	0x193a0027
    7910:	20001124 	.word	0x20001124
    7914:	20036c94 	.word	0x20036c94

00007918 <SdioCard::writeSector(unsigned long, unsigned char const*)>:
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    7918:	b570      	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    791a:	7a03      	ldrb	r3, [r0, #8]
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
#endif  // ENABLE_TEENSY_SDIO_MOD
}
//------------------------------------------------------------------------------
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
    791c:	4615      	mov	r5, r2
    791e:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    7922:	460e      	mov	r6, r1
  if (m_sdioConfig.useDma()) {
    7924:	07da      	lsls	r2, r3, #31
    7926:	d519      	bpl.n	795c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x44>
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
    7928:	07ab      	lsls	r3, r5, #30
    792a:	d006      	beq.n	793a <SdioCard::writeSector(unsigned long, unsigned char const*)+0x22>
      ptr = aligned;
      memcpy(aligned, src, 512);
    792c:	4629      	mov	r1, r5
    792e:	f44f 7200 	mov.w	r2, #512	; 0x200
    7932:	4668      	mov	r0, sp
bool SdioCard::writeSector(uint32_t sector, const uint8_t* src) {
  if (m_sdioConfig.useDma()) {
    uint8_t* ptr;
    uint8_t aligned[512];
    if (3 & (uint32_t)src) {
      ptr = aligned;
    7934:	466d      	mov	r5, sp
      memcpy(aligned, src, 512);
    7936:	f001 f88d 	bl	8a54 <memcpy>
    } else {
      ptr = const_cast<uint8_t*>(src);
    }
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
    793a:	462a      	mov	r2, r5
    793c:	4631      	mov	r1, r6
    793e:	2301      	movs	r3, #1
    7940:	4821      	ldr	r0, [pc, #132]	; (79c8 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb0>)
    7942:	f7ff fd8d 	bl	7460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7946:	b930      	cbnz	r0, 7956 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7948:	4920      	ldr	r1, [pc, #128]	; (79cc <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb4>)
    794a:	240d      	movs	r4, #13
  m_errorLine = line;
    794c:	4b20      	ldr	r3, [pc, #128]	; (79d0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xb8>)
    794e:	f240 4216 	movw	r2, #1046	; 0x416
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7952:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7954:	601a      	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    7956:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    795a:	bd70      	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    795c:	4b1d      	ldr	r3, [pc, #116]	; (79d4 <SdioCard::writeSector(unsigned long, unsigned char const*)+0xbc>)
    795e:	4604      	mov	r4, r0
    7960:	781b      	ldrb	r3, [r3, #0]
    7962:	b9ab      	cbnz	r3, 7990 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x78>
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    7964:	7a63      	ldrb	r3, [r4, #9]
    7966:	2b02      	cmp	r3, #2
    7968:	d008      	beq.n	797c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x64>
      if (!syncDevice()) {
    796a:	6823      	ldr	r3, [r4, #0]
    796c:	4620      	mov	r0, r4
    796e:	699b      	ldr	r3, [r3, #24]
    7970:	4798      	blx	r3
    7972:	b998      	cbnz	r0, 799c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    7974:	2000      	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // !ENABLE_TEENSY_SDIO_MOD
  }
  return true;
}
    7976:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    797a:	bd70      	pop	{r4, r5, r6, pc}
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
    797c:	6863      	ldr	r3, [r4, #4]
    797e:	429e      	cmp	r6, r3
    7980:	d016      	beq.n	79b0 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x98>
      if (!syncDevice()) {
    7982:	6823      	ldr	r3, [r4, #0]
    7984:	4620      	mov	r0, r4
    7986:	699b      	ldr	r3, [r3, #24]
    7988:	4798      	blx	r3
    798a:	2800      	cmp	r0, #0
    798c:	d0f2      	beq.n	7974 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
    798e:	e005      	b.n	799c <SdioCard::writeSector(unsigned long, unsigned char const*)+0x84>
    7990:	f7ff fe98 	bl	76c4 <waitTransferComplete() [clone .part.10]>
    if (!rdWrSectors(CMD24_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD24);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    7994:	2800      	cmp	r0, #0
    7996:	d1e5      	bne.n	7964 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x4c>
      return false;
    7998:	2000      	movs	r0, #0
    799a:	e7ec      	b.n	7976 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5e>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != WRITE_STATE || m_curSector != sector) {
      if (!syncDevice()) {
        return false;
      }
      if (!writeStart(sector )) {
    799c:	6823      	ldr	r3, [r4, #0]
    799e:	4631      	mov	r1, r6
    79a0:	4620      	mov	r0, r4
    79a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    79a4:	4798      	blx	r3
    79a6:	2800      	cmp	r0, #0
    79a8:	d0e4      	beq.n	7974 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
        return false;
      }
      m_curSector = sector;
      m_curState = WRITE_STATE;
    79aa:	2302      	movs	r3, #2
        return false;
      }
      if (!writeStart(sector )) {
        return false;
      }
      m_curSector = sector;
    79ac:	6066      	str	r6, [r4, #4]
      m_curState = WRITE_STATE;
    79ae:	7263      	strb	r3, [r4, #9]
    }
    if (!writeData(src)) {
    79b0:	6823      	ldr	r3, [r4, #0]
    79b2:	4629      	mov	r1, r5
    79b4:	4620      	mov	r0, r4
    79b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
    79b8:	4798      	blx	r3
    79ba:	2800      	cmp	r0, #0
    79bc:	d0da      	beq.n	7974 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x5c>
      return false;
    }
    m_curSector++;
    79be:	6863      	ldr	r3, [r4, #4]
    79c0:	3301      	adds	r3, #1
    79c2:	6063      	str	r3, [r4, #4]
    79c4:	e7c7      	b.n	7956 <SdioCard::writeSector(unsigned long, unsigned char const*)+0x3e>
    79c6:	bf00      	nop
    79c8:	183a0001 	.word	0x183a0001
    79cc:	20001124 	.word	0x20001124
    79d0:	20036c94 	.word	0x20036c94
    79d4:	20036c70 	.word	0x20036c70

000079d8 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    79d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    79da:	4606      	mov	r6, r0
  if (m_sdioConfig.useDma()) {
    79dc:	7a00      	ldrb	r0, [r0, #8]
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    79de:	460c      	mov	r4, r1
    79e0:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    79e2:	07c0      	lsls	r0, r0, #31
    m_curSector++;
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
    79e4:	461f      	mov	r7, r3
  if (m_sdioConfig.useDma()) {
    79e6:	d413      	bmi.n	7a10 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x38>
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
      return sdError(SD_CARD_ERROR_CMD18);
    }
  } else {
    for (size_t i = 0; i < n; i++) {
    79e8:	b183      	cbz	r3, 7a0c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    79ea:	440f      	add	r7, r1
    79ec:	e001      	b.n	79f2 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x1a>
    79ee:	42bc      	cmp	r4, r7
    79f0:	d00c      	beq.n	7a0c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
      if (!readSector(sector + i, dst + i*512UL)) {
    79f2:	6833      	ldr	r3, [r6, #0]
    79f4:	462a      	mov	r2, r5
    79f6:	4621      	mov	r1, r4
    79f8:	4630      	mov	r0, r6
    79fa:	68db      	ldr	r3, [r3, #12]
    79fc:	f505 7500 	add.w	r5, r5, #512	; 0x200
    7a00:	3401      	adds	r4, #1
    7a02:	4798      	blx	r3
    7a04:	2800      	cmp	r0, #0
    7a06:	d1f2      	bne.n	79ee <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x16>
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
        if (!readSector(sector, dst)) {
          return false;  // readSector will set errorCode.
    7a08:	2000      	movs	r0, #0
    7a0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (!readSector(sector + i, dst + i*512UL)) {
        return false;
      }
    }
  }
  return true;
    7a0c:	2001      	movs	r0, #1
    7a0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
    7a10:	0790      	lsls	r0, r2, #30
    7a12:	d012      	beq.n	7a3a <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x62>
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7a14:	2b00      	cmp	r3, #0
    7a16:	d0f9      	beq.n	7a0c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
    7a18:	440f      	add	r7, r1
    7a1a:	e001      	b.n	7a20 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x48>
    7a1c:	42a7      	cmp	r7, r4
    7a1e:	d0f5      	beq.n	7a0c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
        if (!readSector(sector, dst)) {
    7a20:	6833      	ldr	r3, [r6, #0]
    7a22:	462a      	mov	r2, r5
    7a24:	4621      	mov	r1, r4
    7a26:	4630      	mov	r0, r6
    7a28:	68db      	ldr	r3, [r3, #12]
}
//------------------------------------------------------------------------------
bool SdioCard::readSectors(uint32_t sector, uint8_t* dst, size_t n) {
  if (m_sdioConfig.useDma()) {
    if ((uint32_t)dst & 3) {
      for (size_t i = 0; i < n; i++, sector++, dst += 512) {
    7a2a:	f505 7500 	add.w	r5, r5, #512	; 0x200
    7a2e:	3401      	adds	r4, #1
        if (!readSector(sector, dst)) {
    7a30:	4798      	blx	r3
    7a32:	2800      	cmp	r0, #0
    7a34:	d1f2      	bne.n	7a1c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x44>
          return false;  // readSector will set errorCode.
    7a36:	2000      	movs	r0, #0
    7a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        }
      }
      return true;
    }
    if (!rdWrSectors(CMD18_DMA_XFERTYP, sector, dst, n)) {
    7a3a:	4806      	ldr	r0, [pc, #24]	; (7a54 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x7c>)
    7a3c:	f7ff fd10 	bl	7460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7a40:	2800      	cmp	r0, #0
    7a42:	d1e3      	bne.n	7a0c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x34>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a44:	4904      	ldr	r1, [pc, #16]	; (7a58 <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x80>)
    7a46:	240c      	movs	r4, #12
  m_errorLine = line;
    7a48:	4b04      	ldr	r3, [pc, #16]	; (7a5c <SdioCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x84>)
    7a4a:	f240 328d 	movw	r2, #909	; 0x38d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a4e:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7a50:	601a      	str	r2, [r3, #0]
    7a52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7a54:	123a0037 	.word	0x123a0037
    7a58:	20001124 	.word	0x20001124
    7a5c:	20036c94 	.word	0x20036c94

00007a60 <cardCMD6(unsigned long, unsigned char*)>:

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7a60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7a62:	4605      	mov	r5, r0
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7a64:	481b      	ldr	r0, [pc, #108]	; (7ad4 <cardCMD6(unsigned long, unsigned char*)+0x74>)

  return (m_irqstat & SDHC_IRQSTAT_CC) &&
         !(m_irqstat & SDHC_IRQSTAT_CMD_ERROR);
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
    7a66:	460c      	mov	r4, r1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    7a68:	f7ff fbee 	bl	7248 <waitTimeout(bool (*)())>
    7a6c:	b140      	cbz	r0, 7a80 <cardCMD6(unsigned long, unsigned char*)+0x20>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a6e:	491a      	ldr	r1, [pc, #104]	; (7ad8 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    7a70:	200a      	movs	r0, #10
  m_errorLine = line;
    7a72:	4b1a      	ldr	r3, [pc, #104]	; (7adc <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    7a74:	f44f 72cd 	mov.w	r2, #410	; 0x19a
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7a78:	7008      	strb	r0, [r1, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7a7a:	2000      	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7a7c:	601a      	str	r2, [r3, #0]
}
//------------------------------------------------------------------------------
static bool cardCMD6(uint32_t arg, uint8_t* status) {
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7a7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7a80:	4a17      	ldr	r2, [pc, #92]	; (7ae0 <cardCMD6(unsigned long, unsigned char*)+0x80>)
    7a82:	2701      	movs	r7, #1
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7a84:	4b17      	ldr	r3, [pc, #92]	; (7ae4 <cardCMD6(unsigned long, unsigned char*)+0x84>)
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a86:	4629      	mov	r1, r5
  }
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
    7a88:	7017      	strb	r7, [r2, #0]
  m_irqstat = 0;
    7a8a:	4e17      	ldr	r6, [pc, #92]	; (7ae8 <cardCMD6(unsigned long, unsigned char*)+0x88>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7a8c:	4d17      	ldr	r5, [pc, #92]	; (7aec <cardCMD6(unsigned long, unsigned char*)+0x8c>)
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a8e:	4a18      	ldr	r2, [pc, #96]	; (7af0 <cardCMD6(unsigned long, unsigned char*)+0x90>)
  return true;
}
//------------------------------------------------------------------------------
static void enableDmaIrs() {
  m_dmaBusy = true;
  m_irqstat = 0;
    7a90:	6030      	str	r0, [r6, #0]
  // CMD6 returns 64 bytes.
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
    7a92:	601c      	str	r4, [r3, #0]
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a94:	4817      	ldr	r0, [pc, #92]	; (7af4 <cardCMD6(unsigned long, unsigned char*)+0x94>)
  if (waitTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
    7a96:	605d      	str	r5, [r3, #4]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
    7a98:	639a      	str	r2, [r3, #56]	; 0x38
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    7a9a:	f7ff fc49 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7a9e:	b938      	cbnz	r0, 7ab0 <cardCMD6(unsigned long, unsigned char*)+0x50>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7aa0:	490d      	ldr	r1, [pc, #52]	; (7ad8 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    7aa2:	2404      	movs	r4, #4
  m_errorLine = line;
    7aa4:	4b0d      	ldr	r3, [pc, #52]	; (7adc <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    7aa6:	f240 12a1 	movw	r2, #417	; 0x1a1
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7aaa:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7aac:	601a      	str	r2, [r3, #0]
  enableDmaIrs();
  SDHC_DSADDR  = (uint32_t)status;
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
    7aae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  m_busyFcn = 0;
  return false;  // Caller will set errorCode.
}
//------------------------------------------------------------------------------
static bool waitDmaStatus() {
  if (yieldTimeout(isBusyDMA)) {
    7ab0:	4811      	ldr	r0, [pc, #68]	; (7af8 <cardCMD6(unsigned long, unsigned char*)+0x98>)
    7ab2:	f7ff fbdd 	bl	7270 <yieldTimeout(bool (*)())>
    7ab6:	b918      	cbnz	r0, 7ac0 <cardCMD6(unsigned long, unsigned char*)+0x60>
    7ab8:	f7ff fcc2 	bl	7440 <waitDmaStatus() [clone .part.5]>
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(1) | SDHC_BLKATTR_BLKSIZE(64);
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    7abc:	b100      	cbz	r0, 7ac0 <cardCMD6(unsigned long, unsigned char*)+0x60>
    return sdError(SD_CARD_ERROR_DMA);
  }
  return true;
}
    7abe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ac0:	4905      	ldr	r1, [pc, #20]	; (7ad8 <cardCMD6(unsigned long, unsigned char*)+0x78>)
    7ac2:	2025      	movs	r0, #37	; 0x25
  m_errorLine = line;
    7ac4:	4b05      	ldr	r3, [pc, #20]	; (7adc <cardCMD6(unsigned long, unsigned char*)+0x7c>)
    7ac6:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7aca:	7008      	strb	r0, [r1, #0]
  SDHC_IRQSIGEN = SDHC_IRQSIGEN_MASK;
  if (!cardCommand(CMD6_XFERTYP, arg)) {
    return sdError(SD_CARD_ERROR_CMD6);
  }
  if (!waitDmaStatus()) {
    return sdError(SD_CARD_ERROR_DMA);
    7acc:	2000      	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7ace:	601a      	str	r2, [r3, #0]
    7ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7ad2:	bf00      	nop
    7ad4:	00007399 	.word	0x00007399
    7ad8:	20001124 	.word	0x20001124
    7adc:	20036c94 	.word	0x20036c94
    7ae0:	20036c8c 	.word	0x20036c8c
    7ae4:	402c0000 	.word	0x402c0000
    7ae8:	20036c74 	.word	0x20036c74
    7aec:	00010040 	.word	0x00010040
    7af0:	117f0002 	.word	0x117f0002
    7af4:	063a0011 	.word	0x063a0011
    7af8:	000070c9 	.word	0x000070c9

00007afc <SdioCard::begin(SdioConfig)>:
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7afc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    7b00:	4ab7      	ldr	r2, [pc, #732]	; (7de0 <SdioCard::begin(SdioConfig)+0x2e4>)
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    7b02:	2300      	movs	r3, #0
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7b04:	4db7      	ldr	r5, [pc, #732]	; (7de4 <SdioCard::begin(SdioConfig)+0x2e8>)
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    7b06:	2405      	movs	r4, #5
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
    7b08:	7201      	strb	r1, [r0, #8]
}
#endif  // ENABLE_TEENSY_SDIO_MOD
//==============================================================================
// Start of SdioCard member functions.
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
    7b0a:	b091      	sub	sp, #68	; 0x44
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
    7b0c:	702b      	strb	r3, [r5, #0]
//==============================================================================
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
    7b0e:	7243      	strb	r3, [r0, #9]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    7b10:	f8d2 0100 	ldr.w	r0, [r2, #256]	; 0x100
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    7b14:	4fb4      	ldr	r7, [pc, #720]	; (7de8 <SdioCard::begin(SdioConfig)+0x2ec>)
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    7b16:	f040 0080 	orr.w	r0, r0, #128	; 0x80
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7b1a:	4eb4      	ldr	r6, [pc, #720]	; (7dec <SdioCard::begin(SdioConfig)+0x2f0>)
  m_version2 = false;
    7b1c:	f8df 8334 	ldr.w	r8, [pc, #820]	; 7e54 <SdioCard::begin(SdioConfig)+0x358>
bool SdioCard::begin(SdioConfig sdioConfig) {
  uint32_t kHzSdClk;
  uint32_t arg;
  m_sdioConfig = sdioConfig;
  m_curState = IDLE_STATE;
  m_initDone = false;
    7b20:	703b      	strb	r3, [r7, #0]
  m_errorCode = SD_CARD_ERROR_NONE;
  m_highCapacity = false;
    7b22:	7033      	strb	r3, [r6, #0]
  m_version2 = false;
    7b24:	f888 3000 	strb.w	r3, [r8]
  }
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
    7b28:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    7b2c:	f8d2 0100 	ldr.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    7b30:	4baf      	ldr	r3, [pc, #700]	; (7df0 <SdioCard::begin(SdioConfig)+0x2f4>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    7b32:	f020 003f 	bic.w	r0, r0, #63	; 0x3f
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    7b36:	49af      	ldr	r1, [pc, #700]	; (7df4 <SdioCard::begin(SdioConfig)+0x2f8>)
}
//------------------------------------------------------------------------------
static void initClock() {
  /* set PDF_528 PLL2PFD0 */
  CCM_ANALOG_PFD_528 |= (1 << 7);
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
    7b38:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
    7b3c:	f8d2 0100 	ldr.w	r0, [r2, #256]	; 0x100
    7b40:	f040 0018 	orr.w	r0, r0, #24
    7b44:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100
  CCM_ANALOG_PFD_528 &= ~(1 << 7);
    7b48:	f8d2 0100 	ldr.w	r0, [r2, #256]	; 0x100
    7b4c:	f020 0080 	bic.w	r0, r0, #128	; 0x80
    7b50:	f8c2 0100 	str.w	r0, [r2, #256]	; 0x100

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    7b54:	f8d3 2080 	ldr.w	r2, [r3, #128]	; 0x80

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    7b58:	48a7      	ldr	r0, [pc, #668]	; (7df8 <SdioCard::begin(SdioConfig)+0x2fc>)
  CCM_ANALOG_PFD_528 &= ~(0x3F << 0);
  CCM_ANALOG_PFD_528 |= ((24) & 0x3F << 0);  // 12 - 35
  CCM_ANALOG_PFD_528 &= ~(1 << 7);

  /* Enable USDHC clock. */
  CCM_CCGR6 |= CCM_CCGR6_USDHC1(CCM_CCGR_ON);
    7b5a:	f042 020c 	orr.w	r2, r2, #12
    7b5e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  CCM_CSCDR1 &= ~(CCM_CSCDR1_USDHC1_CLK_PODF_MASK);
    7b62:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7b64:	f422 5260 	bic.w	r2, r2, #14336	; 0x3800
    7b68:	625a      	str	r2, [r3, #36]	; 0x24
  CCM_CSCMR1 |= CCM_CSCMR1_USDHC1_CLK_SEL;          // PLL2PFD0
    7b6a:	69da      	ldr	r2, [r3, #28]
    7b6c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    7b70:	61da      	str	r2, [r3, #28]
//  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((7)); / &0x7  WHG
  CCM_CSCDR1 |= CCM_CSCDR1_USDHC1_CLK_PODF((1));
    7b72:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7b74:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    7b78:	625a      	str	r2, [r3, #36]	; 0x24
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    7b7a:	4602      	mov	r2, r0
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    7b7c:	f8c1 41cc 	str.w	r4, [r1, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    7b80:	f8c1 41d0 	str.w	r4, [r1, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    7b84:	f8c1 41bc 	str.w	r4, [r1, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    7b88:	f8c1 41c0 	str.w	r4, [r1, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    7b8c:	f8c1 41c4 	str.w	r4, [r1, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    7b90:	f8c1 41c8 	str.w	r4, [r1, #456]	; 0x1c8

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    7b94:	6c81      	ldr	r1, [r0, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7b96:	4b99      	ldr	r3, [pc, #612]	; (7dfc <SdioCard::begin(SdioConfig)+0x300>)

  // Disable GPIO clock.
  enableGPIO(false);

#if defined (__IMXRT1062__)
  SDHC_MIX_CTRL |= 0x80000000;
    7b98:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
    7b9c:	6481      	str	r1, [r0, #72]	; 0x48
#endif  //  (__IMXRT1062__)

  // Reset SDHC. Use default Water Mark Level of 16.
  SDHC_SYSCTL |= SDHC_SYSCTL_RSTA | SDHC_SYSCTL_SDCLKFS(0x80);
    7b9e:	6ac1      	ldr	r1, [r0, #44]	; 0x2c
    7ba0:	430b      	orrs	r3, r1
    7ba2:	62c3      	str	r3, [r0, #44]	; 0x2c

  while (SDHC_SYSCTL & SDHC_SYSCTL_RSTA) {
    7ba4:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
    7ba6:	4c94      	ldr	r4, [pc, #592]	; (7df8 <SdioCard::begin(SdioConfig)+0x2fc>)
    7ba8:	01d9      	lsls	r1, r3, #7
    7baa:	d4fb      	bmi.n	7ba4 <SdioCard::begin(SdioConfig)+0xa8>
  }

  // Set initial SCK rate.
  setSdclk(SD_MAX_INIT_RATE_KHZ);
    7bac:	f44f 70c8 	mov.w	r0, #400	; 0x190
    7bb0:	f7ff fab0 	bl	7114 <setSdclk(unsigned long)>
    7bb4:	f7ff fb8a 	bl	72cc <enableGPIO(bool) [clone .part.0]>

  enableGPIO(true);

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;
    7bb8:	4991      	ldr	r1, [pc, #580]	; (7e00 <SdioCard::begin(SdioConfig)+0x304>)


#ifdef __cplusplus
extern "C" void (* _VectorsRam[NVIC_NUM_INTERRUPTS+16])(void);
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) __attribute__((always_inline, unused));
static inline void attachInterruptVector(IRQ_NUMBER_t irq, void (*function)(void)) { _VectorsRam[irq + 16] = function; asm volatile("": : :"memory"); }
    7bba:	4b92      	ldr	r3, [pc, #584]	; (7e04 <SdioCard::begin(SdioConfig)+0x308>)
    7bbc:	4a92      	ldr	r2, [pc, #584]	; (7e08 <SdioCard::begin(SdioConfig)+0x30c>)
    7bbe:	6361      	str	r1, [r4, #52]	; 0x34
    7bc0:	f8c3 21f8 	str.w	r2, [r3, #504]	; 0x1f8

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7bc4:	4b91      	ldr	r3, [pc, #580]	; (7e0c <SdioCard::begin(SdioConfig)+0x310>)
    7bc6:	2060      	movs	r0, #96	; 0x60
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7bc8:	4a91      	ldr	r2, [pc, #580]	; (7e10 <SdioCard::begin(SdioConfig)+0x314>)
    7bca:	f44f 4180 	mov.w	r1, #16384	; 0x4000

  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
    7bce:	7018      	strb	r0, [r3, #0]
  NVIC_ENABLE_IRQ(IRQ_SDHC);

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    7bd0:	4623      	mov	r3, r4
  // Enable desired IRQSTAT bits.
  SDHC_IRQSTATEN = SDHC_IRQSTATEN_MASK;

  attachInterruptVector(IRQ_SDHC, sdIrs);
  NVIC_SET_PRIORITY(IRQ_SDHC, 6*16);
  NVIC_ENABLE_IRQ(IRQ_SDHC);
    7bd2:	6011      	str	r1, [r2, #0]

  // Send 80 clocks to card.
  SDHC_SYSCTL |= SDHC_SYSCTL_INITA;
    7bd4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
    7bd6:	f042 6200 	orr.w	r2, r2, #134217728	; 0x8000000
    7bda:	62e2      	str	r2, [r4, #44]	; 0x2c
  while (SDHC_SYSCTL & SDHC_SYSCTL_INITA) {
    7bdc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
    7bde:	f011 6100 	ands.w	r1, r1, #134217728	; 0x8000000
    7be2:	d1fb      	bne.n	7bdc <SdioCard::begin(SdioConfig)+0xe0>
  m_highCapacity = false;
  m_version2 = false;

  // initialize controller.
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    7be4:	4608      	mov	r0, r1
    7be6:	f7ff fba3 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7bea:	4604      	mov	r4, r0
    7bec:	2800      	cmp	r0, #0
    7bee:	d04d      	beq.n	7c8c <SdioCard::begin(SdioConfig)+0x190>
    7bf0:	2403      	movs	r4, #3
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
    7bf2:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
    7bf6:	4887      	ldr	r0, [pc, #540]	; (7e14 <SdioCard::begin(SdioConfig)+0x318>)
    7bf8:	f7ff fb9a 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7bfc:	2800      	cmp	r0, #0
    7bfe:	d15c      	bne.n	7cba <SdioCard::begin(SdioConfig)+0x1be>
  initSDHC();
  if (!cardCommand(CMD0_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    7c00:	3c01      	subs	r4, #1
    7c02:	d1f6      	bne.n	7bf2 <SdioCard::begin(SdioConfig)+0xf6>
      }
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7c04:	f898 3000 	ldrb.w	r3, [r8]
    7c08:	4c83      	ldr	r4, [pc, #524]	; (7e18 <SdioCard::begin(SdioConfig)+0x31c>)
    7c0a:	2b00      	cmp	r3, #0
    7c0c:	bf08      	it	eq
    7c0e:	f44f 1440 	moveq.w	r4, #3145728	; 0x300000
  int m = micros();
    7c12:	f001 f981 	bl	8f18 <micros>
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7c16:	f8df 8240 	ldr.w	r8, [pc, #576]	; 7e58 <SdioCard::begin(SdioConfig)+0x35c>
      m_version2 = true;
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
    7c1a:	4681      	mov	r9, r0
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7c1c:	2100      	movs	r1, #0
    7c1e:	487f      	ldr	r0, [pc, #508]	; (7e1c <SdioCard::begin(SdioConfig)+0x320>)
    7c20:	f7ff fb86 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7c24:	b950      	cbnz	r0, 7c3c <SdioCard::begin(SdioConfig)+0x140>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c26:	2117      	movs	r1, #23
  m_errorLine = line;
    7c28:	4b7d      	ldr	r3, [pc, #500]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7c2a:	f44f 7229 	mov.w	r2, #676	; 0x2a4
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    7c2e:	2400      	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c30:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7c32:	601a      	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c34:	4620      	mov	r0, r4
    7c36:	b011      	add	sp, #68	; 0x44
    7c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7c3c:	4621      	mov	r1, r4
    7c3e:	4879      	ldr	r0, [pc, #484]	; (7e24 <SdioCard::begin(SdioConfig)+0x328>)
    7c40:	f7ff fb76 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7c44:	2800      	cmp	r0, #0
    7c46:	d0ee      	beq.n	7c26 <SdioCard::begin(SdioConfig)+0x12a>
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
    7c48:	f001 f966 	bl	8f18 <micros>
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7c4c:	ebc9 0000 	rsb	r0, r9, r0
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7c50:	4a69      	ldr	r2, [pc, #420]	; (7df8 <SdioCard::begin(SdioConfig)+0x2fc>)
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
    7c52:	4540      	cmp	r0, r8
    7c54:	d8e7      	bhi.n	7c26 <SdioCard::begin(SdioConfig)+0x12a>
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
    7c56:	6913      	ldr	r3, [r2, #16]
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
  int m = micros();
  do {
    7c58:	2b00      	cmp	r3, #0
    7c5a:	dadf      	bge.n	7c1c <SdioCard::begin(SdioConfig)+0x120>
    if (!cardAcmd(0, ACMD41_XFERTYP, arg) ||
       ((micros() - m) > BUSY_TIMEOUT_MICROS)) {
      return sdError(SD_CARD_ERROR_ACMD41);
    }
  } while ((SDHC_CMDRSP0 & 0x80000000) == 0);
  m_ocr = SDHC_CMDRSP0;
    7c5c:	6911      	ldr	r1, [r2, #16]
    7c5e:	4b72      	ldr	r3, [pc, #456]	; (7e28 <SdioCard::begin(SdioConfig)+0x32c>)
    7c60:	6019      	str	r1, [r3, #0]
  if (SDHC_CMDRSP0 & 0x40000000) {
    7c62:	6913      	ldr	r3, [r2, #16]
    7c64:	005a      	lsls	r2, r3, #1
    7c66:	d501      	bpl.n	7c6c <SdioCard::begin(SdioConfig)+0x170>
    // Is high capacity.
    m_highCapacity = true;
    7c68:	2301      	movs	r3, #1
    7c6a:	7033      	strb	r3, [r6, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    7c6c:	2100      	movs	r1, #0
    7c6e:	486f      	ldr	r0, [pc, #444]	; (7e2c <SdioCard::begin(SdioConfig)+0x330>)
    7c70:	f7ff fb5e 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7c74:	4604      	mov	r4, r0
    7c76:	b998      	cbnz	r0, 7ca0 <SdioCard::begin(SdioConfig)+0x1a4>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c78:	2102      	movs	r1, #2
  m_errorLine = line;
    7c7a:	4b69      	ldr	r3, [pc, #420]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7c7c:	f240 22ad 	movw	r2, #685	; 0x2ad

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c80:	4620      	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c82:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7c84:	601a      	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c86:	b011      	add	sp, #68	; 0x44
    7c88:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c8c:	2101      	movs	r1, #1
  m_errorLine = line;
    7c8e:	4b64      	ldr	r3, [pc, #400]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7c90:	f240 2293 	movw	r2, #659	; 0x293

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c94:	4620      	mov	r0, r4
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7c96:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7c98:	601a      	str	r2, [r3, #0]

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
  return true;
}
    7c9a:	b011      	add	sp, #68	; 0x44
    7c9c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    m_highCapacity = true;
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    7ca0:	2100      	movs	r1, #0
    7ca2:	4863      	ldr	r0, [pc, #396]	; (7e30 <SdioCard::begin(SdioConfig)+0x334>)
    7ca4:	f7ff fb44 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7ca8:	4604      	mov	r4, r0
    7caa:	b9c0      	cbnz	r0, 7cde <SdioCard::begin(SdioConfig)+0x1e2>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cac:	2103      	movs	r1, #3
  m_errorLine = line;
    7cae:	4b5c      	ldr	r3, [pc, #368]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7cb0:	f44f 722c 	mov.w	r2, #688	; 0x2b0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cb4:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7cb6:	601a      	str	r2, [r3, #0]
  }
  if (!cardCommand(CMD2_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
    7cb8:	e7bc      	b.n	7c34 <SdioCard::begin(SdioConfig)+0x138>
    return sdError(SD_CARD_ERROR_CMD0);
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
    7cba:	4b4f      	ldr	r3, [pc, #316]	; (7df8 <SdioCard::begin(SdioConfig)+0x2fc>)
    7cbc:	691b      	ldr	r3, [r3, #16]
    7cbe:	f5b3 7fd5 	cmp.w	r3, #426	; 0x1aa
    7cc2:	d007      	beq.n	7cd4 <SdioCard::begin(SdioConfig)+0x1d8>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cc4:	2106      	movs	r1, #6
  m_errorLine = line;
    7cc6:	4b56      	ldr	r3, [pc, #344]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7cc8:	f240 2299 	movw	r2, #665	; 0x299
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    7ccc:	2400      	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cce:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7cd0:	601a      	str	r2, [r3, #0]
  }
  // Try several times for case of reset delay.
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
    7cd2:	e7af      	b.n	7c34 <SdioCard::begin(SdioConfig)+0x138>
      }
      m_version2 = true;
    7cd4:	2301      	movs	r3, #1
      break;
    }
  }
  arg = m_version2 ? 0X40300000 : 0x00300000;
    7cd6:	4c50      	ldr	r4, [pc, #320]	; (7e18 <SdioCard::begin(SdioConfig)+0x31c>)
  for (uint32_t i = 0; i < CMD8_RETRIES; i++) {
    if (cardCommand(CMD8_XFERTYP, 0X1AA)) {
      if (SDHC_CMDRSP0 != 0X1AA) {
        return sdError(SD_CARD_ERROR_CMD8);
      }
      m_version2 = true;
    7cd8:	f888 3000 	strb.w	r3, [r8]
    7cdc:	e799      	b.n	7c12 <SdioCard::begin(SdioConfig)+0x116>
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7cde:	4e46      	ldr	r6, [pc, #280]	; (7df8 <SdioCard::begin(SdioConfig)+0x2fc>)
    7ce0:	4b54      	ldr	r3, [pc, #336]	; (7e34 <SdioCard::begin(SdioConfig)+0x338>)
    7ce2:	6932      	ldr	r2, [r6, #16]
    7ce4:	f8df 8174 	ldr.w	r8, [pc, #372]	; 7e5c <SdioCard::begin(SdioConfig)+0x360>
    7ce8:	4013      	ands	r3, r2

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7cea:	4953      	ldr	r1, [pc, #332]	; (7e38 <SdioCard::begin(SdioConfig)+0x33c>)
    7cec:	4853      	ldr	r0, [pc, #332]	; (7e3c <SdioCard::begin(SdioConfig)+0x340>)
    return sdError(SD_CARD_ERROR_CMD2);
  }
  if (!cardCommand(CMD3_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;
    7cee:	f8c8 3000 	str.w	r3, [r8]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    7cf2:	f7ff fb77 	bl	73e4 <readReg16(unsigned long, void*)>
    7cf6:	4604      	mov	r4, r0
    7cf8:	b930      	cbnz	r0, 7d08 <SdioCard::begin(SdioConfig)+0x20c>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7cfa:	2107      	movs	r1, #7
  m_errorLine = line;
    7cfc:	4b48      	ldr	r3, [pc, #288]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7cfe:	f240 22b5 	movw	r2, #693	; 0x2b5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d02:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7d04:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_CMD3);
  }
  m_rca = SDHC_CMDRSP0 & 0xFFFF0000;

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
    7d06:	e795      	b.n	7c34 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    7d08:	494d      	ldr	r1, [pc, #308]	; (7e40 <SdioCard::begin(SdioConfig)+0x344>)
    7d0a:	484e      	ldr	r0, [pc, #312]	; (7e44 <SdioCard::begin(SdioConfig)+0x348>)
    7d0c:	f7ff fb6a 	bl	73e4 <readReg16(unsigned long, void*)>
    7d10:	4604      	mov	r4, r0
    7d12:	b930      	cbnz	r0, 7d22 <SdioCard::begin(SdioConfig)+0x226>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d14:	2108      	movs	r1, #8
  m_errorLine = line;
    7d16:	4b42      	ldr	r3, [pc, #264]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7d18:	f44f 722e 	mov.w	r2, #696	; 0x2b8
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d1c:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7d1e:	601a      	str	r2, [r3, #0]

  if (!readReg16(CMD9_XFERTYP, &m_csd)) {
    return sdError(SD_CARD_ERROR_CMD9);
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
    7d20:	e788      	b.n	7c34 <SdioCard::begin(SdioConfig)+0x138>
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    7d22:	f8d8 1000 	ldr.w	r1, [r8]
    7d26:	4848      	ldr	r0, [pc, #288]	; (7e48 <SdioCard::begin(SdioConfig)+0x34c>)
    7d28:	f7ff fb02 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7d2c:	4604      	mov	r4, r0
    7d2e:	b930      	cbnz	r0, 7d3e <SdioCard::begin(SdioConfig)+0x242>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d30:	2105      	movs	r1, #5
  m_errorLine = line;
    7d32:	4b3b      	ldr	r3, [pc, #236]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7d34:	f240 22bb 	movw	r2, #699	; 0x2bb
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d38:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7d3a:	601a      	str	r2, [r3, #0]
  }
  if (!readReg16(CMD10_XFERTYP, &m_cid)) {
    return sdError(SD_CARD_ERROR_CMD10);
  }
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
    7d3c:	e77a      	b.n	7c34 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7d3e:	f8d8 1000 	ldr.w	r1, [r8]
    7d42:	4836      	ldr	r0, [pc, #216]	; (7e1c <SdioCard::begin(SdioConfig)+0x320>)
    7d44:	f7ff faf4 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7d48:	b938      	cbnz	r0, 7d5a <SdioCard::begin(SdioConfig)+0x25e>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d4a:	2114      	movs	r1, #20
  m_errorLine = line;
    7d4c:	4b34      	ldr	r3, [pc, #208]	; (7e20 <SdioCard::begin(SdioConfig)+0x324>)
    7d4e:	f240 22bf 	movw	r2, #703	; 0x2bf
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    7d52:	2400      	movs	r4, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7d54:	7029      	strb	r1, [r5, #0]
  m_errorLine = line;
    7d56:	601a      	str	r2, [r3, #0]
  if (!cardCommand(CMD7_XFERTYP, m_rca)) {
    return sdError(SD_CARD_ERROR_CMD7);
  }
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
    7d58:	e76c      	b.n	7c34 <SdioCard::begin(SdioConfig)+0x138>
}
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
//==============================================================================
// Static functions.
static bool cardAcmd(uint32_t rca, uint32_t xfertyp, uint32_t arg) {
  return cardCommand(CMD55_XFERTYP, rca) && cardCommand (xfertyp, arg);
    7d5a:	2102      	movs	r1, #2
    7d5c:	483b      	ldr	r0, [pc, #236]	; (7e4c <SdioCard::begin(SdioConfig)+0x350>)
    7d5e:	f7ff fae7 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7d62:	4604      	mov	r4, r0
    7d64:	2800      	cmp	r0, #0
    7d66:	d0f0      	beq.n	7d4a <SdioCard::begin(SdioConfig)+0x24e>
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7d68:	6ab3      	ldr	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7d6a:	f04f 1210 	mov.w	r2, #1048592	; 0x100010

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7d6e:	f06f 407f 	mvn.w	r0, #4278190080	; 0xff000000
    7d72:	4669      	mov	r1, sp
  // Set card to bus width four.
  if (!cardAcmd(m_rca, ACMD6_XFERTYP, 2)) {
    return sdError(SD_CARD_ERROR_ACMD6);
  }
  // Set SDHC to bus width four.
  SDHC_PROCTL &= ~SDHC_PROCTL_DTW_MASK;
    7d74:	f023 0306 	bic.w	r3, r3, #6
    7d78:	62b3      	str	r3, [r6, #40]	; 0x28
  SDHC_PROCTL |= SDHC_PROCTL_DTW(SDHC_PROCTL_DTW_4BIT);
    7d7a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
    7d7c:	f043 0302 	orr.w	r3, r3, #2
    7d80:	62b3      	str	r3, [r6, #40]	; 0x28

  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);
    7d82:	6472      	str	r2, [r6, #68]	; 0x44

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7d84:	f7ff fe6c 	bl	7a60 <cardCMD6(unsigned long, unsigned char*)>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7d88:	b118      	cbz	r0, 7d92 <SdioCard::begin(SdioConfig)+0x296>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7d8a:	f89d 300d 	ldrb.w	r3, [sp, #13]
    7d8e:	079b      	lsls	r3, r3, #30
    7d90:	d416      	bmi.n	7dc0 <SdioCard::begin(SdioConfig)+0x2c4>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    kHzSdClk = 50000;
  } else {
    kHzSdClk = 25000;
    7d92:	f246 10a8 	movw	r0, #25000	; 0x61a8
static uint32_t baseClock() { return F_CPU;}

#elif defined(__IMXRT1062__)
//------------------------------------------------------------------------------
static void gpioMux(uint8_t mode) {
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_04 = mode;  // DAT2
    7d96:	4b17      	ldr	r3, [pc, #92]	; (7df4 <SdioCard::begin(SdioConfig)+0x2f8>)
    7d98:	2205      	movs	r2, #5
    7d9a:	f8c3 21cc 	str.w	r2, [r3, #460]	; 0x1cc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_05 = mode;  // DAT3
    7d9e:	f8c3 21d0 	str.w	r2, [r3, #464]	; 0x1d0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_00 = mode;  // CMD
    7da2:	f8c3 21bc 	str.w	r2, [r3, #444]	; 0x1bc
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_01 = mode;  // CLK
    7da6:	f8c3 21c0 	str.w	r2, [r3, #448]	; 0x1c0
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_02 = mode;  // DAT0
    7daa:	f8c3 21c4 	str.w	r2, [r3, #452]	; 0x1c4
  IOMUXC_SW_MUX_CTL_PAD_GPIO_SD_B0_03 = mode;  // DAT1
    7dae:	f8c3 21c8 	str.w	r2, [r3, #456]	; 0x1c8
  }
  // Disable GPIO.
  enableGPIO(false);

  // Set the SDHC SCK frequency.
  setSdclk(kHzSdClk);
    7db2:	f7ff f9af 	bl	7114 <setSdclk(unsigned long)>
    7db6:	f7ff fa89 	bl	72cc <enableGPIO(bool) [clone .part.0]>

  // Enable GPIO.
  enableGPIO(true);
  m_initDone = true;
    7dba:	2301      	movs	r3, #1
    7dbc:	703b      	strb	r3, [r7, #0]
  return true;
    7dbe:	e739      	b.n	7c34 <SdioCard::begin(SdioConfig)+0x138>

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7dc0:	4669      	mov	r1, sp
    7dc2:	4823      	ldr	r0, [pc, #140]	; (7e50 <SdioCard::begin(SdioConfig)+0x354>)
    7dc4:	f7ff fe4c 	bl	7a60 <cardCMD6(unsigned long, unsigned char*)>
  SDHC_WML = SDHC_WML_RDWML(FIFO_WML) | SDHC_WML_WRWML(FIFO_WML);

  // Determine if High Speed mode is supported and set frequency.
  // Check status[16] for error 0XF or status[16] for new mode 0X1.
  uint8_t status[64];
  if (cardCMD6(0X00FFFFFF, status) && (2 & status[13]) &&
    7dc8:	2800      	cmp	r0, #0
    7dca:	d0e2      	beq.n	7d92 <SdioCard::begin(SdioConfig)+0x296>
      cardCMD6(0X80FFFFF1, status) && (status[16] & 0XF) == 1) {
    7dcc:	f89d 3010 	ldrb.w	r3, [sp, #16]
    7dd0:	f003 030f 	and.w	r3, r3, #15
    7dd4:	2b01      	cmp	r3, #1
    7dd6:	d1dc      	bne.n	7d92 <SdioCard::begin(SdioConfig)+0x296>
    kHzSdClk = 50000;
    7dd8:	f24c 3050 	movw	r0, #50000	; 0xc350
    7ddc:	e7db      	b.n	7d96 <SdioCard::begin(SdioConfig)+0x29a>
    7dde:	bf00      	nop
    7de0:	400d8000 	.word	0x400d8000
    7de4:	20001124 	.word	0x20001124
    7de8:	20036c78 	.word	0x20036c78
    7dec:	20036c64 	.word	0x20036c64
    7df0:	400fc000 	.word	0x400fc000
    7df4:	401f8000 	.word	0x401f8000
    7df8:	402c0000 	.word	0x402c0000
    7dfc:	01008000 	.word	0x01008000
    7e00:	117f000b 	.word	0x117f000b
    7e04:	20037000 	.word	0x20037000
    7e08:	0000705d 	.word	0x0000705d
    7e0c:	e000e46e 	.word	0xe000e46e
    7e10:	e000e10c 	.word	0xe000e10c
    7e14:	081a0000 	.word	0x081a0000
    7e18:	40300000 	.word	0x40300000
    7e1c:	371a0000 	.word	0x371a0000
    7e20:	20036c94 	.word	0x20036c94
    7e24:	29020000 	.word	0x29020000
    7e28:	20036c68 	.word	0x20036c68
    7e2c:	02090000 	.word	0x02090000
    7e30:	031a0000 	.word	0x031a0000
    7e34:	ffff0000 	.word	0xffff0000
    7e38:	20036c7c 	.word	0x20036c7c
    7e3c:	09090000 	.word	0x09090000
    7e40:	20036c50 	.word	0x20036c50
    7e44:	0a090000 	.word	0x0a090000
    7e48:	071b0000 	.word	0x071b0000
    7e4c:	061a0000 	.word	0x061a0000
    7e50:	80fffff1 	.word	0x80fffff1
    7e54:	20036c4c 	.word	0x20036c4c
    7e58:	000f4240 	.word	0x000f4240
    7e5c:	20036c6c 	.word	0x20036c6c

00007e60 <SdioCard::readData(unsigned char*)>:
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    7e60:	b538      	push	{r3, r4, r5, lr}
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7e62:	4b27      	ldr	r3, [pc, #156]	; (7f00 <SdioCard::readData(unsigned char*)+0xa0>)
bool SdioCard::readCSD(csd_t* csd) {
  memcpy(csd, &m_csd, 16);
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readData(uint8_t* dst) {
    7e64:	460d      	mov	r5, r1
  DBG_IRQSTAT();
  uint32_t* p32 = reinterpret_cast<uint32_t*>(dst);

  if (!(SDHC_PRSSTAT & SDHC_PRSSTAT_RTA)) {
    7e66:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    7e68:	0594      	lsls	r4, r2, #22
    7e6a:	d40d      	bmi.n	7e88 <SdioCard::readData(unsigned char*)+0x28>
    SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    7e6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7e6e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
    7e72:	629a      	str	r2, [r3, #40]	; 0x28
    noInterrupts();
    7e74:	b672      	cpsid	i
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    7e76:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7e78:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    7e7c:	629a      	str	r2, [r3, #40]	; 0x28
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7e7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7e80:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    7e84:	629a      	str	r2, [r3, #40]	; 0x28
    interrupts();
    7e86:	b662      	cpsie	i
  }
  if (waitTimeout(isBusyFifoRead)) {
    7e88:	481e      	ldr	r0, [pc, #120]	; (7f04 <SdioCard::readData(unsigned char*)+0xa4>)
    7e8a:	f7ff f9dd 	bl	7248 <waitTimeout(bool (*)())>
    7e8e:	2800      	cmp	r0, #0
    7e90:	d12d      	bne.n	7eee <SdioCard::readData(unsigned char*)+0x8e>
    7e92:	1f2b      	subs	r3, r5, #4
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    7e94:	491a      	ldr	r1, [pc, #104]	; (7f00 <SdioCard::readData(unsigned char*)+0xa0>)
    7e96:	f505 75fe 	add.w	r5, r5, #508	; 0x1fc
    7e9a:	6a4a      	ldr	r2, [r1, #36]	; 0x24
    7e9c:	0510      	lsls	r0, r2, #20
    7e9e:	d5fc      	bpl.n	7e9a <SdioCard::readData(unsigned char*)+0x3a>
    7ea0:	f103 0040 	add.w	r0, r3, #64	; 0x40
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    7ea4:	6a0a      	ldr	r2, [r1, #32]
    7ea6:	4c16      	ldr	r4, [pc, #88]	; (7f00 <SdioCard::readData(unsigned char*)+0xa0>)
    7ea8:	f843 2f04 	str.w	r2, [r3, #4]!
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    while (0 == (SDHC_PRSSTAT & SDHC_PRSSTAT_BREN)) {
    }
    for (uint32_t i = 0; i < FIFO_WML; i++) {
    7eac:	4298      	cmp	r0, r3
    7eae:	d1f9      	bne.n	7ea4 <SdioCard::readData(unsigned char*)+0x44>
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
  }
  for (uint32_t iw = 0 ; iw < 512/(4*FIFO_WML); iw++) {
    7eb0:	4285      	cmp	r5, r0
    7eb2:	4603      	mov	r3, r0
    7eb4:	d1f1      	bne.n	7e9a <SdioCard::readData(unsigned char*)+0x3a>
    for (uint32_t i = 0; i < FIFO_WML; i++) {
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    7eb6:	4814      	ldr	r0, [pc, #80]	; (7f08 <SdioCard::readData(unsigned char*)+0xa8>)
    7eb8:	f7ff f9c6 	bl	7248 <waitTimeout(bool (*)())>
    7ebc:	b970      	cbnz	r0, 7edc <SdioCard::readData(unsigned char*)+0x7c>
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
    7ebe:	6b22      	ldr	r2, [r4, #48]	; 0x30
    7ec0:	4b12      	ldr	r3, [pc, #72]	; (7f0c <SdioCard::readData(unsigned char*)+0xac>)
    7ec2:	601a      	str	r2, [r3, #0]
  SDHC_IRQSTAT = m_irqstat;
    7ec4:	681a      	ldr	r2, [r3, #0]
    7ec6:	6322      	str	r2, [r4, #48]	; 0x30
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
    7ec8:	681a      	ldr	r2, [r3, #0]
    7eca:	0792      	lsls	r2, r2, #30
    7ecc:	d517      	bpl.n	7efe <SdioCard::readData(unsigned char*)+0x9e>
    7ece:	681b      	ldr	r3, [r3, #0]
    7ed0:	480f      	ldr	r0, [pc, #60]	; (7f10 <SdioCard::readData(unsigned char*)+0xb0>)
    7ed2:	4018      	ands	r0, r3
    7ed4:	fab0 f080 	clz	r0, r0
    7ed8:	0940      	lsrs	r0, r0, #5
    7eda:	bd38      	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7edc:	490d      	ldr	r1, [pc, #52]	; (7f14 <SdioCard::readData(unsigned char*)+0xb4>)
    7ede:	201d      	movs	r0, #29
  m_errorLine = line;
    7ee0:	4b0d      	ldr	r3, [pc, #52]	; (7f18 <SdioCard::readData(unsigned char*)+0xb8>)
    7ee2:	f240 324b 	movw	r2, #843	; 0x34b
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ee6:	7008      	strb	r0, [r1, #0]
      p32[i] = SDHC_DATPORT;
    }
    p32 += FIFO_WML;
  }
  if (waitTimeout(isBusyTransferComplete)) {
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
    7ee8:	2000      	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7eea:	601a      	str	r2, [r3, #0]
    7eec:	bd38      	pop	{r3, r4, r5, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7eee:	4909      	ldr	r1, [pc, #36]	; (7f14 <SdioCard::readData(unsigned char*)+0xb4>)
    7ef0:	241a      	movs	r4, #26
  m_errorLine = line;
    7ef2:	4b09      	ldr	r3, [pc, #36]	; (7f18 <SdioCard::readData(unsigned char*)+0xb8>)
    7ef4:	f44f 7250 	mov.w	r2, #832	; 0x340
    SDHC_PROCTL |= SDHC_PROCTL_CREQ;
    SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    interrupts();
  }
  if (waitTimeout(isBusyFifoRead)) {
    return sdError(SD_CARD_ERROR_READ_FIFO);
    7ef8:	2000      	movs	r0, #0
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7efa:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7efc:	601a      	str	r2, [r3, #0]
    return sdError(SD_CARD_ERROR_READ_TIMEOUT);
  }
  m_irqstat = SDHC_IRQSTAT;
  SDHC_IRQSTAT = m_irqstat;
  return (m_irqstat & SDHC_IRQSTAT_TC) && !(m_irqstat & SDHC_IRQSTAT_ERROR);
}
    7efe:	bd38      	pop	{r3, r4, r5, pc}
    7f00:	402c0000 	.word	0x402c0000
    7f04:	000070d5 	.word	0x000070d5
    7f08:	000070fd 	.word	0x000070fd
    7f0c:	20036c74 	.word	0x20036c74
    7f10:	117f0000 	.word	0x117f0000
    7f14:	20001124 	.word	0x20001124
    7f18:	20036c94 	.word	0x20036c94

00007f1c <SdioCard::readStart(unsigned long)>:
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7f1c:	b510      	push	{r4, lr}
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7f1e:	4814      	ldr	r0, [pc, #80]	; (7f70 <SdioCard::readStart(unsigned long)+0x54>)
  }
  return true;
}
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
    7f20:	460c      	mov	r4, r1
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    7f22:	f7ff f9a5 	bl	7270 <yieldTimeout(bool (*)())>
    7f26:	b9c8      	cbnz	r0, 7f5c <SdioCard::readStart(unsigned long)+0x40>
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f28:	4b12      	ldr	r3, [pc, #72]	; (7f74 <SdioCard::readStart(unsigned long)+0x58>)
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    7f2a:	f44f 7000 	mov.w	r0, #512	; 0x200
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f2e:	4912      	ldr	r1, [pc, #72]	; (7f78 <SdioCard::readStart(unsigned long)+0x5c>)
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
  }
  SDHC_PROCTL |= SDHC_PROCTL_SABGREQ;
    7f30:	6a9a      	ldr	r2, [r3, #40]	; 0x28
    7f32:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
    7f36:	629a      	str	r2, [r3, #40]	; 0x28
#if defined(__IMXRT1062__)
  // Infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKSIZE(512);
    7f38:	6058      	str	r0, [r3, #4]
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f3a:	780b      	ldrb	r3, [r1, #0]
    7f3c:	b963      	cbnz	r3, 7f58 <SdioCard::readStart(unsigned long)+0x3c>
    7f3e:	0261      	lsls	r1, r4, #9
    7f40:	480e      	ldr	r0, [pc, #56]	; (7f7c <SdioCard::readStart(unsigned long)+0x60>)
    7f42:	f7ff f9f5 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    7f46:	b930      	cbnz	r0, 7f56 <SdioCard::readStart(unsigned long)+0x3a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f48:	490d      	ldr	r1, [pc, #52]	; (7f80 <SdioCard::readStart(unsigned long)+0x64>)
    7f4a:	240c      	movs	r4, #12
  m_errorLine = line;
    7f4c:	4b0d      	ldr	r3, [pc, #52]	; (7f84 <SdioCard::readStart(unsigned long)+0x68>)
    7f4e:	f240 32a9 	movw	r2, #937	; 0x3a9
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f52:	700c      	strb	r4, [r1, #0]
  m_errorLine = line;
    7f54:	601a      	str	r2, [r3, #0]

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    return sdError(SD_CARD_ERROR_CMD18);
  }
  return true;
}
    7f56:	bd10      	pop	{r4, pc}
#else  // defined(__IMXRT1062__)
  // Errata - can't do infinite transfer.
  SDHC_BLKATTR = SDHC_BLKATTR_BLKCNT(MAX_BLKCNT) | SDHC_BLKATTR_BLKSIZE(512);
#endif  // defined(__IMXRT1062__)

  if (!cardCommand(CMD18_PGM_XFERTYP, m_highCapacity ? sector : 512*sector)) {
    7f58:	4621      	mov	r1, r4
    7f5a:	e7f1      	b.n	7f40 <SdioCard::readStart(unsigned long)+0x24>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f5c:	4908      	ldr	r1, [pc, #32]	; (7f80 <SdioCard::readStart(unsigned long)+0x64>)
    7f5e:	200a      	movs	r0, #10
  m_errorLine = line;
    7f60:	4b08      	ldr	r3, [pc, #32]	; (7f84 <SdioCard::readStart(unsigned long)+0x68>)
    7f62:	f240 329d 	movw	r2, #925	; 0x39d
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7f66:	7008      	strb	r0, [r1, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7f68:	2000      	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7f6a:	601a      	str	r2, [r3, #0]
//------------------------------------------------------------------------------
// SDHC will do Auto CMD12 after count sectors.
bool SdioCard::readStart(uint32_t sector) {
  DBG_IRQSTAT();
  if (yieldTimeout(isBusyCMD13)) {
    return sdError(SD_CARD_ERROR_CMD13);
    7f6c:	bd10      	pop	{r4, pc}
    7f6e:	bf00      	nop
    7f70:	00007399 	.word	0x00007399
    7f74:	402c0000 	.word	0x402c0000
    7f78:	20036c64 	.word	0x20036c64
    7f7c:	123a0030 	.word	0x123a0030
    7f80:	20001124 	.word	0x20001124
    7f84:	20036c94 	.word	0x20036c94

00007f88 <SdioCard::readSector(unsigned long, unsigned char*)>:
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7f88:	b570      	push	{r4, r5, r6, lr}
  if (m_sdioConfig.useDma()) {
    7f8a:	7a03      	ldrb	r3, [r0, #8]
bool SdioCard::readOCR(uint32_t* ocr) {
  *ocr = m_ocr;
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::readSector(uint32_t sector, uint8_t* dst) {
    7f8c:	f5ad 7d00 	sub.w	sp, sp, #512	; 0x200
    7f90:	4615      	mov	r5, r2
  if (m_sdioConfig.useDma()) {
    7f92:	07dc      	lsls	r4, r3, #31
    7f94:	d511      	bpl.n	7fba <SdioCard::readSector(unsigned long, unsigned char*)+0x32>
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;
    7f96:	0793      	lsls	r3, r2, #30
    7f98:	d020      	beq.n	7fdc <SdioCard::readSector(unsigned long, unsigned char*)+0x54>

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    7f9a:	2301      	movs	r3, #1
    7f9c:	4829      	ldr	r0, [pc, #164]	; (8044 <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    7f9e:	466a      	mov	r2, sp
    7fa0:	f7ff fa5e 	bl	7460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7fa4:	b300      	cbz	r0, 7fe8 <SdioCard::readSector(unsigned long, unsigned char*)+0x60>
      return sdError(SD_CARD_ERROR_CMD17);
    }
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    7fa6:	4669      	mov	r1, sp
    7fa8:	4628      	mov	r0, r5
    7faa:	f44f 7200 	mov.w	r2, #512	; 0x200
    7fae:	f000 fd51 	bl	8a54 <memcpy>
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
    7fb2:	2001      	movs	r0, #1
}
    7fb4:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    7fb8:	bd70      	pop	{r4, r5, r6, pc}
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    7fba:	4b23      	ldr	r3, [pc, #140]	; (8048 <SdioCard::readSector(unsigned long, unsigned char*)+0xc0>)
    7fbc:	4604      	mov	r4, r0
    7fbe:	460e      	mov	r6, r1
    7fc0:	781b      	ldrb	r3, [r3, #0]
    7fc2:	bb33      	cbnz	r3, 8012 <SdioCard::readSector(unsigned long, unsigned char*)+0x8a>
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    7fc4:	7a63      	ldrb	r3, [r4, #9]
    7fc6:	2b01      	cmp	r3, #1
    7fc8:	d019      	beq.n	7ffe <SdioCard::readSector(unsigned long, unsigned char*)+0x76>
      if (!syncDevice()) {
    7fca:	6823      	ldr	r3, [r4, #0]
    7fcc:	4620      	mov	r0, r4
    7fce:	699b      	ldr	r3, [r3, #24]
    7fd0:	4798      	blx	r3
    7fd2:	bb20      	cbnz	r0, 801e <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    7fd4:	2000      	movs	r0, #0
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    7fd6:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    7fda:	bd70      	pop	{r4, r5, r6, pc}
  if (m_sdioConfig.useDma()) {
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
    7fdc:	2301      	movs	r3, #1
    7fde:	4819      	ldr	r0, [pc, #100]	; (8044 <SdioCard::readSector(unsigned long, unsigned char*)+0xbc>)
    7fe0:	f7ff fa3e 	bl	7460 <rdWrSectors(unsigned long, unsigned long, unsigned char*, unsigned int)>
    7fe4:	2800      	cmp	r0, #0
    7fe6:	d1e4      	bne.n	7fb2 <SdioCard::readSector(unsigned long, unsigned char*)+0x2a>
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7fe8:	200b      	movs	r0, #11
    7fea:	4918      	ldr	r1, [pc, #96]	; (804c <SdioCard::readSector(unsigned long, unsigned char*)+0xc4>)
  m_errorLine = line;
    7fec:	4b18      	ldr	r3, [pc, #96]	; (8050 <SdioCard::readSector(unsigned long, unsigned char*)+0xc8>)
    7fee:	f240 325e 	movw	r2, #862	; 0x35e
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    7ff2:	7008      	strb	r0, [r1, #0]
    uint8_t aligned[512];

    uint8_t* ptr = (uint32_t)dst & 3 ? aligned : dst;

    if (!rdWrSectors(CMD17_DMA_XFERTYP, sector, ptr, 1)) {
      return sdError(SD_CARD_ERROR_CMD17);
    7ff4:	2000      	movs	r0, #0
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    7ff6:	601a      	str	r2, [r3, #0]
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
  }
  return true;
}
    7ff8:	f50d 7d00 	add.w	sp, sp, #512	; 0x200
    7ffc:	bd70      	pop	{r4, r5, r6, pc}
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
      return false;
    }
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
    7ffe:	6863      	ldr	r3, [r4, #4]
    8000:	429e      	cmp	r6, r3
    8002:	d015      	beq.n	8030 <SdioCard::readSector(unsigned long, unsigned char*)+0xa8>
      if (!syncDevice()) {
    8004:	6823      	ldr	r3, [r4, #0]
    8006:	4620      	mov	r0, r4
    8008:	699b      	ldr	r3, [r3, #24]
    800a:	4798      	blx	r3
    800c:	2800      	cmp	r0, #0
    800e:	d0e1      	beq.n	7fd4 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
    8010:	e005      	b.n	801e <SdioCard::readSector(unsigned long, unsigned char*)+0x96>
    8012:	f7ff fb57 	bl	76c4 <waitTransferComplete() [clone .part.10]>
    if (ptr != dst) {
      memcpy(dst, aligned, 512);
    }
  } else {
#if ENABLE_TEENSY_SDIO_MOD
    if (!waitTransferComplete()) {
    8016:	2800      	cmp	r0, #0
    8018:	d1d4      	bne.n	7fc4 <SdioCard::readSector(unsigned long, unsigned char*)+0x3c>
      return false;
    801a:	2000      	movs	r0, #0
    801c:	e7db      	b.n	7fd6 <SdioCard::readSector(unsigned long, unsigned char*)+0x4e>
#endif  // ENABLE_TEENSY_SDIO_MOD
    if (m_curState != READ_STATE || sector != m_curSector) {
      if (!syncDevice()) {
        return false;
      }
      if (!readStart(sector)) {
    801e:	4631      	mov	r1, r6
    8020:	4620      	mov	r0, r4
    8022:	f7ff ff7b 	bl	7f1c <SdioCard::readStart(unsigned long)>
    8026:	2800      	cmp	r0, #0
    8028:	d0d4      	beq.n	7fd4 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
        return false;
      }
      m_curSector = sector;
      m_curState = READ_STATE;
    802a:	2301      	movs	r3, #1
        return false;
      }
      if (!readStart(sector)) {
        return false;
      }
      m_curSector = sector;
    802c:	6066      	str	r6, [r4, #4]
      m_curState = READ_STATE;
    802e:	7263      	strb	r3, [r4, #9]
    }
    if (!readData(dst)) {
    8030:	4629      	mov	r1, r5
    8032:	4620      	mov	r0, r4
    8034:	f7ff ff14 	bl	7e60 <SdioCard::readData(unsigned char*)>
    8038:	2800      	cmp	r0, #0
    803a:	d0cb      	beq.n	7fd4 <SdioCard::readSector(unsigned long, unsigned char*)+0x4c>
      if (!syncDevice()) {
        return false;
      }
    }
#endif  // defined(__MK64FX512__) || defined(__MK66FX1M0__)
    m_curSector++;
    803c:	6863      	ldr	r3, [r4, #4]
    803e:	3301      	adds	r3, #1
    8040:	6063      	str	r3, [r4, #4]
    8042:	e7d9      	b.n	7ff8 <SdioCard::readSector(unsigned long, unsigned char*)+0x70>
    8044:	113a0011 	.word	0x113a0011
    8048:	20036c70 	.word	0x20036c70
    804c:	20001124 	.word	0x20001124
    8050:	20036c94 	.word	0x20036c94

00008054 <SdioCard::stopTransmission(bool)>:
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    8054:	b570      	push	{r4, r5, r6, lr}
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8056:	4a14      	ldr	r2, [pc, #80]	; (80a8 <SdioCard::stopTransmission(bool)+0x54>)
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
    8058:	2500      	movs	r5, #0
//------------------------------------------------------------------------------
uint32_t SdioCard::status() {
  return statusCMD13();
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
    805a:	460e      	mov	r6, r1
  m_curState = IDLE_STATE;
    805c:	7245      	strb	r5, [r0, #9]
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    805e:	4629      	mov	r1, r5
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8060:	6a93      	ldr	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    8062:	4812      	ldr	r0, [pc, #72]	; (80ac <SdioCard::stopTransmission(bool)+0x58>)
}
//------------------------------------------------------------------------------
bool SdioCard::stopTransmission(bool blocking) {
  m_curState = IDLE_STATE;
  // This fix allows CDIHB to be cleared in Tennsy 3.x without a reset.
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
    8064:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
    8068:	6293      	str	r3, [r2, #40]	; 0x28
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    806a:	f7ff f961 	bl	7330 <cardCommand(unsigned long, unsigned long)>
    806e:	4604      	mov	r4, r0
    8070:	b188      	cbz	r0, 8096 <SdioCard::stopTransmission(bool)+0x42>
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    8072:	b90e      	cbnz	r6, 8078 <SdioCard::stopTransmission(bool)+0x24>
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    8074:	4620      	mov	r0, r4
    8076:	bd70      	pop	{r4, r5, r6, pc}
  SDHC_PROCTL &= ~SDHC_PROCTL_SABGREQ;
  if (!cardCommand(CMD12_XFERTYP, 0)) {
    return sdError(SD_CARD_ERROR_CMD12);
  }
  if (blocking) {
    if (yieldTimeout(isBusyDat)) {
    8078:	480d      	ldr	r0, [pc, #52]	; (80b0 <SdioCard::stopTransmission(bool)+0x5c>)
    807a:	f7ff f8f9 	bl	7270 <yieldTimeout(bool (*)())>
    807e:	2800      	cmp	r0, #0
    8080:	d0f8      	beq.n	8074 <SdioCard::stopTransmission(bool)+0x20>
      return sdError(SD_CARD_ERROR_CMD13);
    8082:	462c      	mov	r4, r5
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8084:	490b      	ldr	r1, [pc, #44]	; (80b4 <SdioCard::stopTransmission(bool)+0x60>)
    8086:	200a      	movs	r0, #10
  m_errorLine = line;
    8088:	4b0b      	ldr	r3, [pc, #44]	; (80b8 <SdioCard::stopTransmission(bool)+0x64>)
    808a:	f240 32c3 	movw	r2, #963	; 0x3c3
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    808e:	7008      	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    8090:	4620      	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    8092:	601a      	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    8094:	bd70      	pop	{r4, r5, r6, pc}
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    8096:	4907      	ldr	r1, [pc, #28]	; (80b4 <SdioCard::stopTransmission(bool)+0x60>)
    8098:	2009      	movs	r0, #9
  m_errorLine = line;
    809a:	4b07      	ldr	r3, [pc, #28]	; (80b8 <SdioCard::stopTransmission(bool)+0x64>)
    809c:	f240 32bf 	movw	r2, #959	; 0x3bf
#endif  // USE_DEBUG_MODE
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
    80a0:	7008      	strb	r0, [r1, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    80a2:	4620      	mov	r0, r4
//==============================================================================
// Error function and macro.
#define sdError(code) setSdErrorCode(code, __LINE__)
inline bool setSdErrorCode(uint8_t code, uint32_t line) {
  m_errorCode = code;
  m_errorLine = line;
    80a4:	601a      	str	r2, [r3, #0]
    if (yieldTimeout(isBusyDat)) {
      return sdError(SD_CARD_ERROR_CMD13);
    }
  }
  return true;
}
    80a6:	bd70      	pop	{r4, r5, r6, pc}
    80a8:	402c0000 	.word	0x402c0000
    80ac:	0cdb0000 	.word	0x0cdb0000
    80b0:	000070b5 	.word	0x000070b5
    80b4:	20001124 	.word	0x20001124
    80b8:	20036c94 	.word	0x20036c94

000080bc <SdioCard::syncDevice()>:
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    80bc:	4b09      	ldr	r3, [pc, #36]	; (80e4 <SdioCard::syncDevice()+0x28>)
    80be:	781b      	ldrb	r3, [r3, #0]
    }
  }
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
    80c0:	b510      	push	{r4, lr}
    80c2:	4604      	mov	r4, r0
  return false;  // Caller will set errorCode.
}
#if ENABLE_TEENSY_SDIO_MOD
//------------------------------------------------------------------------------
static bool waitTransferComplete() {
  if (!m_transferActive) {
    80c4:	b94b      	cbnz	r3, 80da <SdioCard::syncDevice()+0x1e>
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    80c6:	7a63      	ldrb	r3, [r4, #9]
    80c8:	b90b      	cbnz	r3, 80ce <SdioCard::syncDevice()+0x12>
    if (!writeStop()) {
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
    80ca:	2001      	movs	r0, #1
    80cc:	bd10      	pop	{r4, pc}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    80ce:	4620      	mov	r0, r4
    80d0:	2101      	movs	r1, #1
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    80d2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    return false;
  }
  if (m_curState != IDLE_STATE) {
    return stopTransmission(true);
    80d6:	f7ff bfbd 	b.w	8054 <SdioCard::stopTransmission(bool)>
    80da:	f7ff faf3 	bl	76c4 <waitTransferComplete() [clone .part.10]>
  return true;
}
//------------------------------------------------------------------------------
bool SdioCard::syncDevice() {
#if ENABLE_TEENSY_SDIO_MOD
  if (!waitTransferComplete()) {
    80de:	2800      	cmp	r0, #0
    80e0:	d1f1      	bne.n	80c6 <SdioCard::syncDevice()+0xa>
      return false;
    }
  }
#endif  // ENABLE_TEENSY_SDIO_MOD
  return true;
}
    80e2:	bd10      	pop	{r4, pc}
    80e4:	20036c70 	.word	0x20036c70

000080e8 <SdSpiCard::errorCode() const>:
  /**
   * \return code for the last error. See SdCardInfo.h for a list of error codes.
   */
  uint8_t errorCode() const {
    return m_errorCode;
  }
    80e8:	7dc0      	ldrb	r0, [r0, #23]
    80ea:	4770      	bx	lr

000080ec <SdSpiCard::errorData() const>:
  /** \return error data for last error. */
  uint32_t errorData() const {
    return m_status;
  }
    80ec:	7e40      	ldrb	r0, [r0, #25]
    80ee:	4770      	bx	lr

000080f0 <SdSpiCard::readSector(unsigned long, unsigned char*)>:
   *
   * \param[in] sector Logical sector to be read.
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
    80f0:	b410      	push	{r4}
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    80f2:	6804      	ldr	r4, [r0, #0]
    80f4:	2301      	movs	r3, #1
    80f6:	6924      	ldr	r4, [r4, #16]
    80f8:	46a4      	mov	ip, r4
#else  // ENABLE_DEDICATED_SPI
    return readSingle(sector, dst);
#endif  // ENABLE_DEDICATED_SPI
  }
    80fa:	f85d 4b04 	ldr.w	r4, [sp], #4
   * \param[out] dst Pointer to the location that will receive the data.
   * \return true for success or false for failure.
   */
  bool readSector(uint32_t sector, uint8_t* dst) {
#if ENABLE_DEDICATED_SPI
    return readSectors(sector, dst, 1);
    80fe:	4760      	bx	ip

00008100 <SdSpiCard::type() const>:
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
  }
    8100:	7e80      	ldrb	r0, [r0, #26]
    8102:	4770      	bx	lr

00008104 <SdSpiCard::~SdSpiCard()>:
/**
 * \class SdSpiCard
 * \brief Raw access to SD and SDHC flash memory cards via SPI protocol.
 */
#if HAS_SDIO_CLASS
class SdSpiCard : public SdCardInterface {
    8104:	4770      	bx	lr
    8106:	bf00      	nop

00008108 <SdSpiCard::~SdSpiCard()>:
    8108:	b510      	push	{r4, lr}
    810a:	4604      	mov	r4, r0
    810c:	211c      	movs	r1, #28
    810e:	f002 f8d5 	bl	a2bc <operator delete(void*, unsigned int)>
    8112:	4620      	mov	r0, r4
    8114:	bd10      	pop	{r4, pc}
    8116:	bf00      	nop

00008118 <SdSpiCard::spiStart() [clone .part.5] [clone .constprop.25]>:
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStart() {
    8118:	b510      	push	{r4, lr}
    811a:	4604      	mov	r4, r0
  bool waitNotBusy(SdMillis_t timeoutMS);
  bool writeData(uint8_t token, const uint8_t* src);

#if SPI_DRIVER_SELECT < 2
  void spiActivate() {
    m_spiDriver.activate();
    811c:	3004      	adds	r0, #4
    811e:	f000 fb6d 	bl	87fc <SdSpiArduinoDriver::activate()>
  uint8_t cardCommand(uint8_t cmd, uint32_t arg);
  bool isTimedOut(SdMillis_t startMS, SdMillis_t timeoutMS);
  bool readData(uint8_t* dst, size_t count);
  bool readRegister(uint8_t cmd, void* buf);
  void spiSelect() {
    sdCsWrite(m_csPin, false);
    8122:	2100      	movs	r1, #0
    8124:	7da0      	ldrb	r0, [r4, #22]
    8126:	f000 fb67 	bl	87f8 <sdCsWrite(unsigned char, bool)>
  if (!m_spiActive) {
    spiActivate();
    spiSelect();
    m_spiActive = true;
    812a:	2301      	movs	r3, #1
    812c:	7623      	strb	r3, [r4, #24]
    812e:	bd10      	pop	{r4, pc}

00008130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>:
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
    8130:	b538      	push	{r3, r4, r5, lr}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8132:	1d05      	adds	r5, r0, #4
    8134:	4604      	mov	r4, r0
  }
  void type(uint8_t value) {
    m_type = value;
  }
  void spiUnselect() {
    sdCsWrite(m_csPin, true);
    8136:	2101      	movs	r1, #1
    8138:	7d80      	ldrb	r0, [r0, #22]
    813a:	f000 fb5d 	bl	87f8 <sdCsWrite(unsigned char, bool)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    813e:	21ff      	movs	r1, #255	; 0xff
    8140:	4628      	mov	r0, r5
    8142:	f000 fc25 	bl	8990 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiBegin(SdSpiConfig spiConfig) {
    m_spiDriver.begin(spiConfig);
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
    8146:	4628      	mov	r0, r5
    8148:	f000 fbda 	bl	8900 <SdSpiArduinoDriver::deactivate()>
  if (m_spiActive) {
    spiUnselect();
    spiSend(0XFF);
    spiDeactivate();
    m_spiActive = false;
    814c:	2300      	movs	r3, #0
    814e:	7623      	strb	r3, [r4, #24]
    8150:	bd38      	pop	{r3, r4, r5, pc}
    8152:	bf00      	nop

00008154 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    8154:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8158:	461f      	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    815a:	7d03      	ldrb	r3, [r0, #20]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    815c:	4605      	mov	r5, r0
    815e:	460e      	mov	r6, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    8160:	2b02      	cmp	r3, #2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
    8162:	4614      	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    8164:	d022      	beq.n	81ac <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x58>
    if (!writeStart(sector)) {
    8166:	682b      	ldr	r3, [r5, #0]
    8168:	4631      	mov	r1, r6
    816a:	4628      	mov	r0, r5
    816c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
    816e:	4798      	blx	r3
    8170:	b918      	cbnz	r0, 817a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x26>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8172:	7e28      	ldrb	r0, [r5, #24]
    8174:	b9a0      	cbnz	r0, 81a0 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x4c>
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    8176:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
    817a:	2302      	movs	r3, #2
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    if (!writeStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    817c:	612e      	str	r6, [r5, #16]
    m_curState = WRITE_STATE;
    817e:	752b      	strb	r3, [r5, #20]
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8180:	b1c7      	cbz	r7, 81b4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x60>
    8182:	2600      	movs	r6, #0
    8184:	e001      	b.n	818a <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x36>
    8186:	42b7      	cmp	r7, r6
    8188:	d014      	beq.n	81b4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x60>
    if (!writeData(src)) {
    818a:	682b      	ldr	r3, [r5, #0]
    818c:	4621      	mov	r1, r4
    818e:	4628      	mov	r0, r5
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8190:	3601      	adds	r6, #1
    if (!writeData(src)) {
    8192:	6c5b      	ldr	r3, [r3, #68]	; 0x44
      goto fail;
    }
    m_curSector = sector;
    m_curState = WRITE_STATE;
  }
  for (size_t i = 0; i < ns; i++, src += 512) {
    8194:	f504 7400 	add.w	r4, r4, #512	; 0x200
    if (!writeData(src)) {
    8198:	4798      	blx	r3
    819a:	2800      	cmp	r0, #0
    819c:	d1f3      	bne.n	8186 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x32>
    819e:	e7e8      	b.n	8172 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x1e>
    81a0:	4628      	mov	r0, r5
    81a2:	f7ff ffc5 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  return writeStop();
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
    81a6:	2000      	movs	r0, #0
}
    81a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSectors(uint32_t sector, const uint8_t* src, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != WRITE_STATE || m_curSector != sector) {
    81ac:	6903      	ldr	r3, [r0, #16]
    81ae:	428b      	cmp	r3, r1
    81b0:	d1d9      	bne.n	8166 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x12>
    81b2:	e7e5      	b.n	8180 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x2c>
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    81b4:	692b      	ldr	r3, [r5, #16]
  return m_sharedSpi ? syncDevice() : true;
    81b6:	7d6a      	ldrb	r2, [r5, #21]
  for (size_t i = 0; i < ns; i++, src += 512) {
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
    81b8:	441f      	add	r7, r3
    81ba:	612f      	str	r7, [r5, #16]
  return m_sharedSpi ? syncDevice() : true;
    81bc:	b912      	cbnz	r2, 81c4 <SdSpiCard::writeSectors(unsigned long, unsigned char const*, unsigned int)+0x70>
    81be:	2001      	movs	r0, #1
    81c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    81c4:	682b      	ldr	r3, [r5, #0]
    81c6:	4628      	mov	r0, r5
    81c8:	699b      	ldr	r3, [r3, #24]
#endif  // ENABLE_DEDICATED_SPI

 fail:
  spiStop();
  return false;
}
    81ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!writeData(src)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    81ce:	4718      	bx	r3

000081d0 <SdSpiCard::isBusy()>:
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    81d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    81d2:	7d03      	ldrb	r3, [r0, #20]
    81d4:	2b01      	cmp	r3, #1
    81d6:	d020      	beq.n	821a <SdSpiCard::isBusy()+0x4a>
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
  bool spiActive = m_spiActive;
    81d8:	7e07      	ldrb	r7, [r0, #24]
    81da:	4605      	mov	r5, r0
  if (!spiActive) {
    81dc:	b1af      	cbz	r7, 820a <SdSpiCard::isBusy()+0x3a>
    81de:	1d2e      	adds	r6, r5, #4
bool SdSpiCard::eraseSingleSectorEnable() {
  csd_t csd;
  return readCSD(&csd) ? csd.v1.erase_blk_en : false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
    81e0:	2408      	movs	r4, #8
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    81e2:	4630      	mov	r0, r6
    81e4:	f000 fbb8 	bl	8958 <SdSpiArduinoDriver::receive()>
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
    81e8:	28ff      	cmp	r0, #255	; 0xff
    81ea:	f104 33ff 	add.w	r3, r4, #4294967295
    81ee:	d008      	beq.n	8202 <SdSpiCard::isBusy()+0x32>
  bool rtn = true;
  bool spiActive = m_spiActive;
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    81f0:	f013 04ff 	ands.w	r4, r3, #255	; 0xff
    81f4:	d1f5      	bne.n	81e2 <SdSpiCard::isBusy()+0x12>
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
  }
#endif  // ENABLE_DEDICATED_SPI
  bool rtn = true;
    81f6:	2401      	movs	r4, #1
    if (0XFF == spiReceive()) {
      rtn = false;
      break;
    }
  }
  if (!spiActive) {
    81f8:	b90f      	cbnz	r7, 81fe <SdSpiCard::isBusy()+0x2e>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    81fa:	7e2b      	ldrb	r3, [r5, #24]
    81fc:	b943      	cbnz	r3, 8210 <SdSpiCard::isBusy()+0x40>
    }
  }
  if (!spiActive) {
    spiStop();
  }
  return rtn;
    81fe:	4620      	mov	r0, r4
}
    8200:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (!spiActive) {
    spiStart();
  }
  for (uint8_t i = 0; i < 8; i++) {
    if (0XFF == spiReceive()) {
      rtn = false;
    8202:	2400      	movs	r4, #0
      break;
    }
  }
  if (!spiActive) {
    8204:	2f00      	cmp	r7, #0
    8206:	d0f8      	beq.n	81fa <SdSpiCard::isBusy()+0x2a>
    8208:	e7f9      	b.n	81fe <SdSpiCard::isBusy()+0x2e>
    820a:	f7ff ff85 	bl	8118 <SdSpiCard::spiStart() [clone .part.5] [clone .constprop.25]>
    820e:	e7e6      	b.n	81de <SdSpiCard::isBusy()+0xe>
    8210:	4628      	mov	r0, r5
    8212:	f7ff ff8d 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    spiStop();
  }
  return rtn;
    8216:	4620      	mov	r0, r4
    8218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
}
//------------------------------------------------------------------------------
bool SdSpiCard::isBusy() {
#if ENABLE_DEDICATED_SPI
  if (m_curState == READ_STATE) {
    return false;
    821a:	2000      	movs	r0, #0
    821c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    821e:	bf00      	nop

00008220 <SdSpiCard::readData(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst) {
  return readData(dst, 512);
}
//------------------------------------------------------------------------------
bool SdSpiCard::readData(uint8_t* dst, size_t count) {
    8220:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8224:	4e1a      	ldr	r6, [pc, #104]	; (8290 <SdSpiCard::readData(unsigned char*, unsigned int)+0x70>)
    8226:	4604      	mov	r4, r0
    8228:	4688      	mov	r8, r1
    822a:	4691      	mov	r9, r2
    822c:	6835      	ldr	r5, [r6, #0]
    822e:	1d07      	adds	r7, r0, #4

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    if (isTimedOut(t0, SD_READ_TIMEOUT)) {
    8230:	b2ad      	uxth	r5, r5
    8232:	e005      	b.n	8240 <SdSpiCard::readData(unsigned char*, unsigned int)+0x20>
    8234:	6833      	ldr	r3, [r6, #0]
    8236:	b29b      	uxth	r3, r3
    8238:	1b5b      	subs	r3, r3, r5
    823a:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
    823e:	dc11      	bgt.n	8264 <SdSpiCard::readData(unsigned char*, unsigned int)+0x44>
    8240:	4638      	mov	r0, r7
    8242:	f000 fb89 	bl	8958 <SdSpiArduinoDriver::receive()>
#endif  // USE_SD_CRC

  DBG_BEGIN_TIME(DBG_WAIT_READ);
  // wait for start sector token
  SdMillis_t t0 = SysCall::curTimeMS();
  while ((m_status = spiReceive()) == 0XFF) {
    8246:	28ff      	cmp	r0, #255	; 0xff
    8248:	7660      	strb	r0, [r4, #25]
    824a:	d0f3      	beq.n	8234 <SdSpiCard::readData(unsigned char*, unsigned int)+0x14>
      error(SD_CARD_ERROR_READ_TIMEOUT);
      goto fail;
    }
  }
  DBG_END_TIME(DBG_WAIT_READ);
  if (m_status != DATA_START_SECTOR) {
    824c:	28fe      	cmp	r0, #254	; 0xfe
    824e:	d00c      	beq.n	826a <SdSpiCard::readData(unsigned char*, unsigned int)+0x4a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8250:	2318      	movs	r3, #24
    8252:	75e3      	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8254:	7e20      	ldrb	r0, [r4, #24]
    8256:	b118      	cbz	r0, 8260 <SdSpiCard::readData(unsigned char*, unsigned int)+0x40>
    8258:	4620      	mov	r0, r4
    825a:	f7ff ff69 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
#endif  // USE_SD_CRC
  return true;

 fail:
  spiStop();
  return false;
    825e:	2000      	movs	r0, #0
}
    8260:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8264:	231d      	movs	r3, #29
    8266:	75e3      	strb	r3, [r4, #23]
    8268:	e7f4      	b.n	8254 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
    826a:	464a      	mov	r2, r9
    826c:	4641      	mov	r1, r8
    826e:	4638      	mov	r0, r7
    8270:	f000 fb7e 	bl	8970 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>
  if (m_status != DATA_START_SECTOR) {
    error(SD_CARD_ERROR_READ_TOKEN);
    goto fail;
  }
  // transfer data
  if ((m_status = spiReceive(dst, count))) {
    8274:	7660      	strb	r0, [r4, #25]
    8276:	b110      	cbz	r0, 827e <SdSpiCard::readData(unsigned char*, unsigned int)+0x5e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8278:	2325      	movs	r3, #37	; 0x25
    827a:	75e3      	strb	r3, [r4, #23]
    827c:	e7ea      	b.n	8254 <SdSpiCard::readData(unsigned char*, unsigned int)+0x34>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    827e:	4638      	mov	r0, r7
    8280:	f000 fb6a 	bl	8958 <SdSpiArduinoDriver::receive()>
    8284:	4638      	mov	r0, r7
    8286:	f000 fb67 	bl	8958 <SdSpiArduinoDriver::receive()>
#else  // USE_SD_CRC
  // discard crc
  spiReceive();
  spiReceive();
#endif  // USE_SD_CRC
  return true;
    828a:	2001      	movs	r0, #1
    828c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    8290:	20036ca0 	.word	0x20036ca0

00008294 <SdSpiCard::waitNotBusy(unsigned short)>:
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
//------------------------------------------------------------------------------
// wait for card to go not busy
bool SdSpiCard::waitNotBusy(SdMillis_t timeoutMS) {
    8294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8296:	4d0a      	ldr	r5, [pc, #40]	; (82c0 <SdSpiCard::waitNotBusy(unsigned short)+0x2c>)
    8298:	460f      	mov	r7, r1
    829a:	1d06      	adds	r6, r0, #4
    829c:	682c      	ldr	r4, [r5, #0]
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
    829e:	b2a4      	uxth	r4, r4
    82a0:	e004      	b.n	82ac <SdSpiCard::waitNotBusy(unsigned short)+0x18>
    82a2:	682b      	ldr	r3, [r5, #0]
    82a4:	b29b      	uxth	r3, r3
    82a6:	1b1b      	subs	r3, r3, r4
    82a8:	42bb      	cmp	r3, r7
    82aa:	dc06      	bgt.n	82ba <SdSpiCard::waitNotBusy(unsigned short)+0x26>
    82ac:	4630      	mov	r0, r6
    82ae:	f000 fb53 	bl	8958 <SdSpiArduinoDriver::receive()>
    }
  }
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    82b2:	28ff      	cmp	r0, #255	; 0xff
    82b4:	d1f5      	bne.n	82a2 <SdSpiCard::waitNotBusy(unsigned short)+0xe>
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    }
  }
  return true;
    82b6:	2001      	movs	r0, #1
#endif  // WDT_YIELD_TIME_MILLIS
}
    82b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  return false;
#else  // WDT_YIELD_TIME_MILLIS
  // Check not busy first since yield is not called in isTimedOut.
  while (spiReceive() != 0XFF) {
    if (isTimedOut(t0, timeoutMS)) {
      return false;
    82ba:	2000      	movs	r0, #0
    82bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    82be:	bf00      	nop
    82c0:	20036ca0 	.word	0x20036ca0

000082c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    82c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82c8:	b082      	sub	sp, #8
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    82ca:	7d03      	ldrb	r3, [r0, #20]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
    82cc:	4605      	mov	r5, r0
    82ce:	460f      	mov	r7, r1
    82d0:	9201      	str	r2, [sp, #4]
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    82d2:	2b00      	cmp	r3, #0
    82d4:	d131      	bne.n	833a <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x76>
    return 0XFF;
  }
#endif  // ENABLE_DEDICATED_SPI
  // select card
  if (!m_spiActive) {
    82d6:	7e2b      	ldrb	r3, [r5, #24]
    82d8:	2b00      	cmp	r3, #0
    82da:	d03d      	beq.n	8358 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x94>
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    82dc:	2f00      	cmp	r7, #0
    82de:	d135      	bne.n	834c <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x88>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    82e0:	1d2e      	adds	r6, r5, #4
    82e2:	f047 0140 	orr.w	r1, r7, #64	; 0x40
    82e6:	f10d 0804 	add.w	r8, sp, #4
    82ea:	ac02      	add	r4, sp, #8
    82ec:	4630      	mov	r0, r6
    82ee:	f000 fb4f 	bl	8990 <SdSpiArduinoDriver::send(unsigned char)>
    82f2:	f814 1d01 	ldrb.w	r1, [r4, #-1]!
    82f6:	4630      	mov	r0, r6
    82f8:	f000 fb4a 	bl	8990 <SdSpiArduinoDriver::send(unsigned char)>
  // send command
  spiSend(cmd | 0x40);

  // send argument
  uint8_t* pa = reinterpret_cast<uint8_t*>(&arg);
  for (int8_t i = 3; i >= 0; i--) {
    82fc:	45a0      	cmp	r8, r4
    82fe:	d1f8      	bne.n	82f2 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x2e>
    spiSend(pa[i]);
  }

  // send CRC - correct for CMD0 with arg zero or CMD8 with arg 0X1AA
  spiSend(cmd == CMD0 ? 0X95 : 0X87);
    8300:	2f00      	cmp	r7, #0
    8302:	4630      	mov	r0, r6
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8304:	f04f 0400 	mov.w	r4, #0
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    8308:	bf0c      	ite	eq
    830a:	2195      	moveq	r1, #149	; 0x95
    830c:	2187      	movne	r1, #135	; 0x87
    830e:	f000 fb3f 	bl	8990 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    8312:	4630      	mov	r0, r6
    8314:	f000 fb20 	bl	8958 <SdSpiArduinoDriver::receive()>
    8318:	4630      	mov	r0, r6
    831a:	f000 fb1d 	bl	8958 <SdSpiArduinoDriver::receive()>

  // discard first fill byte to avoid MISO pull-up problem.
  spiReceive();

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
    831e:	7668      	strb	r0, [r5, #25]
    8320:	b2e3      	uxtb	r3, r4
    8322:	3401      	adds	r4, #1
    8324:	09c2      	lsrs	r2, r0, #7
    8326:	2b09      	cmp	r3, #9
    8328:	bf8c      	ite	hi
    832a:	2300      	movhi	r3, #0
    832c:	f002 0301 	andls.w	r3, r2, #1
    8330:	2b00      	cmp	r3, #0
    8332:	d1f1      	bne.n	8318 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x54>
  }
  return m_status;
}
    8334:	b002      	add	sp, #8
    8336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
}
//------------------------------------------------------------------------------
// send command and return error code.  Return zero for OK
uint8_t SdSpiCard::cardCommand(uint8_t cmd, uint32_t arg) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != IDLE_STATE && !syncDevice()) {
    833a:	6803      	ldr	r3, [r0, #0]
    833c:	699b      	ldr	r3, [r3, #24]
    833e:	4798      	blx	r3
    8340:	2800      	cmp	r0, #0
    8342:	d1c8      	bne.n	82d6 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x12>
    return 0XFF;
    8344:	20ff      	movs	r0, #255	; 0xff

  // there are 1-8 fill bytes before response.  fill bytes should be 0XFF.
  for (uint8_t i = 0; ((m_status = spiReceive()) & 0X80) && i < 10; i++) {
  }
  return m_status;
}
    8346:	b002      	add	sp, #8
    8348:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    spiStart();
  }
  // wait if busy unless CMD0
  if (cmd != CMD0) {
    DBG_BEGIN_TIME(DBG_CMD_BUSY);
    waitNotBusy(SD_CMD_TIMEOUT);
    834c:	f44f 7196 	mov.w	r1, #300	; 0x12c
    8350:	4628      	mov	r0, r5
    8352:	f7ff ff9f 	bl	8294 <SdSpiCard::waitNotBusy(unsigned short)>
    8356:	e7c3      	b.n	82e0 <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x1c>
    8358:	4628      	mov	r0, r5
    835a:	f7ff fedd 	bl	8118 <SdSpiCard::spiStart() [clone .part.5] [clone .constprop.25]>
    835e:	e7bd      	b.n	82dc <SdSpiCard::cardCommand(unsigned char, unsigned long)+0x18>

00008360 <SdSpiCard::readOCR(unsigned long*)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    8360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    8362:	2200      	movs	r2, #0
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    8364:	460d      	mov	r5, r1
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    8366:	213a      	movs	r1, #58	; 0x3a
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readOCR(uint32_t* ocr) {
    8368:	4606      	mov	r6, r0
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    836a:	f7ff ffab 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    836e:	b968      	cbnz	r0, 838c <SdSpiCard::readOCR(unsigned long*)+0x2c>
    8370:	1d37      	adds	r7, r6, #4
    8372:	1d2c      	adds	r4, r5, #4
    8374:	4638      	mov	r0, r7
    8376:	f000 faef 	bl	8958 <SdSpiArduinoDriver::receive()>
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    p[3 - i] = spiReceive();
    837a:	f804 0d01 	strb.w	r0, [r4, #-1]!
  uint8_t* p = reinterpret_cast<uint8_t*>(ocr);
  if (cardCommand(CMD58, 0)) {
    error(SD_CARD_ERROR_CMD58);
    goto fail;
  }
  for (uint8_t i = 0; i < 4; i++) {
    837e:	42a5      	cmp	r5, r4
    8380:	d1f8      	bne.n	8374 <SdSpiCard::readOCR(unsigned long*)+0x14>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8382:	7e34      	ldrb	r4, [r6, #24]
    8384:	b96c      	cbnz	r4, 83a2 <SdSpiCard::readOCR(unsigned long*)+0x42>
    8386:	2401      	movs	r4, #1
  return true;

 fail:
  spiStop();
  return false;
}
    8388:	4620      	mov	r0, r4
    838a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    838c:	2312      	movs	r3, #18
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    838e:	7e34      	ldrb	r4, [r6, #24]
    8390:	75f3      	strb	r3, [r6, #23]
    8392:	2c00      	cmp	r4, #0
    8394:	d0f8      	beq.n	8388 <SdSpiCard::readOCR(unsigned long*)+0x28>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    8396:	2400      	movs	r4, #0
    8398:	4630      	mov	r0, r6
    839a:	f7ff fec9 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
}
    839e:	4620      	mov	r0, r4
    83a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    83a2:	4630      	mov	r0, r6
    83a4:	f7ff fec4 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    83a8:	4620      	mov	r0, r4
    83aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000083ac <SdSpiCard::readRegister(unsigned char, void*)>:
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    83ac:	b538      	push	{r3, r4, r5, lr}
    83ae:	4615      	mov	r5, r2
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    83b0:	2200      	movs	r2, #0
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
/** read CID or CSR register */
bool SdSpiCard::readRegister(uint8_t cmd, void* buf) {
    83b2:	4604      	mov	r4, r0
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    83b4:	f7ff ff86 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    83b8:	b140      	cbz	r0, 83cc <SdSpiCard::readRegister(unsigned char, void*)+0x20>
    83ba:	231b      	movs	r3, #27
    83bc:	75e3      	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    83be:	7e20      	ldrb	r0, [r4, #24]
    83c0:	b118      	cbz	r0, 83ca <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    83c2:	4620      	mov	r0, r4
    83c4:	f7ff feb4 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    83c8:	2000      	movs	r0, #0
}
    83ca:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t* dst = reinterpret_cast<uint8_t*>(buf);
  if (cardCommand(cmd, 0)) {
    error(SD_CARD_ERROR_READ_REG);
    goto fail;
  }
  if (!readData(dst, 16)) {
    83cc:	4629      	mov	r1, r5
    83ce:	2210      	movs	r2, #16
    83d0:	4620      	mov	r0, r4
    83d2:	f7ff ff25 	bl	8220 <SdSpiCard::readData(unsigned char*, unsigned int)>
    83d6:	2800      	cmp	r0, #0
    83d8:	d0f1      	beq.n	83be <SdSpiCard::readRegister(unsigned char, void*)+0x12>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    83da:	7e25      	ldrb	r5, [r4, #24]
    83dc:	2d00      	cmp	r5, #0
    83de:	d0f4      	beq.n	83ca <SdSpiCard::readRegister(unsigned char, void*)+0x1e>
    83e0:	4620      	mov	r0, r4
    83e2:	f7ff fea5 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    83e6:	4628      	mov	r0, r5
    83e8:	bd38      	pop	{r3, r4, r5, pc}
    83ea:	bf00      	nop

000083ec <SdSpiCard::readCSD(csd_t*)>:
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    83ec:	460a      	mov	r2, r1
    83ee:	2109      	movs	r1, #9
    83f0:	f7ff bfdc 	b.w	83ac <SdSpiCard::readRegister(unsigned char, void*)>

000083f4 <SdSpiCard::readCID(CID*)>:
   * \param[out] cid pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCID(cid_t* cid) {
    return readRegister(CMD10, cid);
    83f4:	460a      	mov	r2, r1
    83f6:	210a      	movs	r1, #10
    83f8:	f7ff bfd8 	b.w	83ac <SdSpiCard::readRegister(unsigned char, void*)>

000083fc <SdSpiCard::sectorCount()>:
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    83fc:	6803      	ldr	r3, [r0, #0]
    83fe:	4a24      	ldr	r2, [pc, #144]	; (8490 <SdSpiCard::sectorCount()+0x94>)
    8400:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    8402:	4293      	cmp	r3, r2
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
    8404:	b530      	push	{r4, r5, lr}
    8406:	b085      	sub	sp, #20
    8408:	d12f      	bne.n	846a <SdSpiCard::sectorCount()+0x6e>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    840a:	466a      	mov	r2, sp
    840c:	2109      	movs	r1, #9
    840e:	f7ff ffcd 	bl	83ac <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    8412:	b138      	cbz	r0, 8424 <SdSpiCard::sectorCount()+0x28>
  csd1_t v1;
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    8414:	f89d 3000 	ldrb.w	r3, [sp]
    8418:	f013 03c0 	ands.w	r3, r3, #192	; 0xc0
    841c:	d004      	beq.n	8428 <SdSpiCard::sectorCount()+0x2c>
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    841e:	2b40      	cmp	r3, #64	; 0x40
    8420:	d026      	beq.n	8470 <SdSpiCard::sectorCount()+0x74>
    8422:	2000      	movs	r0, #0
}
    8424:	b005      	add	sp, #20
    8426:	bd30      	pop	{r4, r5, pc}
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
    8428:	f89d 4009 	ldrb.w	r4, [sp, #9]
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
    842c:	f89d 3006 	ldrb.w	r3, [sp, #6]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8430:	f89d 2007 	ldrb.w	r2, [sp, #7]
    8434:	f004 0403 	and.w	r4, r4, #3
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    8438:	f89d 000a 	ldrb.w	r0, [sp, #10]
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    843c:	f003 0303 	and.w	r3, r3, #3
    8440:	0064      	lsls	r4, r4, #1
  csd2_t v2;
};
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    8442:	f89d 1005 	ldrb.w	r1, [sp, #5]
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    8446:	0092      	lsls	r2, r2, #2
//-----------------------------------------------------------------------------
inline uint32_t sdCardCapacity(csd_t* csd) {
  if (csd->v1.csd_ver == 0) {
    uint8_t read_bl_len = csd->v1.read_bl_len;
    uint16_t c_size = (csd->v1.c_size_high << 10)
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    8448:	f89d 5008 	ldrb.w	r5, [sp, #8]
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
    844c:	ea44 10d0 	orr.w	r0, r4, r0, lsr #7
    8450:	f001 010f 	and.w	r1, r1, #15
    8454:	ea42 2383 	orr.w	r3, r2, r3, lsl #10
    8458:	4408      	add	r0, r1
    845a:	ea43 1395 	orr.w	r3, r3, r5, lsr #6
    845e:	3807      	subs	r0, #7
    8460:	3301      	adds	r3, #1
    8462:	fa03 f000 	lsl.w	r0, r3, r0
    8466:	b005      	add	sp, #20
    8468:	bd30      	pop	{r4, r5, pc}
  return false;
}
//------------------------------------------------------------------------------
uint32_t SdSpiCard::sectorCount() {
  csd_t csd;
  return readCSD(&csd) ? sdCardCapacity(&csd) : 0;
    846a:	4669      	mov	r1, sp
    846c:	4798      	blx	r3
    846e:	e7d0      	b.n	8412 <SdSpiCard::sectorCount()+0x16>
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8470:	f89d 3009 	ldrb.w	r3, [sp, #9]
                      | (csd->v1.c_size_mid << 2) | csd->v1.c_size_low;
    uint8_t c_size_mult = (csd->v1.c_size_mult_high << 1)
                          | csd->v1.c_size_mult_low;
    return (uint32_t)(c_size + 1) << (c_size_mult + read_bl_len - 7);
  } else if (csd->v2.csd_ver == 1) {
    return (((uint32_t)csd->v2.c_size_high << 16) +
    8474:	f89d 1007 	ldrb.w	r1, [sp, #7]
           ((uint16_t)csd->v2.c_size_mid << 8) + csd->v2.c_size_low + 1) << 10;
    8478:	1c5a      	adds	r2, r3, #1
    847a:	f89d 0008 	ldrb.w	r0, [sp, #8]
    847e:	f001 033f 	and.w	r3, r1, #63	; 0x3f
    8482:	eb02 4303 	add.w	r3, r2, r3, lsl #16
    8486:	eb03 2000 	add.w	r0, r3, r0, lsl #8
    848a:	0280      	lsls	r0, r0, #10
}
    848c:	b005      	add	sp, #20
    848e:	bd30      	pop	{r4, r5, pc}
    8490:	000083ed 	.word	0x000083ed

00008494 <SdSpiCard::readStart(unsigned long)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    8494:	6803      	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    8496:	460a      	mov	r2, r1
    8498:	b530      	push	{r4, r5, lr}
  if (type() != SD_CARD_TYPE_SDHC) {
    849a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
    849c:	b083      	sub	sp, #12
    849e:	4d10      	ldr	r5, [pc, #64]	; (84e0 <SdSpiCard::readStart(unsigned long)+0x4c>)
    84a0:	4604      	mov	r4, r0
    84a2:	42ab      	cmp	r3, r5
    84a4:	d118      	bne.n	84d8 <SdSpiCard::readStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    84a6:	7e80      	ldrb	r0, [r0, #26]
  if (type() != SD_CARD_TYPE_SDHC) {
    84a8:	2803      	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD18, sector)) {
    84aa:	f04f 0112 	mov.w	r1, #18
    84ae:	4620      	mov	r0, r4
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    84b0:	bf18      	it	ne
    84b2:	0252      	lslne	r2, r2, #9
  }
  if (cardCommand(CMD18, sector)) {
    84b4:	f7ff ff06 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    84b8:	b158      	cbz	r0, 84d2 <SdSpiCard::readStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    84ba:	230c      	movs	r3, #12
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    84bc:	7e20      	ldrb	r0, [r4, #24]
    84be:	75e3      	strb	r3, [r4, #23]
    84c0:	b908      	cbnz	r0, 84c6 <SdSpiCard::readStart(unsigned long)+0x32>
  return true;

 fail:
  spiStop();
  return false;
}
    84c2:	b003      	add	sp, #12
    84c4:	bd30      	pop	{r4, r5, pc}
    84c6:	4620      	mov	r0, r4
    84c8:	f7ff fe32 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    84cc:	2000      	movs	r0, #0
    84ce:	b003      	add	sp, #12
    84d0:	bd30      	pop	{r4, r5, pc}
  if (cardCommand(CMD18, sector)) {
    error(SD_CARD_ERROR_CMD18);
    goto fail;
  }
//  spiStop();
  return true;
    84d2:	2001      	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    84d4:	b003      	add	sp, #12
    84d6:	bd30      	pop	{r4, r5, pc}
    84d8:	9101      	str	r1, [sp, #4]
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStart(uint32_t sector) {
  if (type() != SD_CARD_TYPE_SDHC) {
    84da:	4798      	blx	r3
    84dc:	9a01      	ldr	r2, [sp, #4]
    84de:	e7e3      	b.n	84a8 <SdSpiCard::readStart(unsigned long)+0x14>
    84e0:	00008101 	.word	0x00008101

000084e4 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    84e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84e8:	461f      	mov	r7, r3
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    84ea:	7d03      	ldrb	r3, [r0, #20]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    84ec:	4606      	mov	r6, r0
    84ee:	460d      	mov	r5, r1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    84f0:	2b01      	cmp	r3, #1
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
    84f2:	4614      	mov	r4, r2
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    84f4:	d019      	beq.n	852a <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x46>
    if (!readStart(sector)) {
    84f6:	4629      	mov	r1, r5
    84f8:	4630      	mov	r0, r6
    84fa:	f7ff ffcb 	bl	8494 <SdSpiCard::readStart(unsigned long)>
    84fe:	b188      	cbz	r0, 8524 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x40>
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
    8500:	2301      	movs	r3, #1
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    if (!readStart(sector)) {
      goto fail;
    }
    m_curSector = sector;
    8502:	6135      	str	r5, [r6, #16]
    m_curState = READ_STATE;
    8504:	7533      	strb	r3, [r6, #20]
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8506:	b1a7      	cbz	r7, 8532 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
    8508:	2500      	movs	r5, #0
    850a:	e001      	b.n	8510 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x2c>
    850c:	42af      	cmp	r7, r5
    850e:	d010      	beq.n	8532 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x4e>
    if (!readData(dst, 512)) {
    8510:	f44f 7200 	mov.w	r2, #512	; 0x200
    8514:	4621      	mov	r1, r4
    8516:	4630      	mov	r0, r6
      goto fail;
    }
    m_curSector = sector;
    m_curState = READ_STATE;
  }
  for (size_t i = 0; i < ns; i++, dst += 512) {
    8518:	3501      	adds	r5, #1
    851a:	4414      	add	r4, r2
    if (!readData(dst, 512)) {
    851c:	f7ff fe80 	bl	8220 <SdSpiCard::readData(unsigned char*, unsigned int)>
    8520:	2800      	cmp	r0, #0
    8522:	d1f3      	bne.n	850c <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x28>
    }
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
    8524:	2000      	movs	r0, #0
    8526:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readSectors(uint32_t sector, uint8_t* dst, size_t ns) {
#if ENABLE_DEDICATED_SPI
  if (m_curState != READ_STATE || sector != m_curSector) {
    852a:	6903      	ldr	r3, [r0, #16]
    852c:	428b      	cmp	r3, r1
    852e:	d1e2      	bne.n	84f6 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x12>
    8530:	e7e9      	b.n	8506 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x22>
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    8532:	6933      	ldr	r3, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    8534:	7d72      	ldrb	r2, [r6, #21]
  for (size_t i = 0; i < ns; i++, dst += 512) {
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
    8536:	441f      	add	r7, r3
    8538:	6137      	str	r7, [r6, #16]
  return m_sharedSpi ? syncDevice() : true;
    853a:	b912      	cbnz	r2, 8542 <SdSpiCard::readSectors(unsigned long, unsigned char*, unsigned int)+0x5e>
    853c:	2001      	movs	r0, #1
    853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8542:	6833      	ldr	r3, [r6, #0]
    8544:	4630      	mov	r0, r6
    8546:	699b      	ldr	r3, [r3, #24]
  }
  return readStop();
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
    8548:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    if (!readData(dst, 512)) {
      goto fail;
    }
  }
  m_curSector += ns;
  return m_sharedSpi ? syncDevice() : true;
    854c:	4718      	bx	r3
    854e:	bf00      	nop

00008550 <SdSpiCard::readStop()>:
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    8550:	b538      	push	{r3, r4, r5, lr}
  if (cardCommand(CMD12, 0)) {
    8552:	2200      	movs	r2, #0
    8554:	210c      	movs	r1, #12
#endif  // ENABLE_DEDICATED_SPI
 fail:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::readStop() {
    8556:	4605      	mov	r5, r0
  if (cardCommand(CMD12, 0)) {
    8558:	f7ff feb4 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    855c:	b128      	cbz	r0, 856a <SdSpiCard::readStop()+0x1a>
    855e:	2309      	movs	r3, #9
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8560:	7e2c      	ldrb	r4, [r5, #24]
    8562:	75eb      	strb	r3, [r5, #23]
    8564:	b95c      	cbnz	r4, 857e <SdSpiCard::readStop()+0x2e>
  return true;

 fail:
  spiStop();
  return false;
}
    8566:	4620      	mov	r0, r4
    8568:	bd38      	pop	{r3, r4, r5, pc}
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    856a:	7e2c      	ldrb	r4, [r5, #24]
    856c:	b914      	cbnz	r4, 8574 <SdSpiCard::readStop()+0x24>
  if (cardCommand(CMD12, 0)) {
    error(SD_CARD_ERROR_CMD12);
    goto fail;
  }
  spiStop();
  return true;
    856e:	2401      	movs	r4, #1

 fail:
  spiStop();
  return false;
}
    8570:	4620      	mov	r0, r4
    8572:	bd38      	pop	{r3, r4, r5, pc}
    8574:	4628      	mov	r0, r5
    8576:	f7ff fddb 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    857a:	4620      	mov	r0, r4
    857c:	bd38      	pop	{r3, r4, r5, pc}
    857e:	2400      	movs	r4, #0
    8580:	4628      	mov	r0, r5
    8582:	f7ff fdd5 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    8586:	4620      	mov	r0, r4
    8588:	bd38      	pop	{r3, r4, r5, pc}
    858a:	bf00      	nop

0000858c <SdSpiCard::syncDevice()>:
}
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
    858c:	7d02      	ldrb	r2, [r0, #20]
  m_curState = IDLE_STATE;
    858e:	2100      	movs	r1, #0
  if (state == WRITE_STATE) {
    8590:	2a02      	cmp	r2, #2
//------------------------------------------------------------------------------
bool SdSpiCard::syncDevice() {
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
    8592:	7501      	strb	r1, [r0, #20]
  if (state == WRITE_STATE) {
    8594:	d005      	beq.n	85a2 <SdSpiCard::syncDevice()+0x16>
    return writeStop();
  }
  if (state == READ_STATE) {
    8596:	2a01      	cmp	r2, #1
    8598:	d001      	beq.n	859e <SdSpiCard::syncDevice()+0x12>
    return readStop();
  }
#endif  // ENABLE_DEDICATED_SPI
  return true;
}
    859a:	2001      	movs	r0, #1
    859c:	4770      	bx	lr
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
  }
  if (state == READ_STATE) {
    return readStop();
    859e:	f7ff bfd7 	b.w	8550 <SdSpiCard::readStop()>
#if ENABLE_DEDICATED_SPI
  // Insure no recursive loop with cardCommand().
  uint8_t state = m_curState;
  m_curState = IDLE_STATE;
  if (state == WRITE_STATE) {
    return writeStop();
    85a2:	6803      	ldr	r3, [r0, #0]
    85a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
    85a6:	4718      	bx	r3

000085a8 <SdSpiCard::writeStart(unsigned long)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    85a8:	6803      	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    85aa:	460a      	mov	r2, r1
    85ac:	b530      	push	{r4, r5, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    85ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
    85b0:	b083      	sub	sp, #12
    85b2:	4d10      	ldr	r5, [pc, #64]	; (85f4 <SdSpiCard::writeStart(unsigned long)+0x4c>)
    85b4:	4604      	mov	r4, r0
    85b6:	42ab      	cmp	r3, r5
    85b8:	d118      	bne.n	85ec <SdSpiCard::writeStart(unsigned long)+0x44>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    85ba:	7e80      	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    85bc:	2803      	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD25, sector)) {
    85be:	f04f 0119 	mov.w	r1, #25
    85c2:	4620      	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    85c4:	bf18      	it	ne
    85c6:	0252      	lslne	r2, r2, #9
  }
  if (cardCommand(CMD25, sector)) {
    85c8:	f7ff fe7c 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    85cc:	b158      	cbz	r0, 85e6 <SdSpiCard::writeStart(unsigned long)+0x3e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    85ce:	230e      	movs	r3, #14
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    85d0:	7e20      	ldrb	r0, [r4, #24]
    85d2:	75e3      	strb	r3, [r4, #23]
    85d4:	b908      	cbnz	r0, 85da <SdSpiCard::writeStart(unsigned long)+0x32>
  return true;

 fail:
  spiStop();
  return false;
}
    85d6:	b003      	add	sp, #12
    85d8:	bd30      	pop	{r4, r5, pc}
    85da:	4620      	mov	r0, r4
    85dc:	f7ff fda8 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    85e0:	2000      	movs	r0, #0
    85e2:	b003      	add	sp, #12
    85e4:	bd30      	pop	{r4, r5, pc}
  }
  if (cardCommand(CMD25, sector)) {
    error(SD_CARD_ERROR_CMD25);
    goto fail;
  }
  return true;
    85e6:	2001      	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    85e8:	b003      	add	sp, #12
    85ea:	bd30      	pop	{r4, r5, pc}
    85ec:	9101      	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStart(uint32_t sector) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    85ee:	4798      	blx	r3
    85f0:	9a01      	ldr	r2, [sp, #4]
    85f2:	e7e3      	b.n	85bc <SdSpiCard::writeStart(unsigned long)+0x14>
    85f4:	00008101 	.word	0x00008101

000085f8 <SdSpiCard::erase(unsigned long, unsigned long)>:
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    85f8:	6803      	ldr	r3, [r0, #0]
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    85fa:	b5f0      	push	{r4, r5, r6, r7, lr}
  csd_t csd;
  if (!readCSD(&csd)) {
    85fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
//------------------------------------------------------------------------------
void SdSpiCard::dbgClearStats() {::dbgClearStats();}
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
    85fe:	b085      	sub	sp, #20
    8600:	4f29      	ldr	r7, [pc, #164]	; (86a8 <SdSpiCard::erase(unsigned long, unsigned long)+0xb0>)
    8602:	4604      	mov	r4, r0
    8604:	460d      	mov	r5, r1
    8606:	4616      	mov	r6, r2
    8608:	42bb      	cmp	r3, r7
    860a:	d12b      	bne.n	8664 <SdSpiCard::erase(unsigned long, unsigned long)+0x6c>
   * \param[out] csd pointer to area for returned data.
   *
   * \return true for success or false for failure.
   */
  bool readCSD(csd_t* csd) {
    return readRegister(CMD9, csd);
    860c:	466a      	mov	r2, sp
    860e:	2109      	movs	r1, #9
    8610:	f7ff fecc 	bl	83ac <SdSpiCard::readRegister(unsigned char, void*)>
  csd_t csd;
  if (!readCSD(&csd)) {
    8614:	b180      	cbz	r0, 8638 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    8616:	f89d 300a 	ldrb.w	r3, [sp, #10]
    861a:	065a      	lsls	r2, r3, #25
    861c:	d514      	bpl.n	8648 <SdSpiCard::erase(unsigned long, unsigned long)+0x50>
      // error card can't erase specified area
      error(SD_CARD_ERROR_ERASE_SINGLE_SECTOR);
      goto fail;
    }
  }
  if (m_type != SD_CARD_TYPE_SDHC) {
    861e:	7ea3      	ldrb	r3, [r4, #26]
    8620:	2b03      	cmp	r3, #3
    8622:	d001      	beq.n	8628 <SdSpiCard::erase(unsigned long, unsigned long)+0x30>
    firstSector <<= 9;
    8624:	026d      	lsls	r5, r5, #9
    lastSector <<= 9;
    8626:	0276      	lsls	r6, r6, #9
  }
  if (cardCommand(CMD32, firstSector)
    8628:	462a      	mov	r2, r5
    862a:	2120      	movs	r1, #32
    862c:	4620      	mov	r0, r4
    862e:	f7ff fe49 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
      || cardCommand(CMD33, lastSector)
      || cardCommand(CMD38, 0)) {
    8632:	b1d0      	cbz	r0, 866a <SdSpiCard::erase(unsigned long, unsigned long)+0x72>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    8634:	2326      	movs	r3, #38	; 0x26
    8636:	75e3      	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8638:	7e20      	ldrb	r0, [r4, #24]
    863a:	b118      	cbz	r0, 8644 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    863c:	4620      	mov	r0, r4
    863e:	f7ff fd77 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    8642:	2000      	movs	r0, #0
}
    8644:	b005      	add	sp, #20
    8646:	bdf0      	pop	{r4, r5, r6, r7, pc}
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8648:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    goto fail;
  }
  // check for single sector erase
  if (!csd.v1.erase_blk_en) {
    // erase size mask
    uint8_t m = (csd.v1.sector_size_high << 1) | csd.v1.sector_size_low;
    864c:	f89d 100b 	ldrb.w	r1, [sp, #11]
    if ((firstSector & m) != 0 || ((lastSector + 1) & m) != 0) {
    8650:	1c72      	adds	r2, r6, #1
    8652:	005b      	lsls	r3, r3, #1
    8654:	432a      	orrs	r2, r5
    8656:	ea43 13d1 	orr.w	r3, r3, r1, lsr #7
    865a:	4213      	tst	r3, r2
    865c:	d0df      	beq.n	861e <SdSpiCard::erase(unsigned long, unsigned long)+0x26>
    865e:	2327      	movs	r3, #39	; 0x27
    8660:	75e3      	strb	r3, [r4, #23]
    8662:	e7e9      	b.n	8638 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
//------------------------------------------------------------------------------
void SdSpiCard::dbgPrintStats() {::dbgPrintStats();}
//------------------------------------------------------------------------------
bool SdSpiCard::erase(uint32_t firstSector, uint32_t lastSector) {
  csd_t csd;
  if (!readCSD(&csd)) {
    8664:	4669      	mov	r1, sp
    8666:	4798      	blx	r3
    8668:	e7d4      	b.n	8614 <SdSpiCard::erase(unsigned long, unsigned long)+0x1c>
  if (m_type != SD_CARD_TYPE_SDHC) {
    firstSector <<= 9;
    lastSector <<= 9;
  }
  if (cardCommand(CMD32, firstSector)
      || cardCommand(CMD33, lastSector)
    866a:	4632      	mov	r2, r6
    866c:	2121      	movs	r1, #33	; 0x21
    866e:	4620      	mov	r0, r4
    8670:	f7ff fe28 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8674:	2800      	cmp	r0, #0
    8676:	d1dd      	bne.n	8634 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
      || cardCommand(CMD38, 0)) {
    8678:	4602      	mov	r2, r0
    867a:	2126      	movs	r1, #38	; 0x26
    867c:	4620      	mov	r0, r4
    867e:	f7ff fe21 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    8682:	2800      	cmp	r0, #0
    8684:	d1d6      	bne.n	8634 <SdSpiCard::erase(unsigned long, unsigned long)+0x3c>
    error(SD_CARD_ERROR_ERASE);
    goto fail;
  }
  DBG_BEGIN_TIME(DBG_ERASE_BUSY);
  if (!waitNotBusy(SD_ERASE_TIMEOUT)) {
    8686:	f242 7110 	movw	r1, #10000	; 0x2710
    868a:	4620      	mov	r0, r4
    868c:	f7ff fe02 	bl	8294 <SdSpiCard::waitNotBusy(unsigned short)>
    8690:	b910      	cbnz	r0, 8698 <SdSpiCard::erase(unsigned long, unsigned long)+0xa0>
    8692:	2328      	movs	r3, #40	; 0x28
    8694:	75e3      	strb	r3, [r4, #23]
    8696:	e7cf      	b.n	8638 <SdSpiCard::erase(unsigned long, unsigned long)+0x40>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8698:	7e25      	ldrb	r5, [r4, #24]
    869a:	2d00      	cmp	r5, #0
    869c:	d0d2      	beq.n	8644 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    869e:	4620      	mov	r0, r4
    86a0:	f7ff fd46 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    error(SD_CARD_ERROR_ERASE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_ERASE_BUSY);
  spiStop();
  return true;
    86a4:	4628      	mov	r0, r5
    86a6:	e7cd      	b.n	8644 <SdSpiCard::erase(unsigned long, unsigned long)+0x4c>
    86a8:	000083ed 	.word	0x000083ed

000086ac <SdSpiCard::writeStop()>:
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    86ac:	b570      	push	{r4, r5, r6, lr}
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    86ae:	f44f 7116 	mov.w	r1, #600	; 0x258
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeStop() {
    86b2:	4605      	mov	r5, r0
  DBG_BEGIN_TIME(DBG_WRITE_STOP);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    86b4:	f7ff fdee 	bl	8294 <SdSpiCard::waitNotBusy(unsigned short)>
    86b8:	4606      	mov	r6, r0
    86ba:	b958      	cbnz	r0, 86d4 <SdSpiCard::writeStop()+0x28>
    86bc:	231e      	movs	r3, #30
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    86be:	7e2c      	ldrb	r4, [r5, #24]
    86c0:	75eb      	strb	r3, [r5, #23]
    86c2:	b90c      	cbnz	r4, 86c8 <SdSpiCard::writeStop()+0x1c>

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    86c4:	4620      	mov	r0, r4
    86c6:	bd70      	pop	{r4, r5, r6, pc}
  return true;

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
    86c8:	4634      	mov	r4, r6
    86ca:	4628      	mov	r0, r5
    86cc:	f7ff fd30 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
}
    86d0:	4620      	mov	r0, r4
    86d2:	bd70      	pop	{r4, r5, r6, pc}
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    86d4:	21fd      	movs	r1, #253	; 0xfd
    86d6:	1d28      	adds	r0, r5, #4
    86d8:	f000 f95a 	bl	8990 <SdSpiArduinoDriver::send(unsigned char)>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    86dc:	7e2c      	ldrb	r4, [r5, #24]
    86de:	b914      	cbnz	r4, 86e6 <SdSpiCard::writeStop()+0x3a>
    86e0:	4634      	mov	r4, r6

 fail:
  error(SD_CARD_ERROR_STOP_TRAN);
  spiStop();
  return false;
}
    86e2:	4620      	mov	r0, r4
    86e4:	bd70      	pop	{r4, r5, r6, pc}
    86e6:	4628      	mov	r0, r5
    86e8:	f7ff fd22 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    86ec:	e7ea      	b.n	86c4 <SdSpiCard::writeStop()+0x18>
    86ee:	bf00      	nop

000086f0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
// send one sector of data for write sector or write multiple sectors
bool SdSpiCard::writeData(uint8_t token, const uint8_t* src) {
    86f0:	b570      	push	{r4, r5, r6, lr}
    86f2:	1d04      	adds	r4, r0, #4
    86f4:	4616      	mov	r6, r2
    86f6:	4605      	mov	r5, r0
    86f8:	4620      	mov	r0, r4
    86fa:	f000 f949 	bl	8990 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiSend(const uint8_t* buf, size_t n) {
    m_spiDriver.send(buf, n);
    86fe:	f44f 7200 	mov.w	r2, #512	; 0x200
    8702:	4631      	mov	r1, r6
    8704:	4620      	mov	r0, r4
    8706:	f000 f94d 	bl	89a4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>
  }
  uint8_t spiReceive(uint8_t* buf, size_t n) {
    return  m_spiDriver.receive(buf, n);
  }
  void spiSend(uint8_t data) {
    m_spiDriver.send(data);
    870a:	4620      	mov	r0, r4
    870c:	21ff      	movs	r1, #255	; 0xff
    870e:	f000 f93f 	bl	8990 <SdSpiArduinoDriver::send(unsigned char)>
    8712:	4620      	mov	r0, r4
    8714:	21ff      	movs	r1, #255	; 0xff
    8716:	f000 f93b 	bl	8990 <SdSpiArduinoDriver::send(unsigned char)>
  }
  void spiDeactivate() {
    m_spiDriver.deactivate();
  }
  uint8_t spiReceive() {
    return m_spiDriver.receive();
    871a:	4620      	mov	r0, r4
    871c:	f000 f91c 	bl	8958 <SdSpiArduinoDriver::receive()>
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8720:	f000 031f 	and.w	r3, r0, #31
  spiSend(token);
  spiSend(src, 512);
  spiSend(crc >> 8);
  spiSend(crc & 0XFF);

  m_status = spiReceive();
    8724:	7668      	strb	r0, [r5, #25]
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    8726:	2b05      	cmp	r3, #5
    8728:	d009      	beq.n	873e <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x4e>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    872a:	2320      	movs	r3, #32
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    872c:	7e28      	ldrb	r0, [r5, #24]
    872e:	75eb      	strb	r3, [r5, #23]
    8730:	b900      	cbnz	r0, 8734 <SdSpiCard::writeData(unsigned char, unsigned char const*)+0x44>
  return true;

 fail:
  spiStop();
  return false;
}
    8732:	bd70      	pop	{r4, r5, r6, pc}
    8734:	4628      	mov	r0, r5
    8736:	f7ff fcfb 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  }
  return true;

 fail:
  spiStop();
  return false;
    873a:	2000      	movs	r0, #0
    873c:	bd70      	pop	{r4, r5, r6, pc}
  m_status = spiReceive();
  if ((m_status & DATA_RES_MASK) != DATA_RES_ACCEPTED) {
    error(SD_CARD_ERROR_WRITE_DATA);
    goto fail;
  }
  return true;
    873e:	2001      	movs	r0, #1

 fail:
  spiStop();
  return false;
}
    8740:	bd70      	pop	{r4, r5, r6, pc}
    8742:	bf00      	nop

00008744 <SdSpiCard::writeData(unsigned char const*)>:
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    8744:	b538      	push	{r3, r4, r5, lr}
    8746:	460d      	mov	r5, r1
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    8748:	f44f 7116 	mov.w	r1, #600	; 0x258
  }
  return true;
#endif  // WDT_YIELD_TIME_MILLIS
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeData(const uint8_t* src) {
    874c:	4604      	mov	r4, r0
  // wait for previous write to finish
  DBG_BEGIN_TIME(DBG_WRITE_BUSY);
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    874e:	f7ff fda1 	bl	8294 <SdSpiCard::waitNotBusy(unsigned short)>
    8752:	b940      	cbnz	r0, 8766 <SdSpiCard::writeData(unsigned char const*)+0x22>
    8754:	2324      	movs	r3, #36	; 0x24
    8756:	75e3      	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    8758:	7e20      	ldrb	r0, [r4, #24]
    875a:	b118      	cbz	r0, 8764 <SdSpiCard::writeData(unsigned char const*)+0x20>
    875c:	4620      	mov	r0, r4
    875e:	f7ff fce7 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  }
  return true;

 fail:
  spiStop();
  return false;
    8762:	2000      	movs	r0, #0
}
    8764:	bd38      	pop	{r3, r4, r5, pc}
  if (!waitNotBusy(SD_WRITE_TIMEOUT)) {
    error(SD_CARD_ERROR_WRITE_TIMEOUT);
    goto fail;
  }
  DBG_END_TIME(DBG_WRITE_BUSY);
  if (!writeData(WRITE_MULTIPLE_TOKEN, src)) {
    8766:	462a      	mov	r2, r5
    8768:	21fc      	movs	r1, #252	; 0xfc
    876a:	4620      	mov	r0, r4
    876c:	f7ff ffc0 	bl	86f0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    8770:	2800      	cmp	r0, #0
    8772:	d0f1      	beq.n	8758 <SdSpiCard::writeData(unsigned char const*)+0x14>
  return true;

 fail:
  spiStop();
  return false;
}
    8774:	bd38      	pop	{r3, r4, r5, pc}
    8776:	bf00      	nop

00008778 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>:
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    8778:	6803      	ldr	r3, [r0, #0]
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    877a:	b570      	push	{r4, r5, r6, lr}
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    877c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 fail:
  spiStop();
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
    877e:	b082      	sub	sp, #8
    8780:	4d15      	ldr	r5, [pc, #84]	; (87d8 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x60>)
    8782:	4604      	mov	r4, r0
    8784:	4616      	mov	r6, r2
    8786:	42ab      	cmp	r3, r5
    8788:	d122      	bne.n	87d0 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x58>
  bool syncDevice();
  /** Return the card type: SD V1, SD V2 or SDHC/SDXC
   * \return 0 - SD V1, 1 - SD V2, or 3 - SDHC/SDXC.
   */
  uint8_t type() const {
    return m_type;
    878a:	7e80      	ldrb	r0, [r0, #26]
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    878c:	2803      	cmp	r0, #3
    sector <<= 9;
  }
  if (cardCommand(CMD24, sector)) {
    878e:	4620      	mov	r0, r4
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    sector <<= 9;
    8790:	bf18      	it	ne
    8792:	0249      	lslne	r1, r1, #9
  }
  if (cardCommand(CMD24, sector)) {
    8794:	460a      	mov	r2, r1
    8796:	2118      	movs	r1, #24
    8798:	f7ff fd94 	bl	82c4 <SdSpiCard::cardCommand(unsigned char, unsigned long)>
    879c:	b148      	cbz	r0, 87b2 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x3a>
  /**
   *  Set SD error code.
   *  \param[in] code value for error code.
   */
  void error(uint8_t code) {
    m_errorCode = code;
    879e:	230d      	movs	r3, #13
    87a0:	75e3      	strb	r3, [r4, #23]
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    87a2:	7e20      	ldrb	r0, [r4, #24]
    87a4:	b118      	cbz	r0, 87ae <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    87a6:	4620      	mov	r0, r4
    87a8:	f7ff fcc2 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
  spiStop();
  return true;

 fail:
  spiStop();
  return false;
    87ac:	2000      	movs	r0, #0
}
    87ae:	b002      	add	sp, #8
    87b0:	bd70      	pop	{r4, r5, r6, pc}
  }
  if (cardCommand(CMD24, sector)) {
    error(SD_CARD_ERROR_CMD24);
    goto fail;
  }
  if (!writeData(DATA_START_SECTOR, src)) {
    87b2:	4632      	mov	r2, r6
    87b4:	21fe      	movs	r1, #254	; 0xfe
    87b6:	4620      	mov	r0, r4
    87b8:	f7ff ff9a 	bl	86f0 <SdSpiCard::writeData(unsigned char, unsigned char const*)>
    87bc:	2800      	cmp	r0, #0
    87be:	d0f0      	beq.n	87a2 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x2a>
    m_spiActive = true;
  }
}
//------------------------------------------------------------------------------
void SdSpiCard::spiStop() {
  if (m_spiActive) {
    87c0:	7e25      	ldrb	r5, [r4, #24]
    87c2:	2d00      	cmp	r5, #0
    87c4:	d0f3      	beq.n	87ae <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    87c6:	4620      	mov	r0, r4
    87c8:	f7ff fcb2 	bl	8130 <SdSpiCard::spiStop() [clone .part.6] [clone .constprop.27]>
    87cc:	4628      	mov	r0, r5
    87ce:	e7ee      	b.n	87ae <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x36>
    87d0:	9101      	str	r1, [sp, #4]
  return false;
}
//------------------------------------------------------------------------------
bool SdSpiCard::writeSingle(uint32_t sector, const uint8_t* src) {
  // use address if not SDHC card
  if (type() != SD_CARD_TYPE_SDHC) {
    87d2:	4798      	blx	r3
    87d4:	9901      	ldr	r1, [sp, #4]
    87d6:	e7d9      	b.n	878c <SdSpiCard::writeSingle(unsigned long, unsigned char const*)+0x14>
    87d8:	00008101 	.word	0x00008101

000087dc <SdSpiCard::writeSector(unsigned long, unsigned char const*)>:
   *
   * \param[in] sector Logical sector to be written.
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    87dc:	b410      	push	{r4}
    if (m_sharedSpi) {
    87de:	7d44      	ldrb	r4, [r0, #21]
    87e0:	b934      	cbnz	r4, 87f0 <SdSpiCard::writeSector(unsigned long, unsigned char const*)+0x14>
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    87e2:	6804      	ldr	r4, [r0, #0]
    87e4:	2301      	movs	r3, #1
    87e6:	6a24      	ldr	r4, [r4, #32]
    87e8:	46a4      	mov	ip, r4
    }
  }
    87ea:	f85d 4b04 	ldr.w	r4, [sp], #4
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    } else {
      return writeSectors(sector, src, 1);
    87ee:	4760      	bx	ip
    }
  }
    87f0:	f85d 4b04 	ldr.w	r4, [sp], #4
   * \param[in] src Pointer to the location of the data to be written.
   * \return true for success or false for failure.
   */
  bool writeSector(uint32_t sector, const uint8_t* src) {
    if (m_sharedSpi) {
      return writeSingle(sector, src);
    87f4:	f7ff bfc0 	b.w	8778 <SdSpiCard::writeSingle(unsigned long, unsigned char const*)>

000087f8 <sdCsWrite(unsigned char, bool)>:
void sdCsInit(SdCsPin_t pin) {
  pinMode(pin, OUTPUT);
}
//------------------------------------------------------------------------------
void sdCsWrite(SdCsPin_t pin, bool level) {
  digitalWrite(pin, level);
    87f8:	f000 bbf4 	b.w	8fe4 <digitalWrite>

000087fc <SdSpiArduinoDriver::activate()>:
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
  m_spi->beginTransaction(m_spiSettings);
    87fc:	6803      	ldr	r3, [r0, #0]
    87fe:	6841      	ldr	r1, [r0, #4]
 */
#include "SdSpiDriver.h"
#if defined(SD_USE_CUSTOM_SPI) &&  defined(__arm__) && defined(CORE_TEENSY)
#define USE_BLOCK_TRANSFER 1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::activate() {
    8800:	b430      	push	{r4, r5}

	// Before using SPI.transfer() or asserting chip select pins,
	// this function is used to gain exclusive access to the SPI bus
	// and configure the correct settings.
	void beginTransaction(SPISettings settings) {
		if (interruptMasksUsed) {
    8802:	7cda      	ldrb	r2, [r3, #19]
    8804:	6884      	ldr	r4, [r0, #8]
    8806:	2a00      	cmp	r2, #0
    8808:	d028      	beq.n	885c <SdSpiArduinoDriver::activate()+0x60>
			__disable_irq();
    880a:	b672      	cpsid	i
			if (interruptMasksUsed & 0x01) {
    880c:	7cda      	ldrb	r2, [r3, #19]
    880e:	07d5      	lsls	r5, r2, #31
    8810:	d506      	bpl.n	8820 <SdSpiArduinoDriver::activate()+0x24>
				interruptSave[0] = NVIC_ICER0 & interruptMask[0];
    8812:	4833      	ldr	r0, [pc, #204]	; (88e0 <SdSpiArduinoDriver::activate()+0xe4>)
    8814:	695a      	ldr	r2, [r3, #20]
    8816:	6805      	ldr	r5, [r0, #0]
    8818:	402a      	ands	r2, r5
    881a:	629a      	str	r2, [r3, #40]	; 0x28
				NVIC_ICER0 = interruptSave[0];
    881c:	6002      	str	r2, [r0, #0]
    881e:	7cda      	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x02) {
    8820:	0790      	lsls	r0, r2, #30
    8822:	d506      	bpl.n	8832 <SdSpiArduinoDriver::activate()+0x36>
				interruptSave[1] = NVIC_ICER1 & interruptMask[1];
    8824:	482f      	ldr	r0, [pc, #188]	; (88e4 <SdSpiArduinoDriver::activate()+0xe8>)
    8826:	699a      	ldr	r2, [r3, #24]
    8828:	6805      	ldr	r5, [r0, #0]
    882a:	402a      	ands	r2, r5
    882c:	62da      	str	r2, [r3, #44]	; 0x2c
				NVIC_ICER1 = interruptSave[1];
    882e:	6002      	str	r2, [r0, #0]
    8830:	7cda      	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x04) {
    8832:	0755      	lsls	r5, r2, #29
    8834:	d506      	bpl.n	8844 <SdSpiArduinoDriver::activate()+0x48>
				interruptSave[2] = NVIC_ICER2 & interruptMask[2];
    8836:	482c      	ldr	r0, [pc, #176]	; (88e8 <SdSpiArduinoDriver::activate()+0xec>)
    8838:	69da      	ldr	r2, [r3, #28]
    883a:	6805      	ldr	r5, [r0, #0]
    883c:	402a      	ands	r2, r5
    883e:	631a      	str	r2, [r3, #48]	; 0x30
				NVIC_ICER2 = interruptSave[2];
    8840:	6002      	str	r2, [r0, #0]
    8842:	7cda      	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x08) {
    8844:	0710      	lsls	r0, r2, #28
    8846:	d506      	bpl.n	8856 <SdSpiArduinoDriver::activate()+0x5a>
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
    8848:	4828      	ldr	r0, [pc, #160]	; (88ec <SdSpiArduinoDriver::activate()+0xf0>)
    884a:	6a1a      	ldr	r2, [r3, #32]
    884c:	6805      	ldr	r5, [r0, #0]
    884e:	402a      	ands	r2, r5
    8850:	635a      	str	r2, [r3, #52]	; 0x34
				NVIC_ICER3 = interruptSave[3];
    8852:	6002      	str	r2, [r0, #0]
    8854:	7cda      	ldrb	r2, [r3, #19]
			}
			if (interruptMasksUsed & 0x10) {
    8856:	06d2      	lsls	r2, r2, #27
    8858:	d42b      	bmi.n	88b2 <SdSpiArduinoDriver::activate()+0xb6>
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
				NVIC_ICER4 = interruptSave[4];
			}
			__enable_irq();
    885a:	b662      	cpsie	i
		}
		inTransactionFlag = 1;
		#endif

		//printf("trans\n");
		if (settings.clock() != _clock) {
    885c:	689a      	ldr	r2, [r3, #8]
    885e:	428a      	cmp	r2, r1
    8860:	d02e      	beq.n	88c0 <SdSpiArduinoDriver::activate()+0xc4>
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();

			uint32_t cbcmr = CCM_CBCMR;
    8862:	4a23      	ldr	r2, [pc, #140]	; (88f0 <SdSpiArduinoDriver::activate()+0xf4>)
						     720000000,  // PLL3 PFD0
						     528000000,  // PLL2
						     396000000}; // PLL2 PFD2				

		    // First save away the new settings..
		    _clock = settings.clock();
    8864:	6099      	str	r1, [r3, #8]

			uint32_t cbcmr = CCM_CBCMR;
    8866:	6992      	ldr	r2, [r2, #24]
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
    8868:	4822      	ldr	r0, [pc, #136]	; (88f4 <SdSpiArduinoDriver::activate()+0xf8>)
    886a:	f3c2 1501 	ubfx	r5, r2, #4, #2
    886e:	f3c2 6282 	ubfx	r2, r2, #26, #3
    8872:	f850 0025 	ldr.w	r0, [r0, r5, lsl #2]
    8876:	3201      	adds	r2, #1
    8878:	fbb0 f0f2 	udiv	r0, r0, r2
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    887c:	b1b9      	cbz	r1, 88ae <SdSpiArduinoDriver::activate()+0xb2>
    887e:	fbb0 f2f1 	udiv	r2, r0, r1

			if (d && clkhz/d > _clock) d++;
    8882:	b142      	cbz	r2, 8896 <SdSpiArduinoDriver::activate()+0x9a>
    8884:	fbb0 f0f2 	udiv	r0, r0, r2
    8888:	4288      	cmp	r0, r1
    888a:	bf88      	it	hi
    888c:	3201      	addhi	r2, #1
			if (d > 257) d= 257;  // max div
    888e:	f5b2 7f81 	cmp.w	r2, #258	; 0x102
    8892:	d317      	bcc.n	88c4 <SdSpiArduinoDriver::activate()+0xc8>
    8894:	4a18      	ldr	r2, [pc, #96]	; (88f8 <SdSpiArduinoDriver::activate()+0xfc>)
				div = d-2;
			} else {
				div =0;
			}
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);
    8896:	60da      	str	r2, [r3, #12]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8898:	681b      	ldr	r3, [r3, #0]
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    889a:	2500      	movs	r5, #0
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    889c:	2003      	movs	r0, #3
		port().CCR = _ccr;
		port().TCR = settings.tcr;
		port().CR = LPSPI_CR_MEN;
    889e:	2101      	movs	r1, #1
	
			_ccr = LPSPI_CCR_SCKDIV(div) | LPSPI_CCR_DBT(div/2) | LPSPI_CCR_PCSSCK(div/2);

		} 
		//Serial.printf("SPI.beginTransaction CCR:%x TCR:%x\n", _ccr, settings.tcr);
		port().CR = 0;
    88a0:	611d      	str	r5, [r3, #16]
		port().CFGR1 = LPSPI_CFGR1_MASTER | LPSPI_CFGR1_SAMPLE;
    88a2:	6258      	str	r0, [r3, #36]	; 0x24
		port().CCR = _ccr;
    88a4:	641a      	str	r2, [r3, #64]	; 0x40
		port().TCR = settings.tcr;
    88a6:	661c      	str	r4, [r3, #96]	; 0x60
		port().CR = LPSPI_CR_MEN;
    88a8:	6119      	str	r1, [r3, #16]
  m_spi->beginTransaction(m_spiSettings);
}
    88aa:	bc30      	pop	{r4, r5}
    88ac:	4770      	bx	lr

			uint32_t cbcmr = CCM_CBCMR;
			uint32_t clkhz = clk_sel[(cbcmr >> 4) & 0x03] / (((cbcmr >> 26 ) & 0x07 ) + 1);  // LPSPI peripheral clock
			
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;
    88ae:	4602      	mov	r2, r0
    88b0:	e7e7      	b.n	8882 <SdSpiArduinoDriver::activate()+0x86>
			if (interruptMasksUsed & 0x08) {
				interruptSave[3] = NVIC_ICER3 & interruptMask[3];
				NVIC_ICER3 = interruptSave[3];
			}
			if (interruptMasksUsed & 0x10) {
				interruptSave[4] = NVIC_ICER4 & interruptMask[4];
    88b2:	4812      	ldr	r0, [pc, #72]	; (88fc <SdSpiArduinoDriver::activate()+0x100>)
    88b4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
    88b6:	6805      	ldr	r5, [r0, #0]
    88b8:	402a      	ands	r2, r5
    88ba:	639a      	str	r2, [r3, #56]	; 0x38
				NVIC_ICER4 = interruptSave[4];
    88bc:	6002      	str	r2, [r0, #0]
    88be:	e7cc      	b.n	885a <SdSpiArduinoDriver::activate()+0x5e>
    88c0:	68da      	ldr	r2, [r3, #12]
    88c2:	e7e9      	b.n	8898 <SdSpiArduinoDriver::activate()+0x9c>
			uint32_t d, div;		
			d = _clock ? clkhz/_clock : clkhz;

			if (d && clkhz/d > _clock) d++;
			if (d > 257) d= 257;  // max div
			if (d > 2) {
    88c4:	2a02      	cmp	r2, #2
    88c6:	bf98      	it	ls
    88c8:	2200      	movls	r2, #0
    88ca:	d9e4      	bls.n	8896 <SdSpiArduinoDriver::activate()+0x9a>
    88cc:	3a02      	subs	r2, #2
    88ce:	0850      	lsrs	r0, r2, #1
    88d0:	0401      	lsls	r1, r0, #16
    88d2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
    88d6:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    88da:	430a      	orrs	r2, r1
    88dc:	e7db      	b.n	8896 <SdSpiArduinoDriver::activate()+0x9a>
    88de:	bf00      	nop
    88e0:	e000e180 	.word	0xe000e180
    88e4:	e000e184 	.word	0xe000e184
    88e8:	e000e188 	.word	0xe000e188
    88ec:	e000e18c 	.word	0xe000e18c
    88f0:	400fc000 	.word	0x400fc000
    88f4:	20000490 	.word	0x20000490
    88f8:	007f7fff 	.word	0x007f7fff
    88fc:	e000e190 	.word	0xe000e190

00008900 <SdSpiArduinoDriver::deactivate()>:
  }
  m_spi->begin();
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::deactivate() {
  m_spi->endTransaction();
    8900:	6802      	ldr	r2, [r0, #0]
			pinMode(SPI_TRANSACTION_MISMATCH_LED, OUTPUT);
			digitalWrite(SPI_TRANSACTION_MISMATCH_LED, HIGH);
		}
		inTransactionFlag = 0;
		#endif
		if (interruptMasksUsed) {
    8902:	7cd3      	ldrb	r3, [r2, #19]
    8904:	b1e3      	cbz	r3, 8940 <SdSpiArduinoDriver::deactivate()+0x40>
			if (interruptMasksUsed & 0x01) NVIC_ISER0 = interruptSave[0];
    8906:	07d8      	lsls	r0, r3, #31
    8908:	d503      	bpl.n	8912 <SdSpiArduinoDriver::deactivate()+0x12>
    890a:	4b0e      	ldr	r3, [pc, #56]	; (8944 <SdSpiArduinoDriver::deactivate()+0x44>)
    890c:	6a91      	ldr	r1, [r2, #40]	; 0x28
    890e:	6019      	str	r1, [r3, #0]
    8910:	7cd3      	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x02) NVIC_ISER1 = interruptSave[1];
    8912:	0799      	lsls	r1, r3, #30
    8914:	d503      	bpl.n	891e <SdSpiArduinoDriver::deactivate()+0x1e>
    8916:	4b0c      	ldr	r3, [pc, #48]	; (8948 <SdSpiArduinoDriver::deactivate()+0x48>)
    8918:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
    891a:	6019      	str	r1, [r3, #0]
    891c:	7cd3      	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x04) NVIC_ISER2 = interruptSave[2];
    891e:	0758      	lsls	r0, r3, #29
    8920:	d503      	bpl.n	892a <SdSpiArduinoDriver::deactivate()+0x2a>
    8922:	4b0a      	ldr	r3, [pc, #40]	; (894c <SdSpiArduinoDriver::deactivate()+0x4c>)
    8924:	6b11      	ldr	r1, [r2, #48]	; 0x30
    8926:	6019      	str	r1, [r3, #0]
    8928:	7cd3      	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x08) NVIC_ISER3 = interruptSave[3];
    892a:	0719      	lsls	r1, r3, #28
    892c:	d503      	bpl.n	8936 <SdSpiArduinoDriver::deactivate()+0x36>
    892e:	4b08      	ldr	r3, [pc, #32]	; (8950 <SdSpiArduinoDriver::deactivate()+0x50>)
    8930:	6b51      	ldr	r1, [r2, #52]	; 0x34
    8932:	6019      	str	r1, [r3, #0]
    8934:	7cd3      	ldrb	r3, [r2, #19]
			if (interruptMasksUsed & 0x10) NVIC_ISER4 = interruptSave[4];
    8936:	06db      	lsls	r3, r3, #27
    8938:	d502      	bpl.n	8940 <SdSpiArduinoDriver::deactivate()+0x40>
    893a:	6b92      	ldr	r2, [r2, #56]	; 0x38
    893c:	4b05      	ldr	r3, [pc, #20]	; (8954 <SdSpiArduinoDriver::deactivate()+0x54>)
    893e:	601a      	str	r2, [r3, #0]
    8940:	4770      	bx	lr
    8942:	bf00      	nop
    8944:	e000e100 	.word	0xe000e100
    8948:	e000e104 	.word	0xe000e104
    894c:	e000e108 	.word	0xe000e108
    8950:	e000e10c 	.word	0xe000e10c
    8954:	e000e110 	.word	0xe000e110

00008958 <SdSpiArduinoDriver::receive()>:
}
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive() {
    8958:	6802      	ldr	r2, [r0, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    895a:	23ff      	movs	r3, #255	; 0xff
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    895c:	6812      	ldr	r2, [r2, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    895e:	6653      	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8960:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8962:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    8966:	d0fb      	beq.n	8960 <SdSpiArduinoDriver::receive()+0x8>
    8968:	6f50      	ldr	r0, [r2, #116]	; 0x74
  return m_spi->transfer(0XFF);
}
    896a:	b2c0      	uxtb	r0, r0
    896c:	4770      	bx	lr
    896e:	bf00      	nop

00008970 <SdSpiArduinoDriver::receive(unsigned char*, unsigned int)>:
//------------------------------------------------------------------------------
uint8_t SdSpiArduinoDriver::receive(uint8_t* buf, size_t count) {
    8970:	b570      	push	{r4, r5, r6, lr}
    8972:	460c      	mov	r4, r1
    8974:	4616      	mov	r6, r2
    8976:	4605      	mov	r5, r0
#if USE_BLOCK_TRANSFER
  memset(buf, 0XFF, count);
    8978:	21ff      	movs	r1, #255	; 0xff
    897a:	4620      	mov	r0, r4
    897c:	f002 fd56 	bl	b42c <memset>
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    8980:	6828      	ldr	r0, [r5, #0]
    8982:	4633      	mov	r3, r6
    8984:	4622      	mov	r2, r4
    8986:	4621      	mov	r1, r4
    8988:	f000 f860 	bl	8a4c <SPIClass::transfer(void const*, void*, unsigned int)>
  for (size_t i = 0; i < count; i++) {
    buf[i] = m_spi->transfer(0XFF);
  }
#endif  // USE_BLOCK_TRANSFER
  return 0;
}
    898c:	2000      	movs	r0, #0
    898e:	bd70      	pop	{r4, r5, r6, pc}

00008990 <SdSpiArduinoDriver::send(unsigned char)>:
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
    8990:	6803      	ldr	r3, [r0, #0]
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8992:	681a      	ldr	r2, [r3, #0]
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    8994:	6651      	str	r1, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    8996:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    8998:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    899c:	d0fb      	beq.n	8996 <SdSpiArduinoDriver::send(unsigned char)+0x6>
    899e:	6f53      	ldr	r3, [r2, #116]	; 0x74
    89a0:	4770      	bx	lr
    89a2:	bf00      	nop

000089a4 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)>:
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    89a4:	b530      	push	{r4, r5, lr}
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    89a6:	1e55      	subs	r5, r2, #1
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(uint8_t data) {
  m_spi->transfer(data);
}
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
    89a8:	f5ad 7d01 	sub.w	sp, sp, #516	; 0x204
    89ac:	4613      	mov	r3, r2
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    89ae:	f5b5 7f00 	cmp.w	r5, #512	; 0x200
    89b2:	d310      	bcc.n	89d6 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x32>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    89b4:	b162      	cbz	r2, 89d0 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x2c>
    89b6:	6802      	ldr	r2, [r0, #0]
    89b8:	18c8      	adds	r0, r1, r3
    89ba:	6812      	ldr	r2, [r2, #0]
    m_spi->transfer(buf[i]);
    89bc:	f811 3b01 	ldrb.w	r3, [r1], #1
	}

	// Write to the SPI bus (MOSI pin) and also receive (MISO pin)
	uint8_t transfer(uint8_t data) {
		// TODO: check for space in fifo?
		port().TDR = data;
    89c0:	6653      	str	r3, [r2, #100]	; 0x64
		while (1) {
			uint32_t fifo = (port().FSR >> 16) & 0x1F;
    89c2:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
			if (fifo > 0) return port().RDR;
    89c4:	f413 1ff8 	tst.w	r3, #2031616	; 0x1f0000
    89c8:	d0fb      	beq.n	89c2 <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x1e>
    memcpy(tmp, buf, count);
    m_spi->transfer(tmp, count);
    return;
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    89ca:	4281      	cmp	r1, r0
    89cc:	6f53      	ldr	r3, [r2, #116]	; 0x74
    89ce:	d1f5      	bne.n	89bc <SdSpiArduinoDriver::send(unsigned char const*, unsigned int)+0x18>
    m_spi->transfer(buf[i]);
  }
}
    89d0:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    89d4:	bd30      	pop	{r4, r5, pc}
    89d6:	4614      	mov	r4, r2
    89d8:	4605      	mov	r5, r0
//------------------------------------------------------------------------------
void SdSpiArduinoDriver::send(const uint8_t* buf , size_t count) {
#if USE_BLOCK_TRANSFER
  uint32_t tmp[128];
  if (0 < count && count <= 512) {
    memcpy(tmp, buf, count);
    89da:	4668      	mov	r0, sp
    89dc:	f000 f83a 	bl	8a54 <memcpy>
		while ((port().RSR & LPSPI_RSR_RXEMPTY)) ;	// wait while the RSR fifo is empty...
		port().TCR = tcr;	// restore back
		return port().RDR;
	}

	void inline transfer(void *buf, size_t count) {transfer(buf, buf, count);}
    89e0:	4623      	mov	r3, r4
    89e2:	466a      	mov	r2, sp
    89e4:	4669      	mov	r1, sp
    89e6:	6828      	ldr	r0, [r5, #0]
    89e8:	f000 f830 	bl	8a4c <SPIClass::transfer(void const*, void*, unsigned int)>
  }
#endif  // USE_BLOCK_TRANSFER
  for (size_t i = 0; i < count; i++) {
    m_spi->transfer(buf[i]);
  }
}
    89ec:	f50d 7d01 	add.w	sp, sp, #516	; 0x204
    89f0:	bd30      	pop	{r4, r5, pc}
    89f2:	bf00      	nop

000089f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>:
	if (interruptMask[n >> 5] == 0) {
		interruptMasksUsed &= ~(1 << (n >> 5));
	}
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
    89f4:	b470      	push	{r4, r5, r6}
    uint8_t *p_read = (uint8_t*)retbuf;
    size_t count_read = count;

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 
    89f6:	f240 2501 	movw	r5, #513	; 0x201
    89fa:	6804      	ldr	r4, [r0, #0]
    89fc:	6125      	str	r5, [r4, #16]

	while (count > 0) {
    89fe:	b31b      	cbz	r3, 8a48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
    8a00:	461e      	mov	r6, r3
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    8a02:	b1f1      	cbz	r1, 8a42 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4e>
    8a04:	780d      	ldrb	r5, [r1, #0]
    8a06:	3101      	adds	r1, #1
		count--; // how many bytes left to output.
    8a08:	3b01      	subs	r3, #1
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    8a0a:	6665      	str	r5, [r4, #100]	; 0x64
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    8a0c:	6f25      	ldr	r5, [r4, #112]	; 0x70
    8a0e:	07ad      	lsls	r5, r5, #30
    8a10:	d406      	bmi.n	8a20 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    8a12:	6f65      	ldr	r5, [r4, #116]	; 0x74
				if (p_read) *p_read++ = b; 
				count_read--;
    8a14:	3e01      	subs	r6, #1
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
			if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
				uint8_t b = port().RDR;  // Read any pending RX bytes in
    8a16:	b2ed      	uxtb	r5, r5
				if (p_read) *p_read++ = b; 
    8a18:	b112      	cbz	r2, 8a20 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x2c>
    8a1a:	7015      	strb	r5, [r2, #0]
    8a1c:	3201      	adds	r2, #1
    8a1e:	6804      	ldr	r4, [r0, #0]
				count_read--;
			}
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;
    8a20:	6965      	ldr	r5, [r4, #20]
	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
		count--; // how many bytes left to output.
		// Make sure queue is not full before pushing next byte out
		do {
    8a22:	07ed      	lsls	r5, r5, #31
    8a24:	d5f2      	bpl.n	8a0c <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x18>

	// Pass 1 keep it simple and don't try packing 8 bits into 16 yet..
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
    8a26:	2b00      	cmp	r3, #0
    8a28:	d1eb      	bne.n	8a02 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0xe>
		} while ((port().SR & LPSPI_SR_TDF) == 0) ;

	}

	// now lets wait for all of the read bytes to be returned...
	while (count_read) {
    8a2a:	b16e      	cbz	r6, 8a48 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x54>
	// programs/sketches.  See the ILI3941_t3 library for an example.
	uint8_t setCS(uint8_t pin);

private:
private:
	IMXRT_LPSPI_t & port() { return *(IMXRT_LPSPI_t *)port_addr; }
    8a2c:	6801      	ldr	r1, [r0, #0]
		if ((port().RSR & LPSPI_RSR_RXEMPTY) == 0)  {
    8a2e:	6f0b      	ldr	r3, [r1, #112]	; 0x70
    8a30:	079b      	lsls	r3, r3, #30
    8a32:	d4fc      	bmi.n	8a2e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x3a>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
    8a34:	6f4b      	ldr	r3, [r1, #116]	; 0x74
    8a36:	b2db      	uxtb	r3, r3
			if (p_read) *p_read++ = b; 
    8a38:	b10a      	cbz	r2, 8a3e <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x4a>
    8a3a:	7013      	strb	r3, [r2, #0]
    8a3c:	3201      	adds	r2, #1
			count_read--;
    8a3e:	3e01      	subs	r6, #1
    8a40:	e7f3      	b.n	8a2a <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x36>
	// Lets clear the reader queue
	port().CR = LPSPI_CR_RRF | LPSPI_CR_MEN;	// clear the queue and make sure still enabled. 

	while (count > 0) {
		// Push out the next byte; 
		port().TDR = p_write? *p_write++ : _transferWriteFill;
    8a42:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
    8a46:	e7df      	b.n	8a08 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]+0x14>
			uint8_t b = port().RDR;  // Read any pending RX bytes in
			if (p_read) *p_read++ = b; 
			count_read--;
		}
	}
}
    8a48:	bc70      	pop	{r4, r5, r6}
    8a4a:	4770      	bx	lr

00008a4c <SPIClass::transfer(void const*, void*, unsigned int)>:
}

void SPIClass::transfer(const void * buf, void * retbuf, size_t count)
{

	if (count == 0) return;
    8a4c:	b10b      	cbz	r3, 8a52 <SPIClass::transfer(void const*, void*, unsigned int)+0x6>
    8a4e:	f7ff bfd1 	b.w	89f4 <SPIClass::transfer(void const*, void*, unsigned int) [clone .part.11]>
    8a52:	4770      	bx	lr

00008a54 <memcpy>:
	@ r1: src
	@ r2: len
#ifdef __ARM_FEATURE_UNALIGNED
	/* In case of UNALIGNED access supported, ip is not used in
	   function body.  */
	mov	ip, r0
    8a54:	4684      	mov	ip, r0
#else
	push	{r0}
#endif
	orr	r3, r1, r0
    8a56:	ea41 0300 	orr.w	r3, r1, r0
	ands	r3, r3, #3
    8a5a:	f013 0303 	ands.w	r3, r3, #3
	bne	.Lmisaligned_copy
    8a5e:	d16d      	bne.n	8b3c <memcpy+0xe8>

.Lbig_block:
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8a60:	3a40      	subs	r2, #64	; 0x40
	blo	.Lmid_block
    8a62:	d341      	bcc.n	8ae8 <memcpy+0x94>
.Lbig_block_loop:
	BEGIN_UNROLL_BIG_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8a64:	f851 3b04 	ldr.w	r3, [r1], #4
    8a68:	f840 3b04 	str.w	r3, [r0], #4
    8a6c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a70:	f840 3b04 	str.w	r3, [r0], #4
    8a74:	f851 3b04 	ldr.w	r3, [r1], #4
    8a78:	f840 3b04 	str.w	r3, [r0], #4
    8a7c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a80:	f840 3b04 	str.w	r3, [r0], #4
    8a84:	f851 3b04 	ldr.w	r3, [r1], #4
    8a88:	f840 3b04 	str.w	r3, [r0], #4
    8a8c:	f851 3b04 	ldr.w	r3, [r1], #4
    8a90:	f840 3b04 	str.w	r3, [r0], #4
    8a94:	f851 3b04 	ldr.w	r3, [r1], #4
    8a98:	f840 3b04 	str.w	r3, [r0], #4
    8a9c:	f851 3b04 	ldr.w	r3, [r1], #4
    8aa0:	f840 3b04 	str.w	r3, [r0], #4
    8aa4:	f851 3b04 	ldr.w	r3, [r1], #4
    8aa8:	f840 3b04 	str.w	r3, [r0], #4
    8aac:	f851 3b04 	ldr.w	r3, [r1], #4
    8ab0:	f840 3b04 	str.w	r3, [r0], #4
    8ab4:	f851 3b04 	ldr.w	r3, [r1], #4
    8ab8:	f840 3b04 	str.w	r3, [r0], #4
    8abc:	f851 3b04 	ldr.w	r3, [r1], #4
    8ac0:	f840 3b04 	str.w	r3, [r0], #4
    8ac4:	f851 3b04 	ldr.w	r3, [r1], #4
    8ac8:	f840 3b04 	str.w	r3, [r0], #4
    8acc:	f851 3b04 	ldr.w	r3, [r1], #4
    8ad0:	f840 3b04 	str.w	r3, [r0], #4
    8ad4:	f851 3b04 	ldr.w	r3, [r1], #4
    8ad8:	f840 3b04 	str.w	r3, [r0], #4
    8adc:	f851 3b04 	ldr.w	r3, [r1], #4
    8ae0:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds	r0, __OPT_BIG_BLOCK_SIZE
	adds	r1, __OPT_BIG_BLOCK_SIZE
#endif
	subs	r2, __OPT_BIG_BLOCK_SIZE
    8ae4:	3a40      	subs	r2, #64	; 0x40
	bhs .Lbig_block_loop
    8ae6:	d2bd      	bcs.n	8a64 <memcpy+0x10>

.Lmid_block:
	adds	r2, __OPT_BIG_BLOCK_SIZE - __OPT_MID_BLOCK_SIZE
    8ae8:	3230      	adds	r2, #48	; 0x30
	blo	.Lcopy_word_by_word
    8aea:	d311      	bcc.n	8b10 <memcpy+0xbc>
.Lmid_block_loop:
	BEGIN_UNROLL_MID_BLOCK
#ifdef __ARM_ARCH_7EM__
	ldr	r3, [r1], #4
	str	r3, [r0], #4
	END_UNROLL
    8aec:	f851 3b04 	ldr.w	r3, [r1], #4
    8af0:	f840 3b04 	str.w	r3, [r0], #4
    8af4:	f851 3b04 	ldr.w	r3, [r1], #4
    8af8:	f840 3b04 	str.w	r3, [r0], #4
    8afc:	f851 3b04 	ldr.w	r3, [r1], #4
    8b00:	f840 3b04 	str.w	r3, [r0], #4
    8b04:	f851 3b04 	ldr.w	r3, [r1], #4
    8b08:	f840 3b04 	str.w	r3, [r0], #4
	str	r3, [r0, \offset]
	END_UNROLL
	adds    r0, __OPT_MID_BLOCK_SIZE
	adds    r1, __OPT_MID_BLOCK_SIZE
#endif
	subs	r2, __OPT_MID_BLOCK_SIZE
    8b0c:	3a10      	subs	r2, #16
	bhs	.Lmid_block_loop
    8b0e:	d2ed      	bcs.n	8aec <memcpy+0x98>

.Lcopy_word_by_word:
	adds	r2, __OPT_MID_BLOCK_SIZE - 4
    8b10:	320c      	adds	r2, #12
	blo	.Lcopy_less_than_4
    8b12:	d305      	bcc.n	8b20 <memcpy+0xcc>

	/* Kernel loop for small block copy */
	.align 2
.Lcopy_word_by_word_loop:
	ldr	r3, [r1], #4
    8b14:	f851 3b04 	ldr.w	r3, [r1], #4
	str	r3, [r0], #4
    8b18:	f840 3b04 	str.w	r3, [r0], #4
	subs	r2, #4
    8b1c:	3a04      	subs	r2, #4
	bhs	.Lcopy_word_by_word_loop
    8b1e:	d2f9      	bcs.n	8b14 <memcpy+0xc0>

.Lcopy_less_than_4:
	adds	r2, #4
    8b20:	3204      	adds	r2, #4
	beq	.Ldone
    8b22:	d008      	beq.n	8b36 <memcpy+0xe2>

	lsls	r2, r2, #31
    8b24:	07d2      	lsls	r2, r2, #31
	itt ne
    8b26:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8b28:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8b2c:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc	.Ldone
    8b30:	d301      	bcc.n	8b36 <memcpy+0xe2>
#ifdef __ARM_FEATURE_UNALIGNED
	ldrh	r3, [r1]
    8b32:	880b      	ldrh	r3, [r1, #0]
	strh	r3, [r0]
    8b34:	8003      	strh	r3, [r0, #0]
	strb	r3, [r0, #1]
#endif /* __ARM_FEATURE_UNALIGNED */

.Ldone:
#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8b36:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8b38:	4770      	bx	lr
    8b3a:	bf00      	nop
#define Ldst_aligned Lbig_block

	/* Copy word by word using LDR when alignment can be done in hardware,
	i.e., SCTLR.A is set, supporting unaligned access in LDR and STR.  */

	cmp	r2, #8
    8b3c:	2a08      	cmp	r2, #8
	blo	.Lbyte_copy
    8b3e:	d313      	bcc.n	8b68 <memcpy+0x114>

	/* if src is aligned, just go to the big block loop.  */
	lsls	r3, r1, #30
    8b40:	078b      	lsls	r3, r1, #30
	beq	.Ldst_aligned
    8b42:	d08d      	beq.n	8a60 <memcpy+0xc>
	handling of aligned src and misaligned dst need more overhead than
	otherwise.  By doing this the worst case is when initial src is aligned,
	additional up to 4 byte additional copy will executed, which is
	acceptable.  */

	ands	r3, r0, #3
    8b44:	f010 0303 	ands.w	r3, r0, #3
	beq	.Ldst_aligned
    8b48:	d08a      	beq.n	8a60 <memcpy+0xc>

	rsb	r3, #4
    8b4a:	f1c3 0304 	rsb	r3, r3, #4
	subs	r2, r3
    8b4e:	1ad2      	subs	r2, r2, r3

	lsls    r3, r3, #31
    8b50:	07db      	lsls	r3, r3, #31
	itt ne
    8b52:	bf1c      	itt	ne
	ldrbne  r3, [r1], #1
    8b54:	f811 3b01 	ldrbne.w	r3, [r1], #1
	strbne  r3, [r0], #1
    8b58:	f800 3b01 	strbne.w	r3, [r0], #1

	bcc .Ldst_aligned
    8b5c:	d380      	bcc.n	8a60 <memcpy+0xc>

#ifdef __ARM_FEATURE_UNALIGNED
	ldrh    r3, [r1], #2
    8b5e:	f831 3b02 	ldrh.w	r3, [r1], #2
	strh    r3, [r0], #2
    8b62:	f820 3b02 	strh.w	r3, [r0], #2
	b	.Ldst_aligned
    8b66:	e77b      	b.n	8a60 <memcpy+0xc>
	pop	{r4, r5}

#endif /* __ARM_FEATURE_UNALIGNED */

.Lbyte_copy:
	subs	r2, #4
    8b68:	3a04      	subs	r2, #4
	blo	.Lcopy_less_than_4
    8b6a:	d3d9      	bcc.n	8b20 <memcpy+0xcc>

.Lbyte_copy_loop:
	subs    r2, #1
    8b6c:	3a01      	subs	r2, #1
	ldrb    r3, [r1], #1
    8b6e:	f811 3b01 	ldrb.w	r3, [r1], #1
	strb    r3, [r0], #1
    8b72:	f800 3b01 	strb.w	r3, [r0], #1
	bhs	.Lbyte_copy_loop
    8b76:	d2f9      	bcs.n	8b6c <memcpy+0x118>

	ldrb	r3, [r1]
    8b78:	780b      	ldrb	r3, [r1, #0]
	strb	r3, [r0]
    8b7a:	7003      	strb	r3, [r0, #0]
	ldrb	r3, [r1, #1]
    8b7c:	784b      	ldrb	r3, [r1, #1]
	strb	r3, [r0, #1]
    8b7e:	7043      	strb	r3, [r0, #1]
	ldrb	r3, [r1, #2]
    8b80:	788b      	ldrb	r3, [r1, #2]
	strb	r3, [r0, #2]
    8b82:	7083      	strb	r3, [r0, #2]

#ifdef __ARM_FEATURE_UNALIGNED
	mov	r0, ip
    8b84:	4660      	mov	r0, ip
#else
	pop	{r0}
#endif
	bx	lr
    8b86:	4770      	bx	lr

00008b88 <set_arm_clock>:
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8b88:	4a96      	ldr	r2, [pc, #600]	; (8de4 <set_arm_clock+0x25c>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8b8a:	4b97      	ldr	r3, [pc, #604]	; (8de8 <set_arm_clock+0x260>)
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8b8c:	4290      	cmp	r0, r2
//  CCM_CBCMR  PERIPH2_CLK_SEL
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
    8b8e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
	uint32_t dcdc = DCDC_REG3;
    8b92:	4c96      	ldr	r4, [pc, #600]	; (8dec <set_arm_clock+0x264>)
//  CCM_CBCDR  AHB_PODF
//  CCM_CBCDR  SEMC_PODF

uint32_t set_arm_clock(uint32_t frequency)
{
	uint32_t cbcdr = CCM_CBCDR; // pg 1021
    8b94:	f8d3 e014 	ldr.w	lr, [r3, #20]
	uint32_t cbcmr = CCM_CBCMR; // pg 1023
    8b98:	6999      	ldr	r1, [r3, #24]
	uint32_t dcdc = DCDC_REG3;
    8b9a:	68e6      	ldr	r6, [r4, #12]

	// compute required voltage
	uint32_t voltage = 1150; // default = 1.15V
	if (frequency > 528000000) {
    8b9c:	d91c      	bls.n	8bd8 <set_arm_clock+0x50>
		voltage = 1250; // 1.25V
#if defined(OVERCLOCK_STEPSIZE) && defined(OVERCLOCK_MAX_VOLT)
		if (frequency > 600000000) {
    8b9e:	4b94      	ldr	r3, [pc, #592]	; (8df0 <set_arm_clock+0x268>)
    8ba0:	4298      	cmp	r0, r3
    8ba2:	f240 8115 	bls.w	8dd0 <set_arm_clock+0x248>
			voltage += ((frequency - 600000000) / OVERCLOCK_STEPSIZE) * 25;
    8ba6:	4b93      	ldr	r3, [pc, #588]	; (8df4 <set_arm_clock+0x26c>)
    8ba8:	f240 6527 	movw	r5, #1575	; 0x627
    8bac:	4f92      	ldr	r7, [pc, #584]	; (8df8 <set_arm_clock+0x270>)
    8bae:	4403      	add	r3, r0
    8bb0:	4c92      	ldr	r4, [pc, #584]	; (8dfc <set_arm_clock+0x274>)
    8bb2:	0a1a      	lsrs	r2, r3, #8
    8bb4:	fba7 3202 	umull	r3, r2, r7, r2
    8bb8:	09d3      	lsrs	r3, r2, #7
    8bba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    8bbe:	eb03 0283 	add.w	r2, r3, r3, lsl #2
    8bc2:	f202 43e2 	addw	r3, r2, #1250	; 0x4e2
    8bc6:	42ab      	cmp	r3, r5
    8bc8:	bf28      	it	cs
    8bca:	462b      	movcs	r3, r5
    8bcc:	f5a3 7348 	sub.w	r3, r3, #800	; 0x320
    8bd0:	fba4 3503 	umull	r3, r5, r4, r3
    8bd4:	08ed      	lsrs	r5, r5, #3
    8bd6:	e004      	b.n	8be2 <set_arm_clock+0x5a>
			if (voltage > OVERCLOCK_MAX_VOLT) voltage = OVERCLOCK_MAX_VOLT;
		}
#endif
	} else if (frequency <= 24000000) {
    8bd8:	4d89      	ldr	r5, [pc, #548]	; (8e00 <set_arm_clock+0x278>)
    8bda:	42a8      	cmp	r0, r5
    8bdc:	bf94      	ite	ls
    8bde:	2506      	movls	r5, #6
    8be0:	250e      	movhi	r5, #14
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8be2:	4a81      	ldr	r2, [pc, #516]	; (8de8 <set_arm_clock+0x260>)
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8be4:	f006 071f 	and.w	r7, r6, #31
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8be8:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8bec:	42af      	cmp	r7, r5
	} else if (frequency <= 24000000) {
		voltage = 950; // 0.95
	}

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
    8bee:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
    8bf2:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
    8bf6:	d20a      	bcs.n	8c0e <set_arm_clock+0x86>
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8bf8:	4b7c      	ldr	r3, [pc, #496]	; (8dec <set_arm_clock+0x264>)

	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8bfa:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8bfe:	461a      	mov	r2, r3
	// if voltage needs to increase, do it before switch clock speed
	CCM_CCGR6 |= CCM_CCGR6_DCDC(CCM_CCGR_ON);
	if ((dcdc & DCDC_REG3_TRG_MASK) < DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Increasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8c00:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    8c02:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8c04:	6813      	ldr	r3, [r2, #0]
    8c06:	2b00      	cmp	r3, #0
    8c08:	dafc      	bge.n	8c04 <set_arm_clock+0x7c>
    8c0a:	f006 071f 	and.w	r7, r6, #31
	}

	if (!(cbcdr & CCM_CBCDR_PERIPH_CLK_SEL)) {
    8c0e:	f01e 7300 	ands.w	r3, lr, #33554432	; 0x2000000
    8c12:	d131      	bne.n	8c78 <set_arm_clock+0xf0>
		printf("need to switch to alternate clock during reconfigure of ARM PLL\n");
		const uint32_t need1s = CCM_ANALOG_PLL_USB1_ENABLE | CCM_ANALOG_PLL_USB1_POWER |
			CCM_ANALOG_PLL_USB1_LOCK | CCM_ANALOG_PLL_USB1_EN_USB_CLKS;
		uint32_t sel, div;
		if ((CCM_ANALOG_PLL_USB1 & need1s) == need1s) {
    8c14:	4c7b      	ldr	r4, [pc, #492]	; (8e04 <set_arm_clock+0x27c>)
    8c16:	4a7c      	ldr	r2, [pc, #496]	; (8e08 <set_arm_clock+0x280>)
    8c18:	f8d4 c010 	ldr.w	ip, [r4, #16]
    8c1c:	4614      	mov	r4, r2
    8c1e:	ea0c 0202 	and.w	r2, ip, r2
    8c22:	42a2      	cmp	r2, r4
    8c24:	bf0a      	itet	eq
    8c26:	f04f 53c0 	moveq.w	r3, #402653184	; 0x18000000
    8c2a:	f44f 5280 	movne.w	r2, #4096	; 0x1000
    8c2e:	2200      	moveq	r2, #0
		} else {
			printf("USB PLL is off, use 24 MHz crystal\n");
			sel = 1;
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
    8c30:	ea8e 0403 	eor.w	r4, lr, r3
    8c34:	f014 5f60 	tst.w	r4, #939524096	; 0x38000000
    8c38:	d008      	beq.n	8c4c <set_arm_clock+0xc4>
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
    8c3a:	f02e 5e60 	bic.w	lr, lr, #939524096	; 0x38000000
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8c3e:	f003 5360 	and.w	r3, r3, #939524096	; 0x38000000
			CCM_CBCDR = cbcdr;
    8c42:	4c69      	ldr	r4, [pc, #420]	; (8de8 <set_arm_clock+0x260>)
			div = 0;
		}
		if ((cbcdr & CCM_CBCDR_PERIPH_CLK2_PODF_MASK) != CCM_CBCDR_PERIPH_CLK2_PODF(div)) {
			// PERIPH_CLK2 divider needs to be changed
			cbcdr &= ~CCM_CBCDR_PERIPH_CLK2_PODF_MASK;
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
    8c44:	ea43 0e0e 	orr.w	lr, r3, lr
			CCM_CBCDR = cbcdr;
    8c48:	f8c4 e014 	str.w	lr, [r4, #20]
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
    8c4c:	ea81 0302 	eor.w	r3, r1, r2
    8c50:	f413 5f40 	tst.w	r3, #12288	; 0x3000
    8c54:	d008      	beq.n	8c68 <set_arm_clock+0xe0>
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8c56:	4b64      	ldr	r3, [pc, #400]	; (8de8 <set_arm_clock+0x260>)
			cbcdr |= CCM_CBCDR_PERIPH_CLK2_PODF(div);
			CCM_CBCDR = cbcdr;
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
    8c58:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
    8c5c:	4311      	orrs	r1, r2
			CCM_CBCMR = cbcmr;
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8c5e:	461a      	mov	r2, r3
		}
		if ((cbcmr & CCM_CBCMR_PERIPH_CLK2_SEL_MASK) != CCM_CBCMR_PERIPH_CLK2_SEL(sel)) {
			// PERIPH_CLK2 source select needs to be changed
			cbcmr &= ~CCM_CBCMR_PERIPH_CLK2_SEL_MASK;
			cbcmr |= CCM_CBCMR_PERIPH_CLK2_SEL(sel);
			CCM_CBCMR = cbcmr;
    8c60:	6199      	str	r1, [r3, #24]
			while (CCM_CDHIPR & CCM_CDHIPR_PERIPH2_CLK_SEL_BUSY) ; // wait
    8c62:	6c93      	ldr	r3, [r2, #72]	; 0x48
    8c64:	071c      	lsls	r4, r3, #28
    8c66:	d4fc      	bmi.n	8c62 <set_arm_clock+0xda>
		}
		// switch over to PERIPH_CLK2
		cbcdr |= CCM_CBCDR_PERIPH_CLK_SEL;
    8c68:	f04e 7e00 	orr.w	lr, lr, #33554432	; 0x2000000
		CCM_CBCDR = cbcdr;
    8c6c:	4a5e      	ldr	r2, [pc, #376]	; (8de8 <set_arm_clock+0x260>)
    8c6e:	f8c2 e014 	str.w	lr, [r2, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8c72:	6c93      	ldr	r3, [r2, #72]	; 0x48
    8c74:	0699      	lsls	r1, r3, #26
    8c76:	d4fc      	bmi.n	8c72 <set_arm_clock+0xea>

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
    8c78:	2101      	movs	r1, #1
	while (frequency * div_arm * div_ahb < 648000000) {
    8c7a:	4c64      	ldr	r4, [pc, #400]	; (8e0c <set_arm_clock+0x284>)
	}

	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
    8c7c:	460a      	mov	r2, r1
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8c7e:	fb01 f302 	mul.w	r3, r1, r2
    8c82:	fb00 f303 	mul.w	r3, r0, r3
    8c86:	42a3      	cmp	r3, r4
    8c88:	d809      	bhi.n	8c9e <set_arm_clock+0x116>
		if (div_arm < 8) {
    8c8a:	2a07      	cmp	r2, #7
    8c8c:	f200 8095 	bhi.w	8dba <set_arm_clock+0x232>
			div_arm = div_arm + 1;
    8c90:	3201      	adds	r2, #1
	// TODO: check if PLL2 running, can 352, 396 or 528 can work? (no need for ARM PLL)

	// DIV_SELECT: 54-108 = official range 648 to 1296 in 12 MHz steps
	uint32_t div_arm = 1;
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
    8c92:	fb01 f302 	mul.w	r3, r1, r2
    8c96:	fb00 f303 	mul.w	r3, r0, r3
    8c9a:	42a3      	cmp	r3, r4
    8c9c:	d9f5      	bls.n	8c8a <set_arm_clock+0x102>
			} else {
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
    8c9e:	485c      	ldr	r0, [pc, #368]	; (8e10 <set_arm_clock+0x288>)
    8ca0:	4c5c      	ldr	r4, [pc, #368]	; (8e14 <set_arm_clock+0x28c>)
    8ca2:	4418      	add	r0, r3
    8ca4:	fba4 0300 	umull	r0, r3, r4, r0
    8ca8:	0d1b      	lsrs	r3, r3, #20
	if (mult > 108) mult = 108;
    8caa:	2b6c      	cmp	r3, #108	; 0x6c
    8cac:	f200 808b 	bhi.w	8dc6 <set_arm_clock+0x23e>
	if (mult < 54) mult = 54;
    8cb0:	2b35      	cmp	r3, #53	; 0x35
    8cb2:	f200 808f 	bhi.w	8dd4 <set_arm_clock+0x24c>
    8cb6:	f8df 8188 	ldr.w	r8, [pc, #392]	; 8e40 <set_arm_clock+0x2b8>
    8cba:	2336      	movs	r3, #54	; 0x36
    8cbc:	4856      	ldr	r0, [pc, #344]	; (8e18 <set_arm_clock+0x290>)

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8cbe:	f8df c144 	ldr.w	ip, [pc, #324]	; 8e04 <set_arm_clock+0x27c>
    8cc2:	4c56      	ldr	r4, [pc, #344]	; (8e1c <set_arm_clock+0x294>)
    8cc4:	f8dc 9000 	ldr.w	r9, [ip]
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8cc8:	fbb0 f0f2 	udiv	r0, r0, r2

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8ccc:	ea09 0404 	and.w	r4, r9, r4
    8cd0:	4544      	cmp	r4, r8
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
	if (mult < 54) mult = 54;
	printf("Freq: 12 MHz * %u / %u / %u\n", mult, div_arm, div_ahb);
	frequency = mult * 12000000 / div_arm / div_ahb;
    8cd2:	fbb0 f0f1 	udiv	r0, r0, r1

	printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	const uint32_t arm_pll_mask = CCM_ANALOG_PLL_ARM_LOCK | CCM_ANALOG_PLL_ARM_BYPASS |
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
    8cd6:	d00b      	beq.n	8cf0 <set_arm_clock+0x168>
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
    8cd8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8cdc:	f44f 5880 	mov.w	r8, #4096	; 0x1000
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8ce0:	4664      	mov	r4, ip
		CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_POWERDOWN |
		CCM_ANALOG_PLL_ARM_DIV_SELECT_MASK;
	if ((CCM_ANALOG_PLL_ARM & arm_pll_mask) != (CCM_ANALOG_PLL_ARM_LOCK
	  | CCM_ANALOG_PLL_ARM_ENABLE | CCM_ANALOG_PLL_ARM_DIV_SELECT(mult))) {
		printf("ARM PLL needs reconfigure\n");
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_POWERDOWN;
    8ce2:	f8cc 8000 	str.w	r8, [ip]
		// TODO: delay needed?
		CCM_ANALOG_PLL_ARM = CCM_ANALOG_PLL_ARM_ENABLE
    8ce6:	f8cc 3000 	str.w	r3, [ip]
			| CCM_ANALOG_PLL_ARM_DIV_SELECT(mult);
		while (!(CCM_ANALOG_PLL_ARM & CCM_ANALOG_PLL_ARM_LOCK)) ; // wait for lock
    8cea:	6823      	ldr	r3, [r4, #0]
    8cec:	2b00      	cmp	r3, #0
    8cee:	dafc      	bge.n	8cea <set_arm_clock+0x162>
		printf("ARM PLL=%x\n", CCM_ANALOG_PLL_ARM);
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
    8cf0:	f8df c0f4 	ldr.w	ip, [pc, #244]	; 8de8 <set_arm_clock+0x260>
    8cf4:	3a01      	subs	r2, #1
    8cf6:	f8dc 3010 	ldr.w	r3, [ip, #16]
    8cfa:	f003 0307 	and.w	r3, r3, #7
    8cfe:	4293      	cmp	r3, r2
    8d00:	d007      	beq.n	8d12 <set_arm_clock+0x18a>
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8d02:	f002 0207 	and.w	r2, r2, #7
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8d06:	4664      	mov	r4, ip
	} else {
		printf("ARM PLL already running at required frequency\n");
	}

	if ((CCM_CACRR & CCM_CACRR_ARM_PODF_MASK) != (div_arm - 1)) {
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
    8d08:	f8cc 2010 	str.w	r2, [ip, #16]
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
    8d0c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
    8d0e:	03db      	lsls	r3, r3, #15
    8d10:	d4fc      	bmi.n	8d0c <set_arm_clock+0x184>
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
    8d12:	3901      	subs	r1, #1
    8d14:	0289      	lsls	r1, r1, #10
    8d16:	ea8e 0301 	eor.w	r3, lr, r1
    8d1a:	f413 5fe0 	tst.w	r3, #7168	; 0x1c00
    8d1e:	d00c      	beq.n	8d3a <set_arm_clock+0x1b2>
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
		CCM_CBCDR = cbcdr;
    8d20:	4b31      	ldr	r3, [pc, #196]	; (8de8 <set_arm_clock+0x260>)
		CCM_CACRR = CCM_CACRR_ARM_PODF(div_arm - 1);
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
    8d22:	f42e 5ee0 	bic.w	lr, lr, #7168	; 0x1c00
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8d26:	f401 51e0 	and.w	r1, r1, #7168	; 0x1c00
		CCM_CBCDR = cbcdr;
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8d2a:	461a      	mov	r2, r3
		while (CCM_CDHIPR & CCM_CDHIPR_ARM_PODF_BUSY) ; // wait
	}

	if ((cbcdr & CCM_CBCDR_AHB_PODF_MASK) != CCM_CBCDR_AHB_PODF(div_ahb - 1)) {
		cbcdr &= ~CCM_CBCDR_AHB_PODF_MASK;
		cbcdr |= CCM_CBCDR_AHB_PODF(div_ahb - 1);
    8d2c:	ea41 0e0e 	orr.w	lr, r1, lr
		CCM_CBCDR = cbcdr;
    8d30:	f8c3 e014 	str.w	lr, [r3, #20]
		while (CCM_CDHIPR & CCM_CDHIPR_AHB_PODF_BUSY); // wait
    8d34:	6c93      	ldr	r3, [r2, #72]	; 0x48
    8d36:	0799      	lsls	r1, r3, #30
    8d38:	d4fc      	bmi.n	8d34 <set_arm_clock+0x1ac>
	}

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
    8d3a:	4b39      	ldr	r3, [pc, #228]	; (8e20 <set_arm_clock+0x298>)
    8d3c:	4939      	ldr	r1, [pc, #228]	; (8e24 <set_arm_clock+0x29c>)
    8d3e:	4403      	add	r3, r0
    8d40:	09db      	lsrs	r3, r3, #7
    8d42:	fba1 3103 	umull	r3, r1, r1, r3
    8d46:	0b09      	lsrs	r1, r1, #12
    8d48:	2904      	cmp	r1, #4
    8d4a:	bf28      	it	cs
    8d4c:	2104      	movcs	r1, #4
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
    8d4e:	1e4b      	subs	r3, r1, #1
    8d50:	021b      	lsls	r3, r3, #8
    8d52:	ea8e 0203 	eor.w	r2, lr, r3
    8d56:	f412 7f40 	tst.w	r2, #768	; 0x300
    8d5a:	d007      	beq.n	8d6c <set_arm_clock+0x1e4>
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
    8d5c:	f42e 7e40 	bic.w	lr, lr, #768	; 0x300
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8d60:	f403 7340 	and.w	r3, r3, #768	; 0x300
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8d64:	4a20      	ldr	r2, [pc, #128]	; (8de8 <set_arm_clock+0x260>)

	uint32_t div_ipg = (frequency + 149999999) / 150000000;
	if (div_ipg > 4) div_ipg = 4;
	if ((cbcdr & CCM_CBCDR_IPG_PODF_MASK) != (CCM_CBCDR_IPG_PODF(div_ipg - 1))) {
		cbcdr &= ~CCM_CBCDR_IPG_PODF_MASK;
		cbcdr |= CCM_CBCDR_IPG_PODF(div_ipg - 1);
    8d66:	ea43 030e 	orr.w	r3, r3, lr
		// TODO: how to safely change IPG_PODF ??
		CCM_CBCDR = cbcdr;
    8d6a:	6153      	str	r3, [r2, #20]
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8d6c:	4b1e      	ldr	r3, [pc, #120]	; (8de8 <set_arm_clock+0x260>)
    8d6e:	695c      	ldr	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8d70:	461a      	mov	r2, r3
		CCM_CBCDR = cbcdr;
	}

	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
    8d72:	f024 7400 	bic.w	r4, r4, #33554432	; 0x2000000
    8d76:	615c      	str	r4, [r3, #20]
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait
    8d78:	6c93      	ldr	r3, [r2, #72]	; 0x48
    8d7a:	069b      	lsls	r3, r3, #26
    8d7c:	d4fc      	bmi.n	8d78 <set_arm_clock+0x1f0>

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8d7e:	4b2a      	ldr	r3, [pc, #168]	; (8e28 <set_arm_clock+0x2a0>)
    8d80:	f04f 32ff 	mov.w	r2, #4294967295
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8d84:	4c29      	ldr	r4, [pc, #164]	; (8e2c <set_arm_clock+0x2a4>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8d86:	42bd      	cmp	r5, r7
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8d88:	fba3 e300 	umull	lr, r3, r3, r0
	//cbcdr &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
    8d8c:	6020      	str	r0, [r4, #0]
	F_BUS_ACTUAL = frequency / div_ipg;
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8d8e:	ea4f 4393 	mov.w	r3, r3, lsr #18
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8d92:	4c27      	ldr	r4, [pc, #156]	; (8e30 <set_arm_clock+0x2a8>)
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8d94:	fbb2 f3f3 	udiv	r3, r2, r3
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8d98:	fbb0 f1f1 	udiv	r1, r0, r1
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8d9c:	4a25      	ldr	r2, [pc, #148]	; (8e34 <set_arm_clock+0x2ac>)
	//CCM_CBCDR = cbcdr;  // why does this not work at 24 MHz?
	CCM_CBCDR &= ~CCM_CBCDR_PERIPH_CLK_SEL;
	while (CCM_CDHIPR & CCM_CDHIPR_PERIPH_CLK_SEL_BUSY) ; // wait

	F_CPU_ACTUAL = frequency;
	F_BUS_ACTUAL = frequency / div_ipg;
    8d9e:	6021      	str	r1, [r4, #0]
	scale_cpu_cycles_to_microseconds = 0xFFFFFFFFu / (uint32_t)(frequency / 1000000u);
    8da0:	6013      	str	r3, [r2, #0]

	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
    8da2:	d208      	bcs.n	8db6 <set_arm_clock+0x22e>
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
    8da4:	4b11      	ldr	r3, [pc, #68]	; (8dec <set_arm_clock+0x264>)
	printf("New Frequency: ARM=%u, IPG=%u\n", frequency, frequency / div_ipg);

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
    8da6:	f026 061f 	bic.w	r6, r6, #31
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
		DCDC_REG3 = dcdc;
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8daa:	461a      	mov	r2, r3

	// if voltage needs to decrease, do it after switch clock speed
	if ((dcdc & DCDC_REG3_TRG_MASK) > DCDC_REG3_TRG((voltage - 800) / 25)) {
		printf("Decreasing voltage to %u mV\n", voltage);
		dcdc &= ~DCDC_REG3_TRG_MASK;
		dcdc |= DCDC_REG3_TRG((voltage - 800) / 25);
    8dac:	432e      	orrs	r6, r5
		DCDC_REG3 = dcdc;
    8dae:	60de      	str	r6, [r3, #12]
		while (!(DCDC_REG0 & DCDC_REG0_STS_DC_OK)) ; // wait voltage settling
    8db0:	6813      	ldr	r3, [r2, #0]
    8db2:	2b00      	cmp	r3, #0
    8db4:	dafc      	bge.n	8db0 <set_arm_clock+0x228>
	}

	return frequency;
}
    8db6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	uint32_t div_ahb = 1;
	while (frequency * div_arm * div_ahb < 648000000) {
		if (div_arm < 8) {
			div_arm = div_arm + 1;
		} else {
			if (div_ahb < 5) {
    8dba:	2904      	cmp	r1, #4
    8dbc:	f63f af6f 	bhi.w	8c9e <set_arm_clock+0x116>
				div_ahb = div_ahb + 1;
    8dc0:	3101      	adds	r1, #1
				div_arm = 1;
    8dc2:	2201      	movs	r2, #1
    8dc4:	e75b      	b.n	8c7e <set_arm_clock+0xf6>
    8dc6:	f8df 807c 	ldr.w	r8, [pc, #124]	; 8e44 <set_arm_clock+0x2bc>
				break;
			}
		}
	}
	uint32_t mult = (frequency * div_arm * div_ahb + 6000000) / 12000000;
	if (mult > 108) mult = 108;
    8dca:	236c      	movs	r3, #108	; 0x6c
    8dcc:	481a      	ldr	r0, [pc, #104]	; (8e38 <set_arm_clock+0x2b0>)
    8dce:	e776      	b.n	8cbe <set_arm_clock+0x136>
    8dd0:	2512      	movs	r5, #18
    8dd2:	e706      	b.n	8be2 <set_arm_clock+0x5a>
    8dd4:	4819      	ldr	r0, [pc, #100]	; (8e3c <set_arm_clock+0x2b4>)
    8dd6:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8e48 <set_arm_clock+0x2c0>
    8dda:	fb00 f003 	mul.w	r0, r0, r3
    8dde:	ea43 0808 	orr.w	r8, r3, r8
    8de2:	e76c      	b.n	8cbe <set_arm_clock+0x136>
    8de4:	1f78a400 	.word	0x1f78a400
    8de8:	400fc000 	.word	0x400fc000
    8dec:	40080000 	.word	0x40080000
    8df0:	23c34600 	.word	0x23c34600
    8df4:	dc3cba00 	.word	0xdc3cba00
    8df8:	004cb223 	.word	0x004cb223
    8dfc:	51eb851f 	.word	0x51eb851f
    8e00:	016e3600 	.word	0x016e3600
    8e04:	400d8000 	.word	0x400d8000
    8e08:	80003040 	.word	0x80003040
    8e0c:	269fb1ff 	.word	0x269fb1ff
    8e10:	005b8d80 	.word	0x005b8d80
    8e14:	165e9f81 	.word	0x165e9f81
    8e18:	269fb200 	.word	0x269fb200
    8e1c:	8001307f 	.word	0x8001307f
    8e20:	08f0d17f 	.word	0x08f0d17f
    8e24:	00e5109f 	.word	0x00e5109f
    8e28:	431bde83 	.word	0x431bde83
    8e2c:	2000112c 	.word	0x2000112c
    8e30:	20001128 	.word	0x20001128
    8e34:	20036c9c 	.word	0x20036c9c
    8e38:	4d3f6400 	.word	0x4d3f6400
    8e3c:	00b71b00 	.word	0x00b71b00
    8e40:	80002036 	.word	0x80002036
    8e44:	8000206c 	.word	0x8000206c
    8e48:	80002000 	.word	0x80002000

00008e4c <delay>:

void delay(uint32_t msec)
{
	uint32_t start;

	if (msec == 0) return;
    8e4c:	2800      	cmp	r0, #0
    8e4e:	d057      	beq.n	8f00 <delay+0xb4>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8e50:	2201      	movs	r2, #1
{

}*/

void delay(uint32_t msec)
{
    8e52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    8e56:	b085      	sub	sp, #20
    8e58:	4683      	mov	fp, r0
    8e5a:	4c2a      	ldr	r4, [pc, #168]	; (8f04 <delay+0xb8>)
    8e5c:	4d2a      	ldr	r5, [pc, #168]	; (8f08 <delay+0xbc>)
    8e5e:	4e2b      	ldr	r6, [pc, #172]	; (8f0c <delay+0xc0>)
    8e60:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8e64:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    8e68:	6828      	ldr	r0, [r5, #0]
		scc = systick_cycle_count;
    8e6a:	6833      	ldr	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8e6c:	e844 2100 	strex	r1, r2, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8e70:	2900      	cmp	r1, #0
    8e72:	d1f7      	bne.n	8e64 <delay+0x18>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8e74:	4f26      	ldr	r7, [pc, #152]	; (8f10 <delay+0xc4>)
    8e76:	e9cd 8902 	strd	r8, r9, [sp, #8]
    8e7a:	683a      	ldr	r2, [r7, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    8e7c:	1ad3      	subs	r3, r2, r3
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8e7e:	4a25      	ldr	r2, [pc, #148]	; (8f14 <delay+0xc8>)
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    8e80:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8e84:	9701      	str	r7, [sp, #4]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8e86:	6812      	ldr	r2, [r2, #0]
    8e88:	2701      	movs	r7, #1
    8e8a:	fba3 2302 	umull	r2, r3, r3, r2
	if (frac > 1000) frac = 1000;
    8e8e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8e92:	4698      	mov	r8, r3
	if (frac > 1000) frac = 1000;
    8e94:	2300      	movs	r3, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8e96:	428b      	cmp	r3, r1
    8e98:	bf08      	it	eq
    8e9a:	4542      	cmpeq	r2, r8
    8e9c:	bf2c      	ite	cs
    8e9e:	46c2      	movcs	sl, r8
    8ea0:	46f2      	movcc	sl, lr
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
    8ea2:	fb0e aa00 	mla	sl, lr, r0, sl
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8ea6:	e854 3f00 	ldrex	r3, [r4]
uint32_t micros(void)
{
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    8eaa:	682a      	ldr	r2, [r5, #0]
		scc = systick_cycle_count;
    8eac:	6831      	ldr	r1, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8eae:	e844 7300 	strex	r3, r7, [r4]
	} while ( __STREXW(1, &systick_safe_read));
    8eb2:	2b00      	cmp	r3, #0
    8eb4:	d1f7      	bne.n	8ea6 <delay+0x5a>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8eb6:	9801      	ldr	r0, [sp, #4]
    8eb8:	6800      	ldr	r0, [r0, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    8eba:	1a41      	subs	r1, r0, r1
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ebc:	4815      	ldr	r0, [pc, #84]	; (8f14 <delay+0xc8>)
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    8ebe:	f44f 7e7a 	mov.w	lr, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ec2:	6800      	ldr	r0, [r0, #0]
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    8ec4:	fb0e f202 	mul.w	r2, lr, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ec8:	fba1 0100 	umull	r0, r1, r1, r0
	if (frac > 1000) frac = 1000;
    8ecc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    8ed0:	ebca 0202 	rsb	r2, sl, r2
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ed4:	4688      	mov	r8, r1
	if (frac > 1000) frac = 1000;
    8ed6:	2100      	movs	r1, #0
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8ed8:	4299      	cmp	r1, r3
    8eda:	bf08      	it	eq
    8edc:	4540      	cmpeq	r0, r8
    8ede:	bf2c      	ite	cs
    8ee0:	4643      	movcs	r3, r8
    8ee2:	4673      	movcc	r3, lr
	uint32_t start;

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
    8ee4:	441a      	add	r2, r3
    8ee6:	4572      	cmp	r2, lr
    8ee8:	d307      	bcc.n	8efa <delay+0xae>
			if (--msec == 0) return;
    8eea:	f1bb 0b01 	subs.w	fp, fp, #1
			start += 1000;
    8eee:	f50a 7a7a 	add.w	sl, sl, #1000	; 0x3e8

	if (msec == 0) return;
	start = micros();
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
    8ef2:	d1d8      	bne.n	8ea6 <delay+0x5a>
			start += 1000;
		}
		yield();
	}
	// TODO...
}
    8ef4:	b005      	add	sp, #20
    8ef6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	while (1) {
		while ((micros() - start) >= 1000) {
			if (--msec == 0) return;
			start += 1000;
		}
		yield();
    8efa:	f001 fb0b 	bl	a514 <yield>
	}
    8efe:	e7d2      	b.n	8ea6 <delay+0x5a>
    8f00:	4770      	bx	lr
    8f02:	bf00      	nop
    8f04:	20036f28 	.word	0x20036f28
    8f08:	20036ca0 	.word	0x20036ca0
    8f0c:	20036c98 	.word	0x20036c98
    8f10:	e0001004 	.word	0xe0001004
    8f14:	20036c9c 	.word	0x20036c9c

00008f18 <micros>:
	// TODO...
}

uint32_t micros(void)
{
    8f18:	e92d 03f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9}
    8f1c:	4a12      	ldr	r2, [pc, #72]	; (8f68 <micros+0x50>)
    8f1e:	2601      	movs	r6, #1
    8f20:	4d12      	ldr	r5, [pc, #72]	; (8f6c <micros+0x54>)
    8f22:	4c13      	ldr	r4, [pc, #76]	; (8f70 <micros+0x58>)
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, [%1]" : "=r" (result) : "r" (addr) );
    8f24:	e852 3f00 	ldrex	r3, [r2]
	uint32_t smc, scc;
	do {
		__LDREXW(&systick_safe_read);
		smc = systick_millis_count;
    8f28:	6829      	ldr	r1, [r5, #0]
		scc = systick_cycle_count;
    8f2a:	6820      	ldr	r0, [r4, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, [%1]" : "=&r" (result) : "r" (addr), "r" (value) );
    8f2c:	e842 6300 	strex	r3, r6, [r2]
	} while ( __STREXW(1, &systick_safe_read));
    8f30:	2b00      	cmp	r3, #0
    8f32:	d1f7      	bne.n	8f24 <micros+0xc>
	uint32_t cyccnt = ARM_DWT_CYCCNT;
    8f34:	4a0f      	ldr	r2, [pc, #60]	; (8f74 <micros+0x5c>)
    8f36:	6816      	ldr	r6, [r2, #0]
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8f38:	4f0f      	ldr	r7, [pc, #60]	; (8f78 <micros+0x60>)
		smc = systick_millis_count;
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
    8f3a:	1a32      	subs	r2, r6, r0
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
	if (frac > 1000) frac = 1000;
    8f3c:	f04f 0900 	mov.w	r9, #0
    8f40:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8f44:	683e      	ldr	r6, [r7, #0]
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
    8f46:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
		scc = systick_cycle_count;
	} while ( __STREXW(1, &systick_safe_read));
	uint32_t cyccnt = ARM_DWT_CYCCNT;
	asm volatile("" : : : "memory");
	uint32_t ccdelta = cyccnt - scc;
	uint32_t frac = ((uint64_t)ccdelta * scale_cpu_cycles_to_microseconds) >> 32;
    8f4a:	4599      	cmp	r9, r3
    8f4c:	fba2 6706 	umull	r6, r7, r2, r6
    8f50:	bf08      	it	eq
    8f52:	45b8      	cmpeq	r8, r7
    8f54:	463c      	mov	r4, r7
    8f56:	bf2c      	ite	cs
    8f58:	463c      	movcs	r4, r7
    8f5a:	4604      	movcc	r4, r0
	if (frac > 1000) frac = 1000;
	uint32_t usec = 1000*smc + frac;
	return usec;
}
    8f5c:	fb00 4001 	mla	r0, r0, r1, r4
    8f60:	e8bd 03f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9}
    8f64:	4770      	bx	lr
    8f66:	bf00      	nop
    8f68:	20036f28 	.word	0x20036f28
    8f6c:	20036ca0 	.word	0x20036ca0
    8f70:	20036c98 	.word	0x20036c98
    8f74:	e0001004 	.word	0xe0001004
    8f78:	20036c9c 	.word	0x20036c9c

00008f7c <digitalWrite.part.0>:
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    8f7c:	0100      	lsls	r0, r0, #4
    8f7e:	4b0f      	ldr	r3, [pc, #60]	; (8fbc <digitalWrite.part.0+0x40>)
    8f80:	181a      	adds	r2, r3, r0
	pinmode = *(p->reg + 1);
    8f82:	581b      	ldr	r3, [r3, r0]
	{&CORE_PIN53_PORTREG, &CORE_PIN53_CONFIG, &CORE_PIN53_PADCONFIG, CORE_PIN53_BITMASK},
	{&CORE_PIN54_PORTREG, &CORE_PIN54_CONFIG, &CORE_PIN54_PADCONFIG, CORE_PIN54_BITMASK},
#endif
};

void digitalWrite(uint8_t pin, uint8_t val)
    8f84:	b410      	push	{r4}
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
	mask = p->mask;
    8f86:	68d0      	ldr	r0, [r2, #12]
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	pinmode = *(p->reg + 1);
    8f88:	685c      	ldr	r4, [r3, #4]
	mask = p->mask;
	if (pinmode & mask) {
    8f8a:	4204      	tst	r4, r0
    8f8c:	d005      	beq.n	8f9a <digitalWrite.part.0+0x1e>
		// pin is configured for output mode
		if (val) {
    8f8e:	b159      	cbz	r1, 8fa8 <digitalWrite.part.0+0x2c>
			*(p->reg + 0x21) = mask; // set register
    8f90:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8f94:	f85d 4b04 	ldr.w	r4, [sp], #4
    8f98:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8f9a:	6893      	ldr	r3, [r2, #8]
			*(p->reg + 0x22) = mask; // clear register
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
    8f9c:	b949      	cbnz	r1, 8fb2 <digitalWrite.part.0+0x36>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8f9e:	4a08      	ldr	r2, [pc, #32]	; (8fc0 <digitalWrite.part.0+0x44>)
		}
	}
}
    8fa0:	f85d 4b04 	ldr.w	r4, [sp], #4
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    8fa4:	601a      	str	r2, [r3, #0]
		}
	}
}
    8fa6:	4770      	bx	lr
	if (pinmode & mask) {
		// pin is configured for output mode
		if (val) {
			*(p->reg + 0x21) = mask; // set register
		} else {
			*(p->reg + 0x22) = mask; // clear register
    8fa8:	f8c3 0088 	str.w	r0, [r3, #136]	; 0x88
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8fac:	f85d 4b04 	ldr.w	r4, [sp], #4
    8fb0:	4770      	bx	lr
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8fb2:	4a04      	ldr	r2, [pc, #16]	; (8fc4 <digitalWrite.part.0+0x48>)
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8fb4:	f85d 4b04 	ldr.w	r4, [sp], #4
		}
	} else {
		// pin is configured for input mode
		// value controls PULLUP/PULLDOWN resistors
		if (val) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    8fb8:	601a      	str	r2, [r3, #0]
		} else {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		}
	}
}
    8fba:	4770      	bx	lr
    8fbc:	20000aa0 	.word	0x20000aa0
    8fc0:	00013038 	.word	0x00013038
    8fc4:	0001f038 	.word	0x0001f038

00008fc8 <digitalRead.part.1>:
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    8fc8:	0100      	lsls	r0, r0, #4
    8fca:	4b05      	ldr	r3, [pc, #20]	; (8fe0 <digitalRead.part.1+0x18>)
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    8fcc:	581a      	ldr	r2, [r3, r0]
uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
	p = digital_pin_to_info_PGM + pin;
    8fce:	1819      	adds	r1, r3, r0
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
    8fd0:	6892      	ldr	r2, [r2, #8]
    8fd2:	68cb      	ldr	r3, [r1, #12]
    8fd4:	421a      	tst	r2, r3
}
    8fd6:	bf14      	ite	ne
    8fd8:	2001      	movne	r0, #1
    8fda:	2000      	moveq	r0, #0
    8fdc:	4770      	bx	lr
    8fde:	bf00      	nop
    8fe0:	20000aa0 	.word	0x20000aa0

00008fe4 <digitalWrite>:
void digitalWrite(uint8_t pin, uint8_t val)
{
	const struct digital_pin_bitband_and_config_table_struct *p;
	uint32_t pinmode, mask;

	if (pin >= CORE_NUM_DIGITAL) return;
    8fe4:	2827      	cmp	r0, #39	; 0x27
    8fe6:	d801      	bhi.n	8fec <digitalWrite+0x8>
    8fe8:	f7ff bfc8 	b.w	8f7c <digitalWrite.part.0>
    8fec:	4770      	bx	lr
    8fee:	bf00      	nop

00008ff0 <digitalRead>:

uint8_t digitalRead(uint8_t pin)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return 0;
    8ff0:	2827      	cmp	r0, #39	; 0x27
    8ff2:	d801      	bhi.n	8ff8 <digitalRead+0x8>
    8ff4:	f7ff bfe8 	b.w	8fc8 <digitalRead.part.1>
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}
    8ff8:	2000      	movs	r0, #0
    8ffa:	4770      	bx	lr

00008ffc <pinMode>:

void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
    8ffc:	2827      	cmp	r0, #39	; 0x27
    8ffe:	d81c      	bhi.n	903a <pinMode+0x3e>
	p = digital_pin_to_info_PGM + pin;
    9000:	0100      	lsls	r0, r0, #4
    9002:	4a1a      	ldr	r2, [pc, #104]	; (906c <pinMode+0x70>)
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    9004:	2901      	cmp	r1, #1
void pinMode(uint8_t pin, uint8_t mode)
{
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
    9006:	eb02 0300 	add.w	r3, r2, r0
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    900a:	5810      	ldr	r0, [r2, r0]
	p = digital_pin_to_info_PGM + pin;
	return (*(p->reg + 2) & p->mask) ? 1 : 0;
}

void pinMode(uint8_t pin, uint8_t mode)
{
    900c:	b410      	push	{r4}
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
    900e:	d015      	beq.n	903c <pinMode+0x40>
    9010:	2904      	cmp	r1, #4
    9012:	d013      	beq.n	903c <pinMode+0x40>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
    9014:	68dc      	ldr	r4, [r3, #12]
    9016:	6842      	ldr	r2, [r0, #4]
    9018:	ea22 0204 	bic.w	r2, r2, r4
    901c:	6042      	str	r2, [r0, #4]
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    901e:	689a      	ldr	r2, [r3, #8]
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
    9020:	b1e9      	cbz	r1, 905e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
    9022:	2902      	cmp	r1, #2
    9024:	d01e      	beq.n	9064 <pinMode+0x68>
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
    9026:	2903      	cmp	r1, #3
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9028:	685b      	ldr	r3, [r3, #4]
}
    902a:	f85d 4b04 	ldr.w	r4, [sp], #4
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
		} else if (mode == INPUT_PULLDOWN) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
    902e:	bf0c      	ite	eq
    9030:	490f      	ldreq	r1, [pc, #60]	; (9070 <pinMode+0x74>)
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
    9032:	4910      	ldrne	r1, [pc, #64]	; (9074 <pinMode+0x78>)
    9034:	6011      	str	r1, [r2, #0]
		}
	}
	*(p->mux) = 5 | 0x10;
    9036:	2215      	movs	r2, #21
    9038:	601a      	str	r2, [r3, #0]
}
    903a:	4770      	bx	lr
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    903c:	68da      	ldr	r2, [r3, #12]
		if (mode == OUTPUT) {
    903e:	2901      	cmp	r1, #1
	const struct digital_pin_bitband_and_config_table_struct *p;

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
    9040:	6844      	ldr	r4, [r0, #4]
    9042:	ea42 0204 	orr.w	r2, r2, r4
    9046:	6042      	str	r2, [r0, #4]
		if (mode == OUTPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    9048:	689a      	ldr	r2, [r3, #8]

	if (pin >= CORE_NUM_DIGITAL) return;
	p = digital_pin_to_info_PGM + pin;
	if (mode == OUTPUT || mode == OUTPUT_OPENDRAIN) {
		*(p->reg + 1) |= p->mask; // TODO: atomic
		if (mode == OUTPUT) {
    904a:	d008      	beq.n	905e <pinMode+0x62>
			*(p->pad) = IOMUXC_PAD_DSE(7);
		} else { // OUTPUT_OPENDRAIN
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
    904c:	f640 0138 	movw	r1, #2104	; 0x838
    9050:	6011      	str	r1, [r2, #0]
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    9052:	685b      	ldr	r3, [r3, #4]
    9054:	2215      	movs	r2, #21
}
    9056:	f85d 4b04 	ldr.w	r4, [sp], #4
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(0) | IOMUXC_PAD_HYS;
		} else { // INPUT_DISABLE
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_HYS;
		}
	}
	*(p->mux) = 5 | 0x10;
    905a:	601a      	str	r2, [r3, #0]
}
    905c:	4770      	bx	lr
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_ODE;
		}
	} else {
		*(p->reg + 1) &= ~(p->mask); // TODO: atomic
		if (mode == INPUT) {
			*(p->pad) = IOMUXC_PAD_DSE(7);
    905e:	2138      	movs	r1, #56	; 0x38
    9060:	6011      	str	r1, [r2, #0]
    9062:	e7f6      	b.n	9052 <pinMode+0x56>
		} else if (mode == INPUT_PULLUP) {
			*(p->pad) = IOMUXC_PAD_DSE(7) | IOMUXC_PAD_PKE | IOMUXC_PAD_PUE | IOMUXC_PAD_PUS(3) | IOMUXC_PAD_HYS;
    9064:	4904      	ldr	r1, [pc, #16]	; (9078 <pinMode+0x7c>)
    9066:	6011      	str	r1, [r2, #0]
    9068:	e7f3      	b.n	9052 <pinMode+0x56>
    906a:	bf00      	nop
    906c:	20000aa0 	.word	0x20000aa0
    9070:	00013038 	.word	0x00013038
    9074:	00010038 	.word	0x00010038
    9078:	0001f038 	.word	0x0001f038

0000907c <rtc_get>:
#include "debug/printf.h"


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
    907c:	4b0a      	ldr	r3, [pc, #40]	; (90a8 <rtc_get+0x2c>)
#include "imxrt.h"
#include "debug/printf.h"


unsigned long rtc_get(void)
{
    907e:	b430      	push	{r4, r5}
	uint32_t hi1 = SNVS_HPRTCMR;
    9080:	6a58      	ldr	r0, [r3, #36]	; 0x24
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    9082:	461c      	mov	r4, r3


unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
    9084:	6a99      	ldr	r1, [r3, #40]	; 0x28
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    9086:	6a62      	ldr	r2, [r4, #36]	; 0x24
		uint32_t lo2 = SNVS_HPRTCLR;
    9088:	6aa3      	ldr	r3, [r4, #40]	; 0x28
		if (lo1 == lo2 && hi1 == hi2) {
    908a:	4299      	cmp	r1, r3
    908c:	bf08      	it	eq
    908e:	4290      	cmpeq	r0, r2
unsigned long rtc_get(void)
{
	uint32_t hi1 = SNVS_HPRTCMR;
	uint32_t lo1 = SNVS_HPRTCLR;
	while (1) {
		uint32_t hi2 = SNVS_HPRTCMR;
    9090:	4610      	mov	r0, r2
		uint32_t lo2 = SNVS_HPRTCLR;
    9092:	4619      	mov	r1, r3
		if (lo1 == lo2 && hi1 == hi2) {
    9094:	bf0c      	ite	eq
    9096:	2501      	moveq	r5, #1
    9098:	2500      	movne	r5, #0
    909a:	2d00      	cmp	r5, #0
    909c:	d0f3      	beq.n	9086 <rtc_get+0xa>
			return (hi2 << 17) | (lo2 >> 15);
    909e:	0bd9      	lsrs	r1, r3, #15
		}
		hi1 = hi2;
		lo1 = lo2;
	}
}
    90a0:	bc30      	pop	{r4, r5}
    90a2:	ea41 4042 	orr.w	r0, r1, r2, lsl #17
    90a6:	4770      	bx	lr
    90a8:	400d4000 	.word	0x400d4000

000090ac <unused_interrupt_vector>:
//  R0
// Code from :: https://community.nxp.com/thread/389002
__attribute__((naked))
void unused_interrupt_vector(void)
{
  __asm( ".syntax unified\n"
    90ac:	2004      	movs	r0, #4
    90ae:	4671      	mov	r1, lr
    90b0:	4208      	tst	r0, r1
    90b2:	d003      	beq.n	90bc <_MSP>
    90b4:	f3ef 8009 	mrs	r0, PSP
    90b8:	f000 b808 	b.w	90cc <HardFault_HandlerC>

000090bc <_MSP>:
    90bc:	f3ef 8008 	mrs	r0, MSP
    90c0:	f000 b804 	b.w	90cc <HardFault_HandlerC>

000090c4 <startup_default_early_hook>:
         "B HardFault_HandlerC \n"
         "_MSP: \n"
         "MRS R0, MSP \n"
         "B HardFault_HandlerC \n"
         ".syntax divided\n") ;
}
    90c4:	4770      	bx	lr
    90c6:	bf00      	nop

000090c8 <startup_default_late_hook>:
#endif

extern int main (void);
void startup_default_early_hook(void) {}
void startup_early_hook(void)		__attribute__ ((weak, alias("startup_default_early_hook")));
void startup_default_late_hook(void) {}
    90c8:	4770      	bx	lr
    90ca:	bf00      	nop

000090cc <HardFault_HandlerC>:
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    90cc:	4b1b      	ldr	r3, [pc, #108]	; (913c <HardFault_HandlerC+0x70>)
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    90ce:	2105      	movs	r1, #5
    90d0:	4a1b      	ldr	r2, [pc, #108]	; (9140 <HardFault_HandlerC+0x74>)
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    90d2:	2038      	movs	r0, #56	; 0x38
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    90d4:	b530      	push	{r4, r5, lr}
  printf(" _AFSR ::  %x\n", _AFSR);
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
    90d6:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
  GPIO2_DR_SET = (1 << 3);
    90da:	2108      	movs	r1, #8
  printf(" _BFAR ::  %x\n", _BFAR);
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
    90dc:	f8c2 0338 	str.w	r0, [r2, #824]	; 0x338
         ".syntax divided\n") ;
}

__attribute__((weak))
void HardFault_HandlerC(unsigned int *hardfault_args)
{
    90e0:	b083      	sub	sp, #12
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    90e2:	685a      	ldr	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    90e4:	4c17      	ldr	r4, [pc, #92]	; (9144 <HardFault_HandlerC+0x78>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    90e6:	430a      	orrs	r2, r1
  GPIO2_DR_SET = (1 << 3);
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);

  if ( F_CPU_ACTUAL >= 600000000 )
    90e8:	4817      	ldr	r0, [pc, #92]	; (9148 <HardFault_HandlerC+0x7c>)
  printf(" _MMAR ::  %x\n", _MMAR);
#endif

  IOMUXC_SW_MUX_CTL_PAD_GPIO_B0_03 = 5; // pin 13
  IOMUXC_SW_PAD_CTL_PAD_GPIO_B0_03 = IOMUXC_PAD_DSE(7);
  GPIO2_GDIR |= (1 << 3);
    90ea:	605a      	str	r2, [r3, #4]
  GPIO2_DR_SET = (1 << 3);
    90ec:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
  GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    90f0:	f8c3 1088 	str.w	r1, [r3, #136]	; 0x88

  if ( F_CPU_ACTUAL >= 600000000 )
    90f4:	6823      	ldr	r3, [r4, #0]
    90f6:	4283      	cmp	r3, r0
    90f8:	d902      	bls.n	9100 <HardFault_HandlerC+0x34>
    set_arm_clock(300000000);
    90fa:	4814      	ldr	r0, [pc, #80]	; (914c <HardFault_HandlerC+0x80>)
    90fc:	f7ff fd44 	bl	8b88 <set_arm_clock>

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    9100:	4d0e      	ldr	r5, [pc, #56]	; (913c <HardFault_HandlerC+0x70>)
    9102:	2408      	movs	r4, #8
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    9104:	2000      	movs	r0, #0
    9106:	4a12      	ldr	r2, [pc, #72]	; (9150 <HardFault_HandlerC+0x84>)
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    9108:	4912      	ldr	r1, [pc, #72]	; (9154 <HardFault_HandlerC+0x88>)
  if ( F_CPU_ACTUAL >= 600000000 )
    set_arm_clock(300000000);

  while (1)
  {
    GPIO2_DR_SET = (1 << 3); //digitalWrite(13, HIGH);
    910a:	f8c5 4084 	str.w	r4, [r5, #132]	; 0x84
    // digitalWrite(13, HIGH);
    for (nn = 0; nn < 2000000/2; nn++) ;
    910e:	9001      	str	r0, [sp, #4]
    9110:	9b01      	ldr	r3, [sp, #4]
    9112:	4293      	cmp	r3, r2
    9114:	d805      	bhi.n	9122 <HardFault_HandlerC+0x56>
    9116:	9b01      	ldr	r3, [sp, #4]
    9118:	3301      	adds	r3, #1
    911a:	9301      	str	r3, [sp, #4]
    911c:	9b01      	ldr	r3, [sp, #4]
    911e:	4293      	cmp	r3, r2
    9120:	d9f9      	bls.n	9116 <HardFault_HandlerC+0x4a>
    GPIO2_DR_CLEAR = (1 << 3); //digitalWrite(13, LOW);
    9122:	f8c5 4088 	str.w	r4, [r5, #136]	; 0x88
    // digitalWrite(13, LOW);
    for (nn = 0; nn < 18000000/2; nn++) ;
    9126:	9001      	str	r0, [sp, #4]
    9128:	9b01      	ldr	r3, [sp, #4]
    912a:	428b      	cmp	r3, r1
    912c:	d8ed      	bhi.n	910a <HardFault_HandlerC+0x3e>
    912e:	9b01      	ldr	r3, [sp, #4]
    9130:	3301      	adds	r3, #1
    9132:	9301      	str	r3, [sp, #4]
    9134:	9b01      	ldr	r3, [sp, #4]
    9136:	428b      	cmp	r3, r1
    9138:	d9f9      	bls.n	912e <HardFault_HandlerC+0x62>
    913a:	e7e6      	b.n	910a <HardFault_HandlerC+0x3e>
    913c:	401bc000 	.word	0x401bc000
    9140:	401f8000 	.word	0x401f8000
    9144:	2000112c 	.word	0x2000112c
    9148:	23c345ff 	.word	0x23c345ff
    914c:	11e1a300 	.word	0x11e1a300
    9150:	000f423f 	.word	0x000f423f
    9154:	0089543f 	.word	0x0089543f

00009158 <_sbrk>:

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
        char *prev = __brkval;
    9158:	4a09      	ldr	r2, [pc, #36]	; (9180 <_sbrk+0x28>)
extern unsigned long _heap_end;

char *__brkval = (char *)&_heap_start;

void * _sbrk(int incr)
{
    915a:	b508      	push	{r3, lr}
        char *prev = __brkval;
    915c:	6813      	ldr	r3, [r2, #0]
        if (incr != 0) {
    915e:	b120      	cbz	r0, 916a <_sbrk+0x12>
                if (prev + incr > (char *)&_heap_end) {
    9160:	4418      	add	r0, r3
    9162:	4908      	ldr	r1, [pc, #32]	; (9184 <_sbrk+0x2c>)
    9164:	4288      	cmp	r0, r1
    9166:	d802      	bhi.n	916e <_sbrk+0x16>
                        errno = ENOMEM;
                        return (void *)-1;
                }
                __brkval = prev + incr;
    9168:	6010      	str	r0, [r2, #0]
        }
        return prev;
}
    916a:	4618      	mov	r0, r3
    916c:	bd08      	pop	{r3, pc}
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    916e:	f001 fd67 	bl	ac40 <__errno>
    9172:	220c      	movs	r2, #12
                        return (void *)-1;
    9174:	f04f 33ff 	mov.w	r3, #4294967295
void * _sbrk(int incr)
{
        char *prev = __brkval;
        if (incr != 0) {
                if (prev + incr > (char *)&_heap_end) {
                        errno = ENOMEM;
    9178:	6002      	str	r2, [r0, #0]
                        return (void *)-1;
                }
                __brkval = prev + incr;
        }
        return prev;
}
    917a:	4618      	mov	r0, r3
    917c:	bd08      	pop	{r3, pc}
    917e:	bf00      	nop
    9180:	20001130 	.word	0x20001130
    9184:	20280000 	.word	0x20280000

00009188 <Panic_Temp_isr>:

static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
    9188:	b672      	cpsid	i
  IOMUXC_GPR_GPR16 = 0x00000007;
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    918a:	4a06      	ldr	r2, [pc, #24]	; (91a4 <Panic_Temp_isr+0x1c>)
static uint32_t s_hotTemp, s_hotCount, s_roomC_hotC;
static float s_hot_ROOM;

void Panic_Temp_isr(void) {
  __disable_irq();
  IOMUXC_GPR_GPR16 = 0x00000007;
    918c:	2107      	movs	r1, #7
    918e:	4b06      	ldr	r3, [pc, #24]	; (91a8 <Panic_Temp_isr+0x20>)
    9190:	6419      	str	r1, [r3, #64]	; 0x40
  SNVS_LPCR |= SNVS_LPCR_TOP; //Switch off now
    9192:	6b93      	ldr	r3, [r2, #56]	; 0x38
    9194:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    9198:	6393      	str	r3, [r2, #56]	; 0x38
  asm volatile ("dsb":::"memory");
    919a:	f3bf 8f4f 	dsb	sy
  while (1) asm ("wfi");
    919e:	bf30      	wfi
    91a0:	e7fd      	b.n	919e <Panic_Temp_isr+0x16>
    91a2:	bf00      	nop
    91a4:	400d4000 	.word	0x400d4000
    91a8:	400ac000 	.word	0x400ac000

000091ac <schedule_transfer>:
{
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    91ac:	6b83      	ldr	r3, [r0, #56]	; 0x38
	}
}
#endif

static void schedule_transfer(endpoint_t *endpoint, uint32_t epmask, transfer_t *transfer)
{
    91ae:	b4f0      	push	{r4, r5, r6, r7}
	// when we stop at 6, why is the last transfer missing from the USB output?
	//if (transfer_log_count >= 6) return;

	//uint32_t ret = (*(const uint8_t *)transfer->pointer0) << 8;
	if (endpoint->callback_function) {
    91b0:	b11b      	cbz	r3, 91ba <schedule_transfer+0xe>
		transfer->status |= (1<<15);
    91b2:	6853      	ldr	r3, [r2, #4]
    91b4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
    91b8:	6053      	str	r3, [r2, #4]
	}
	__disable_irq();
    91ba:	b672      	cpsid	i
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
    91bc:	6b44      	ldr	r4, [r0, #52]	; 0x34
	if (last) {
    91be:	b1dc      	cbz	r4, 91f8 <schedule_transfer+0x4c>
		last->next = (uint32_t)transfer;
		if (USB1_ENDPTPRIME & epmask) goto end;
    91c0:	4b14      	ldr	r3, [pc, #80]	; (9214 <schedule_transfer+0x68>)
	__disable_irq();
	//digitalWriteFast(1, HIGH);
	// Executing A Transfer Descriptor, page 2468 (RT1060 manual, Rev 1, 12/2018)
	transfer_t *last = endpoint->last_transfer;
	if (last) {
		last->next = (uint32_t)transfer;
    91c2:	6022      	str	r2, [r4, #0]
		if (USB1_ENDPTPRIME & epmask) goto end;
    91c4:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
    91c8:	420c      	tst	r4, r1
    91ca:	d11f      	bne.n	920c <schedule_transfer+0x60>
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
    91cc:	4d12      	ldr	r5, [pc, #72]	; (9218 <schedule_transfer+0x6c>)
    91ce:	682f      	ldr	r7, [r5, #0]
    91d0:	e004      	b.n	91dc <schedule_transfer+0x30>
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
			status = USB1_ENDPTSTATUS;
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    91d2:	682c      	ldr	r4, [r5, #0]
    91d4:	1be4      	subs	r4, r4, r7
    91d6:	f5b4 6f16 	cmp.w	r4, #2400	; 0x960
    91da:	d20b      	bcs.n	91f4 <schedule_transfer+0x48>
		if (USB1_ENDPTPRIME & epmask) goto end;
		//digitalWriteFast(2, HIGH);
		//ret |= 0x01;
		uint32_t status, cyccnt=ARM_DWT_CYCCNT;
		do {
			USB1_USBCMD |= USB_USBCMD_ATDTW;
    91dc:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    91e0:	f444 4480 	orr.w	r4, r4, #16384	; 0x4000
    91e4:	f8c3 4140 	str.w	r4, [r3, #320]	; 0x140
			status = USB1_ENDPTSTATUS;
    91e8:	f8d3 61b8 	ldr.w	r6, [r3, #440]	; 0x1b8
		} while (!(USB1_USBCMD & USB_USBCMD_ATDTW) && (ARM_DWT_CYCCNT - cyccnt < 2400));
    91ec:	f8d3 4140 	ldr.w	r4, [r3, #320]	; 0x140
    91f0:	0464      	lsls	r4, r4, #17
    91f2:	d5ee      	bpl.n	91d2 <schedule_transfer+0x26>
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
    91f4:	4231      	tst	r1, r6
    91f6:	d109      	bne.n	920c <schedule_transfer+0x60>
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
	endpoint->status = 0;
    91f8:	2300      	movs	r3, #0
	USB1_ENDPTPRIME |= epmask;
    91fa:	4c06      	ldr	r4, [pc, #24]	; (9214 <schedule_transfer+0x68>)
		//USB1_USBCMD &= ~USB_USBCMD_ATDTW;
		if (status & epmask) goto end;
		//ret |= 0x02;
	}
	//digitalWriteFast(4, HIGH);
	endpoint->next = (uint32_t)transfer;
    91fc:	6082      	str	r2, [r0, #8]
	endpoint->status = 0;
    91fe:	60c3      	str	r3, [r0, #12]
	USB1_ENDPTPRIME |= epmask;
    9200:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9204:	4319      	orrs	r1, r3
    9206:	f8c4 11b0 	str.w	r1, [r4, #432]	; 0x1b0
	endpoint->first_transfer = transfer;
    920a:	6302      	str	r2, [r0, #48]	; 0x30
end:
	endpoint->last_transfer = transfer;
    920c:	6342      	str	r2, [r0, #52]	; 0x34
	__enable_irq();
    920e:	b662      	cpsie	i
	//digitalWriteFast(2, LOW);
	//digitalWriteFast(1, LOW);
	//if (transfer_log_head > LOG_SIZE) transfer_log_head = 0;
	//transfer_log[transfer_log_head++] = ret;
	//transfer_log_count++;
}
    9210:	bcf0      	pop	{r4, r5, r6, r7}
    9212:	4770      	bx	lr
    9214:	402e0000 	.word	0x402e0000
    9218:	e0001004 	.word	0xe0001004

0000921c <run_callbacks>:
	void (*callback_function)(transfer_t *completed_transfer);
	uint32_t unused1;
};*/

static void run_callbacks(endpoint_t *ep)
{
    921c:	b570      	push	{r4, r5, r6, lr}
    921e:	4606      	mov	r6, r0
	//printf("run_callbacks\n");
	transfer_t *first = ep->first_transfer;
    9220:	6b00      	ldr	r0, [r0, #48]	; 0x30
	if (first == NULL) return;
    9222:	b190      	cbz	r0, 924a <run_callbacks+0x2e>
    9224:	4602      	mov	r2, r0
    9226:	2400      	movs	r4, #0
    9228:	e003      	b.n	9232 <run_callbacks+0x16>
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
		t = (transfer_t *)t->next;
    922a:	6812      	ldr	r2, [r2, #0]
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
			break;
		}
		count++;
    922c:	3401      	adds	r4, #1
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
    922e:	2a01      	cmp	r2, #1
    9230:	d00c      	beq.n	924c <run_callbacks+0x30>

	// count how many transfers are completed, then remove them from the endpoint's list
	uint32_t count = 0;
	transfer_t *t = first;
	while (1) {
		if (t->status & (1<<7)) {
    9232:	6853      	ldr	r3, [r2, #4]
    9234:	f013 0380 	ands.w	r3, r3, #128	; 0x80
    9238:	d0f7      	beq.n	922a <run_callbacks+0xe>
			// found a still-active transfer, new list begins here
			//printf(" still active\n");
			ep->first_transfer = t;
    923a:	6332      	str	r2, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    923c:	b12c      	cbz	r4, 924a <run_callbacks+0x2e>
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
    923e:	6bb3      	ldr	r3, [r6, #56]	; 0x38
			break;
		}
	}
	// do all the callbacks
	while (count) {
		transfer_t *next = (transfer_t *)first->next;
    9240:	6805      	ldr	r5, [r0, #0]
		ep->callback_function(first);
    9242:	4798      	blx	r3
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    9244:	3c01      	subs	r4, #1
		transfer_t *next = (transfer_t *)first->next;
		ep->callback_function(first);
		first = next;
    9246:	4628      	mov	r0, r5
			ep->last_transfer = NULL;
			break;
		}
	}
	// do all the callbacks
	while (count) {
    9248:	d1f9      	bne.n	923e <run_callbacks+0x22>
    924a:	bd70      	pop	{r4, r5, r6, pc}
		count++;
		t = (transfer_t *)t->next;
		if ((uint32_t)t == 1) {
			// reached end of list, all need callbacks, new list is empty
			//printf(" end of list\n");
			ep->first_transfer = NULL;
    924c:	6333      	str	r3, [r6, #48]	; 0x30
			ep->last_transfer = NULL;
    924e:	6373      	str	r3, [r6, #52]	; 0x34
			break;
    9250:	e7f4      	b.n	923c <run_callbacks+0x20>
    9252:	bf00      	nop

00009254 <endpoint0_transmit.constprop.1>:
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
}

static void endpoint0_transmit(const void *data, uint32_t len, int notify)
    9254:	b5f0      	push	{r4, r5, r6, r7, lr}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
    9256:	b9e1      	cbnz	r1, 9292 <endpoint0_transmit.constprop.1+0x3e>
    9258:	4c21      	ldr	r4, [pc, #132]	; (92e0 <endpoint0_transmit.constprop.1+0x8c>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    925a:	4922      	ldr	r1, [pc, #136]	; (92e4 <endpoint0_transmit.constprop.1+0x90>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    925c:	2000      	movs	r0, #0
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    925e:	4b22      	ldr	r3, [pc, #136]	; (92e8 <endpoint0_transmit.constprop.1+0x94>)
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9260:	2201      	movs	r2, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9262:	f04f 1501 	mov.w	r5, #65537	; 0x10001
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9266:	2680      	movs	r6, #128	; 0x80
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9268:	600a      	str	r2, [r1, #0]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
	while (USB1_ENDPTPRIME) ;
    926a:	461a      	mov	r2, r3
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
    926c:	60a1      	str	r1, [r4, #8]
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    926e:	604e      	str	r6, [r1, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
    9270:	60e0      	str	r0, [r4, #12]
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9272:	f8c3 51bc 	str.w	r5, [r3, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<0);
    9276:	f8d3 41b0 	ldr.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    927a:	4d1c      	ldr	r5, [pc, #112]	; (92ec <endpoint0_transmit.constprop.1+0x98>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    927c:	f044 0401 	orr.w	r4, r4, #1
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9280:	6088      	str	r0, [r1, #8]
	endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[0].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<0);
    9282:	f8c3 41b0 	str.w	r4, [r3, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 0) : 0);
    9286:	6028      	str	r0, [r5, #0]
	while (USB1_ENDPTPRIME) ;
    9288:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    928c:	2b00      	cmp	r3, #0
    928e:	d1fb      	bne.n	9288 <endpoint0_transmit.constprop.1+0x34>
}
    9290:	bdf0      	pop	{r4, r5, r6, r7, pc}
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    9292:	0409      	lsls	r1, r1, #16
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9294:	4b16      	ldr	r3, [pc, #88]	; (92f0 <endpoint0_transmit.constprop.1+0x9c>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    9296:	4d14      	ldr	r5, [pc, #80]	; (92e8 <endpoint0_transmit.constprop.1+0x94>)
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    9298:	2601      	movs	r6, #1
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    929a:	4c11      	ldr	r4, [pc, #68]	; (92e0 <endpoint0_transmit.constprop.1+0x8c>)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    929c:	f041 0180 	orr.w	r1, r1, #128	; 0x80
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    92a0:	2200      	movs	r2, #0
static void endpoint0_transmit(const void *data, uint32_t len, int notify)
{
	//printf("tx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    92a2:	601e      	str	r6, [r3, #0]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    92a4:	6059      	str	r1, [r3, #4]
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    92a6:	f500 5c80 	add.w	ip, r0, #4096	; 0x1000
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
    92aa:	64e2      	str	r2, [r4, #76]	; 0x4c
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    92ac:	f500 5e00 	add.w	lr, r0, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
    92b0:	64a3      	str	r3, [r4, #72]	; 0x48
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
    92b2:	f500 5740 	add.w	r7, r0, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    92b6:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
    92ba:	f500 4680 	add.w	r6, r0, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
		while (USB1_ENDPTPRIME) ;
    92be:	462a      	mov	r2, r5
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    92c0:	6098      	str	r0, [r3, #8]
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    92c2:	f441 3180 	orr.w	r1, r1, #65536	; 0x10000
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    92c6:	f8c3 c00c 	str.w	ip, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    92ca:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    92ce:	615f      	str	r7, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    92d0:	619e      	str	r6, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[1].status = 0;
		USB1_ENDPTPRIME |= (1<<16);
    92d2:	f8c5 11b0 	str.w	r1, [r5, #432]	; 0x1b0
		while (USB1_ENDPTPRIME) ;
    92d6:	f8d2 31b0 	ldr.w	r3, [r2, #432]	; 0x1b0
    92da:	2b00      	cmp	r3, #0
    92dc:	d1fb      	bne.n	92d6 <endpoint0_transmit.constprop.1+0x82>
    92de:	e7bc      	b.n	925a <endpoint0_transmit.constprop.1+0x6>
    92e0:	20038000 	.word	0x20038000
    92e4:	200382a0 	.word	0x200382a0
    92e8:	402e0000 	.word	0x402e0000
    92ec:	20036cc8 	.word	0x20036cc8
    92f0:	20038280 	.word	0x20038280

000092f4 <isr>:
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    92f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    92f8:	4cac      	ldr	r4, [pc, #688]	; (95ac <isr+0x2b8>)
	//USB1_PORTSC1 |= USB_PORTSC1_PFSC; // force 12 Mbit/sec
}


static void isr(void)
{
    92fa:	b083      	sub	sp, #12
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
    92fc:	f8d4 8144 	ldr.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    9300:	f018 0f01 	tst.w	r8, #1
	//printf("*");

	//  Port control in device mode is only used for
	//  status port reset, suspend, and current connect status.
	uint32_t status = USB1_USBSTS;
	USB1_USBSTS = status;
    9304:	f8c4 8144 	str.w	r8, [r4, #324]	; 0x144

	// USB_USBSTS_SLI - set to 1 when enters a suspend state from an active state
	// USB_USBSTS_SRI - set at start of frame
	// USB_USBSTS_SRI - set when USB reset detected

	if (status & USB_USBSTS_UI) {
    9308:	d05e      	beq.n	93c8 <isr+0xd4>
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
    930a:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    930e:	2b00      	cmp	r3, #0
    9310:	d055      	beq.n	93be <isr+0xca>
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9312:	f04f 1b01 	mov.w	fp, #65537	; 0x10001
    9316:	f8df 92bc 	ldr.w	r9, [pc, #700]	; 95d4 <isr+0x2e0>
    931a:	4ea5      	ldr	r6, [pc, #660]	; (95b0 <isr+0x2bc>)
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    931c:	4625      	mov	r5, r4
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    931e:	46da      	mov	sl, fp
	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
			USB1_ENDPTSETUPSTAT = setupstatus;
    9320:	f8c4 31ac 	str.w	r3, [r4, #428]	; 0x1ac
    9324:	6ab0      	ldr	r0, [r6, #40]	; 0x28
    9326:	6af2      	ldr	r2, [r6, #44]	; 0x2c
			setup_t s;
			do {
				USB1_USBCMD |= USB_USBCMD_SUTW;
    9328:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    932c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    9330:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
				s.word1 = endpoint_queue_head[0].setup0;
				s.word2 = endpoint_queue_head[0].setup1;
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
    9334:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
    9338:	049f      	lsls	r7, r3, #18
    933a:	d5f5      	bpl.n	9328 <isr+0x34>
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
    933c:	f8d5 3140 	ldr.w	r3, [r5, #320]	; 0x140
    9340:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    9344:	f8c5 3140 	str.w	r3, [r5, #320]	; 0x140
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
    9348:	f8c5 a1b4 	str.w	sl, [r5, #436]	; 0x1b4
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
    934c:	f8d4 31b4 	ldr.w	r3, [r4, #436]	; 0x1b4
    9350:	f013 1301 	ands.w	r3, r3, #65537	; 0x10001
    9354:	d1fa      	bne.n	934c <isr+0x58>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9356:	b281      	uxth	r1, r0
    9358:	f240 6781 	movw	r7, #1665	; 0x681
			} while (!(USB1_USBCMD & USB_USBCMD_SUTW));
			USB1_USBCMD &= ~USB_USBCMD_SUTW;
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
    935c:	f8c9 3000 	str.w	r3, [r9]
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    9360:	42b9      	cmp	r1, r7
    9362:	f200 80b4 	bhi.w	94ce <isr+0x1da>
    9366:	f5b1 6fd0 	cmp.w	r1, #1664	; 0x680
    936a:	f080 81e9 	bcs.w	9740 <isr+0x44c>
    936e:	f5b1 7f81 	cmp.w	r1, #258	; 0x102
    9372:	f000 816b 	beq.w	964c <isr+0x358>
    9376:	f200 80f0 	bhi.w	955a <isr+0x266>
    937a:	2980      	cmp	r1, #128	; 0x80
    937c:	f000 8159 	beq.w	9632 <isr+0x33e>
    9380:	2982      	cmp	r1, #130	; 0x82
    9382:	f040 80e2 	bne.w	954a <isr+0x256>
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
    9386:	b292      	uxth	r2, r2
    9388:	f002 017f 	and.w	r1, r2, #127	; 0x7f
		if (endpoint > 7) break;
    938c:	2907      	cmp	r1, #7
    938e:	f200 80dc 	bhi.w	954a <isr+0x256>
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9392:	0089      	lsls	r1, r1, #2
    9394:	4887      	ldr	r0, [pc, #540]	; (95b4 <isr+0x2c0>)
		reply_buffer[0] = 0;
    9396:	4f88      	ldr	r7, [pc, #544]	; (95b8 <isr+0x2c4>)
		return;
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
    9398:	4408      	add	r0, r1
    939a:	6801      	ldr	r1, [r0, #0]
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    939c:	0610      	lsls	r0, r2, #24
	  case 0x0082: // GET_STATUS (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
    939e:	703b      	strb	r3, [r7, #0]
		reply_buffer[1] = 0;
    93a0:	707b      	strb	r3, [r7, #1]
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    93a2:	f140 820c 	bpl.w	97be <isr+0x4ca>
    93a6:	03ca      	lsls	r2, r1, #15
    93a8:	d501      	bpl.n	93ae <isr+0xba>
			reply_buffer[0] = 1;
    93aa:	2301      	movs	r3, #1
    93ac:	703b      	strb	r3, [r7, #0]
		}
		endpoint0_transmit(reply_buffer, 2, 0);
    93ae:	2102      	movs	r1, #2
    93b0:	4881      	ldr	r0, [pc, #516]	; (95b8 <isr+0x2c4>)
    93b2:	f7ff ff4f 	bl	9254 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    93b6:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    93ba:	2b00      	cmp	r3, #0
    93bc:	d1b0      	bne.n	9320 <isr+0x2c>
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
    93be:	4a7b      	ldr	r2, [pc, #492]	; (95ac <isr+0x2b8>)
    93c0:	f8d2 31bc 	ldr.w	r3, [r2, #444]	; 0x1bc
		if (completestatus) {
    93c4:	2b00      	cmp	r3, #0
    93c6:	d150      	bne.n	946a <isr+0x176>
			}
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
    93c8:	f018 0f40 	tst.w	r8, #64	; 0x40
    93cc:	d018      	beq.n	9400 <isr+0x10c>
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    93ce:	4b77      	ldr	r3, [pc, #476]	; (95ac <isr+0x2b8>)
    93d0:	f8d3 11ac 	ldr.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    93d4:	461a      	mov	r2, r3
#endif

		}
	}
	if (status & USB_USBSTS_URI) { // page 3164
		USB1_ENDPTSETUPSTAT = USB1_ENDPTSETUPSTAT; // Clear all setup token semaphores
    93d6:	f8c3 11ac 	str.w	r1, [r3, #428]	; 0x1ac
		USB1_ENDPTCOMPLETE = USB1_ENDPTCOMPLETE; // Clear all the endpoint complete status
    93da:	f8d3 11bc 	ldr.w	r1, [r3, #444]	; 0x1bc
    93de:	f8c3 11bc 	str.w	r1, [r3, #444]	; 0x1bc
		while (USB1_ENDPTPRIME != 0) ; // Wait for any endpoint priming
    93e2:	f8d2 41b0 	ldr.w	r4, [r2, #432]	; 0x1b0
    93e6:	4b71      	ldr	r3, [pc, #452]	; (95ac <isr+0x2b8>)
    93e8:	2c00      	cmp	r4, #0
    93ea:	d1fa      	bne.n	93e2 <isr+0xee>
		USB1_ENDPTFLUSH = 0xFFFFFFFF;  // Cancel all endpoint primed status
    93ec:	f04f 32ff 	mov.w	r2, #4294967295
    93f0:	f8c3 21b4 	str.w	r2, [r3, #436]	; 0x1b4
		if ((USB1_PORTSC1 & USB_PORTSC1_PR)) {
    93f4:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
			// we took too long to respond :(
			// TODO; is this ever really a problem?
			//printf("reset too slow\n");
		}
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_reset();
    93f8:	f000 fd1e 	bl	9e38 <usb_serial_reset>
		#endif
		endpointN_notify_mask = 0;
    93fc:	4b6f      	ldr	r3, [pc, #444]	; (95bc <isr+0x2c8>)
    93fe:	601c      	str	r4, [r3, #0]
			// shut off USB - easier to see results in protocol analyzer
			//USB1_USBCMD &= ~USB_USBCMD_RS;
			//printf("shut off USB\n");
		//}
	}
	if (status & USB_USBSTS_TI0) {
    9400:	f018 7f80 	tst.w	r8, #16777216	; 0x1000000
    9404:	d003      	beq.n	940e <isr+0x11a>
		if (usb_timer0_callback != NULL) usb_timer0_callback();
    9406:	4b6e      	ldr	r3, [pc, #440]	; (95c0 <isr+0x2cc>)
    9408:	681b      	ldr	r3, [r3, #0]
    940a:	b103      	cbz	r3, 940e <isr+0x11a>
    940c:	4798      	blx	r3
	}
	if (status & USB_USBSTS_TI1) {
    940e:	f018 7f00 	tst.w	r8, #33554432	; 0x2000000
    9412:	d003      	beq.n	941c <isr+0x128>
		if (usb_timer1_callback != NULL) usb_timer1_callback();
    9414:	4b6b      	ldr	r3, [pc, #428]	; (95c4 <isr+0x2d0>)
    9416:	681b      	ldr	r3, [r3, #0]
    9418:	b103      	cbz	r3, 941c <isr+0x128>
    941a:	4798      	blx	r3
	}
	if (status & USB_USBSTS_PCI) {
    941c:	f018 0f04 	tst.w	r8, #4
    9420:	d008      	beq.n	9434 <isr+0x140>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
    9422:	4b62      	ldr	r3, [pc, #392]	; (95ac <isr+0x2b8>)
    9424:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
    9428:	f413 7300 	ands.w	r3, r3, #512	; 0x200
    942c:	d04c      	beq.n	94c8 <isr+0x1d4>
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
    942e:	4b66      	ldr	r3, [pc, #408]	; (95c8 <isr+0x2d4>)
    9430:	2201      	movs	r2, #1
    9432:	701a      	strb	r2, [r3, #0]
		//printf("suspend\n");
	}
	if (status & USB_USBSTS_UEI) {
		//printf("error\n");
	}
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
    9434:	4b5d      	ldr	r3, [pc, #372]	; (95ac <isr+0x2b8>)
    9436:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    943a:	0612      	lsls	r2, r2, #24
    943c:	d512      	bpl.n	9464 <isr+0x170>
    943e:	f018 0f80 	tst.w	r8, #128	; 0x80
    9442:	d00f      	beq.n	9464 <isr+0x170>
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
    9444:	4961      	ldr	r1, [pc, #388]	; (95cc <isr+0x2d8>)
    9446:	780a      	ldrb	r2, [r1, #0]
    9448:	b162      	cbz	r2, 9464 <isr+0x170>
			if (--usb_reboot_timer == 0) {
    944a:	3a01      	subs	r2, #1
    944c:	b2d2      	uxtb	r2, r2
    944e:	700a      	strb	r2, [r1, #0]
    9450:	b942      	cbnz	r2, 9464 <isr+0x170>
	__enable_irq();
}

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
    9452:	495f      	ldr	r1, [pc, #380]	; (95d0 <isr+0x2dc>)
    9454:	780a      	ldrb	r2, [r1, #0]
    9456:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
    945a:	700a      	strb	r2, [r1, #0]
	if (sof_usage == 0) {
    945c:	2a00      	cmp	r2, #0
    945e:	f000 8232 	beq.w	98c6 <isr+0x5d2>
	if ((USB1_USBINTR & USB_USBINTR_SRE) && (status & USB_USBSTS_SRI)) {
		//printf("sof %d\n", usb_reboot_timer);
		if (usb_reboot_timer) {
			if (--usb_reboot_timer == 0) {
				usb_stop_sof_interrupts(NUM_INTERFACE);
				asm("bkpt #251"); // run bootloader
    9462:	befb      	bkpt	0x00fb
		#endif
		#ifdef FLIGHTSIM_INTERFACE
		usb_flightsim_flush_output();
		#endif
	}
}
    9464:	b003      	add	sp, #12
    9466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    946a:	495a      	ldr	r1, [pc, #360]	; (95d4 <isr+0x2e0>)
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
		}
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
    946c:	f8c2 31bc 	str.w	r3, [r2, #444]	; 0x1bc
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
    9470:	6808      	ldr	r0, [r1, #0]
    9472:	4203      	tst	r3, r0
    9474:	f040 81e6 	bne.w	9844 <isr+0x550>
				endpoint0_notify_mask = 0;
				endpoint0_complete();
			}
			completestatus &= endpointN_notify_mask;
    9478:	4a50      	ldr	r2, [pc, #320]	; (95bc <isr+0x2c8>)
    947a:	6815      	ldr	r5, [r2, #0]
#if 1
			if (completestatus) {
    947c:	401d      	ands	r5, r3
    947e:	d0a3      	beq.n	93c8 <isr+0xd4>

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    9480:	0c2f      	lsrs	r7, r5, #16
    9482:	d00f      	beq.n	94a4 <isr+0x1b0>
    9484:	4e4a      	ldr	r6, [pc, #296]	; (95b0 <isr+0x2bc>)
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
    9486:	f04f 0901 	mov.w	r9, #1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
    948a:	fa97 f4a7 	rbit	r4, r7
    948e:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    9492:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					tx &= ~(1<<p);
    9496:	fa09 f404 	lsl.w	r4, r9, r4

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
					int p=__builtin_ctz(tx);
					run_callbacks(endpoint_queue_head + p * 2 + 1);
    949a:	3040      	adds	r0, #64	; 0x40
    949c:	f7ff febe 	bl	921c <run_callbacks>
#if 1
			if (completestatus) {

				// transmit:
				uint32_t tx = completestatus >> 16;
				while (tx) {
    94a0:	43a7      	bics	r7, r4
    94a2:	d1f2      	bne.n	948a <isr+0x196>
					run_callbacks(endpoint_queue_head + p * 2 + 1);
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
    94a4:	b2ad      	uxth	r5, r5
				while(rx) {
    94a6:	2d00      	cmp	r5, #0
    94a8:	d08e      	beq.n	93c8 <isr+0xd4>
    94aa:	4e41      	ldr	r6, [pc, #260]	; (95b0 <isr+0x2bc>)
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
					rx &= ~(1<<p);
    94ac:	2701      	movs	r7, #1
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
    94ae:	fa95 f4a5 	rbit	r4, r5
    94b2:	fab4 f484 	clz	r4, r4
					run_callbacks(endpoint_queue_head + p * 2);
    94b6:	eb06 10c4 	add.w	r0, r6, r4, lsl #7
					rx &= ~(1<<p);
    94ba:	fa07 f404 	lsl.w	r4, r7, r4

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
					int p=__builtin_ctz(rx);
					run_callbacks(endpoint_queue_head + p * 2);
    94be:	f7ff fead 	bl	921c <run_callbacks>
					tx &= ~(1<<p);
				}

				// receive:
				uint32_t rx = completestatus & 0xffff;
				while(rx) {
    94c2:	43a5      	bics	r5, r4
    94c4:	d1f3      	bne.n	94ae <isr+0x1ba>
    94c6:	e77f      	b.n	93c8 <isr+0xd4>
		if (USB1_PORTSC1 & USB_PORTSC1_HSP) {
			//printf("port at 480 Mbit\n");
			usb_high_speed = 1;
		} else {
			//printf("port at 12 Mbit\n");
			usb_high_speed = 0;
    94c8:	4a3f      	ldr	r2, [pc, #252]	; (95c8 <isr+0x2d4>)
    94ca:	7013      	strb	r3, [r2, #0]
    94cc:	e7b2      	b.n	9434 <isr+0x140>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    94ce:	f242 0721 	movw	r7, #8225	; 0x2021
    94d2:	42b9      	cmp	r1, r7
    94d4:	d035      	beq.n	9542 <isr+0x24e>
    94d6:	f200 8089 	bhi.w	95ec <isr+0x2f8>
    94da:	f5b1 6f08 	cmp.w	r1, #2176	; 0x880
    94de:	f000 8121 	beq.w	9724 <isr+0x430>
    94e2:	f5b1 6f10 	cmp.w	r1, #2304	; 0x900
    94e6:	d130      	bne.n	954a <isr+0x256>
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    94e8:	f3c0 4007 	ubfx	r0, r0, #16, #8
    94ec:	4a3a      	ldr	r2, [pc, #232]	; (95d8 <isr+0x2e4>)
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    94ee:	493b      	ldr	r1, [pc, #236]	; (95dc <isr+0x2e8>)
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
    94f0:	7010      	strb	r0, [r2, #0]
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    94f2:	4f3b      	ldr	r7, [pc, #236]	; (95e0 <isr+0x2ec>)
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    94f4:	4a3b      	ldr	r2, [pc, #236]	; (95e4 <isr+0x2f0>)
    94f6:	9301      	str	r3, [sp, #4]
		return;
	  case 0x0900: // SET_CONFIGURATION
		usb_configuration = setup.wValue;
		// configure all other endpoints
		#if defined(ENDPOINT2_CONFIG)
		USB1_ENDPTCTRL2 = ENDPOINT2_CONFIG;
    94f8:	f8c5 71c8 	str.w	r7, [r5, #456]	; 0x1c8
		#endif
		#if defined(ENDPOINT3_CONFIG)
		USB1_ENDPTCTRL3 = ENDPOINT3_CONFIG;
    94fc:	f8c5 11cc 	str.w	r1, [r5, #460]	; 0x1cc
		#endif
		#if defined(ENDPOINT4_CONFIG)
		USB1_ENDPTCTRL4 = ENDPOINT4_CONFIG;
    9500:	f8c5 21d0 	str.w	r2, [r5, #464]	; 0x1d0
		#endif
		#if defined(ENDPOINT7_CONFIG)
		USB1_ENDPTCTRL7 = ENDPOINT7_CONFIG;
		#endif
		#if defined(CDC_STATUS_INTERFACE) && defined(CDC_DATA_INTERFACE)
		usb_serial_configure();
    9504:	f000 fc9a 	bl	9e3c <usb_serial_configure>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9508:	4a37      	ldr	r2, [pc, #220]	; (95e8 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    950a:	9b01      	ldr	r3, [sp, #4]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    950c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    950e:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9510:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9512:	6051      	str	r1, [r2, #4]
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9514:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9516:	64f3      	str	r3, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9518:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    951c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9520:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9522:	f441 3280 	orr.w	r2, r1, #65536	; 0x10000
    9526:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    952a:	4a2a      	ldr	r2, [pc, #168]	; (95d4 <isr+0x2e0>)
    952c:	6013      	str	r3, [r2, #0]
	while (USB1_ENDPTPRIME) ;
    952e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9532:	2b00      	cmp	r3, #0
    9534:	d1fb      	bne.n	952e <isr+0x23a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9536:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    953a:	2b00      	cmp	r3, #0
    953c:	f47f aef0 	bne.w	9320 <isr+0x2c>
    9540:	e73d      	b.n	93be <isr+0xca>
		// fall through to next case, to always send ZLP ACK
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
    9542:	0c11      	lsrs	r1, r2, #16
    9544:	2907      	cmp	r1, #7
    9546:	f000 813e 	beq.w	97c6 <isr+0x4d2>
			return;
		}
		break;
#endif
	}
	USB1_ENDPTCTRL0 = 0x000010001; // stall
    954a:	f8c4 b1c0 	str.w	fp, [r4, #448]	; 0x1c0
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    954e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9552:	2b00      	cmp	r3, #0
    9554:	f47f aee4 	bne.w	9320 <isr+0x2c>
    9558:	e731      	b.n	93be <isr+0xca>
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    955a:	f240 3702 	movw	r7, #770	; 0x302
    955e:	42b9      	cmp	r1, r7
    9560:	f000 80b0 	beq.w	96c4 <isr+0x3d0>
    9564:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
    9568:	d1ef      	bne.n	954a <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    956a:	4a1f      	ldr	r2, [pc, #124]	; (95e8 <isr+0x2f4>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    956c:	2180      	movs	r1, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    956e:	2701      	movs	r7, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9570:	64f3      	str	r3, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9572:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9574:	6017      	str	r7, [r2, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9576:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9578:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    957c:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9580:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9582:	f441 3380 	orr.w	r3, r1, #65536	; 0x10000
    9586:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    958a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    958e:	2b00      	cmp	r3, #0
    9590:	d1fb      	bne.n	958a <isr+0x296>

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
	  case 0x0500: // SET_ADDRESS
		endpoint0_receive(NULL, 0, 0);
		USB1_DEVICEADDR = USB_DEVICEADDR_USBADR(setup.wValue) | USB_DEVICEADDR_USBADRA;
    9592:	0c03      	lsrs	r3, r0, #16
    9594:	065b      	lsls	r3, r3, #25
    9596:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
    959a:	f8c5 3154 	str.w	r3, [r5, #340]	; 0x154
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    959e:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    95a2:	2b00      	cmp	r3, #0
    95a4:	f47f aebc 	bne.w	9320 <isr+0x2c>
    95a8:	e709      	b.n	93be <isr+0xca>
    95aa:	bf00      	nop
    95ac:	402e0000 	.word	0x402e0000
    95b0:	20038000 	.word	0x20038000
    95b4:	402e01c0 	.word	0x402e01c0
    95b8:	20036cd8 	.word	0x20036cd8
    95bc:	20036cb8 	.word	0x20036cb8
    95c0:	20036cb4 	.word	0x20036cb4
    95c4:	20036cc0 	.word	0x20036cc0
    95c8:	20036cc4 	.word	0x20036cc4
    95cc:	20036ccc 	.word	0x20036ccc
    95d0:	20036cbc 	.word	0x20036cbc
    95d4:	20036cc8 	.word	0x20036cc8
    95d8:	20036ce8 	.word	0x20036ce8
    95dc:	000200c8 	.word	0x000200c8
    95e0:	00cc0002 	.word	0x00cc0002
    95e4:	00c80002 	.word	0x00c80002
    95e8:	200382a0 	.word	0x200382a0
	setup_t setup;
	uint32_t endpoint, dir, ctrl;
	const usb_descriptor_list_t *list;

	setup.bothwords = setupdata;
	switch (setup.wRequestAndType) {
    95ec:	f242 2321 	movw	r3, #8737	; 0x2221
    95f0:	4299      	cmp	r1, r3
    95f2:	d05b      	beq.n	96ac <isr+0x3b8>
    95f4:	f242 3321 	movw	r3, #8993	; 0x2321
    95f8:	4299      	cmp	r1, r3
    95fa:	d1a6      	bne.n	954a <isr+0x256>
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    95fc:	4bb5      	ldr	r3, [pc, #724]	; (98d4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    95fe:	2280      	movs	r2, #128	; 0x80
	endpoint0_transfer_ack.pointer0 = 0;
    9600:	2100      	movs	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9602:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9604:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9606:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9608:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    960a:	64f1      	str	r1, [r6, #76]	; 0x4c
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    960c:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9610:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9614:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9616:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    961a:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    961e:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9622:	2b00      	cmp	r3, #0
    9624:	d1fb      	bne.n	961e <isr+0x32a>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9626:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    962a:	2b00      	cmp	r3, #0
    962c:	f47f ae78 	bne.w	9320 <isr+0x2c>
    9630:	e6c5      	b.n	93be <isr+0xca>
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9632:	4aa9      	ldr	r2, [pc, #676]	; (98d8 <isr+0x5e4>)
		reply_buffer[1] = 0;
		endpoint0_transmit(reply_buffer, 2, 0);
    9634:	2102      	movs	r1, #2
    9636:	4610      	mov	r0, r2
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
		endpoint0_transmit(reply_buffer, 1, 0);
		return;
	  case 0x0080: // GET_STATUS (device)
		reply_buffer[0] = 0;
    9638:	7013      	strb	r3, [r2, #0]
		reply_buffer[1] = 0;
    963a:	7053      	strb	r3, [r2, #1]
		endpoint0_transmit(reply_buffer, 2, 0);
    963c:	f7ff fe0a 	bl	9254 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9640:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9644:	2b00      	cmp	r3, #0
    9646:	f47f ae6b 	bne.w	9320 <isr+0x2c>
    964a:	e6b8      	b.n	93be <isr+0xca>
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    964c:	b292      	uxth	r2, r2
    964e:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    9652:	2b07      	cmp	r3, #7
    9654:	f63f af79 	bhi.w	954a <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    9658:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    965c:	ea4f 0383 	mov.w	r3, r3, lsl #2
    9660:	4a9e      	ldr	r2, [pc, #632]	; (98dc <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9662:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9666:	f04f 0001 	mov.w	r0, #1
	  case 0x0102: // CLEAR_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_TXS;
    966a:	441a      	add	r2, r3
    966c:	6813      	ldr	r3, [r2, #0]
    966e:	bf14      	ite	ne
    9670:	f423 3380 	bicne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) &= ~USB_ENDPTCTRL_RXS;
    9674:	f023 0301 	biceq.w	r3, r3, #1
    9678:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    967a:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    967c:	4b95      	ldr	r3, [pc, #596]	; (98d4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    967e:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9680:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    9682:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9684:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9686:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    968a:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    968e:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9690:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    9694:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9698:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    969c:	2b00      	cmp	r3, #0
    969e:	d1fb      	bne.n	9698 <isr+0x3a4>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    96a0:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    96a4:	2b00      	cmp	r3, #0
    96a6:	f47f ae3b 	bne.w	9320 <isr+0x2c>
    96aa:	e688      	b.n	93be <isr+0xca>
		}
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
    96ac:	b292      	uxth	r2, r2
    96ae:	2a00      	cmp	r2, #0
    96b0:	d1a4      	bne.n	95fc <isr+0x308>
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    96b2:	4b8b      	ldr	r3, [pc, #556]	; (98e0 <isr+0x5ec>)
			usb_cdc_line_rtsdtr = setup.wValue;
    96b4:	f3c0 4007 	ubfx	r0, r0, #16, #8
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    96b8:	4a8a      	ldr	r2, [pc, #552]	; (98e4 <isr+0x5f0>)
    96ba:	6819      	ldr	r1, [r3, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    96bc:	4b8a      	ldr	r3, [pc, #552]	; (98e8 <isr+0x5f4>)
		break;
#if defined(CDC_STATUS_INTERFACE)
	  case 0x2221: // CDC_SET_CONTROL_LINE_STATE
		#ifdef CDC_STATUS_INTERFACE
		if (setup.wIndex == CDC_STATUS_INTERFACE) {
			usb_cdc_line_rtsdtr_millis = systick_millis_count;
    96be:	6011      	str	r1, [r2, #0]
			usb_cdc_line_rtsdtr = setup.wValue;
    96c0:	7018      	strb	r0, [r3, #0]
    96c2:	e79b      	b.n	95fc <isr+0x308>
			reply_buffer[0] = 1;
		}
		endpoint0_transmit(reply_buffer, 2, 0);
		return;
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
    96c4:	b292      	uxth	r2, r2
    96c6:	f002 037f 	and.w	r3, r2, #127	; 0x7f
		if (endpoint > 7) break;
    96ca:	2b07      	cmp	r3, #7
    96cc:	f63f af3d 	bhi.w	954a <isr+0x256>
		dir = setup.wIndex & 0x80;
		if (dir) {
    96d0:	f012 0f80 	tst.w	r2, #128	; 0x80
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    96d4:	ea4f 0383 	mov.w	r3, r3, lsl #2
    96d8:	4a80      	ldr	r2, [pc, #512]	; (98dc <isr+0x5e8>)
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    96da:	f04f 0100 	mov.w	r1, #0
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    96de:	f04f 0001 	mov.w	r0, #1
	  case 0x0302: // SET_FEATURE (endpoint)
		endpoint = setup.wIndex & 0x7F;
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		if (dir) {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_TXS;
    96e2:	441a      	add	r2, r3
    96e4:	6813      	ldr	r3, [r2, #0]
    96e6:	bf14      	ite	ne
    96e8:	f443 3380 	orrne.w	r3, r3, #65536	; 0x10000
		} else {
			*((volatile uint32_t *)&USB1_ENDPTCTRL0 + endpoint) |= USB_ENDPTCTRL_RXS;
    96ec:	f043 0301 	orreq.w	r3, r3, #1
    96f0:	6013      	str	r3, [r2, #0]
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    96f2:	2280      	movs	r2, #128	; 0x80
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    96f4:	4b77      	ldr	r3, [pc, #476]	; (98d4 <isr+0x5e0>)
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    96f6:	64f1      	str	r1, [r6, #76]	; 0x4c
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    96f8:	64b3      	str	r3, [r6, #72]	; 0x48
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    96fa:	6018      	str	r0, [r3, #0]
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    96fc:	605a      	str	r2, [r3, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    96fe:	f8c4 b1bc 	str.w	fp, [r4, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9702:	f8d4 21b0 	ldr.w	r2, [r4, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    9706:	6099      	str	r1, [r3, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    9708:	f442 3380 	orr.w	r3, r2, #65536	; 0x10000
    970c:	f8c4 31b0 	str.w	r3, [r4, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
	while (USB1_ENDPTPRIME) ;
    9710:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    9714:	2b00      	cmp	r3, #0
    9716:	d1fb      	bne.n	9710 <isr+0x41c>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9718:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    971c:	2b00      	cmp	r3, #0
    971e:	f47f adff 	bne.w	9320 <isr+0x2c>
    9722:	e64c      	b.n	93be <isr+0xca>
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9724:	4a71      	ldr	r2, [pc, #452]	; (98ec <isr+0x5f8>)
		endpoint0_transmit(reply_buffer, 1, 0);
    9726:	2101      	movs	r1, #1
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    9728:	4b6b      	ldr	r3, [pc, #428]	; (98d8 <isr+0x5e4>)
    972a:	7812      	ldrb	r2, [r2, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    972c:	4618      	mov	r0, r3
		endpoint_queue_head[2].unused1 = (uint32_t)experimental_buffer;
		#endif
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0880: // GET_CONFIGURATION
		reply_buffer[0] = usb_configuration;
    972e:	701a      	strb	r2, [r3, #0]
		endpoint0_transmit(reply_buffer, 1, 0);
    9730:	f7ff fd90 	bl	9254 <endpoint0_transmit.constprop.1>
			//printf("setup %08lX %08lX\n", s.word1, s.word2);
			USB1_ENDPTFLUSH = (1<<16) | (1<<0); // page 3174
			while (USB1_ENDPTFLUSH & ((1<<16) | (1<<0))) ;
			endpoint0_notify_mask = 0;
			endpoint0_setup(s.bothwords);
			setupstatus = USB1_ENDPTSETUPSTAT; // page 3175
    9734:	f8d4 31ac 	ldr.w	r3, [r4, #428]	; 0x1ac

	if (status & USB_USBSTS_UI) {
		//printf("data\n");
		uint32_t setupstatus = USB1_ENDPTSETUPSTAT;
		//printf("USB1_ENDPTSETUPSTAT=%X\n", setupstatus);
		while (setupstatus) {
    9738:	2b00      	cmp	r3, #0
    973a:	f47f adf1 	bne.w	9320 <isr+0x2c>
    973e:	e63e      	b.n	93be <isr+0xca>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9740:	4b6b      	ldr	r3, [pc, #428]	; (98f0 <isr+0x5fc>)
    9742:	6859      	ldr	r1, [r3, #4]
    9744:	2900      	cmp	r1, #0
    9746:	f43f af00 	beq.w	954a <isr+0x256>
    974a:	0c00      	lsrs	r0, r0, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    974c:	fa1f fe82 	uxth.w	lr, r2
    9750:	e004      	b.n	975c <isr+0x468>
		}
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x0680: // GET_DESCRIPTOR
	  case 0x0681:
		for (list = usb_descriptor_list; list->addr != NULL; list++) {
    9752:	330c      	adds	r3, #12
    9754:	6859      	ldr	r1, [r3, #4]
    9756:	2900      	cmp	r1, #0
    9758:	f43f aef7 	beq.w	954a <isr+0x256>
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
    975c:	881f      	ldrh	r7, [r3, #0]
    975e:	4287      	cmp	r7, r0
    9760:	d1f7      	bne.n	9752 <isr+0x45e>
    9762:	885f      	ldrh	r7, [r3, #2]
    9764:	4577      	cmp	r7, lr
    9766:	d1f4      	bne.n	9752 <isr+0x45e>
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
    9768:	0a07      	lsrs	r7, r0, #8
    976a:	2f03      	cmp	r7, #3
    976c:	f000 80e9 	beq.w	9942 <isr+0x64e>
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
    9770:	891b      	ldrh	r3, [r3, #8]
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    9772:	0c12      	lsrs	r2, r2, #16
    9774:	4293      	cmp	r3, r2
    9776:	bf28      	it	cs
    9778:	4613      	movcs	r3, r2

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
    977a:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    977e:	f000 80d1 	beq.w	9924 <isr+0x630>
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
    9782:	f5b0 6fe0 	cmp.w	r0, #1792	; 0x700
    9786:	f000 808b 	beq.w	98a0 <isr+0x5ac>
    978a:	4f5a      	ldr	r7, [pc, #360]	; (98f4 <isr+0x600>)
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
					usb_descriptor_buffer[1] = 7;
				} else {
					memcpy(usb_descriptor_buffer, list->addr, datalen);
    978c:	461a      	mov	r2, r3
    978e:	9301      	str	r3, [sp, #4]
    9790:	4638      	mov	r0, r7
    9792:	f7ff f95f 	bl	8a54 <memcpy>
    9796:	9b01      	ldr	r3, [sp, #4]
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9798:	f027 021f 	bic.w	r2, r7, #31
	uint32_t end_addr = (uint32_t)addr + size;
    979c:	441f      	add	r7, r3
	asm volatile("": : :"memory");
	asm("dsb");
    979e:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    97a2:	4955      	ldr	r1, [pc, #340]	; (98f8 <isr+0x604>)
    97a4:	600a      	str	r2, [r1, #0]
		location += 32;
    97a6:	3220      	adds	r2, #32
	} while (location < end_addr);
    97a8:	4297      	cmp	r7, r2
    97aa:	d8fa      	bhi.n	97a2 <isr+0x4ae>
	asm("dsb");
    97ac:	f3bf 8f4f 	dsb	sy
	asm("isb");
    97b0:	f3bf 8f6f 	isb	sy
				}
				// prep transmit
				arm_dcache_flush_delete(usb_descriptor_buffer, datalen);
				endpoint0_transmit(usb_descriptor_buffer, datalen, 0);
    97b4:	484f      	ldr	r0, [pc, #316]	; (98f4 <isr+0x600>)
    97b6:	4619      	mov	r1, r3
    97b8:	f7ff fd4c 	bl	9254 <endpoint0_transmit.constprop.1>
    97bc:	e5fb      	b.n	93b6 <isr+0xc2>
		if (endpoint > 7) break;
		dir = setup.wIndex & 0x80;
		ctrl = *((uint32_t *)&USB1_ENDPTCTRL0 + endpoint);
		reply_buffer[0] = 0;
		reply_buffer[1] = 0;
		if ((dir && (ctrl & USB_ENDPTCTRL_TXS)) || (!dir && (ctrl & USB_ENDPTCTRL_RXS))) {
    97be:	07cb      	lsls	r3, r1, #31
    97c0:	f57f adf5 	bpl.w	93ae <isr+0xba>
    97c4:	e5f1      	b.n	93aa <isr+0xb6>
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    97c6:	4f4d      	ldr	r7, [pc, #308]	; (98fc <isr+0x608>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    97c8:	f04f 0e01 	mov.w	lr, #1
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
    97cc:	60f3      	str	r3, [r6, #12]
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    97ce:	494c      	ldr	r1, [pc, #304]	; (9900 <isr+0x60c>)
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    97d0:	4b4c      	ldr	r3, [pc, #304]	; (9904 <isr+0x610>)
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    97d2:	6038      	str	r0, [r7, #0]
static void endpoint0_receive(void *data, uint32_t len, int notify)
{
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
    97d4:	f8c3 e000 	str.w	lr, [r3]
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
    97d8:	6059      	str	r1, [r3, #4]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
    97da:	60b3      	str	r3, [r6, #8]
	//printf("rx %lu\n", len);
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
    97dc:	494a      	ldr	r1, [pc, #296]	; (9908 <isr+0x614>)
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    97de:	f8d5 01b0 	ldr.w	r0, [r5, #432]	; 0x1b0
	  case 0x2321: // CDC_SEND_BREAK
		endpoint0_receive(NULL, 0, 0);
		return;
	  case 0x2021: // CDC_SET_LINE_CODING
		if (setup.wLength != 7) break;
		endpoint0_setupdata.bothwords = setupdata;
    97e2:	607a      	str	r2, [r7, #4]
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    97e4:	f501 5780 	add.w	r7, r1, #4096	; 0x1000
		endpoint0_transfer_data.pointer3 = addr + 12288;
		endpoint0_transfer_data.pointer4 = addr + 16384;
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    97e8:	ea40 020e 	orr.w	r2, r0, lr
	if (len > 0) {
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
    97ec:	6099      	str	r1, [r3, #8]
		endpoint0_transfer_data.pointer1 = addr + 4096;
		endpoint0_transfer_data.pointer2 = addr + 8192;
    97ee:	f501 5e00 	add.w	lr, r1, #8192	; 0x2000
		endpoint0_transfer_data.pointer3 = addr + 12288;
    97f2:	f501 5040 	add.w	r0, r1, #12288	; 0x3000
		endpoint0_transfer_data.pointer4 = addr + 16384;
    97f6:	f501 4180 	add.w	r1, r1, #16384	; 0x4000
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
    97fa:	f8c5 21b0 	str.w	r2, [r5, #432]	; 0x1b0
		// Executing A Transfer Descriptor, page 3182
		endpoint0_transfer_data.next = 1;
		endpoint0_transfer_data.status = (len << 16) | (1<<7);
		uint32_t addr = (uint32_t)data;
		endpoint0_transfer_data.pointer0 = addr; // format: table 55-60, pg 3159
		endpoint0_transfer_data.pointer1 = addr + 4096;
    97fe:	60df      	str	r7, [r3, #12]
		endpoint0_transfer_data.pointer2 = addr + 8192;
    9800:	f8c3 e010 	str.w	lr, [r3, #16]
		endpoint0_transfer_data.pointer3 = addr + 12288;
    9804:	6158      	str	r0, [r3, #20]
		endpoint0_transfer_data.pointer4 = addr + 16384;
    9806:	6199      	str	r1, [r3, #24]
		//  Case 1: Link list is empty, page 3182
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
    9808:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    980c:	2b00      	cmp	r3, #0
    980e:	d1fb      	bne.n	9808 <isr+0x514>
	}
	endpoint0_transfer_ack.next = 1;
    9810:	4a30      	ldr	r2, [pc, #192]	; (98d4 <isr+0x5e0>)
    9812:	2001      	movs	r0, #1
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9814:	f248 0180 	movw	r1, #32896	; 0x8080
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
    9818:	64f3      	str	r3, [r6, #76]	; 0x4c
		endpoint_queue_head[0].next = (uint32_t)&endpoint0_transfer_data;
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
    981a:	6010      	str	r0, [r2, #0]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    981c:	f44f 3080 	mov.w	r0, #65536	; 0x10000
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
    9820:	64b2      	str	r2, [r6, #72]	; 0x48
		endpoint_queue_head[0].status = 0;
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
    9822:	6051      	str	r1, [r2, #4]
	endpoint0_transfer_ack.pointer0 = 0;
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
    9824:	f8c5 b1bc 	str.w	fp, [r5, #444]	; 0x1bc
	USB1_ENDPTPRIME |= (1<<16);
    9828:	f8d5 11b0 	ldr.w	r1, [r5, #432]	; 0x1b0
		USB1_ENDPTPRIME |= (1<<0);
		while (USB1_ENDPTPRIME) ;
	}
	endpoint0_transfer_ack.next = 1;
	endpoint0_transfer_ack.status = (1<<7) | (notify ? (1 << 15) : 0);
	endpoint0_transfer_ack.pointer0 = 0;
    982c:	6093      	str	r3, [r2, #8]
	endpoint_queue_head[1].next = (uint32_t)&endpoint0_transfer_ack;
	endpoint_queue_head[1].status = 0;
	USB1_ENDPTCOMPLETE = (1<<0) | (1<<16);
	USB1_ENDPTPRIME |= (1<<16);
    982e:	ea41 0300 	orr.w	r3, r1, r0
    9832:	f8c5 31b0 	str.w	r3, [r5, #432]	; 0x1b0
	endpoint0_notify_mask = (notify ? (1 << 16) : 0);
    9836:	f8c9 0000 	str.w	r0, [r9]
	while (USB1_ENDPTPRIME) ;
    983a:	f8d4 31b0 	ldr.w	r3, [r4, #432]	; 0x1b0
    983e:	2b00      	cmp	r3, #0
    9840:	d1fb      	bne.n	983a <isr+0x546>
    9842:	e5b8      	b.n	93b6 <isr+0xc2>

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9844:	482d      	ldr	r0, [pc, #180]	; (98fc <isr+0x608>)
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9846:	f242 0421 	movw	r4, #8225	; 0x2021
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    984a:	2600      	movs	r6, #0

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    984c:	8805      	ldrh	r5, [r0, #0]
		uint32_t completestatus = USB1_ENDPTCOMPLETE;
		if (completestatus) {
			USB1_ENDPTCOMPLETE = completestatus;
			//printf("USB1_ENDPTCOMPLETE=%lX\n", completestatus);
			if (completestatus & endpoint0_notify_mask) {
				endpoint0_notify_mask = 0;
    984e:	600e      	str	r6, [r1, #0]

	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9850:	42a5      	cmp	r5, r4

static void endpoint0_complete(void)
{
	setup_t setup;

	setup.bothwords = endpoint0_setupdata.bothwords;
    9852:	6840      	ldr	r0, [r0, #4]
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
    9854:	f47f ae10 	bne.w	9478 <isr+0x184>
    9858:	b281      	uxth	r1, r0
    985a:	2900      	cmp	r1, #0
    985c:	f47f ae0c 	bne.w	9478 <isr+0x184>
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    9860:	4929      	ldr	r1, [pc, #164]	; (9908 <isr+0x614>)
    9862:	4c2a      	ldr	r4, [pc, #168]	; (990c <isr+0x618>)
    9864:	c903      	ldmia	r1, {r0, r1}
    9866:	0c0d      	lsrs	r5, r1, #16
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9868:	2886      	cmp	r0, #134	; 0x86
	setup.bothwords = endpoint0_setupdata.bothwords;
	//printf("complete %x %x %x\n", setup.word1, setup.word2, endpoint0_buffer[0]);
#ifdef CDC_STATUS_INTERFACE
	// 0x2021 is CDC_SET_LINE_CODING
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
    986a:	6020      	str	r0, [r4, #0]
    986c:	80a1      	strh	r1, [r4, #4]
    986e:	71a5      	strb	r5, [r4, #6]
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
    9870:	f47f ae02 	bne.w	9478 <isr+0x184>
}


void usb_start_sof_interrupts(int interface)
{
	__disable_irq();
    9874:	b672      	cpsid	i
	sof_usage |= (1 << interface);
    9876:	4826      	ldr	r0, [pc, #152]	; (9910 <isr+0x61c>)
    9878:	7801      	ldrb	r1, [r0, #0]
    987a:	f041 0104 	orr.w	r1, r1, #4
    987e:	7001      	strb	r1, [r0, #0]
	uint32_t intr = USB1_USBINTR;
    9880:	f8d2 1148 	ldr.w	r1, [r2, #328]	; 0x148
	if (!(intr & USB_USBINTR_SRE)) {
    9884:	0608      	lsls	r0, r1, #24
    9886:	d406      	bmi.n	9896 <isr+0x5a2>
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9888:	f041 0180 	orr.w	r1, r1, #128	; 0x80
{
	__disable_irq();
	sof_usage |= (1 << interface);
	uint32_t intr = USB1_USBINTR;
	if (!(intr & USB_USBINTR_SRE)) {
		USB1_USBSTS = USB_USBSTS_SRI; // clear prior SOF before SOF IRQ enable
    988c:	2080      	movs	r0, #128	; 0x80
    988e:	f8c2 0144 	str.w	r0, [r2, #324]	; 0x144
		USB1_USBINTR = intr | USB_USBINTR_SRE;
    9892:	f8c2 1148 	str.w	r1, [r2, #328]	; 0x148
	}
	__enable_irq();
    9896:	b662      	cpsie	i
	if (setup.wRequestAndType == 0x2021 && setup.wIndex == CDC_STATUS_INTERFACE) {
		memcpy(usb_cdc_line_coding, endpoint0_buffer, 7);
		printf("usb_cdc_line_coding, baud=%u\n", usb_cdc_line_coding[0]);
		if (usb_cdc_line_coding[0] == 134) {
			usb_start_sof_interrupts(NUM_INTERFACE);
			usb_reboot_timer = 80; // TODO: 10 if only 12 Mbit/sec
    9898:	4a1e      	ldr	r2, [pc, #120]	; (9914 <isr+0x620>)
    989a:	2150      	movs	r1, #80	; 0x50
    989c:	7011      	strb	r1, [r2, #0]
    989e:	e5eb      	b.n	9478 <isr+0x184>
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    98a0:	481d      	ldr	r0, [pc, #116]	; (9918 <isr+0x624>)
					memcpy(usb_descriptor_buffer, src, datalen);
    98a2:	461a      	mov	r2, r3
    98a4:	4f13      	ldr	r7, [pc, #76]	; (98f4 <isr+0x600>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
					if (usb_high_speed) src = usb_config_descriptor_12;
    98a6:	f890 e000 	ldrb.w	lr, [r0]
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
				} else if (setup.wValue == 0x700) {
					// other speed config also needs to adapt
					const uint8_t *src = usb_config_descriptor_480;
    98aa:	491c      	ldr	r1, [pc, #112]	; (991c <isr+0x628>)
    98ac:	481c      	ldr	r0, [pc, #112]	; (9920 <isr+0x62c>)
					if (usb_high_speed) src = usb_config_descriptor_12;
					memcpy(usb_descriptor_buffer, src, datalen);
    98ae:	9301      	str	r3, [sp, #4]
    98b0:	f1be 0f00 	cmp.w	lr, #0
    98b4:	bf08      	it	eq
    98b6:	4601      	moveq	r1, r0
    98b8:	4638      	mov	r0, r7
    98ba:	f7ff f8cb 	bl	8a54 <memcpy>
					usb_descriptor_buffer[1] = 7;
    98be:	2207      	movs	r2, #7
    98c0:	9b01      	ldr	r3, [sp, #4]
    98c2:	707a      	strb	r2, [r7, #1]
    98c4:	e768      	b.n	9798 <isr+0x4a4>

void usb_stop_sof_interrupts(int interface)
{
	sof_usage &= ~(1 << interface);
	if (sof_usage == 0) {
		USB1_USBINTR &= ~USB_USBINTR_SRE;
    98c6:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    98ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    98ce:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    98d2:	e5c6      	b.n	9462 <isr+0x16e>
    98d4:	200382a0 	.word	0x200382a0
    98d8:	20036cd8 	.word	0x20036cd8
    98dc:	402e01c0 	.word	0x402e01c0
    98e0:	20036ca0 	.word	0x20036ca0
    98e4:	200382c0 	.word	0x200382c0
    98e8:	20036e28 	.word	0x20036e28
    98ec:	20036ce8 	.word	0x20036ce8
    98f0:	20000d20 	.word	0x20000d20
    98f4:	20200000 	.word	0x20200000
    98f8:	e000ef70 	.word	0xe000ef70
    98fc:	20036cd0 	.word	0x20036cd0
    9900:	00070080 	.word	0x00070080
    9904:	20038280 	.word	0x20038280
    9908:	20036ce0 	.word	0x20036ce0
    990c:	200382c4 	.word	0x200382c4
    9910:	20036cbc 	.word	0x20036cbc
    9914:	20036ccc 	.word	0x20036ccc
    9918:	20036cc4 	.word	0x20036cc4
    991c:	600017c0 	.word	0x600017c0
    9920:	6000180c 	.word	0x6000180c

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
					if (usb_high_speed) src = usb_config_descriptor_480;
    9924:	480a      	ldr	r0, [pc, #40]	; (9950 <isr+0x65c>)
					memcpy(usb_descriptor_buffer, src, datalen);
    9926:	461a      	mov	r2, r3
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    9928:	490a      	ldr	r1, [pc, #40]	; (9954 <isr+0x660>)
					if (usb_high_speed) src = usb_config_descriptor_480;
    992a:	7807      	ldrb	r7, [r0, #0]
				if (datalen > setup.wLength) datalen = setup.wLength;

				// copy the descriptor, from PROGMEM to DMAMEM
				if (setup.wValue == 0x200) {
					// config descriptor needs to adapt to speed
					const uint8_t *src = usb_config_descriptor_12;
    992c:	480a      	ldr	r0, [pc, #40]	; (9958 <isr+0x664>)
					if (usb_high_speed) src = usb_config_descriptor_480;
					memcpy(usb_descriptor_buffer, src, datalen);
    992e:	9301      	str	r3, [sp, #4]
    9930:	2f00      	cmp	r7, #0
    9932:	bf08      	it	eq
    9934:	4601      	moveq	r1, r0
    9936:	4809      	ldr	r0, [pc, #36]	; (995c <isr+0x668>)
    9938:	f7ff f88c 	bl	8a54 <memcpy>
    993c:	4f07      	ldr	r7, [pc, #28]	; (995c <isr+0x668>)
    993e:	9b01      	ldr	r3, [sp, #4]
    9940:	e72a      	b.n	9798 <isr+0x4a4>
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
				} else {
					datalen = list->length;
				}
				if (datalen > setup.wLength) datalen = setup.wLength;
    9942:	0c12      	lsrs	r2, r2, #16
			if (setup.wValue == list->wValue && setup.wIndex == list->wIndex) {
				uint32_t datalen;
				if ((setup.wValue >> 8) == 3) {
					// for string descriptors, use the descriptor's
					// length field, allowing runtime configured length.
					datalen = *(list->addr);
    9944:	780b      	ldrb	r3, [r1, #0]
    9946:	4293      	cmp	r3, r2
    9948:	bf28      	it	cs
    994a:	4613      	movcs	r3, r2
    994c:	e719      	b.n	9782 <isr+0x48e>
    994e:	bf00      	nop
    9950:	20036cc4 	.word	0x20036cc4
    9954:	6000180c 	.word	0x6000180c
    9958:	600017c0 	.word	0x600017c0
    995c:	20200000 	.word	0x20200000

00009960 <usb_config_rx>:
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    9960:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9962:	f1a0 0202 	sub.w	r2, r0, #2
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
}

void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    9966:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    996a:	bf14      	ite	ne
    996c:	2700      	movne	r7, #0
    996e:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    9972:	2a02      	cmp	r2, #2
    9974:	d901      	bls.n	997a <usb_config_rx+0x1a>
    9976:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
    997a:	ea4f 1ac0 	mov.w	sl, r0, lsl #7
    997e:	f8df 9040 	ldr.w	r9, [pc, #64]	; 99c0 <usb_config_rx+0x60>
    9982:	460d      	mov	r5, r1
    9984:	4604      	mov	r4, r0
    9986:	eb0a 0609 	add.w	r6, sl, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    998a:	2100      	movs	r1, #0
    998c:	2240      	movs	r2, #64	; 0x40
    998e:	4698      	mov	r8, r3
    9990:	4630      	mov	r0, r6
    9992:	f001 fd4b 	bl	b42c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9996:	2001      	movs	r0, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    9998:	ea47 4105 	orr.w	r1, r7, r5, lsl #16
    999c:	f84a 1009 	str.w	r1, [sl, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    99a0:	f8c6 8038 	str.w	r8, [r6, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    99a4:	60b0      	str	r0, [r6, #8]
void usb_config_rx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
    99a6:	f1b8 0f00 	cmp.w	r8, #0
    99aa:	d0e4      	beq.n	9976 <usb_config_rx+0x16>
    99ac:	4b03      	ldr	r3, [pc, #12]	; (99bc <usb_config_rx+0x5c>)
    99ae:	40a0      	lsls	r0, r4
    99b0:	681c      	ldr	r4, [r3, #0]
    99b2:	4320      	orrs	r0, r4
    99b4:	6018      	str	r0, [r3, #0]
    99b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    99ba:	bf00      	nop
    99bc:	20036cb8 	.word	0x20036cb8
    99c0:	20038000 	.word	0x20038000

000099c4 <usb_config_tx>:
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    99c4:	2a00      	cmp	r2, #0
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    99c6:	f1a0 0202 	sub.w	r2, r0, #2
	usb_endpoint_config(endpoint_queue_head + ep * 2, config, cb);
	if (cb) endpointN_notify_mask |= (1 << ep);
}

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
    99ca:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
    99ce:	bf14      	ite	ne
    99d0:	2700      	movne	r7, #0
    99d2:	f04f 5700 	moveq.w	r7, #536870912	; 0x20000000
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
    99d6:	2a02      	cmp	r2, #2
    99d8:	d901      	bls.n	99de <usb_config_tx+0x1a>
    99da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    99de:	2240      	movs	r2, #64	; 0x40

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    99e0:	01c5      	lsls	r5, r0, #7
    99e2:	f8df 9044 	ldr.w	r9, [pc, #68]	; 9a28 <usb_config_tx+0x64>
    99e6:	4688      	mov	r8, r1
    99e8:	4415      	add	r5, r2
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    99ea:	2100      	movs	r1, #0
    99ec:	4604      	mov	r4, r0
    99ee:	461e      	mov	r6, r3

void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
    99f0:	eb05 0a09 	add.w	sl, r5, r9
#endif
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
    99f4:	4650      	mov	r0, sl
    99f6:	f001 fd19 	bl	b42c <memset>
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    99fa:	2201      	movs	r2, #1
}

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
    99fc:	ea47 4108 	orr.w	r1, r7, r8, lsl #16
    9a00:	f845 1009 	str.w	r1, [r5, r9]
	qh->next = 1; // Terminate bit = 1
	qh->callback_function = callback;
    9a04:	f8ca 6038 	str.w	r6, [sl, #56]	; 0x38

static void usb_endpoint_config(endpoint_t *qh, uint32_t config, void (*callback)(transfer_t *))
{
	memset(qh, 0, sizeof(endpoint_t));
	qh->config = config;
	qh->next = 1; // Terminate bit = 1
    9a08:	f8ca 2008 	str.w	r2, [sl, #8]
void usb_config_tx(uint32_t ep, uint32_t packet_size, int do_zlp, void (*cb)(transfer_t *))
{
	uint32_t config = (packet_size << 16) | (do_zlp ? 0 : (1 << 29));
	if (ep < 2 || ep > NUM_ENDPOINTS) return;
	usb_endpoint_config(endpoint_queue_head + ep * 2 + 1, config, cb);
	if (cb) endpointN_notify_mask |= (1 << (ep + 16));
    9a0c:	2e00      	cmp	r6, #0
    9a0e:	d0e4      	beq.n	99da <usb_config_tx+0x16>
    9a10:	f104 0010 	add.w	r0, r4, #16
    9a14:	4b03      	ldr	r3, [pc, #12]	; (9a24 <usb_config_tx+0x60>)
    9a16:	4082      	lsls	r2, r0
    9a18:	6818      	ldr	r0, [r3, #0]
    9a1a:	4302      	orrs	r2, r0
    9a1c:	601a      	str	r2, [r3, #0]
    9a1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    9a22:	bf00      	nop
    9a24:	20036cb8 	.word	0x20036cb8
    9a28:	20038000 	.word	0x20038000

00009a2c <usb_prepare_transfer>:


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9a2c:	0412      	lsls	r2, r2, #16
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
    9a2e:	6081      	str	r1, [r0, #8]
	transfer->pointer1 = addr + 4096;
	transfer->pointer2 = addr + 8192;
	transfer->pointer3 = addr + 12288;
	transfer->pointer4 = addr + 16384;
	transfer->callback_param = param;
    9a30:	61c3      	str	r3, [r0, #28]


void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9a32:	f042 0280 	orr.w	r2, r2, #128	; 0x80
}



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
    9a36:	b4f0      	push	{r4, r5, r6, r7}
	transfer->next = 1;
	transfer->status = (len << 16) | (1<<7);
    9a38:	6042      	str	r2, [r0, #4]



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9a3a:	2701      	movs	r7, #1
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9a3c:	f501 5680 	add.w	r6, r1, #4096	; 0x1000
	transfer->pointer2 = addr + 8192;
    9a40:	f501 5500 	add.w	r5, r1, #8192	; 0x2000
	transfer->pointer3 = addr + 12288;
    9a44:	f501 5440 	add.w	r4, r1, #12288	; 0x3000
	transfer->pointer4 = addr + 16384;
    9a48:	f501 4280 	add.w	r2, r1, #16384	; 0x4000



void usb_prepare_transfer(transfer_t *transfer, const void *data, uint32_t len, uint32_t param)
{
	transfer->next = 1;
    9a4c:	6007      	str	r7, [r0, #0]
	transfer->status = (len << 16) | (1<<7);
	uint32_t addr = (uint32_t)data;
	transfer->pointer0 = addr;
	transfer->pointer1 = addr + 4096;
    9a4e:	60c6      	str	r6, [r0, #12]
	transfer->pointer2 = addr + 8192;
    9a50:	6105      	str	r5, [r0, #16]
	transfer->pointer3 = addr + 12288;
    9a52:	6144      	str	r4, [r0, #20]
	transfer->pointer4 = addr + 16384;
    9a54:	6182      	str	r2, [r0, #24]
	transfer->callback_param = param;
}
    9a56:	bcf0      	pop	{r4, r5, r6, r7}
    9a58:	4770      	bx	lr
    9a5a:	bf00      	nop

00009a5c <usb_transmit>:
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9a5c:	1e83      	subs	r3, r0, #2
    9a5e:	2b02      	cmp	r3, #2
    9a60:	d900      	bls.n	9a64 <usb_transmit+0x8>
    9a62:	4770      	bx	lr
		count--;
	}
}

void usb_transmit(int endpoint_number, transfer_t *transfer)
{
    9a64:	b430      	push	{r4, r5}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9a66:	4b06      	ldr	r3, [pc, #24]	; (9a80 <usb_transmit+0x24>)
    9a68:	f100 0410 	add.w	r4, r0, #16
    9a6c:	2501      	movs	r5, #1
    9a6e:	460a      	mov	r2, r1
    9a70:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
    9a74:	fa05 f104 	lsl.w	r1, r5, r4
}
    9a78:	bc30      	pop	{r4, r5}
void usb_transmit(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2 + 1;
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
    9a7a:	f7ff bb97 	b.w	91ac <schedule_transfer>
    9a7e:	bf00      	nop
    9a80:	20038040 	.word	0x20038040

00009a84 <usb_receive>:
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
    9a84:	1e83      	subs	r3, r0, #2
    9a86:	2b02      	cmp	r3, #2
    9a88:	d900      	bls.n	9a8c <usb_receive+0x8>
    9a8a:	4770      	bx	lr
	uint32_t mask = 1 << (endpoint_number + 16);
	schedule_transfer(endpoint, mask, transfer);
}

void usb_receive(int endpoint_number, transfer_t *transfer)
{
    9a8c:	b410      	push	{r4}
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9a8e:	4b05      	ldr	r3, [pc, #20]	; (9aa4 <usb_receive+0x20>)
    9a90:	2401      	movs	r4, #1
    9a92:	460a      	mov	r2, r1
    9a94:	fa04 f100 	lsl.w	r1, r4, r0
    9a98:	eb03 10c0 	add.w	r0, r3, r0, lsl #7
}
    9a9c:	f85d 4b04 	ldr.w	r4, [sp], #4
void usb_receive(int endpoint_number, transfer_t *transfer)
{
	if (endpoint_number < 2 || endpoint_number > NUM_ENDPOINTS) return;
	endpoint_t *endpoint = endpoint_queue_head + endpoint_number * 2;
	uint32_t mask = 1 << endpoint_number;
	schedule_transfer(endpoint, mask, transfer);
    9aa0:	f7ff bb84 	b.w	91ac <schedule_transfer>
    9aa4:	20038000 	.word	0x20038000

00009aa8 <usb_transfer_status>:
		//if (!(cmd & USB_USBCMD_ATDTW)) continue;
		//if (status & 0x80) break; // for still active, only 1 reading needed
		//if (++count > 1) break; // for completed, check 10 times
	}
#else
	return transfer->status;
    9aa8:	6840      	ldr	r0, [r0, #4]
#endif
}
    9aaa:	4770      	bx	lr

00009aac <usb_init_serialnumber>:
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9aac:	4a12      	ldr	r2, [pc, #72]	; (9af8 <usb_init_serialnumber+0x4c>)
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9aae:	4b13      	ldr	r3, [pc, #76]	; (9afc <usb_init_serialnumber+0x50>)
void usb_init_serialnumber(void)
{
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
    9ab0:	f8d2 0220 	ldr.w	r0, [r2, #544]	; 0x220
    9ab4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9ab8:	4298      	cmp	r0, r3
	{'M','T','P'}
};
#endif

void usb_init_serialnumber(void)
{
    9aba:	b510      	push	{r4, lr}
    9abc:	b084      	sub	sp, #16
	char buf[11];
	uint32_t i, num;

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
    9abe:	d802      	bhi.n	9ac6 <usb_init_serialnumber+0x1a>
    9ac0:	eb00 0080 	add.w	r0, r0, r0, lsl #2
    9ac4:	0040      	lsls	r0, r0, #1
    9ac6:	4c0e      	ldr	r4, [pc, #56]	; (9b00 <usb_init_serialnumber+0x54>)
	ultoa(num, buf, 10);
    9ac8:	a901      	add	r1, sp, #4
    9aca:	220a      	movs	r2, #10
    9acc:	f000 fd9a 	bl	a604 <ultoa>
    9ad0:	a901      	add	r1, sp, #4
	for (i=0; i<10; i++) {
    9ad2:	2300      	movs	r3, #0
    9ad4:	4620      	mov	r0, r4
		char c = buf[i];
    9ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
    9ada:	3301      	adds	r3, #1
		if (!c) break;
    9adc:	b13a      	cbz	r2, 9aee <usb_init_serialnumber+0x42>

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9ade:	2b0a      	cmp	r3, #10
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
    9ae0:	f820 2f02 	strh.w	r2, [r0, #2]!

	num = HW_OCOTP_MAC0 & 0xFFFFFF;
	// add extra zero to work around OS-X CDC-ACM driver bug
	if (num < 10000000) num = num * 10;
	ultoa(num, buf, 10);
	for (i=0; i<10; i++) {
    9ae4:	d1f7      	bne.n	9ad6 <usb_init_serialnumber+0x2a>
    9ae6:	2316      	movs	r3, #22
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9ae8:	7023      	strb	r3, [r4, #0]
}
    9aea:	b004      	add	sp, #16
    9aec:	bd10      	pop	{r4, pc}
    9aee:	005b      	lsls	r3, r3, #1
    9af0:	b2db      	uxtb	r3, r3
	for (i=0; i<10; i++) {
		char c = buf[i];
		if (!c) break;
		usb_string_serial_number_default.wString[i] = c;
	}
	usb_string_serial_number_default.bLength = i * 2 + 2;
    9af2:	7023      	strb	r3, [r4, #0]
}
    9af4:	b004      	add	sp, #16
    9af6:	bd10      	pop	{r4, pc}
    9af8:	401f4400 	.word	0x401f4400
    9afc:	0098967f 	.word	0x0098967f
    9b00:	20001148 	.word	0x20001148

00009b04 <rx_queue_transfer>:
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9b06:	4914      	ldr	r1, [pc, #80]	; (9b58 <rx_queue_transfer+0x54>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9b08:	f44f 3700 	mov.w	r7, #131072	; 0x20000
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9b0c:	4d13      	ldr	r5, [pc, #76]	; (9b5c <rx_queue_transfer+0x58>)
/*************************************************************************/
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
    9b0e:	4603      	mov	r3, r0
	NVIC_DISABLE_IRQ(IRQ_USB1);
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
    9b10:	eb01 2440 	add.w	r4, r1, r0, lsl #9
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9b14:	4e12      	ldr	r6, [pc, #72]	; (9b60 <rx_queue_transfer+0x5c>)
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9b16:	4a13      	ldr	r2, [pc, #76]	; (9b64 <rx_queue_transfer+0x60>)
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9b18:	eb05 1540 	add.w	r5, r5, r0, lsl #5
    9b1c:	4621      	mov	r1, r4
/**                               Receive                               **/
/*************************************************************************/

static void rx_queue_transfer(int i)
{
	NVIC_DISABLE_IRQ(IRQ_USB1);
    9b1e:	6017      	str	r7, [r2, #0]
	printf("rx queue i=%d\n", i);
	void *buffer = rx_buffer + i * CDC_RX_SIZE_480;
	usb_prepare_transfer(rx_transfer + i, buffer, rx_packet_size, i);
    9b20:	4628      	mov	r0, r5
    9b22:	8832      	ldrh	r2, [r6, #0]
    9b24:	f7ff ff82 	bl	9a2c <usb_prepare_transfer>
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9b28:	8831      	ldrh	r1, [r6, #0]
// want to delete anything the cache may have stored, so your next
// read is certain to access the physical memory.
__attribute__((always_inline, unused))
static inline void arm_dcache_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9b2a:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9b2e:	4421      	add	r1, r4
	asm volatile("": : :"memory");
	asm("dsb");
    9b30:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCIMVAC = location;
    9b34:	4a0c      	ldr	r2, [pc, #48]	; (9b68 <rx_queue_transfer+0x64>)
    9b36:	6013      	str	r3, [r2, #0]
		location += 32;
    9b38:	3320      	adds	r3, #32
	} while (location < end_addr);
    9b3a:	4299      	cmp	r1, r3
    9b3c:	d8fb      	bhi.n	9b36 <rx_queue_transfer+0x32>
	asm("dsb");
    9b3e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9b42:	f3bf 8f6f 	isb	sy
	arm_dcache_delete(buffer, rx_packet_size);
	usb_receive(CDC_RX_ENDPOINT, rx_transfer + i);
    9b46:	2003      	movs	r0, #3
    9b48:	4629      	mov	r1, r5
    9b4a:	f7ff ff9b 	bl	9a84 <usb_receive>
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9b4e:	4b07      	ldr	r3, [pc, #28]	; (9b6c <rx_queue_transfer+0x68>)
    9b50:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9b54:	601a      	str	r2, [r3, #0]
    9b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9b58:	20200060 	.word	0x20200060
    9b5c:	20036d00 	.word	0x20036d00
    9b60:	20036e0e 	.word	0x20036e0e
    9b64:	e000e18c 	.word	0xe000e18c
    9b68:	e000ef5c 	.word	0xe000ef5c
    9b6c:	e000e10c 	.word	0xe000e10c

00009b70 <rx_event>:
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9b70:	4a24      	ldr	r2, [pc, #144]	; (9c04 <rx_event+0x94>)
    9b72:	6843      	ldr	r3, [r0, #4]
	NVIC_ENABLE_IRQ(IRQ_USB1);
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
    9b74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9b78:	f3c3 430e 	ubfx	r3, r3, #16, #15
    9b7c:	8814      	ldrh	r4, [r2, #0]
	int i = t->callback_param;
    9b7e:	69c5      	ldr	r5, [r0, #28]
}

// called by USB interrupt when any packet is received
static void rx_event(transfer_t *t)
{
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
    9b80:	1ae4      	subs	r4, r4, r3
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
    9b82:	2c00      	cmp	r4, #0
    9b84:	dd38      	ble.n	9bf8 <rx_event+0x88>
		// received a packet with data
		uint32_t head = rx_head;
    9b86:	4920      	ldr	r1, [pc, #128]	; (9c08 <rx_event+0x98>)
		if (head != rx_tail) {
    9b88:	4a20      	ldr	r2, [pc, #128]	; (9c0c <rx_event+0x9c>)
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    9b8a:	780b      	ldrb	r3, [r1, #0]
		if (head != rx_tail) {
    9b8c:	7812      	ldrb	r2, [r2, #0]
	int len = rx_packet_size - ((t->status >> 16) & 0x7FFF);
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
    9b8e:	b2db      	uxtb	r3, r3
		if (head != rx_tail) {
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    9b90:	481f      	ldr	r0, [pc, #124]	; (9c10 <rx_event+0xa0>)
			uint32_t count = rx_count[ii];
    9b92:	4e20      	ldr	r6, [pc, #128]	; (9c14 <rx_event+0xa4>)
	int i = t->callback_param;
	printf("rx event, len=%d, i=%d\n", len, i);
	if (len > 0) {
		// received a packet with data
		uint32_t head = rx_head;
		if (head != rx_tail) {
    9b94:	4293      	cmp	r3, r2
    9b96:	d007      	beq.n	9ba8 <rx_event+0x38>
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
    9b98:	f810 8003 	ldrb.w	r8, [r0, r3]
			uint32_t count = rx_count[ii];
    9b9c:	f836 7018 	ldrh.w	r7, [r6, r8, lsl #1]
			if (len <= CDC_RX_SIZE_480 - count) {
    9ba0:	f5c7 7200 	rsb	r2, r7, #512	; 0x200
    9ba4:	4294      	cmp	r4, r2
    9ba6:	d912      	bls.n	9bce <rx_event+0x5e>
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9ba8:	3301      	adds	r3, #1
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
    9baa:	2200      	movs	r2, #0
    9bac:	4f1a      	ldr	r7, [pc, #104]	; (9c18 <rx_event+0xa8>)
		if (++head > RX_NUM) head = 0;
    9bae:	2b08      	cmp	r3, #8
				// TODO: trigger serialEvent
				return;
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
    9bb0:	f826 4015 	strh.w	r4, [r6, r5, lsl #1]
		rx_index[i] = 0;
    9bb4:	f827 2015 	strh.w	r2, [r7, r5, lsl #1]
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
		rx_head = head;
		rx_available += len;
    9bb8:	4e18      	ldr	r6, [pc, #96]	; (9c1c <rx_event+0xac>)
    9bba:	bf94      	ite	ls
    9bbc:	b2da      	uxtbls	r2, r3
			}
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
    9bbe:	4613      	movhi	r3, r2
		rx_list[head] = i;
		rx_head = head;
    9bc0:	700a      	strb	r2, [r1, #0]
		rx_available += len;
    9bc2:	6832      	ldr	r2, [r6, #0]
		}
		// add this packet to rx_list
		rx_count[i] = len;
		rx_index[i] = 0;
		if (++head > RX_NUM) head = 0;
		rx_list[head] = i;
    9bc4:	54c5      	strb	r5, [r0, r3]
		rx_head = head;
		rx_available += len;
    9bc6:	4414      	add	r4, r2
    9bc8:	6034      	str	r4, [r6, #0]
    9bca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9bce:	4b14      	ldr	r3, [pc, #80]	; (9c20 <rx_event+0xb0>)
    9bd0:	eb07 2048 	add.w	r0, r7, r8, lsl #9
    9bd4:	4622      	mov	r2, r4
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9bd6:	4427      	add	r7, r4
			// a previous packet is still buffered
			uint32_t ii = rx_list[head];
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
    9bd8:	eb03 2145 	add.w	r1, r3, r5, lsl #9
    9bdc:	4418      	add	r0, r3
    9bde:	f7fe ff39 	bl	8a54 <memcpy>
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
    9be2:	4a0e      	ldr	r2, [pc, #56]	; (9c1c <rx_event+0xac>)
				rx_queue_transfer(i);
    9be4:	4628      	mov	r0, r5
			uint32_t count = rx_count[ii];
			if (len <= CDC_RX_SIZE_480 - count) {
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
    9be6:	f826 7018 	strh.w	r7, [r6, r8, lsl #1]
				rx_available += len;
    9bea:	6813      	ldr	r3, [r2, #0]
    9bec:	441c      	add	r4, r3
    9bee:	6014      	str	r4, [r2, #0]
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
	}
}
    9bf0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
				// previous buffer has enough free space for this packet's data
				memcpy(rx_buffer + ii * CDC_RX_SIZE_480 + count,
					rx_buffer + i * CDC_RX_SIZE_480, len);
				rx_count[ii] = count + len;
				rx_available += len;
				rx_queue_transfer(i);
    9bf4:	f7ff bf86 	b.w	9b04 <rx_queue_transfer>
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9bf8:	4628      	mov	r0, r5
	}
}
    9bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
		rx_head = head;
		rx_available += len;
		// TODO: trigger serialEvent
	} else {
		// received a zero length packet
		rx_queue_transfer(i);
    9bfe:	f7ff bf81 	b.w	9b04 <rx_queue_transfer>
    9c02:	bf00      	nop
    9c04:	20036e0e 	.word	0x20036e0e
    9c08:	20036e24 	.word	0x20036e24
    9c0c:	20036e00 	.word	0x20036e00
    9c10:	20036e04 	.word	0x20036e04
    9c14:	20036e10 	.word	0x20036e10
    9c18:	20036cec 	.word	0x20036cec
    9c1c:	20036e20 	.word	0x20036e20
    9c20:	20200060 	.word	0x20200060

00009c24 <usb_serial_flush_callback>:
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
	if (tx_noautoflush) return;
    9c24:	4b1e      	ldr	r3, [pc, #120]	; (9ca0 <usb_serial_flush_callback+0x7c>)
    9c26:	781a      	ldrb	r2, [r3, #0]
    9c28:	b95a      	cbnz	r2, 9c42 <usb_serial_flush_callback+0x1e>
    9c2a:	f002 03ff 	and.w	r3, r2, #255	; 0xff
	if (!usb_configuration) return;
    9c2e:	4a1d      	ldr	r2, [pc, #116]	; (9ca4 <usb_serial_flush_callback+0x80>)
    9c30:	7812      	ldrb	r2, [r2, #0]
    9c32:	b132      	cbz	r2, 9c42 <usb_serial_flush_callback+0x1e>
	tx_available = 0;
	tx_noautoflush = 0;
}

static void usb_serial_flush_callback(void)
{
    9c34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
    9c38:	4d1b      	ldr	r5, [pc, #108]	; (9ca8 <usb_serial_flush_callback+0x84>)
    9c3a:	882a      	ldrh	r2, [r5, #0]
    9c3c:	b912      	cbnz	r2, 9c44 <usb_serial_flush_callback+0x20>
    9c3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c42:	4770      	bx	lr
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9c44:	4e19      	ldr	r6, [pc, #100]	; (9cac <usb_serial_flush_callback+0x88>)
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    9c46:	f5c2 6800 	rsb	r8, r2, #2048	; 0x800
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9c4a:	4f19      	ldr	r7, [pc, #100]	; (9cb0 <usb_serial_flush_callback+0x8c>)
    9c4c:	7831      	ldrb	r1, [r6, #0]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9c4e:	4642      	mov	r2, r8
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9c50:	4c18      	ldr	r4, [pc, #96]	; (9cb4 <usb_serial_flush_callback+0x90>)
{
	if (tx_noautoflush) return;
	if (!usb_configuration) return;
	if (tx_available == 0) return;
	//printf("flush callback, %d bytes\n", TX_SIZE - tx_available);
	transfer_t *xfer = tx_transfer + tx_head;
    9c52:	eb07 1741 	add.w	r7, r7, r1, lsl #5
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9c56:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    9c5a:	4638      	mov	r0, r7
    9c5c:	4621      	mov	r1, r4
    9c5e:	f7ff fee5 	bl	9a2c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    9c62:	eb08 0204 	add.w	r2, r8, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9c66:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    9c6a:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9c6e:	4b12      	ldr	r3, [pc, #72]	; (9cb8 <usb_serial_flush_callback+0x94>)
    9c70:	6019      	str	r1, [r3, #0]
		location += 32;
    9c72:	3120      	adds	r1, #32
	} while (location < end_addr);
    9c74:	428a      	cmp	r2, r1
    9c76:	d8fb      	bhi.n	9c70 <usb_serial_flush_callback+0x4c>
	asm("dsb");
    9c78:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9c7c:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    9c80:	2004      	movs	r0, #4
    9c82:	4639      	mov	r1, r7
    9c84:	f7ff feea 	bl	9a5c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    9c88:	7833      	ldrb	r3, [r6, #0]
    9c8a:	4a08      	ldr	r2, [pc, #32]	; (9cac <usb_serial_flush_callback+0x88>)
    9c8c:	3301      	adds	r3, #1
    9c8e:	b2db      	uxtb	r3, r3
    9c90:	2b03      	cmp	r3, #3
    9c92:	bf88      	it	hi
    9c94:	2300      	movhi	r3, #0
    9c96:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    9c98:	2300      	movs	r3, #0
    9c9a:	802b      	strh	r3, [r5, #0]
    9c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ca0:	20036cfe 	.word	0x20036cfe
    9ca4:	20036ce8 	.word	0x20036ce8
    9ca8:	20036e26 	.word	0x20036e26
    9cac:	20036cff 	.word	0x20036cff
    9cb0:	20036e40 	.word	0x20036e40
    9cb4:	20201060 	.word	0x20201060
    9cb8:	e000ef70 	.word	0xe000ef70

00009cbc <usb_serial_write.part.1>:
{
	USB1_GPTIMER0CTRL = 0;
}


int usb_serial_write(const void *buffer, uint32_t size)
    9cbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    9cc0:	b085      	sub	sp, #20
    9cc2:	9002      	str	r0, [sp, #8]
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9cc4:	9101      	str	r1, [sp, #4]
    9cc6:	2900      	cmp	r1, #0
    9cc8:	f000 80a2 	beq.w	9e10 <usb_serial_write.part.1+0x154>
    9ccc:	2300      	movs	r3, #0
    9cce:	f8df 815c 	ldr.w	r8, [pc, #348]	; 9e2c <usb_serial_write.part.1+0x170>
    9cd2:	f8df 914c 	ldr.w	r9, [pc, #332]	; 9e20 <usb_serial_write.part.1+0x164>
    9cd6:	9300      	str	r3, [sp, #0]
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
    9cd8:	4e4e      	ldr	r6, [pc, #312]	; (9e14 <usb_serial_write.part.1+0x158>)
    9cda:	f8b8 3000 	ldrh.w	r3, [r8]
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9cde:	f8df a150 	ldr.w	sl, [pc, #336]	; 9e30 <usb_serial_write.part.1+0x174>
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
	do {
		SCB_CACHE_DCCIMVAC = location;
    9ce2:	f8df b150 	ldr.w	fp, [pc, #336]	; 9e34 <usb_serial_write.part.1+0x178>
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
    9ce6:	4a4c      	ldr	r2, [pc, #304]	; (9e18 <usb_serial_write.part.1+0x15c>)
    9ce8:	7814      	ldrb	r4, [r2, #0]
    9cea:	4a4c      	ldr	r2, [pc, #304]	; (9e1c <usb_serial_write.part.1+0x160>)
    9cec:	eb02 1744 	add.w	r7, r2, r4, lsl #5
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9cf0:	2b00      	cmp	r3, #0
    9cf2:	d16e      	bne.n	9dd2 <usb_serial_write.part.1+0x116>
    9cf4:	461d      	mov	r5, r3
    9cf6:	461c      	mov	r4, r3
    9cf8:	e014      	b.n	9d24 <usb_serial_write.part.1+0x68>
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9cfa:	f899 3000 	ldrb.w	r3, [r9]
				}
				tx_available = TX_SIZE;
				transmit_previous_timeout = 0;
				break;
			}
			if (!waiting) {
    9cfe:	b904      	cbnz	r4, 9d02 <usb_serial_write.part.1+0x46>
				wait_begin_at = systick_millis_count;
    9d00:	6835      	ldr	r5, [r6, #0]
    9d02:	2401      	movs	r4, #1
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9d04:	2b00      	cmp	r3, #0
    9d06:	d15e      	bne.n	9dc6 <usb_serial_write.part.1+0x10a>
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
    9d08:	6833      	ldr	r3, [r6, #0]
    9d0a:	1b5b      	subs	r3, r3, r5
    9d0c:	2b78      	cmp	r3, #120	; 0x78
    9d0e:	d879      	bhi.n	9e04 <usb_serial_write.part.1+0x148>
				//printf("tx head=%d\n", tx_head);
				//printf("TXFILLTUNING=%08lX\n", USB1_TXFILLTUNING);
				//usb_print_transfer_log();
				//while (1) ;
			}
			if (!usb_configuration) return sent;
    9d10:	f89a 3000 	ldrb.w	r3, [sl]
    9d14:	2b00      	cmp	r3, #0
    9d16:	d056      	beq.n	9dc6 <usb_serial_write.part.1+0x10a>
			yield();
    9d18:	f000 fbfc 	bl	a514 <yield>
	if (!usb_configuration) return 0;
	while (size > 0) {
		transfer_t *xfer = tx_transfer + tx_head;
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
    9d1c:	f8b8 3000 	ldrh.w	r3, [r8]
    9d20:	2b00      	cmp	r3, #0
    9d22:	d154      	bne.n	9dce <usb_serial_write.part.1+0x112>
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
    9d24:	4638      	mov	r0, r7
    9d26:	f7ff febf 	bl	9aa8 <usb_transfer_status>
			if (!(status & 0x80)) {
    9d2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
			}
			if (!waiting) {
				wait_begin_at = systick_millis_count;
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
    9d2e:	4a3c      	ldr	r2, [pc, #240]	; (9e20 <usb_serial_write.part.1+0x164>)
		int waiting=0;
		uint32_t wait_begin_at=0;
		while (!tx_available) {
			//digitalWriteFast(3, HIGH);
			uint32_t status = usb_transfer_status(xfer);
			if (!(status & 0x80)) {
    9d30:	d1e3      	bne.n	9cfa <usb_serial_write.part.1+0x3e>
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9d32:	f44f 6300 	mov.w	r3, #2048	; 0x800
    9d36:	4a38      	ldr	r2, [pc, #224]	; (9e18 <usb_serial_write.part.1+0x15c>)
				transmit_previous_timeout = 0;
    9d38:	f889 0000 	strb.w	r0, [r9]
    9d3c:	7814      	ldrb	r4, [r2, #0]
    9d3e:	461a      	mov	r2, r3
				if (status & 0x68) {
					// TODO: what if status has errors???
					printf("ERROR status = %x, i=%d, ms=%u\n",
						status, tx_head, systick_millis_count);
				}
				tx_available = TX_SIZE;
    9d40:	f8a8 3000 	strh.w	r3, [r8]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9d44:	02e4      	lsls	r4, r4, #11
		if (size >= tx_available) {
    9d46:	9d01      	ldr	r5, [sp, #4]
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9d48:	4936      	ldr	r1, [pc, #216]	; (9e24 <usb_serial_write.part.1+0x168>)
    9d4a:	4420      	add	r0, r4
		if (size >= tx_available) {
    9d4c:	4295      	cmp	r5, r2
			}
			if (!usb_configuration) return sent;
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
    9d4e:	4408      	add	r0, r1
		if (size >= tx_available) {
    9d50:	d343      	bcc.n	9dda <usb_serial_write.part.1+0x11e>
			memcpy(txdata, data, tx_available);
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    9d52:	440c      	add	r4, r1
			yield();
		}
		//digitalWriteFast(3, LOW);
		uint8_t *txdata = txbuffer + (tx_head * TX_SIZE) + (TX_SIZE - tx_available);
		if (size >= tx_available) {
			memcpy(txdata, data, tx_available);
    9d54:	9902      	ldr	r1, [sp, #8]
    9d56:	f7fe fe7d 	bl	8a54 <memcpy>
			//*(txbuffer + (tx_head * TX_SIZE)) = 'A' + tx_head; // to see which buffer
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
    9d5a:	2300      	movs	r3, #0
    9d5c:	4621      	mov	r1, r4
    9d5e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    9d62:	4638      	mov	r0, r7
    9d64:	f7ff fe62 	bl	9a2c <usb_prepare_transfer>
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    9d68:	f024 031f 	bic.w	r3, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
    9d6c:	f504 6400 	add.w	r4, r4, #2048	; 0x800
	asm volatile("": : :"memory");
	asm("dsb");
    9d70:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    9d74:	f8cb 3000 	str.w	r3, [fp]
		location += 32;
    9d78:	3320      	adds	r3, #32
	} while (location < end_addr);
    9d7a:	429c      	cmp	r4, r3
    9d7c:	d8fa      	bhi.n	9d74 <usb_serial_write.part.1+0xb8>
	asm("dsb");
    9d7e:	f3bf 8f4f 	dsb	sy
	asm("isb");
    9d82:	f3bf 8f6f 	isb	sy
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
    9d86:	2004      	movs	r0, #4
    9d88:	4639      	mov	r1, r7
    9d8a:	f7ff fe67 	bl	9a5c <usb_transmit>
			if (++tx_head >= TX_NUM) tx_head = 0;
    9d8e:	4b22      	ldr	r3, [pc, #136]	; (9e18 <usb_serial_write.part.1+0x15c>)
    9d90:	4a21      	ldr	r2, [pc, #132]	; (9e18 <usb_serial_write.part.1+0x15c>)
			size -= tx_available;
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
    9d92:	2100      	movs	r1, #0
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9d94:	781b      	ldrb	r3, [r3, #0]
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9d96:	4824      	ldr	r0, [pc, #144]	; (9e28 <usb_serial_write.part.1+0x16c>)
			//*(txbuffer + (tx_head * TX_SIZE) + 1) = ' '; // really see it
			uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
    9d98:	3301      	adds	r3, #1
    9d9a:	b2db      	uxtb	r3, r3
    9d9c:	2b03      	cmp	r3, #3
    9d9e:	bf88      	it	hi
    9da0:	2300      	movhi	r3, #0
    9da2:	7013      	strb	r3, [r2, #0]
			size -= tx_available;
    9da4:	f8b8 2000 	ldrh.w	r2, [r8]
			sent += tx_available;
    9da8:	9b00      	ldr	r3, [sp, #0]
			data += tx_available;
			tx_available = 0;
    9daa:	f8a8 1000 	strh.w	r1, [r8]
			usb_prepare_transfer(xfer, txbuf, TX_SIZE, 0);
			arm_dcache_flush_delete(txbuf, TX_SIZE);
			usb_transmit(CDC_TX_ENDPOINT, xfer);
			if (++tx_head >= TX_NUM) tx_head = 0;
			size -= tx_available;
			sent += tx_available;
    9dae:	4413      	add	r3, r2
    9db0:	9300      	str	r3, [sp, #0]
			data += tx_available;
    9db2:	9b02      	ldr	r3, [sp, #8]
    9db4:	4413      	add	r3, r2
    9db6:	9302      	str	r3, [sp, #8]
    9db8:	460b      	mov	r3, r1
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
}

static void timer_stop(void)
{
	USB1_GPTIMER0CTRL = 0;
    9dba:	f8c0 1084 	str.w	r1, [r0, #132]	; 0x84
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9dbe:	9901      	ldr	r1, [sp, #4]
    9dc0:	1a8a      	subs	r2, r1, r2
    9dc2:	9201      	str	r2, [sp, #4]
    9dc4:	d18f      	bne.n	9ce6 <usb_serial_write.part.1+0x2a>
    9dc6:	9800      	ldr	r0, [sp, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9dc8:	b005      	add	sp, #20
    9dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    9dce:	4a12      	ldr	r2, [pc, #72]	; (9e18 <usb_serial_write.part.1+0x15c>)
    9dd0:	7814      	ldrb	r4, [r2, #0]
    9dd2:	461a      	mov	r2, r3
    9dd4:	f5c3 6000 	rsb	r0, r3, #2048	; 0x800
    9dd8:	e7b4      	b.n	9d44 <usb_serial_write.part.1+0x88>
			sent += tx_available;
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
    9dda:	9c01      	ldr	r4, [sp, #4]
    9ddc:	9902      	ldr	r1, [sp, #8]
    9dde:	4622      	mov	r2, r4
    9de0:	9303      	str	r3, [sp, #12]
    9de2:	f7fe fe37 	bl	8a54 <memcpy>
			tx_available -= size;
    9de6:	9b03      	ldr	r3, [sp, #12]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9de8:	4a0f      	ldr	r2, [pc, #60]	; (9e28 <usb_serial_write.part.1+0x16c>)
    9dea:	f04f 4140 	mov.w	r1, #3221225472	; 0xc0000000
			data += tx_available;
			tx_available = 0;
			timer_stop();
		} else {
			memcpy(txdata, data, size);
			tx_available -= size;
    9dee:	1b1b      	subs	r3, r3, r4
    9df0:	f8a8 3000 	strh.w	r3, [r8]
    9df4:	9b00      	ldr	r3, [sp, #0]
}

static void timer_start_oneshot(void)
{
	// restarts timer if already running (retriggerable one-shot)
	USB1_GPTIMER0CTRL = USB_GPTIMERCTRL_GPTRUN | USB_GPTIMERCTRL_GPTRST;
    9df6:	f8c2 1084 	str.w	r1, [r2, #132]	; 0x84
    9dfa:	4618      	mov	r0, r3
    9dfc:	4420      	add	r0, r4
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9dfe:	b005      	add	sp, #20
    9e00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9e04:	2301      	movs	r3, #1
				return sent;
    9e06:	9800      	ldr	r0, [sp, #0]
				waiting = 1;
			}
			if (transmit_previous_timeout) return sent;
			if (systick_millis_count - wait_begin_at > TX_TIMEOUT_MSEC) {
				// waited too long, assume the USB host isn't listening
				transmit_previous_timeout = 1;
    9e08:	7013      	strb	r3, [r2, #0]
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    9e0a:	b005      	add	sp, #20
    9e0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
	while (size > 0) {
    9e10:	9801      	ldr	r0, [sp, #4]
    9e12:	e7d9      	b.n	9dc8 <usb_serial_write.part.1+0x10c>
    9e14:	20036ca0 	.word	0x20036ca0
    9e18:	20036cff 	.word	0x20036cff
    9e1c:	20036e40 	.word	0x20036e40
    9e20:	20036e25 	.word	0x20036e25
    9e24:	20201060 	.word	0x20201060
    9e28:	402e0000 	.word	0x402e0000
    9e2c:	20036e26 	.word	0x20036e26
    9e30:	20036ce8 	.word	0x20036ce8
    9e34:	e000ef70 	.word	0xe000ef70

00009e38 <usb_serial_reset>:
static void rx_queue_transfer(int i);
static void rx_event(transfer_t *t);


void usb_serial_reset(void)
{
    9e38:	4770      	bx	lr
    9e3a:	bf00      	nop

00009e3c <usb_serial_configure>:
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    9e3c:	4b31      	ldr	r3, [pc, #196]	; (9f04 <usb_serial_configure+0xc8>)
	printf("usb_serial_reset\n");
	// deallocate all transfer descriptors
}

void usb_serial_configure(void)
{
    9e3e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    9e42:	781b      	ldrb	r3, [r3, #0]
		tx_packet_size = CDC_TX_SIZE_480;
    9e44:	4f30      	ldr	r7, [pc, #192]	; (9f08 <usb_serial_configure+0xcc>)
void usb_serial_configure(void)
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
    9e46:	2b00      	cmp	r3, #0
    9e48:	d054      	beq.n	9ef4 <usb_serial_configure+0xb8>
		tx_packet_size = CDC_TX_SIZE_480;
    9e4a:	f44f 7300 	mov.w	r3, #512	; 0x200
		rx_packet_size = CDC_RX_SIZE_480;
    9e4e:	f8df 80ec 	ldr.w	r8, [pc, #236]	; 9f3c <usb_serial_configure+0x100>
{
	int i;

	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
    9e52:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_480;
    9e54:	f8a8 3000 	strh.w	r3, [r8]
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9e58:	2100      	movs	r1, #0
    9e5a:	2280      	movs	r2, #128	; 0x80
    9e5c:	482b      	ldr	r0, [pc, #172]	; (9f0c <usb_serial_configure+0xd0>)
	tx_head = 0;
    9e5e:	460d      	mov	r5, r1
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9e60:	4e2b      	ldr	r6, [pc, #172]	; (9f10 <usb_serial_configure+0xd4>)
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
    9e62:	f001 fae3 	bl	b42c <memset>
	tx_head = 0;
    9e66:	4c2b      	ldr	r4, [pc, #172]	; (9f14 <usb_serial_configure+0xd8>)
	tx_available = 0;
    9e68:	4b2b      	ldr	r3, [pc, #172]	; (9f18 <usb_serial_configure+0xdc>)
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9e6a:	4629      	mov	r1, r5
    9e6c:	f44f 7280 	mov.w	r2, #256	; 0x100
    9e70:	482a      	ldr	r0, [pc, #168]	; (9f1c <usb_serial_configure+0xe0>)
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
    9e72:	7025      	strb	r5, [r4, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9e74:	462c      	mov	r4, r5
		tx_packet_size = CDC_TX_SIZE_12;
		rx_packet_size = CDC_RX_SIZE_12;
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
    9e76:	801d      	strh	r5, [r3, #0]
	memset(rx_transfer, 0, sizeof(rx_transfer));
    9e78:	f001 fad8 	bl	b42c <memset>
	memset(rx_count, 0, sizeof(rx_count));
    9e7c:	6035      	str	r5, [r6, #0]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9e7e:	462b      	mov	r3, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9e80:	6075      	str	r5, [r6, #4]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9e82:	462a      	mov	r2, r5
	}
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
    9e84:	60b5      	str	r5, [r6, #8]
    9e86:	60f5      	str	r5, [r6, #12]
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    9e88:	4925      	ldr	r1, [pc, #148]	; (9f20 <usb_serial_configure+0xe4>)
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    9e8a:	4e26      	ldr	r6, [pc, #152]	; (9f24 <usb_serial_configure+0xe8>)
	rx_head = 0;
	rx_tail = 0;
    9e8c:	4826      	ldr	r0, [pc, #152]	; (9f28 <usb_serial_configure+0xec>)
	rx_available = 0;
    9e8e:	f8df e0b0 	ldr.w	lr, [pc, #176]	; 9f40 <usb_serial_configure+0x104>
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
    9e92:	700d      	strb	r5, [r1, #0]
	rx_tail = 0;
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9e94:	2110      	movs	r1, #16
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
	rx_head = 0;
	rx_tail = 0;
    9e96:	7005      	strb	r5, [r0, #0]
	rx_available = 0;
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9e98:	2002      	movs	r0, #2
	memset(tx_transfer, 0, sizeof(tx_transfer));
	tx_head = 0;
	tx_available = 0;
	memset(rx_transfer, 0, sizeof(rx_transfer));
	memset(rx_count, 0, sizeof(rx_count));
	memset(rx_index, 0, sizeof(rx_index));
    9e9a:	6035      	str	r5, [r6, #0]
    9e9c:	6075      	str	r5, [r6, #4]
    9e9e:	60b5      	str	r5, [r6, #8]
    9ea0:	60f5      	str	r5, [r6, #12]
	rx_head = 0;
	rx_tail = 0;
	rx_available = 0;
    9ea2:	f8ce 5000 	str.w	r5, [lr]
	usb_config_tx(CDC_ACM_ENDPOINT, CDC_ACM_SIZE, 0, NULL); // size same 12 & 480
    9ea6:	f7ff fd8d 	bl	99c4 <usb_config_tx>
	usb_config_rx(CDC_RX_ENDPOINT, rx_packet_size, 0, rx_event);
    9eaa:	f8b8 1000 	ldrh.w	r1, [r8]
    9eae:	462a      	mov	r2, r5
    9eb0:	4b1e      	ldr	r3, [pc, #120]	; (9f2c <usb_serial_configure+0xf0>)
    9eb2:	2003      	movs	r0, #3
    9eb4:	f7ff fd54 	bl	9960 <usb_config_rx>
	usb_config_tx(CDC_TX_ENDPOINT, tx_packet_size, 1, NULL);
    9eb8:	462b      	mov	r3, r5
    9eba:	8839      	ldrh	r1, [r7, #0]
    9ebc:	2201      	movs	r2, #1
    9ebe:	2004      	movs	r0, #4
    9ec0:	f7ff fd80 	bl	99c4 <usb_config_tx>
	for (i=0; i < RX_NUM; i++) rx_queue_transfer(i);
    9ec4:	4620      	mov	r0, r4
    9ec6:	3401      	adds	r4, #1
    9ec8:	f7ff fe1c 	bl	9b04 <rx_queue_transfer>
    9ecc:	2c08      	cmp	r4, #8
    9ece:	d1f9      	bne.n	9ec4 <usb_serial_configure+0x88>
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
	USB1_GPTIMER0CTRL = 0;
    9ed0:	4b17      	ldr	r3, [pc, #92]	; (9f30 <usb_serial_configure+0xf4>)
	USB1_GPTIMER0LD = microseconds - 1;
    9ed2:	224a      	movs	r2, #74	; 0x4a
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    9ed4:	4817      	ldr	r0, [pc, #92]	; (9f34 <usb_serial_configure+0xf8>)
	USB1_GPTIMER0CTRL = 0;
    9ed6:	2100      	movs	r1, #0
static void timer_start_oneshot();
static void timer_stop();

static void timer_config(void (*callback)(void), uint32_t microseconds)
{
	usb_timer0_callback = callback;
    9ed8:	4c17      	ldr	r4, [pc, #92]	; (9f38 <usb_serial_configure+0xfc>)
    9eda:	6004      	str	r4, [r0, #0]
	USB1_GPTIMER0CTRL = 0;
    9edc:	f8c3 1084 	str.w	r1, [r3, #132]	; 0x84
	USB1_GPTIMER0LD = microseconds - 1;
    9ee0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
	USB1_USBINTR |= USB_USBINTR_TIE0;
    9ee4:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
    9ee8:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
    9eec:	f8c3 2148 	str.w	r2, [r3, #328]	; 0x148
    9ef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    9ef4:	2340      	movs	r3, #64	; 0x40
		rx_packet_size = CDC_RX_SIZE_12;
    9ef6:	f8df 8044 	ldr.w	r8, [pc, #68]	; 9f3c <usb_serial_configure+0x100>
	printf("usb_serial_configure\n");
	if (usb_high_speed) {
		tx_packet_size = CDC_TX_SIZE_480;
		rx_packet_size = CDC_RX_SIZE_480;
	} else {
		tx_packet_size = CDC_TX_SIZE_12;
    9efa:	803b      	strh	r3, [r7, #0]
		rx_packet_size = CDC_RX_SIZE_12;
    9efc:	f8a8 3000 	strh.w	r3, [r8]
    9f00:	e7aa      	b.n	9e58 <usb_serial_configure+0x1c>
    9f02:	bf00      	nop
    9f04:	20036cc4 	.word	0x20036cc4
    9f08:	20036cfc 	.word	0x20036cfc
    9f0c:	20036e40 	.word	0x20036e40
    9f10:	20036e10 	.word	0x20036e10
    9f14:	20036cff 	.word	0x20036cff
    9f18:	20036e26 	.word	0x20036e26
    9f1c:	20036d00 	.word	0x20036d00
    9f20:	20036e24 	.word	0x20036e24
    9f24:	20036cec 	.word	0x20036cec
    9f28:	20036e00 	.word	0x20036e00
    9f2c:	00009b71 	.word	0x00009b71
    9f30:	402e0000 	.word	0x402e0000
    9f34:	20036cb4 	.word	0x20036cb4
    9f38:	00009c25 	.word	0x00009c25
    9f3c:	20036e0e 	.word	0x20036e0e
    9f40:	20036e20 	.word	0x20036e20

00009f44 <usb_serial_read>:
int usb_serial_read(void *buffer, uint32_t size)
{
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    9f44:	4b31      	ldr	r3, [pc, #196]	; (a00c <usb_serial_read+0xc8>)
    9f46:	f44f 3200 	mov.w	r2, #131072	; 0x20000

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    9f4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
    9f4e:	601a      	str	r2, [r3, #0]

//static int maxtimes=0;

// read a block of bytes to a buffer
int usb_serial_read(void *buffer, uint32_t size)
{
    9f50:	b083      	sub	sp, #12
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    9f52:	4b2f      	ldr	r3, [pc, #188]	; (a010 <usb_serial_read+0xcc>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    9f54:	4689      	mov	r9, r1
	uint8_t *p = (uint8_t *)buffer;
	uint32_t count=0;

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
    9f56:	781c      	ldrb	r4, [r3, #0]
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    9f58:	2900      	cmp	r1, #0
    9f5a:	d053      	beq.n	a004 <usb_serial_read+0xc0>
    9f5c:	4b2d      	ldr	r3, [pc, #180]	; (a014 <usb_serial_read+0xd0>)
    9f5e:	b2e4      	uxtb	r4, r4
    9f60:	781b      	ldrb	r3, [r3, #0]
    9f62:	429c      	cmp	r4, r3
    9f64:	d050      	beq.n	a008 <usb_serial_read+0xc4>
    9f66:	4682      	mov	sl, r0
    9f68:	2700      	movs	r7, #0
    9f6a:	f8df b0c0 	ldr.w	fp, [pc, #192]	; a02c <usb_serial_read+0xe8>
		if (++tail > RX_NUM) tail = 0;
    9f6e:	3401      	adds	r4, #1
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9f70:	4b29      	ldr	r3, [pc, #164]	; (a018 <usb_serial_read+0xd4>)
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
    9f72:	ebc7 0809 	rsb	r8, r7, r9
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9f76:	4650      	mov	r0, sl
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    9f78:	2c09      	cmp	r4, #9
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9f7a:	9301      	str	r3, [sp, #4]
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
    9f7c:	4b27      	ldr	r3, [pc, #156]	; (a01c <usb_serial_read+0xd8>)
	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
    9f7e:	bf28      	it	cs
    9f80:	2400      	movcs	r4, #0
		uint32_t i = rx_list[tail];
    9f82:	5d1d      	ldrb	r5, [r3, r4]
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9f84:	4b24      	ldr	r3, [pc, #144]	; (a018 <usb_serial_read+0xd4>)
    9f86:	f833 e015 	ldrh.w	lr, [r3, r5, lsl #1]
    9f8a:	4b25      	ldr	r3, [pc, #148]	; (a020 <usb_serial_read+0xdc>)
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9f8c:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9f90:	f833 6015 	ldrh.w	r6, [r3, r5, lsl #1]
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9f94:	4b23      	ldr	r3, [pc, #140]	; (a024 <usb_serial_read+0xe0>)
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
    9f96:	ebce 0606 	rsb	r6, lr, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9f9a:	4419      	add	r1, r3
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    9f9c:	45b0      	cmp	r8, r6
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9f9e:	4632      	mov	r2, r6
			p += avail;
			rx_available -= avail;
			count += avail;
    9fa0:	4437      	add	r7, r6
		uint32_t i = rx_list[tail];
		uint32_t len = size - count;
		uint32_t avail = rx_count[i] - rx_index[i];
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
    9fa2:	d219      	bcs.n	9fd8 <usb_serial_read+0x94>
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
    9fa4:	eb0e 2145 	add.w	r1, lr, r5, lsl #9
    9fa8:	4642      	mov	r2, r8
    9faa:	4419      	add	r1, r3
    9fac:	f7fe fd52 	bl	8a54 <memcpy>
			rx_available -= len;
			rx_index[i] += len;
    9fb0:	9b01      	ldr	r3, [sp, #4]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    9fb2:	f8db 1000 	ldr.w	r1, [fp]
    9fb6:	4648      	mov	r0, r9
			rx_index[i] += len;
    9fb8:	f833 2015 	ldrh.w	r2, [r3, r5, lsl #1]
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    9fbc:	ebc8 0101 	rsb	r1, r8, r1
			rx_index[i] += len;
    9fc0:	4490      	add	r8, r2
		 //printf("usb_serial_read, count=%d, size=%d, i=%d, index=%d, len=%d, avail=%d, c=%c\n",
		  //count, size, i, rx_index[i], len, avail, rx_buffer[i * CDC_RX_SIZE_480]);
		if (avail > len) {
			// partially consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], len);
			rx_available -= len;
    9fc2:	f8cb 1000 	str.w	r1, [fp]
			rx_index[i] += len;
    9fc6:	f823 8015 	strh.w	r8, [r3, r5, lsl #1]
			count += avail;
			rx_tail = tail;
			rx_queue_transfer(i);
		}
	}
	NVIC_ENABLE_IRQ(IRQ_USB1);
    9fca:	4b17      	ldr	r3, [pc, #92]	; (a028 <usb_serial_read+0xe4>)
    9fcc:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    9fd0:	601a      	str	r2, [r3, #0]
	return count;
}
    9fd2:	b003      	add	sp, #12
    9fd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			rx_available -= len;
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
    9fd8:	f7fe fd3c 	bl	8a54 <memcpy>
			p += avail;
			rx_available -= avail;
    9fdc:	f8db 2000 	ldr.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    9fe0:	b2e3      	uxtb	r3, r4
			rx_queue_transfer(i);
    9fe2:	4628      	mov	r0, r5
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
			rx_available -= avail;
    9fe4:	1b92      	subs	r2, r2, r6
			rx_index[i] += len;
			count += len;
		} else {
			// fully consume this packet
			memcpy(p, rx_buffer + i * CDC_RX_SIZE_480 + rx_index[i], avail);
			p += avail;
    9fe6:	44b2      	add	sl, r6
			rx_available -= avail;
    9fe8:	f8cb 2000 	str.w	r2, [fp]
			count += avail;
			rx_tail = tail;
    9fec:	4a08      	ldr	r2, [pc, #32]	; (a010 <usb_serial_read+0xcc>)
    9fee:	7013      	strb	r3, [r2, #0]
			rx_queue_transfer(i);
    9ff0:	f7ff fd88 	bl	9b04 <rx_queue_transfer>

	NVIC_DISABLE_IRQ(IRQ_USB1);
	//if (++maxtimes > 15) while (1) ;
	uint32_t tail = rx_tail;
	//printf("usb_serial_read, size=%d, tail=%d, head=%d\n", size, tail, rx_head);
	while (count < size && tail != rx_head) {
    9ff4:	45b9      	cmp	r9, r7
    9ff6:	d903      	bls.n	a000 <usb_serial_read+0xbc>
    9ff8:	4b06      	ldr	r3, [pc, #24]	; (a014 <usb_serial_read+0xd0>)
    9ffa:	781b      	ldrb	r3, [r3, #0]
    9ffc:	429c      	cmp	r4, r3
    9ffe:	d1b6      	bne.n	9f6e <usb_serial_read+0x2a>
    a000:	4638      	mov	r0, r7
    a002:	e7e2      	b.n	9fca <usb_serial_read+0x86>
    a004:	4608      	mov	r0, r1
    a006:	e7e0      	b.n	9fca <usb_serial_read+0x86>
    a008:	2000      	movs	r0, #0
    a00a:	e7de      	b.n	9fca <usb_serial_read+0x86>
    a00c:	e000e18c 	.word	0xe000e18c
    a010:	20036e00 	.word	0x20036e00
    a014:	20036e24 	.word	0x20036e24
    a018:	20036cec 	.word	0x20036cec
    a01c:	20036e04 	.word	0x20036e04
    a020:	20036e10 	.word	0x20036e10
    a024:	20200060 	.word	0x20200060
    a028:	e000e10c 	.word	0xe000e10c
    a02c:	20036e20 	.word	0x20036e20

0000a030 <usb_serial_peekchar>:
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a030:	4b0b      	ldr	r3, [pc, #44]	; (a060 <usb_serial_peekchar+0x30>)
	if (tail == rx_head) return -1;
    a032:	4a0c      	ldr	r2, [pc, #48]	; (a064 <usb_serial_peekchar+0x34>)
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a034:	781b      	ldrb	r3, [r3, #0]
	if (tail == rx_head) return -1;
    a036:	7812      	ldrb	r2, [r2, #0]
}

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
    a038:	b2db      	uxtb	r3, r3
	if (tail == rx_head) return -1;
    a03a:	4293      	cmp	r3, r2
    a03c:	d00d      	beq.n	a05a <usb_serial_peekchar+0x2a>
	if (++tail > RX_NUM) tail = 0;
    a03e:	3301      	adds	r3, #1
	uint32_t i = rx_list[tail];
    a040:	4809      	ldr	r0, [pc, #36]	; (a068 <usb_serial_peekchar+0x38>)
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a042:	4a0a      	ldr	r2, [pc, #40]	; (a06c <usb_serial_peekchar+0x3c>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    a044:	2b09      	cmp	r3, #9
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a046:	490a      	ldr	r1, [pc, #40]	; (a070 <usb_serial_peekchar+0x40>)
// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
	if (++tail > RX_NUM) tail = 0;
    a048:	bf28      	it	cs
    a04a:	2300      	movcs	r3, #0
	uint32_t i = rx_list[tail];
    a04c:	5cc3      	ldrb	r3, [r0, r3]
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
    a04e:	f831 1013 	ldrh.w	r1, [r1, r3, lsl #1]
    a052:	eb02 2343 	add.w	r3, r2, r3, lsl #9
    a056:	5c58      	ldrb	r0, [r3, r1]
    a058:	4770      	bx	lr

// peek at the next character, or -1 if nothing received
int usb_serial_peekchar(void)
{
	uint32_t tail = rx_tail;
	if (tail == rx_head) return -1;
    a05a:	f04f 30ff 	mov.w	r0, #4294967295
	if (++tail > RX_NUM) tail = 0;
	uint32_t i = rx_list[tail];
	return rx_buffer[i * CDC_RX_SIZE_480 + rx_index[i]];
}
    a05e:	4770      	bx	lr
    a060:	20036e00 	.word	0x20036e00
    a064:	20036e24 	.word	0x20036e24
    a068:	20036e04 	.word	0x20036e04
    a06c:	20200060 	.word	0x20200060
    a070:	20036cec 	.word	0x20036cec

0000a074 <usb_serial_available>:

// number of bytes available in the receive buffer
int usb_serial_available(void)
{
	return rx_available;
    a074:	4b01      	ldr	r3, [pc, #4]	; (a07c <usb_serial_available+0x8>)
    a076:	6818      	ldr	r0, [r3, #0]
}
    a078:	4770      	bx	lr
    a07a:	bf00      	nop
    a07c:	20036e20 	.word	0x20036e20

0000a080 <usb_serial_flush_input>:

// discard any buffered input
void usb_serial_flush_input(void)
{
    a080:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	uint32_t tail = rx_tail;
    a084:	4e15      	ldr	r6, [pc, #84]	; (a0dc <usb_serial_flush_input+0x5c>)
	while (tail != rx_head) {
    a086:	4d16      	ldr	r5, [pc, #88]	; (a0e0 <usb_serial_flush_input+0x60>)
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    a088:	7834      	ldrb	r4, [r6, #0]
	while (tail != rx_head) {
    a08a:	782b      	ldrb	r3, [r5, #0]
}

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
    a08c:	b2e4      	uxtb	r4, r4
	while (tail != rx_head) {
    a08e:	429c      	cmp	r4, r3
    a090:	d021      	beq.n	a0d6 <usb_serial_flush_input+0x56>
    a092:	f8df 9054 	ldr.w	r9, [pc, #84]	; a0e8 <usb_serial_flush_input+0x68>
    a096:	f8df b054 	ldr.w	fp, [pc, #84]	; a0ec <usb_serial_flush_input+0x6c>
    a09a:	f8df 8054 	ldr.w	r8, [pc, #84]	; a0f0 <usb_serial_flush_input+0x70>
    a09e:	4f11      	ldr	r7, [pc, #68]	; (a0e4 <usb_serial_flush_input+0x64>)
		if (++tail > RX_NUM) tail = 0;
    a0a0:	3401      	adds	r4, #1
    a0a2:	2c08      	cmp	r4, #8
    a0a4:	fa5f fa84 	uxtb.w	sl, r4
    a0a8:	d901      	bls.n	a0ae <usb_serial_flush_input+0x2e>
    a0aa:	2400      	movs	r4, #0
    a0ac:	46a2      	mov	sl, r4
		uint32_t i = rx_list[tail];
    a0ae:	f819 1004 	ldrb.w	r1, [r9, r4]
		rx_available -= rx_count[i] - rx_index[i];
    a0b2:	f8db 2000 	ldr.w	r2, [fp]
    a0b6:	f838 3011 	ldrh.w	r3, [r8, r1, lsl #1]
		rx_queue_transfer(i);
    a0ba:	4608      	mov	r0, r1
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
		if (++tail > RX_NUM) tail = 0;
		uint32_t i = rx_list[tail];
		rx_available -= rx_count[i] - rx_index[i];
    a0bc:	f837 1011 	ldrh.w	r1, [r7, r1, lsl #1]
    a0c0:	1a5b      	subs	r3, r3, r1
    a0c2:	1ad3      	subs	r3, r2, r3
    a0c4:	f8cb 3000 	str.w	r3, [fp]
		rx_queue_transfer(i);
    a0c8:	f7ff fd1c 	bl	9b04 <rx_queue_transfer>
		rx_tail = tail;
    a0cc:	f886 a000 	strb.w	sl, [r6]

// discard any buffered input
void usb_serial_flush_input(void)
{
	uint32_t tail = rx_tail;
	while (tail != rx_head) {
    a0d0:	782b      	ldrb	r3, [r5, #0]
    a0d2:	429c      	cmp	r4, r3
    a0d4:	d1e4      	bne.n	a0a0 <usb_serial_flush_input+0x20>
    a0d6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    a0da:	bf00      	nop
    a0dc:	20036e00 	.word	0x20036e00
    a0e0:	20036e24 	.word	0x20036e24
    a0e4:	20036cec 	.word	0x20036cec
    a0e8:	20036e04 	.word	0x20036e04
    a0ec:	20036e20 	.word	0x20036e20
    a0f0:	20036e10 	.word	0x20036e10

0000a0f4 <usb_serial_getchar>:
}


// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
    a0f4:	b500      	push	{lr}
    a0f6:	b083      	sub	sp, #12
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
    a0f8:	2101      	movs	r1, #1
    a0fa:	f10d 0007 	add.w	r0, sp, #7
    a0fe:	f7ff ff21 	bl	9f44 <usb_serial_read>
    a102:	b120      	cbz	r0, a10e <usb_serial_getchar+0x1a>
    a104:	f89d 0007 	ldrb.w	r0, [sp, #7]
	return -1;
}
    a108:	b003      	add	sp, #12
    a10a:	f85d fb04 	ldr.w	pc, [sp], #4
// get the next character, or -1 if nothing received
int usb_serial_getchar(void)
{
	uint8_t c;
	if (usb_serial_read(&c, 1)) return c;
	return -1;
    a10e:	f04f 30ff 	mov.w	r0, #4294967295
    a112:	e7f9      	b.n	a108 <usb_serial_getchar+0x14>

0000a114 <usb_serial_putchar>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a114:	4b09      	ldr	r3, [pc, #36]	; (a13c <usb_serial_putchar+0x28>)
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a116:	b500      	push	{lr}
    a118:	b083      	sub	sp, #12
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a11a:	781b      	ldrb	r3, [r3, #0]
static uint8_t transmit_previous_timeout=0;


// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
    a11c:	f88d 0007 	strb.w	r0, [sp, #7]
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a120:	b923      	cbnz	r3, a12c <usb_serial_putchar+0x18>
    a122:	f003 00ff 	and.w	r0, r3, #255	; 0xff

// transmit a character.  0 returned on success, -1 on error
int usb_serial_putchar(uint8_t c)
{
	return usb_serial_write(&c, 1);
}
    a126:	b003      	add	sp, #12
    a128:	f85d fb04 	ldr.w	pc, [sp], #4
    a12c:	2101      	movs	r1, #1
    a12e:	f10d 0007 	add.w	r0, sp, #7
    a132:	f7ff fdc3 	bl	9cbc <usb_serial_write.part.1>
    a136:	b003      	add	sp, #12
    a138:	f85d fb04 	ldr.w	pc, [sp], #4
    a13c:	20036ce8 	.word	0x20036ce8

0000a140 <usb_serial_write>:
int usb_serial_write(const void *buffer, uint32_t size)
{
	uint32_t sent=0;
	const uint8_t *data = (const uint8_t *)buffer;

	if (!usb_configuration) return 0;
    a140:	4b04      	ldr	r3, [pc, #16]	; (a154 <usb_serial_write+0x14>)
    a142:	781b      	ldrb	r3, [r3, #0]
    a144:	f003 02ff 	and.w	r2, r3, #255	; 0xff
    a148:	b10b      	cbz	r3, a14e <usb_serial_write+0xe>
    a14a:	f7ff bdb7 	b.w	9cbc <usb_serial_write.part.1>
			size = 0;
			timer_start_oneshot();
		}
	}
	return sent;
}
    a14e:	4610      	mov	r0, r2
    a150:	4770      	bx	lr
    a152:	bf00      	nop
    a154:	20036ce8 	.word	0x20036ce8

0000a158 <usb_serial_write_buffer_free>:

int usb_serial_write_buffer_free(void)
{
    a158:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a15c:	2400      	movs	r4, #0
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
    a15e:	f8df 8040 	ldr.w	r8, [pc, #64]	; a1a0 <usb_serial_write_buffer_free+0x48>
    a162:	2301      	movs	r3, #1
    a164:	4d0c      	ldr	r5, [pc, #48]	; (a198 <usb_serial_write_buffer_free+0x40>)
	return sent;
}

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
    a166:	4627      	mov	r7, r4
    a168:	4e0c      	ldr	r6, [pc, #48]	; (a19c <usb_serial_write_buffer_free+0x44>)
	tx_noautoflush = 1;
    a16a:	f888 3000 	strb.w	r3, [r8]
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a16e:	7833      	ldrb	r3, [r6, #0]
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a170:	4628      	mov	r0, r5
    a172:	3520      	adds	r5, #32
int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
    a174:	42a3      	cmp	r3, r4

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a176:	f104 0401 	add.w	r4, r4, #1
		if (i == tx_head) continue;
    a17a:	d005      	beq.n	a188 <usb_serial_write_buffer_free+0x30>
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
    a17c:	f7ff fc94 	bl	9aa8 <usb_transfer_status>
    a180:	0603      	lsls	r3, r0, #24
    a182:	bf58      	it	pl
    a184:	f507 6700 	addpl.w	r7, r7, #2048	; 0x800

int usb_serial_write_buffer_free(void)
{
	uint32_t sum = 0;
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
    a188:	2c04      	cmp	r4, #4
    a18a:	d1f0      	bne.n	a16e <usb_serial_write_buffer_free+0x16>
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a18c:	2300      	movs	r3, #0
	return sum;
}
    a18e:	4638      	mov	r0, r7
	tx_noautoflush = 1;
	for (uint32_t i=0; i < TX_NUM; i++) {
		if (i == tx_head) continue;
		if (!(usb_transfer_status(tx_transfer + i) & 0x80)) sum += TX_SIZE;
	}
	tx_noautoflush = 0;
    a190:	f888 3000 	strb.w	r3, [r8]
	return sum;
}
    a194:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a198:	20036e40 	.word	0x20036e40
    a19c:	20036cff 	.word	0x20036cff
    a1a0:	20036cfe 	.word	0x20036cfe

0000a1a4 <usb_serial_flush_output>:

void usb_serial_flush_output(void)
{
    a1a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}

	if (!usb_configuration) return;
    a1a8:	4b1f      	ldr	r3, [pc, #124]	; (a228 <usb_serial_flush_output+0x84>)
    a1aa:	781b      	ldrb	r3, [r3, #0]
    a1ac:	b113      	cbz	r3, a1b4 <usb_serial_flush_output+0x10>
	if (tx_available == 0) return;
    a1ae:	4d1f      	ldr	r5, [pc, #124]	; (a22c <usb_serial_flush_output+0x88>)
    a1b0:	882a      	ldrh	r2, [r5, #0]
    a1b2:	b90a      	cbnz	r2, a1b8 <usb_serial_flush_output+0x14>
    a1b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a1b8:	f8df 8084 	ldr.w	r8, [pc, #132]	; a240 <usb_serial_flush_output+0x9c>
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
    a1bc:	f5c2 6900 	rsb	r9, r2, #2048	; 0x800
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a1c0:	4e1b      	ldr	r6, [pc, #108]	; (a230 <usb_serial_flush_output+0x8c>)
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a1c2:	f04f 0e01 	mov.w	lr, #1
	transfer_t *xfer = tx_transfer + tx_head;
    a1c6:	f898 1000 	ldrb.w	r1, [r8]
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a1ca:	464a      	mov	r2, r9

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a1cc:	4c19      	ldr	r4, [pc, #100]	; (a234 <usb_serial_flush_output+0x90>)
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a1ce:	2300      	movs	r3, #0
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
	transfer_t *xfer = tx_transfer + tx_head;
    a1d0:	eb06 1641 	add.w	r6, r6, r1, lsl #5
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a1d4:	4f18      	ldr	r7, [pc, #96]	; (a238 <usb_serial_flush_output+0x94>)
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
    a1d6:	eb04 24c1 	add.w	r4, r4, r1, lsl #11
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a1da:	4630      	mov	r0, r6
void usb_serial_flush_output(void)
{

	if (!usb_configuration) return;
	if (tx_available == 0) return;
	tx_noautoflush = 1;
    a1dc:	f887 e000 	strb.w	lr, [r7]
	transfer_t *xfer = tx_transfer + tx_head;
	uint8_t *txbuf = txbuffer + (tx_head * TX_SIZE);
	uint32_t txnum = TX_SIZE - tx_available;
	usb_prepare_transfer(xfer, txbuf, txnum, 0);
    a1e0:	4621      	mov	r1, r4
    a1e2:	f7ff fc23 	bl	9a2c <usb_prepare_transfer>
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
	uint32_t end_addr = (uint32_t)addr + size;
    a1e6:	eb09 0204 	add.w	r2, r9, r4
// any cached data written to memory, and then removed from the cache,
// because you no longer need to access the data after transmission.
__attribute__((always_inline, unused))
static inline void arm_dcache_flush_delete(void *addr, uint32_t size)
{
	uint32_t location = (uint32_t)addr & 0xFFFFFFE0;
    a1ea:	f024 011f 	bic.w	r1, r4, #31
	uint32_t end_addr = (uint32_t)addr + size;
	asm volatile("": : :"memory");
	asm("dsb");
    a1ee:	f3bf 8f4f 	dsb	sy
	do {
		SCB_CACHE_DCCIMVAC = location;
    a1f2:	4b12      	ldr	r3, [pc, #72]	; (a23c <usb_serial_flush_output+0x98>)
    a1f4:	6019      	str	r1, [r3, #0]
		location += 32;
    a1f6:	3120      	adds	r1, #32
	} while (location < end_addr);
    a1f8:	428a      	cmp	r2, r1
    a1fa:	d8fb      	bhi.n	a1f4 <usb_serial_flush_output+0x50>
	asm("dsb");
    a1fc:	f3bf 8f4f 	dsb	sy
	asm("isb");
    a200:	f3bf 8f6f 	isb	sy
	arm_dcache_flush_delete(txbuf, txnum);
	usb_transmit(CDC_TX_ENDPOINT, xfer);
    a204:	2004      	movs	r0, #4
    a206:	4631      	mov	r1, r6
    a208:	f7ff fc28 	bl	9a5c <usb_transmit>
	if (++tx_head >= TX_NUM) tx_head = 0;
    a20c:	f898 3000 	ldrb.w	r3, [r8]
    a210:	4a0b      	ldr	r2, [pc, #44]	; (a240 <usb_serial_flush_output+0x9c>)
    a212:	3301      	adds	r3, #1
    a214:	b2db      	uxtb	r3, r3
    a216:	2b03      	cmp	r3, #3
    a218:	bf88      	it	hi
    a21a:	2300      	movhi	r3, #0
    a21c:	7013      	strb	r3, [r2, #0]
	tx_available = 0;
    a21e:	2300      	movs	r3, #0
    a220:	802b      	strh	r3, [r5, #0]
	tx_noautoflush = 0;
    a222:	703b      	strb	r3, [r7, #0]
    a224:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    a228:	20036ce8 	.word	0x20036ce8
    a22c:	20036e26 	.word	0x20036e26
    a230:	20036e40 	.word	0x20036e40
    a234:	20201060 	.word	0x20201060
    a238:	20036cfe 	.word	0x20036cfe
    a23c:	e000ef70 	.word	0xe000ef70
    a240:	20036cff 	.word	0x20036cff

0000a244 <EventResponder::runFromInterrupt()>:
{
	EventResponder::runFromInterrupt();
}

void EventResponder::runFromInterrupt()
{
    a244:	b570      	push	{r4, r5, r6, lr}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a246:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    a24a:	b672      	cpsid	i
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a24c:	4c0c      	ldr	r4, [pc, #48]	; (a280 <EventResponder::runFromInterrupt()+0x3c>)
    a24e:	6823      	ldr	r3, [r4, #0]
		if (first) {
    a250:	b18b      	cbz	r3, a276 <EventResponder::runFromInterrupt()+0x32>
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a252:	4e0c      	ldr	r6, [pc, #48]	; (a284 <EventResponder::runFromInterrupt()+0x40>)
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
    a254:	2500      	movs	r5, #0
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
		if (first) {
			firstInterrupt = first->_next;
    a256:	695a      	ldr	r2, [r3, #20]
    a258:	6022      	str	r2, [r4, #0]
			if (firstInterrupt) {
    a25a:	b17a      	cbz	r2, a27c <EventResponder::runFromInterrupt()+0x38>
				firstInterrupt->_prev = nullptr;
    a25c:	6195      	str	r5, [r2, #24]
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a25e:	b901      	cbnz	r1, a262 <EventResponder::runFromInterrupt()+0x1e>
    a260:	b662      	cpsie	i
			} else {
				lastInterrupt = nullptr;
			}
			enableInterrupts(irq);
			first->_triggered = false;
    a262:	775d      	strb	r5, [r3, #29]
			(*(first->_function))(*first);
    a264:	4618      	mov	r0, r3
    a266:	689b      	ldr	r3, [r3, #8]
    a268:	4798      	blx	r3
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a26a:	f3ef 8110 	mrs	r1, PRIMASK
		__disable_irq();
    a26e:	b672      	cpsid	i

void EventResponder::runFromInterrupt()
{
	while (1) {
		bool irq = disableInterrupts();
		EventResponder *first = firstInterrupt;
    a270:	6823      	ldr	r3, [r4, #0]
		if (first) {
    a272:	2b00      	cmp	r3, #0
    a274:	d1ef      	bne.n	a256 <EventResponder::runFromInterrupt()+0x12>
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a276:	b901      	cbnz	r1, a27a <EventResponder::runFromInterrupt()+0x36>
    a278:	b662      	cpsie	i
    a27a:	bd70      	pop	{r4, r5, r6, pc}
			firstInterrupt = first->_next;
			if (firstInterrupt) {
				firstInterrupt->_prev = nullptr;
			} else {
				lastInterrupt = nullptr;
    a27c:	6032      	str	r2, [r6, #0]
    a27e:	e7ee      	b.n	a25e <EventResponder::runFromInterrupt()+0x1a>
    a280:	20036ec0 	.word	0x20036ec0
    a284:	20036ec4 	.word	0x20036ec4

0000a288 <pendablesrvreq_isr>:
	enableInterrupts(irq);
}

extern "C" void pendablesrvreq_isr(void)
{
	EventResponder::runFromInterrupt();
    a288:	f7ff bfdc 	b.w	a244 <EventResponder::runFromInterrupt()>

0000a28c <systick_isr>:
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a28c:	4a04      	ldr	r2, [pc, #16]	; (a2a0 <systick_isr+0x14>)
    a28e:	4b05      	ldr	r3, [pc, #20]	; (a2a4 <systick_isr+0x18>)
    a290:	6811      	ldr	r1, [r2, #0]
	systick_millis_count++;
    a292:	4a05      	ldr	r2, [pc, #20]	; (a2a8 <systick_isr+0x1c>)
extern "C" volatile uint32_t systick_millis_count;
extern "C" volatile uint32_t systick_cycle_count;
extern "C" uint32_t systick_safe_read; // micros() synchronization
extern "C" void systick_isr(void)
{
	systick_cycle_count = ARM_DWT_CYCCNT;
    a294:	6019      	str	r1, [r3, #0]
	systick_millis_count++;
    a296:	6813      	ldr	r3, [r2, #0]
    a298:	3301      	adds	r3, #1
    a29a:	6013      	str	r3, [r2, #0]
    a29c:	4770      	bx	lr
    a29e:	bf00      	nop
    a2a0:	e0001004 	.word	0xe0001004
    a2a4:	20036c98 	.word	0x20036c98
    a2a8:	20036ca0 	.word	0x20036ca0

0000a2ac <main>:
 */

#include <Arduino.h>

extern "C" int main(void)
{
    a2ac:	b508      	push	{r3, lr}
	}


#else
	// Arduino's main() function just calls setup() and loop()....
	setup();
    a2ae:	f7f7 fb93 	bl	19d8 <setup>
	while (1) {
		loop();
    a2b2:	f7f7 ff31 	bl	2118 <loop>
		yield();
    a2b6:	f000 f92d 	bl	a514 <yield>
    a2ba:	e7fa      	b.n	a2b2 <main+0x6>

0000a2bc <operator delete(void*, unsigned int)>:
    a2bc:	f000 bcf6 	b.w	acac <free>

0000a2c0 <Print::println()>:
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a2c0:	b510      	push	{r4, lr}
	uint8_t buf[2]={'\r', '\n'};
    a2c2:	4c06      	ldr	r4, [pc, #24]	; (a2dc <Print::println()+0x1c>)
	if (n < 0) return printNumber64(-n, 10, 1);
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
    a2c4:	b082      	sub	sp, #8
	uint8_t buf[2]={'\r', '\n'};
	return write(buf, 2);
    a2c6:	6803      	ldr	r3, [r0, #0]
    a2c8:	2202      	movs	r2, #2
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a2ca:	8824      	ldrh	r4, [r4, #0]
	return write(buf, 2);
    a2cc:	a901      	add	r1, sp, #4
    a2ce:	685b      	ldr	r3, [r3, #4]
	return printNumber64(n, 10, 0);
}

size_t Print::println(void)
{
	uint8_t buf[2]={'\r', '\n'};
    a2d0:	f8ad 4004 	strh.w	r4, [sp, #4]
	return write(buf, 2);
    a2d4:	4798      	blx	r3
}
    a2d6:	b002      	add	sp, #8
    a2d8:	bd10      	pop	{r4, pc}
    a2da:	bf00      	nop
    a2dc:	20000d8c 	.word	0x20000d8c

0000a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>:
	return vdprintf((int)this, (const char *)format, ap);
#endif
}

size_t Print::printNumber(unsigned long n, uint8_t base, uint8_t sign)
{
    a2e0:	b5f0      	push	{r4, r5, r6, r7, lr}
    a2e2:	4606      	mov	r6, r0
    a2e4:	b08b      	sub	sp, #44	; 0x2c
	uint8_t digit, i;

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
    a2e6:	2a00      	cmp	r2, #0
    a2e8:	d033      	beq.n	a352 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x72>
		return write((uint8_t)n);
	} else if (base == 1) {
		base = 10;
    a2ea:	2a01      	cmp	r2, #1
    a2ec:	bf08      	it	eq
    a2ee:	220a      	moveq	r2, #10
	}


	if (n == 0) {
    a2f0:	b351      	cbz	r1, a348 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x68>
    a2f2:	2521      	movs	r5, #33	; 0x21
    a2f4:	e000      	b.n	a2f8 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x18>
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
			n /= base;
			if (n == 0) break;
			i--;
    a2f6:	b2fd      	uxtb	r5, r7
    a2f8:	1e6f      	subs	r7, r5, #1
		buf[sizeof(buf) - 1] = '0';
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
    a2fa:	fbb1 f4f2 	udiv	r4, r1, r2
    a2fe:	fb02 1114 	mls	r1, r2, r4, r1
    a302:	b2c8      	uxtb	r0, r1
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a304:	2909      	cmp	r1, #9
    a306:	f100 0137 	add.w	r1, r0, #55	; 0x37
    a30a:	f100 0030 	add.w	r0, r0, #48	; 0x30
    a30e:	bf88      	it	hi
    a310:	b2c8      	uxtbhi	r0, r1
			n /= base;
			if (n == 0) break;
    a312:	4621      	mov	r1, r4
		i = sizeof(buf) - 1;
	} else {
		i = sizeof(buf) - 1;
		while (1) {
			digit = n % base;
			buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a314:	ac0a      	add	r4, sp, #40	; 0x28
    a316:	bf98      	it	ls
    a318:	b2c0      	uxtbls	r0, r0
    a31a:	442c      	add	r4, r5
    a31c:	f804 0c24 	strb.w	r0, [r4, #-36]
			n /= base;
			if (n == 0) break;
    a320:	2900      	cmp	r1, #0
    a322:	d1e8      	bne.n	a2f6 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x16>
			i--;
		}
	}
	if (sign) {
    a324:	b133      	cbz	r3, a334 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x54>
		i--;
    a326:	3d01      	subs	r5, #1
		buf[i] = '-';
    a328:	ab0a      	add	r3, sp, #40	; 0x28
    a32a:	222d      	movs	r2, #45	; 0x2d
			if (n == 0) break;
			i--;
		}
	}
	if (sign) {
		i--;
    a32c:	b2ed      	uxtb	r5, r5
		buf[i] = '-';
    a32e:	442b      	add	r3, r5
    a330:	f803 2c24 	strb.w	r2, [r3, #-36]
	}
	return write(buf + i, sizeof(buf) - i);
    a334:	6833      	ldr	r3, [r6, #0]
    a336:	a901      	add	r1, sp, #4
    a338:	f1c5 0222 	rsb	r2, r5, #34	; 0x22
    a33c:	4630      	mov	r0, r6
    a33e:	4429      	add	r1, r5
    a340:	685b      	ldr	r3, [r3, #4]
    a342:	4798      	blx	r3
}
    a344:	b00b      	add	sp, #44	; 0x2c
    a346:	bdf0      	pop	{r4, r5, r6, r7, pc}
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a348:	2230      	movs	r2, #48	; 0x30
		i = sizeof(buf) - 1;
    a34a:	2521      	movs	r5, #33	; 0x21
		base = 10;
	}


	if (n == 0) {
		buf[sizeof(buf) - 1] = '0';
    a34c:	f88d 2025 	strb.w	r2, [sp, #37]	; 0x25
    a350:	e7e8      	b.n	a324 <Print::printNumber(unsigned long, unsigned char, unsigned char)+0x44>

	// TODO: make these checks as inline, since base is
	// almost always a constant.  base = 0 (BYTE) should
	// inline as a call directly to write()
	if (base == 0) {
		return write((uint8_t)n);
    a352:	6803      	ldr	r3, [r0, #0]
    a354:	b2c9      	uxtb	r1, r1
    a356:	681b      	ldr	r3, [r3, #0]
    a358:	4798      	blx	r3
	if (sign) {
		i--;
		buf[i] = '-';
	}
	return write(buf + i, sizeof(buf) - i);
}
    a35a:	b00b      	add	sp, #44	; 0x2c
    a35c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a35e:	bf00      	nop

0000a360 <Print::print(long)>:

size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
    a360:	2900      	cmp	r1, #0
    a362:	db03      	blt.n	a36c <Print::print(long)+0xc>
	return count;
}

size_t Print::print(long n)
{
	uint8_t sign=0;
    a364:	2300      	movs	r3, #0

	if (n < 0) {
		sign = '-';
		n = -n;
	}
	return printNumber(n, 10, sign);
    a366:	220a      	movs	r2, #10
    a368:	f7ff bfba 	b.w	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
		n = -n;
    a36c:	4249      	negs	r1, r1
size_t Print::print(long n)
{
	uint8_t sign=0;

	if (n < 0) {
		sign = '-';
    a36e:	232d      	movs	r3, #45	; 0x2d
		n = -n;
	}
	return printNumber(n, 10, sign);
    a370:	220a      	movs	r2, #10
    a372:	f7ff bfb5 	b.w	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    a376:	bf00      	nop

0000a378 <Print::printFloat(double, unsigned char)>:
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a378:	eeb4 0b40 	vcmp.f64	d0, d0
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    a37c:	b570      	push	{r4, r5, r6, lr}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a37e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
	}
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
    a382:	4605      	mov	r5, r0
    a384:	ed2d 8b02 	vpush	{d8}
    a388:	b086      	sub	sp, #24
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a38a:	f180 8091 	bvs.w	a4b0 <Print::printFloat(double, unsigned char)+0x138>
    	if (isinf(number)) return print("inf");
    a38e:	eeb0 7bc0 	vabs.f64	d7, d0
    a392:	ed9f 6b4b 	vldr	d6, [pc, #300]	; a4c0 <Print::printFloat(double, unsigned char)+0x148>
    a396:	eeb4 7b46 	vcmp.f64	d7, d6
    a39a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a39e:	dd0a      	ble.n	a3b6 <Print::printFloat(double, unsigned char)+0x3e>
class Print
{
  public:
	constexpr Print() : write_error(0) {}
	virtual size_t write(uint8_t b) = 0;
	size_t write(const char *str)			{ return write((const uint8_t *)str, strlen(str)); }
    a3a0:	6803      	ldr	r3, [r0, #0]
    a3a2:	2203      	movs	r2, #3
    a3a4:	494e      	ldr	r1, [pc, #312]	; (a4e0 <Print::printFloat(double, unsigned char)+0x168>)
    a3a6:	685b      	ldr	r3, [r3, #4]
    a3a8:	4798      	blx	r3
    a3aa:	4606      	mov	r6, r0
			remainder -= n; 
		}
		count += write(buf, count);
	}
	return count;
}
    a3ac:	4630      	mov	r0, r6
    a3ae:	b006      	add	sp, #24
    a3b0:	ecbd 8b02 	vpop	{d8}
    a3b4:	bd70      	pop	{r4, r5, r6, pc}
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    	if (isinf(number)) return print("inf");
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    a3b6:	ed9f 7b44 	vldr	d7, [pc, #272]	; a4c8 <Print::printFloat(double, unsigned char)+0x150>
    a3ba:	eeb4 0bc7 	vcmpe.f64	d0, d7
    a3be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3c2:	dc58      	bgt.n	a476 <Print::printFloat(double, unsigned char)+0xfe>
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
    a3c4:	ed9f 7b42 	vldr	d7, [pc, #264]	; a4d0 <Print::printFloat(double, unsigned char)+0x158>
    a3c8:	eeb4 0bc7 	vcmpe.f64	d0, d7
    a3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3d0:	d451      	bmi.n	a476 <Print::printFloat(double, unsigned char)+0xfe>
	
	// Handle negative numbers
	if (number < 0.0) {
    a3d2:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
    a3d6:	460c      	mov	r4, r1
    a3d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    a3dc:	d456      	bmi.n	a48c <Print::printFloat(double, unsigned char)+0x114>
	return write(buf + i, sizeof(buf) - i);
}

size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
    a3de:	2300      	movs	r3, #0
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    a3e0:	2c00      	cmp	r4, #0
    a3e2:	d057      	beq.n	a494 <Print::printFloat(double, unsigned char)+0x11c>
    a3e4:	eeb6 8b00 	vmov.f64	d8, #96	; 0x3f000000  0.5
    a3e8:	2200      	movs	r2, #0
		rounding *= 0.1;
    a3ea:	ed9f 7b3b 	vldr	d7, [pc, #236]	; a4d8 <Print::printFloat(double, unsigned char)+0x160>
    a3ee:	3201      	adds	r2, #1
    a3f0:	ee28 8b07 	vmul.f64	d8, d8, d7
		number = -number;
	}

	// Round correctly so that print(1.999, 2) prints as "2.00"
	double rounding = 0.5;
	for (uint8_t i=0; i<digits; ++i) {
    a3f4:	b2d1      	uxtb	r1, r2
    a3f6:	428c      	cmp	r4, r1
    a3f8:	d8f9      	bhi.n	a3ee <Print::printFloat(double, unsigned char)+0x76>
		rounding *= 0.1;
	}
	number += rounding;
    a3fa:	ee30 0b08 	vadd.f64	d0, d0, d8

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    a3fe:	220a      	movs	r2, #10
    a400:	4628      	mov	r0, r5
		rounding *= 0.1;
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
    a402:	eefc 7bc0 	vcvt.u32.f64	s15, d0
	double remainder = number - (double)int_part;
    a406:	eeb8 8b67 	vcvt.f64.u32	d8, s15
	count += printNumber(int_part, 10, sign);
    a40a:	ee17 1a90 	vmov	r1, s15
	}
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
    a40e:	ee30 8b48 	vsub.f64	d8, d0, d8
	count += printNumber(int_part, 10, sign);
    a412:	f7ff ff65 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    a416:	2c0f      	cmp	r4, #15

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    a418:	f04f 0201 	mov.w	r2, #1

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    a41c:	eeb2 7b04 	vmov.f64	d7, #36	; 0x41200000  10.0
	count += printNumber(int_part, 10, sign);

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    a420:	f04f 032e 	mov.w	r3, #46	; 0x2e
    a424:	bf28      	it	cs
    a426:	240f      	movcs	r4, #15
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    a428:	4606      	mov	r6, r0

	// Print the decimal point, but only if there are digits beyond
	if (digits > 0) {
		uint8_t n, buf[16], count=1;
		buf[0] = '.';
    a42a:	f88d 3008 	strb.w	r3, [sp, #8]
    a42e:	4414      	add	r4, r2
    a430:	b2e4      	uxtb	r4, r4

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
    a432:	ee28 0b07 	vmul.f64	d0, d8, d7
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    a436:	1c53      	adds	r3, r2, #1
    a438:	a906      	add	r1, sp, #24
    a43a:	4411      	add	r1, r2
    a43c:	b2da      	uxtb	r2, r3
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    a43e:	42a2      	cmp	r2, r4
			remainder *= 10.0;
			n = (uint8_t)(remainder);
    a440:	eefc 6bc0 	vcvt.u32.f64	s13, d0
    a444:	edcd 6a01 	vstr	s13, [sp, #4]
    a448:	f89d 3004 	ldrb.w	r3, [sp, #4]
			buf[count++] = '0' + n;
			remainder -= n; 
    a44c:	ee06 3a90 	vmov	s13, r3
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    a450:	f103 0330 	add.w	r3, r3, #48	; 0x30
			remainder -= n; 
    a454:	eeb8 8be6 	vcvt.f64.s32	d8, s13
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
    a458:	f801 3c10 	strb.w	r3, [r1, #-16]
			remainder -= n; 
    a45c:	ee30 8b48 	vsub.f64	d8, d0, d8
		buf[0] = '.';

		// Extract digits from the remainder one at a time
		if (digits > sizeof(buf) - 1) digits = sizeof(buf) - 1;

		while (digits-- > 0) {
    a460:	d1e7      	bne.n	a432 <Print::printFloat(double, unsigned char)+0xba>
			remainder *= 10.0;
			n = (uint8_t)(remainder);
			buf[count++] = '0' + n;
			remainder -= n; 
		}
		count += write(buf, count);
    a462:	682b      	ldr	r3, [r5, #0]
    a464:	4628      	mov	r0, r5
    a466:	a902      	add	r1, sp, #8
    a468:	685b      	ldr	r3, [r3, #4]
    a46a:	4798      	blx	r3
	}
	return count;
}
    a46c:	4630      	mov	r0, r6
    a46e:	b006      	add	sp, #24
    a470:	ecbd 8b02 	vpop	{d8}
    a474:	bd70      	pop	{r4, r5, r6, pc}
    a476:	682b      	ldr	r3, [r5, #0]
    a478:	2203      	movs	r2, #3
    a47a:	491a      	ldr	r1, [pc, #104]	; (a4e4 <Print::printFloat(double, unsigned char)+0x16c>)
    a47c:	685b      	ldr	r3, [r3, #4]
    a47e:	4798      	blx	r3
    a480:	4606      	mov	r6, r0
    a482:	4630      	mov	r0, r6
    a484:	b006      	add	sp, #24
    a486:	ecbd 8b02 	vpop	{d8}
    a48a:	bd70      	pop	{r4, r5, r6, pc}
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
		number = -number;
    a48c:	eeb1 0b40 	vneg.f64	d0, d0
    	if (number > 4294967040.0f) return print("ovf");  // constant determined empirically
    	if (number <-4294967040.0f) return print("ovf");  // constant determined empirically
	
	// Handle negative numbers
	if (number < 0.0) {
		sign = 1;
    a490:	2301      	movs	r3, #1
    a492:	e7a5      	b.n	a3e0 <Print::printFloat(double, unsigned char)+0x68>
	number += rounding;

	// Extract the integer part of the number and print it
	unsigned long int_part = (unsigned long)number;
	double remainder = number - (double)int_part;
	count += printNumber(int_part, 10, sign);
    a494:	eeb6 7b00 	vmov.f64	d7, #96	; 0x3f000000  0.5
    a498:	4628      	mov	r0, r5
    a49a:	220a      	movs	r2, #10
    a49c:	ee30 0b07 	vadd.f64	d0, d0, d7
    a4a0:	eefc 7bc0 	vcvt.u32.f64	s15, d0
    a4a4:	ee17 1a90 	vmov	r1, s15
    a4a8:	f7ff ff1a 	bl	a2e0 <Print::printNumber(unsigned long, unsigned char, unsigned char)>
    a4ac:	4606      	mov	r6, r0
    a4ae:	e77d      	b.n	a3ac <Print::printFloat(double, unsigned char)+0x34>
    a4b0:	6803      	ldr	r3, [r0, #0]
    a4b2:	2203      	movs	r2, #3
    a4b4:	490c      	ldr	r1, [pc, #48]	; (a4e8 <Print::printFloat(double, unsigned char)+0x170>)
    a4b6:	685b      	ldr	r3, [r3, #4]
    a4b8:	4798      	blx	r3
    a4ba:	4606      	mov	r6, r0
size_t Print::printFloat(double number, uint8_t digits) 
{
	uint8_t sign=0;
	size_t count=0;

	if (isnan(number)) return print("nan");
    a4bc:	e776      	b.n	a3ac <Print::printFloat(double, unsigned char)+0x34>
    a4be:	bf00      	nop
    a4c0:	ffffffff 	.word	0xffffffff
    a4c4:	7fefffff 	.word	0x7fefffff
    a4c8:	e0000000 	.word	0xe0000000
    a4cc:	41efffff 	.word	0x41efffff
    a4d0:	e0000000 	.word	0xe0000000
    a4d4:	c1efffff 	.word	0xc1efffff
    a4d8:	9999999a 	.word	0x9999999a
    a4dc:	3fb99999 	.word	0x3fb99999
    a4e0:	20000d98 	.word	0x20000d98
    a4e4:	20000d94 	.word	0x20000d94
    a4e8:	20000d90 	.word	0x20000d90

0000a4ec <usb_serial_class::clear()>:
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
    a4ec:	f7ff bdc8 	b.w	a080 <usb_serial_flush_input>

0000a4f0 <usb_serial_class::peek()>:
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
    a4f0:	f7ff bd9e 	b.w	a030 <usb_serial_peekchar>

0000a4f4 <usb_serial_class::read()>:
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
    a4f4:	f7ff bdfe 	b.w	a0f4 <usb_serial_getchar>

0000a4f8 <usb_serial_class::available()>:
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a4f8:	f7ff bdbc 	b.w	a074 <usb_serial_available>

0000a4fc <usb_serial_class::flush()>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
    a4fc:	f7ff be52 	b.w	a1a4 <usb_serial_flush_output>

0000a500 <usb_serial_class::availableForWrite()>:
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
	size_t write(unsigned long n) { return write((uint8_t)n); }
	size_t write(long n) { return write((uint8_t)n); }
	size_t write(unsigned int n) { return write((uint8_t)n); }
	size_t write(int n) { return write((uint8_t)n); }
	virtual int availableForWrite() { return usb_serial_write_buffer_free(); }
    a500:	f7ff be2a 	b.w	a158 <usb_serial_write_buffer_free>

0000a504 <usb_serial_class::write(unsigned char const*, unsigned int)>:
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
        virtual size_t write(const uint8_t *buffer, size_t size) { return usb_serial_write(buffer, size); }
    a504:	4608      	mov	r0, r1
    a506:	4611      	mov	r1, r2
    a508:	f7ff be1a 	b.w	a140 <usb_serial_write>

0000a50c <usb_serial_class::write(unsigned char)>:
        virtual int available() { return usb_serial_available(); }
        virtual int read() { return usb_serial_getchar(); }
        virtual int peek() { return usb_serial_peekchar(); }
        virtual void flush() { usb_serial_flush_output(); }  // TODO: actually wait for data to leave USB...
        virtual void clear(void) { usb_serial_flush_input(); }
        virtual size_t write(uint8_t c) { return usb_serial_putchar(c); }
    a50c:	4608      	mov	r0, r1
    a50e:	f7ff be01 	b.w	a114 <usb_serial_putchar>
    a512:	bf00      	nop

0000a514 <yield>:

extern const uint8_t _serialEvent_default;	

void yield(void) __attribute__ ((weak));
void yield(void)
{
    a514:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
    a518:	4e32      	ldr	r6, [pc, #200]	; (a5e4 <yield+0xd0>)
    a51a:	7833      	ldrb	r3, [r6, #0]
    a51c:	b193      	cbz	r3, a544 <yield+0x30>
	if (running) return; // TODO: does this need to be atomic?
    a51e:	4f32      	ldr	r7, [pc, #200]	; (a5e8 <yield+0xd4>)
    a520:	783a      	ldrb	r2, [r7, #0]
    a522:	b97a      	cbnz	r2, a544 <yield+0x30>
	running = 1;
    a524:	2201      	movs	r2, #1


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a526:	07d9      	lsls	r1, r3, #31
void yield(void)
{
	static uint8_t running=0;
	if (!yield_active_check_flags) return;	// nothing to do
	if (running) return; // TODO: does this need to be atomic?
	running = 1;
    a528:	703a      	strb	r2, [r7, #0]


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
    a52a:	d437      	bmi.n	a59c <yield+0x88>
		if (_serialEventUSB2_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIALUSB2;
	}
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();
    a52c:	079a      	lsls	r2, r3, #30
    a52e:	d419      	bmi.n	a564 <yield+0x50>

	running = 0;
    a530:	2200      	movs	r2, #0
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a532:	075b      	lsls	r3, r3, #29
#endif

	// Current workaround until integrate with EventResponder.
	if (yield_active_check_flags & YIELD_CHECK_HARDWARE_SERIAL) HardwareSerial::processSerialEventsList();

	running = 0;
    a534:	703a      	strb	r2, [r7, #0]
	if (yield_active_check_flags & YIELD_CHECK_EVENT_RESPONDER) EventResponder::runFromYield();
    a536:	d505      	bpl.n	a544 <yield+0x30>
	// Wait for event(s) to occur.  These are most likely to be useful when
	// used with a scheduler or RTOS.
	bool waitForEvent(EventResponderRef event, int timeout);
	EventResponder * waitForEvent(EventResponder *list, int listsize, int timeout);
	static void runFromYield() {
		if (!firstYield) return;  
    a538:	4b2c      	ldr	r3, [pc, #176]	; (a5ec <yield+0xd8>)
    a53a:	681a      	ldr	r2, [r3, #0]
    a53c:	b112      	cbz	r2, a544 <yield+0x30>
		// First, check if yield was called from an interrupt
		// never call normal handler functions from any interrupt context
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
    a53e:	f3ef 8205 	mrs	r2, IPSR
		if (ipsr != 0) return;
    a542:	b10a      	cbz	r2, a548 <yield+0x34>
    a544:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	static EventResponder *lastInterrupt;
	static bool runningFromYield;
private:
	static bool disableInterrupts() {
		uint32_t primask;
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
    a548:	f3ef 8010 	mrs	r0, PRIMASK
		__disable_irq();
    a54c:	b672      	cpsid	i
		uint32_t ipsr;
		__asm__ volatile("mrs %0, ipsr\n" : "=r" (ipsr)::);
		if (ipsr != 0) return;
		// Next, check if any events have been triggered
		bool irq = disableInterrupts();
		EventResponder *first = firstYield;
    a54e:	681a      	ldr	r2, [r3, #0]
		if (first == nullptr) {
    a550:	b11a      	cbz	r2, a55a <yield+0x46>
			return;
		}
		// Finally, make sure we're not being recursively called,
		// which can happen if the user's function does anything
		// that calls yield.
		if (runningFromYield) {
    a552:	4c27      	ldr	r4, [pc, #156]	; (a5f0 <yield+0xdc>)
    a554:	7821      	ldrb	r1, [r4, #0]
    a556:	2900      	cmp	r1, #0
    a558:	d02f      	beq.n	a5ba <yield+0xa6>
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a55a:	2800      	cmp	r0, #0
    a55c:	d1f2      	bne.n	a544 <yield+0x30>
    a55e:	b662      	cpsie	i
    a560:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	*/

	operator bool()			{ return true; }

	static inline void processSerialEventsList() {
		for (uint8_t i = 0; i < s_count_serials_with_serial_events; i++) {
    a564:	f8df 8094 	ldr.w	r8, [pc, #148]	; a5fc <yield+0xe8>
    a568:	f898 2000 	ldrb.w	r2, [r8]
    a56c:	2a00      	cmp	r2, #0
    a56e:	d0df      	beq.n	a530 <yield+0x1c>
    a570:	2400      	movs	r4, #0
    a572:	f8df 908c 	ldr.w	r9, [pc, #140]	; a600 <yield+0xec>
    a576:	e005      	b.n	a584 <yield+0x70>
    a578:	3401      	adds	r4, #1
    a57a:	f898 3000 	ldrb.w	r3, [r8]
    a57e:	b2e4      	uxtb	r4, r4
    a580:	42a3      	cmp	r3, r4
    a582:	d913      	bls.n	a5ac <yield+0x98>
			s_serials_with_serial_events[i]->doYieldCode();
    a584:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
	static HardwareSerial 	*s_serials_with_serial_events[7];
	#endif
	static uint8_t 			s_count_serials_with_serial_events;
	void addToSerialEventsList(); 
	inline void doYieldCode()  {
		if (available()) (*hardware->_serialEvent)();
    a588:	682b      	ldr	r3, [r5, #0]
    a58a:	4628      	mov	r0, r5
    a58c:	691b      	ldr	r3, [r3, #16]
    a58e:	4798      	blx	r3
    a590:	2800      	cmp	r0, #0
    a592:	d0f1      	beq.n	a578 <yield+0x64>
    a594:	696b      	ldr	r3, [r5, #20]
    a596:	689b      	ldr	r3, [r3, #8]
    a598:	4798      	blx	r3
    a59a:	e7ed      	b.n	a578 <yield+0x64>
				if (elapsed > 750) break;
			}
		}
	}
        void end() { /* TODO: flush output and shut down USB port */ };
        virtual int available() { return usb_serial_available(); }
    a59c:	f7ff fd6a 	bl	a074 <usb_serial_available>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a5a0:	b9d0      	cbnz	r0, a5d8 <yield+0xc4>
		if (_serialEvent_default) yield_active_check_flags &= ~YIELD_CHECK_USB_SERIAL;
    a5a2:	4b14      	ldr	r3, [pc, #80]	; (a5f4 <yield+0xe0>)
    a5a4:	781b      	ldrb	r3, [r3, #0]
    a5a6:	b91b      	cbnz	r3, a5b0 <yield+0x9c>
    a5a8:	7833      	ldrb	r3, [r6, #0]
    a5aa:	e7bf      	b.n	a52c <yield+0x18>
    a5ac:	7833      	ldrb	r3, [r6, #0]
    a5ae:	e7bf      	b.n	a530 <yield+0x1c>
    a5b0:	7833      	ldrb	r3, [r6, #0]
    a5b2:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
    a5b6:	7033      	strb	r3, [r6, #0]
    a5b8:	e7b8      	b.n	a52c <yield+0x18>
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a5ba:	2601      	movs	r6, #1
		firstYield = first->_next;
    a5bc:	6955      	ldr	r5, [r2, #20]
		if (runningFromYield) {
			enableInterrupts(irq);
			return;
		}
		// Ok, update the runningFromYield flag and process event
		runningFromYield = true;
    a5be:	7026      	strb	r6, [r4, #0]
		firstYield = first->_next;
    a5c0:	601d      	str	r5, [r3, #0]
		if (firstYield) {
    a5c2:	b165      	cbz	r5, a5de <yield+0xca>
			firstYield->_prev = nullptr;
    a5c4:	61a9      	str	r1, [r5, #24]
		__asm__ volatile("mrs %0, primask\n" : "=r" (primask)::);
		__disable_irq();
		return (primask == 0) ? true : false;
	}
	static void enableInterrupts(bool doit) {
		if (doit) __enable_irq();
    a5c6:	b900      	cbnz	r0, a5ca <yield+0xb6>
    a5c8:	b662      	cpsie	i
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a5ca:	2500      	movs	r5, #0
		(*(first->_function))(*first);
    a5cc:	6893      	ldr	r3, [r2, #8]
    a5ce:	4610      	mov	r0, r2
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
		}
		enableInterrupts(irq);
		first->_triggered = false;
    a5d0:	7755      	strb	r5, [r2, #29]
		(*(first->_function))(*first);
    a5d2:	4798      	blx	r3
		runningFromYield = false;
    a5d4:	7025      	strb	r5, [r4, #0]
    a5d6:	e7b5      	b.n	a544 <yield+0x30>
	running = 1;


	// USB Serail - Add hack to minimize impact...
	if (yield_active_check_flags & YIELD_CHECK_USB_SERIAL) {
		if (Serial.available()) serialEvent();
    a5d8:	f000 f998 	bl	a90c <serialEvent()>
    a5dc:	e7e1      	b.n	a5a2 <yield+0x8e>
		runningFromYield = true;
		firstYield = first->_next;
		if (firstYield) {
			firstYield->_prev = nullptr;
		} else {
			lastYield = nullptr;
    a5de:	4b06      	ldr	r3, [pc, #24]	; (a5f8 <yield+0xe4>)
    a5e0:	601d      	str	r5, [r3, #0]
    a5e2:	e7f0      	b.n	a5c6 <yield+0xb2>
    a5e4:	20001170 	.word	0x20001170
    a5e8:	20036ed1 	.word	0x20036ed1
    a5ec:	20036ecc 	.word	0x20036ecc
    a5f0:	20036ed0 	.word	0x20036ed0
    a5f4:	60001862 	.word	0x60001862
    a5f8:	20036ec8 	.word	0x20036ec8
    a5fc:	20036ef0 	.word	0x20036ef0
    a600:	20036ed4 	.word	0x20036ed4

0000a604 <ultoa>:
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a604:	b4f0      	push	{r4, r5, r6, r7}
    a606:	1e4e      	subs	r6, r1, #1
	unsigned digit;
	int i=0, j;
    a608:	2500      	movs	r5, #0
#include <stdlib.h>
#include <math.h>


char * ultoa(unsigned long val, char *buf, int radix)
{
    a60a:	4637      	mov	r7, r6
    a60c:	e000      	b.n	a610 <ultoa+0xc>
	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
		val /= radix;
		if (val == 0) break;
		i++;
    a60e:	3501      	adds	r5, #1
	unsigned digit;
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
    a610:	fbb0 f3f2 	udiv	r3, r0, r2
    a614:	fb02 0013 	mls	r0, r2, r3, r0
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a618:	f100 0437 	add.w	r4, r0, #55	; 0x37
    a61c:	2809      	cmp	r0, #9
    a61e:	f100 0030 	add.w	r0, r0, #48	; 0x30
    a622:	b2e4      	uxtb	r4, r4
    a624:	bf98      	it	ls
    a626:	b2c4      	uxtbls	r4, r0
		val /= radix;
		if (val == 0) break;
    a628:	4618      	mov	r0, r3
	int i=0, j;
	char t;

	while (1) {
		digit = val % radix;
		buf[i] = ((digit < 10) ? '0' + digit : 'A' + digit - 10);
    a62a:	f807 4f01 	strb.w	r4, [r7, #1]!
		val /= radix;
		if (val == 0) break;
    a62e:	2b00      	cmp	r3, #0
    a630:	d1ed      	bne.n	a60e <ultoa+0xa>
		i++;
	}
	buf[i + 1] = 0;
    a632:	194a      	adds	r2, r1, r5
    a634:	7053      	strb	r3, [r2, #1]
	for (j=0; j < i; j++, i--) {
    a636:	b14d      	cbz	r5, a64c <ultoa+0x48>
    a638:	3301      	adds	r3, #1
		t = buf[j];
    a63a:	f816 4f01 	ldrb.w	r4, [r6, #1]!
		buf[j] = buf[i];
    a63e:	7817      	ldrb	r7, [r2, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a640:	1ae8      	subs	r0, r5, r3
		t = buf[j];
		buf[j] = buf[i];
    a642:	7037      	strb	r7, [r6, #0]
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a644:	4283      	cmp	r3, r0
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
    a646:	f802 4901 	strb.w	r4, [r2], #-1
		val /= radix;
		if (val == 0) break;
		i++;
	}
	buf[i + 1] = 0;
	for (j=0; j < i; j++, i--) {
    a64a:	dbf5      	blt.n	a638 <ultoa+0x34>
		t = buf[j];
		buf[j] = buf[i];
		buf[i] = t;
	}
	return buf;
}
    a64c:	4608      	mov	r0, r1
    a64e:	bcf0      	pop	{r4, r5, r6, r7}
    a650:	4770      	bx	lr
    a652:	bf00      	nop

0000a654 <pwm_init>:
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a654:	48a4      	ldr	r0, [pc, #656]	; (a8e8 <pwm_init+0x294>)
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a656:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a65a:	4ba4      	ldr	r3, [pc, #656]	; (a8ec <pwm_init+0x298>)
}

void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a65c:	6f82      	ldr	r2, [r0, #120]	; 0x78
    a65e:	f442 027f 	orr.w	r2, r2, #16711680	; 0xff0000
			TMR_CTRL_LENGTH | TMR_CTRL_OUTMODE(6);
	}
}

void pwm_init(void)
{
    a662:	b5f0      	push	{r4, r5, r6, r7, lr}
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
    a664:	6782      	str	r2, [r0, #120]	; 0x78
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
    a666:	2500      	movs	r5, #0
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a668:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a66c:	f44f 4670 	mov.w	r6, #61440	; 0xf000
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a670:	4c9f      	ldr	r4, [pc, #636]	; (a8f0 <pwm_init+0x29c>)
	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a672:	f44f 4e60 	mov.w	lr, #57344	; 0xe000

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a676:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a678:	f44f 6780 	mov.w	r7, #1024	; 0x400
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a67c:	4314      	orrs	r4, r2
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a67e:	462a      	mov	r2, r5
void pwm_init(void)
{
	//printf("pwm init\n");
	CCM_CCGR4 |= CCM_CCGR4_PWM1(CCM_CCGR_ON) | CCM_CCGR4_PWM2(CCM_CCGR_ON) |
		CCM_CCGR4_PWM3(CCM_CCGR_ON) | CCM_CCGR4_PWM4(CCM_CCGR_ON);
	CCM_CCGR6 |= CCM_CCGR6_QTIMER1(CCM_CCGR_ON) | CCM_CCGR6_QTIMER2(CCM_CCGR_ON) |
    a680:	f8c0 4080 	str.w	r4, [r0, #128]	; 0x80

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a684:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a688:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a68c:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a690:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a694:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    a698:	b280      	uxth	r0, r0
    a69a:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    a69e:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    a6a2:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    a6a6:	4b91      	ldr	r3, [pc, #580]	; (a8ec <pwm_init+0x298>)
	for (i=0; i < 4; i++) {
    a6a8:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a6aa:	2500      	movs	r5, #0
    a6ac:	0140      	lsls	r0, r0, #5
    a6ae:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a6b0:	2904      	cmp	r1, #4
    a6b2:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a6b4:	f8a3 e004 	strh.w	lr, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a6b8:	80df      	strh	r7, [r3, #6]
		p->SM[i].OCTRL = 0;
    a6ba:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a6bc:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a6be:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a6c0:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a6c2:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    a6c4:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a6c6:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a6c8:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a6ca:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a6cc:	d1e9      	bne.n	a6a2 <pwm_init+0x4e>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a6ce:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a6d2:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a6d6:	4b87      	ldr	r3, [pc, #540]	; (a8f4 <pwm_init+0x2a0>)
    a6d8:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a6dc:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a6de:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a6e0:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a6e4:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a6e6:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a6ea:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a6ee:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a6f2:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    a6f6:	b280      	uxth	r0, r0
    a6f8:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    a6fc:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a700:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a704:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a708:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a70c:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a710:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    a714:	b280      	uxth	r0, r0
    a716:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    a71a:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    a71e:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    a722:	4b74      	ldr	r3, [pc, #464]	; (a8f4 <pwm_init+0x2a0>)
	for (i=0; i < 4; i++) {
    a724:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a726:	2500      	movs	r5, #0
    a728:	0140      	lsls	r0, r0, #5
    a72a:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a72c:	2904      	cmp	r1, #4
    a72e:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a730:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a732:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a736:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a738:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a73a:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a73c:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a73e:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    a740:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a742:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a744:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a746:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a748:	d1e9      	bne.n	a71e <pwm_init+0xca>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a74a:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a74e:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a752:	4b69      	ldr	r3, [pc, #420]	; (a8f8 <pwm_init+0x2a4>)
    a754:	f44f 4670 	mov.w	r6, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a758:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a75a:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a75c:	f44f 4760 	mov.w	r7, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a760:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a762:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a766:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a76a:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a76e:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    a772:	b280      	uxth	r0, r0
    a774:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    a778:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a77c:	f8a3 618c 	strh.w	r6, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a780:	f248 26b8 	movw	r6, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a784:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a788:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a78c:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    a790:	b280      	uxth	r0, r0
    a792:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    a796:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    a79a:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    a79e:	4b56      	ldr	r3, [pc, #344]	; (a8f8 <pwm_init+0x2a4>)
	for (i=0; i < 4; i++) {
    a7a0:	3101      	adds	r1, #1
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a7a2:	2500      	movs	r5, #0
    a7a4:	0140      	lsls	r0, r0, #5
    a7a6:	461c      	mov	r4, r3

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a7a8:	2904      	cmp	r1, #4
    a7aa:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a7ac:	809f      	strh	r7, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a7ae:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a7b2:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a7b4:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a7b6:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a7b8:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a7ba:	81de      	strh	r6, [r3, #14]
		p->SM[i].VAL2 = 0;
    a7bc:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a7be:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a7c0:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a7c2:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a7c4:	d1e9      	bne.n	a79a <pwm_init+0x146>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a7c6:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a7ca:	f04f 0c0f 	mov.w	ip, #15

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a7ce:	4b4b      	ldr	r3, [pc, #300]	; (a8fc <pwm_init+0x2a8>)
    a7d0:	f44f 4770 	mov.w	r7, #61440	; 0xf000
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a7d4:	b280      	uxth	r0, r0

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a7d6:	4629      	mov	r1, r5
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a7d8:	f44f 4660 	mov.w	r6, #57344	; 0xe000
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
    a7dc:	462a      	mov	r2, r5
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a7de:	ea40 000c 	orr.w	r0, r0, ip
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a7e2:	f44f 6e80 	mov.w	lr, #1024	; 0x400
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a7e6:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a7ea:	f8b4 0188 	ldrh.w	r0, [r4, #392]	; 0x188
    a7ee:	b280      	uxth	r0, r0
    a7f0:	f440 6070 	orr.w	r0, r0, #3840	; 0xf00
    a7f4:	f8a4 0188 	strh.w	r0, [r4, #392]	; 0x188

void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
    a7f8:	f8a3 718c 	strh.w	r7, [r3, #396]	; 0x18c
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
		p->SM[i].OCTRL = 0;
		p->SM[i].DTCNT0 = 0;
		p->SM[i].INIT = 0;
		p->SM[i].VAL0 = 0;
		p->SM[i].VAL1 = 33464;
    a7fc:	f248 27b8 	movw	r7, #33464	; 0x82b8
void flexpwm_init(IMXRT_FLEXPWM_t *p)
{
	int i;

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
    a800:	f8a3 c18e 	strh.w	ip, [r3, #398]	; 0x18e
	p->FFILT0 = 0;
    a804:	f8a3 5190 	strh.w	r5, [r3, #400]	; 0x190
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
    a808:	f8b3 0188 	ldrh.w	r0, [r3, #392]	; 0x188
    a80c:	b280      	uxth	r0, r0
    a80e:	f040 00f0 	orr.w	r0, r0, #240	; 0xf0
    a812:	f8a3 0188 	strh.w	r0, [r3, #392]	; 0x188
    a816:	eb01 0041 	add.w	r0, r1, r1, lsl #1
    a81a:	4b38      	ldr	r3, [pc, #224]	; (a8fc <pwm_init+0x2a8>)
	for (i=0; i < 4; i++) {
    a81c:	3101      	adds	r1, #1
    a81e:	0140      	lsls	r0, r0, #5
    a820:	461c      	mov	r4, r3
    a822:	2904      	cmp	r1, #4
    a824:	4403      	add	r3, r0
		p->SM[i].CTRL2 = FLEXPWM_SMCTRL2_INDEP | FLEXPWM_SMCTRL2_WAITEN
    a826:	809e      	strh	r6, [r3, #4]
			| FLEXPWM_SMCTRL2_DBGEN;
		p->SM[i].CTRL = FLEXPWM_SMCTRL_FULL;
    a828:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->SM[i].OCTRL = 0;
    a82c:	845a      	strh	r2, [r3, #34]	; 0x22
		p->SM[i].DTCNT0 = 0;
    a82e:	861a      	strh	r2, [r3, #48]	; 0x30
		p->SM[i].INIT = 0;
    a830:	805a      	strh	r2, [r3, #2]
		p->SM[i].VAL0 = 0;
    a832:	815a      	strh	r2, [r3, #10]
		p->SM[i].VAL1 = 33464;
    a834:	81df      	strh	r7, [r3, #14]
		p->SM[i].VAL2 = 0;
    a836:	825a      	strh	r2, [r3, #18]
		p->SM[i].VAL3 = 0;
    a838:	82da      	strh	r2, [r3, #22]
		p->SM[i].VAL4 = 0;
    a83a:	835a      	strh	r2, [r3, #26]
		p->SM[i].VAL5 = 0;
    a83c:	83da      	strh	r2, [r3, #30]

	p->FCTRL0 = FLEXPWM_FCTRL0_FLVL(15); // logic high = fault
	p->FSTS0 = 0x000F; // clear fault status
	p->FFILT0 = 0;
	p->MCTRL |= FLEXPWM_MCTRL_CLDOK(15);
	for (i=0; i < 4; i++) {
    a83e:	d1ea      	bne.n	a816 <pwm_init+0x1c2>
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a840:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a844:	270f      	movs	r7, #15

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a846:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a848:	f241 0601 	movw	r6, #4097	; 0x1001
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a84c:	b29b      	uxth	r3, r3
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a84e:	f645 5ec0 	movw	lr, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a852:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a854:	f243 0526 	movw	r5, #12326	; 0x3026
		p->SM[i].VAL2 = 0;
		p->SM[i].VAL3 = 0;
		p->SM[i].VAL4 = 0;
		p->SM[i].VAL5 = 0;
	}
	p->MCTRL |= FLEXPWM_MCTRL_LDOK(15);
    a858:	433b      	orrs	r3, r7
    a85a:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
	p->MCTRL |= FLEXPWM_MCTRL_RUN(15);
    a85e:	f8b4 3188 	ldrh.w	r3, [r4, #392]	; 0x188
    a862:	b29b      	uxth	r3, r3
    a864:	f443 6370 	orr.w	r3, r3, #3840	; 0xf00
    a868:	f8a4 3188 	strh.w	r3, [r4, #392]	; 0x188
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a86c:	0150      	lsls	r0, r2, #5
    a86e:	4b24      	ldr	r3, [pc, #144]	; (a900 <pwm_init+0x2ac>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a870:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a872:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a874:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    a876:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    a878:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a87a:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a87c:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a87e:	f8a3 e006 	strh.w	lr, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a882:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    a884:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a886:	819d      	strh	r5, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a888:	d1f0      	bne.n	a86c <pwm_init+0x218>
    a88a:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a88c:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a88e:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a892:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a896:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a898:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a89c:	0150      	lsls	r0, r2, #5
    a89e:	4b19      	ldr	r3, [pc, #100]	; (a904 <pwm_init+0x2b0>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a8a0:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a8a2:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a8a4:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    a8a6:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    a8a8:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a8aa:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a8ac:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a8ae:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a8b0:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    a8b2:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a8b4:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a8b6:	d1f1      	bne.n	a89c <pwm_init+0x248>
    a8b8:	2200      	movs	r2, #0
		p->CH[i].CTRL = 0; // stop timer
		p->CH[i].CNTR = 0;
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a8ba:	270f      	movs	r7, #15
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a8bc:	f241 0601 	movw	r6, #4097	; 0x1001
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a8c0:	f645 55c0 	movw	r5, #24000	; 0x5dc0
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a8c4:	4611      	mov	r1, r2
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
		p->CH[i].CMPLD1 = 0;
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a8c6:	f243 0426 	movw	r4, #12326	; 0x3026
void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
		p->CH[i].CTRL = 0; // stop timer
    a8ca:	0150      	lsls	r0, r2, #5
    a8cc:	4b0e      	ldr	r3, [pc, #56]	; (a908 <pwm_init+0x2b4>)

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a8ce:	3201      	adds	r2, #1
		p->CH[i].CTRL = 0; // stop timer
    a8d0:	4403      	add	r3, r0

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a8d2:	2a04      	cmp	r2, #4
		p->CH[i].CTRL = 0; // stop timer
    a8d4:	8199      	strh	r1, [r3, #12]
		p->CH[i].CNTR = 0;
    a8d6:	8159      	strh	r1, [r3, #10]
		p->CH[i].SCTRL = TMR_SCTRL_OEN | TMR_SCTRL_OPS | TMR_SCTRL_VAL | TMR_SCTRL_FORCE;
    a8d8:	81df      	strh	r7, [r3, #14]
		p->CH[i].CSCTRL = TMR_CSCTRL_CL1(1) | TMR_CSCTRL_ALT_LOAD;
    a8da:	829e      	strh	r6, [r3, #20]
		// COMP must be less than LOAD - otherwise output is always low
		p->CH[i].LOAD = 24000;   // low time  (65537 - x) - 
    a8dc:	80dd      	strh	r5, [r3, #6]
		p->CH[i].COMP1 = 0;  // high time (0 = always low, max = LOAD-1)
    a8de:	8019      	strh	r1, [r3, #0]
		p->CH[i].CMPLD1 = 0;
    a8e0:	8219      	strh	r1, [r3, #16]
		p->CH[i].CTRL = TMR_CTRL_CM(1) | TMR_CTRL_PCS(8) |
    a8e2:	819c      	strh	r4, [r3, #12]

void quadtimer_init(IMXRT_TMR_t *p)
{
	int i;

	for (i=0; i < 4; i++) {
    a8e4:	d1f1      	bne.n	a8ca <pwm_init+0x276>
	flexpwm_init(&IMXRT_FLEXPWM3);
	flexpwm_init(&IMXRT_FLEXPWM4);
	quadtimer_init(&IMXRT_TMR1);
	quadtimer_init(&IMXRT_TMR2);
	quadtimer_init(&IMXRT_TMR3);
}
    a8e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
    a8e8:	400fc000 	.word	0x400fc000
    a8ec:	403dc000 	.word	0x403dc000
    a8f0:	fc030000 	.word	0xfc030000
    a8f4:	403e0000 	.word	0x403e0000
    a8f8:	403e4000 	.word	0x403e4000
    a8fc:	403e8000 	.word	0x403e8000
    a900:	401dc000 	.word	0x401dc000
    a904:	401e0000 	.word	0x401e0000
    a908:	401e4000 	.word	0x401e4000

0000a90c <serialEvent()>:

#include <Arduino.h>
void serialEvent() __attribute__((weak));
void serialEvent() {
    a90c:	4770      	bx	lr
    a90e:	bf00      	nop

0000a910 <__aeabi_atexit>:
    a910:	460b      	mov	r3, r1
    a912:	4601      	mov	r1, r0
    a914:	4618      	mov	r0, r3
    a916:	f000 b98d 	b.w	ac34 <__cxa_atexit>
    a91a:	bf00      	nop

0000a91c <__aeabi_uldivmod>:
    a91c:	b953      	cbnz	r3, a934 <__aeabi_uldivmod+0x18>
    a91e:	b94a      	cbnz	r2, a934 <__aeabi_uldivmod+0x18>
    a920:	2900      	cmp	r1, #0
    a922:	bf08      	it	eq
    a924:	2800      	cmpeq	r0, #0
    a926:	bf1c      	itt	ne
    a928:	f04f 31ff 	movne.w	r1, #4294967295
    a92c:	f04f 30ff 	movne.w	r0, #4294967295
    a930:	f000 b97e 	b.w	ac30 <__aeabi_idiv0>
    a934:	f1ad 0c08 	sub.w	ip, sp, #8
    a938:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    a93c:	f000 f806 	bl	a94c <__udivmoddi4>
    a940:	f8dd e004 	ldr.w	lr, [sp, #4]
    a944:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    a948:	b004      	add	sp, #16
    a94a:	4770      	bx	lr

0000a94c <__udivmoddi4>:
    a94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a950:	468c      	mov	ip, r1
    a952:	460e      	mov	r6, r1
    a954:	4604      	mov	r4, r0
    a956:	9d08      	ldr	r5, [sp, #32]
    a958:	2b00      	cmp	r3, #0
    a95a:	d150      	bne.n	a9fe <__udivmoddi4+0xb2>
    a95c:	428a      	cmp	r2, r1
    a95e:	4617      	mov	r7, r2
    a960:	d96c      	bls.n	aa3c <__udivmoddi4+0xf0>
    a962:	fab2 fe82 	clz	lr, r2
    a966:	f1be 0f00 	cmp.w	lr, #0
    a96a:	d00b      	beq.n	a984 <__udivmoddi4+0x38>
    a96c:	f1ce 0420 	rsb	r4, lr, #32
    a970:	fa20 f404 	lsr.w	r4, r0, r4
    a974:	fa01 f60e 	lsl.w	r6, r1, lr
    a978:	ea44 0c06 	orr.w	ip, r4, r6
    a97c:	fa02 f70e 	lsl.w	r7, r2, lr
    a980:	fa00 f40e 	lsl.w	r4, r0, lr
    a984:	ea4f 4917 	mov.w	r9, r7, lsr #16
    a988:	0c22      	lsrs	r2, r4, #16
    a98a:	fbbc f0f9 	udiv	r0, ip, r9
    a98e:	fa1f f887 	uxth.w	r8, r7
    a992:	fb09 c610 	mls	r6, r9, r0, ip
    a996:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    a99a:	fb00 f308 	mul.w	r3, r0, r8
    a99e:	42b3      	cmp	r3, r6
    a9a0:	d909      	bls.n	a9b6 <__udivmoddi4+0x6a>
    a9a2:	19f6      	adds	r6, r6, r7
    a9a4:	f100 32ff 	add.w	r2, r0, #4294967295
    a9a8:	f080 8122 	bcs.w	abf0 <__udivmoddi4+0x2a4>
    a9ac:	42b3      	cmp	r3, r6
    a9ae:	f240 811f 	bls.w	abf0 <__udivmoddi4+0x2a4>
    a9b2:	3802      	subs	r0, #2
    a9b4:	443e      	add	r6, r7
    a9b6:	1af6      	subs	r6, r6, r3
    a9b8:	b2a2      	uxth	r2, r4
    a9ba:	fbb6 f3f9 	udiv	r3, r6, r9
    a9be:	fb09 6613 	mls	r6, r9, r3, r6
    a9c2:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    a9c6:	fb03 f808 	mul.w	r8, r3, r8
    a9ca:	45a0      	cmp	r8, r4
    a9cc:	d909      	bls.n	a9e2 <__udivmoddi4+0x96>
    a9ce:	19e4      	adds	r4, r4, r7
    a9d0:	f103 32ff 	add.w	r2, r3, #4294967295
    a9d4:	f080 810a 	bcs.w	abec <__udivmoddi4+0x2a0>
    a9d8:	45a0      	cmp	r8, r4
    a9da:	f240 8107 	bls.w	abec <__udivmoddi4+0x2a0>
    a9de:	3b02      	subs	r3, #2
    a9e0:	443c      	add	r4, r7
    a9e2:	ebc8 0404 	rsb	r4, r8, r4
    a9e6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    a9ea:	2100      	movs	r1, #0
    a9ec:	2d00      	cmp	r5, #0
    a9ee:	d062      	beq.n	aab6 <__udivmoddi4+0x16a>
    a9f0:	fa24 f40e 	lsr.w	r4, r4, lr
    a9f4:	2300      	movs	r3, #0
    a9f6:	602c      	str	r4, [r5, #0]
    a9f8:	606b      	str	r3, [r5, #4]
    a9fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    a9fe:	428b      	cmp	r3, r1
    aa00:	d907      	bls.n	aa12 <__udivmoddi4+0xc6>
    aa02:	2d00      	cmp	r5, #0
    aa04:	d055      	beq.n	aab2 <__udivmoddi4+0x166>
    aa06:	2100      	movs	r1, #0
    aa08:	e885 0041 	stmia.w	r5, {r0, r6}
    aa0c:	4608      	mov	r0, r1
    aa0e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa12:	fab3 f183 	clz	r1, r3
    aa16:	2900      	cmp	r1, #0
    aa18:	f040 8090 	bne.w	ab3c <__udivmoddi4+0x1f0>
    aa1c:	42b3      	cmp	r3, r6
    aa1e:	d302      	bcc.n	aa26 <__udivmoddi4+0xda>
    aa20:	4282      	cmp	r2, r0
    aa22:	f200 80f8 	bhi.w	ac16 <__udivmoddi4+0x2ca>
    aa26:	1a84      	subs	r4, r0, r2
    aa28:	eb66 0603 	sbc.w	r6, r6, r3
    aa2c:	2001      	movs	r0, #1
    aa2e:	46b4      	mov	ip, r6
    aa30:	2d00      	cmp	r5, #0
    aa32:	d040      	beq.n	aab6 <__udivmoddi4+0x16a>
    aa34:	e885 1010 	stmia.w	r5, {r4, ip}
    aa38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aa3c:	b912      	cbnz	r2, aa44 <__udivmoddi4+0xf8>
    aa3e:	2701      	movs	r7, #1
    aa40:	fbb7 f7f2 	udiv	r7, r7, r2
    aa44:	fab7 fe87 	clz	lr, r7
    aa48:	f1be 0f00 	cmp.w	lr, #0
    aa4c:	d135      	bne.n	aaba <__udivmoddi4+0x16e>
    aa4e:	1bf3      	subs	r3, r6, r7
    aa50:	ea4f 4817 	mov.w	r8, r7, lsr #16
    aa54:	fa1f fc87 	uxth.w	ip, r7
    aa58:	2101      	movs	r1, #1
    aa5a:	fbb3 f0f8 	udiv	r0, r3, r8
    aa5e:	0c22      	lsrs	r2, r4, #16
    aa60:	fb08 3610 	mls	r6, r8, r0, r3
    aa64:	ea42 4606 	orr.w	r6, r2, r6, lsl #16
    aa68:	fb0c f300 	mul.w	r3, ip, r0
    aa6c:	42b3      	cmp	r3, r6
    aa6e:	d907      	bls.n	aa80 <__udivmoddi4+0x134>
    aa70:	19f6      	adds	r6, r6, r7
    aa72:	f100 32ff 	add.w	r2, r0, #4294967295
    aa76:	d202      	bcs.n	aa7e <__udivmoddi4+0x132>
    aa78:	42b3      	cmp	r3, r6
    aa7a:	f200 80ce 	bhi.w	ac1a <__udivmoddi4+0x2ce>
    aa7e:	4610      	mov	r0, r2
    aa80:	1af6      	subs	r6, r6, r3
    aa82:	b2a2      	uxth	r2, r4
    aa84:	fbb6 f3f8 	udiv	r3, r6, r8
    aa88:	fb08 6613 	mls	r6, r8, r3, r6
    aa8c:	ea42 4406 	orr.w	r4, r2, r6, lsl #16
    aa90:	fb0c fc03 	mul.w	ip, ip, r3
    aa94:	45a4      	cmp	ip, r4
    aa96:	d907      	bls.n	aaa8 <__udivmoddi4+0x15c>
    aa98:	19e4      	adds	r4, r4, r7
    aa9a:	f103 32ff 	add.w	r2, r3, #4294967295
    aa9e:	d202      	bcs.n	aaa6 <__udivmoddi4+0x15a>
    aaa0:	45a4      	cmp	ip, r4
    aaa2:	f200 80b5 	bhi.w	ac10 <__udivmoddi4+0x2c4>
    aaa6:	4613      	mov	r3, r2
    aaa8:	ebcc 0404 	rsb	r4, ip, r4
    aaac:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
    aab0:	e79c      	b.n	a9ec <__udivmoddi4+0xa0>
    aab2:	4629      	mov	r1, r5
    aab4:	4628      	mov	r0, r5
    aab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    aaba:	f1ce 0120 	rsb	r1, lr, #32
    aabe:	fa06 f30e 	lsl.w	r3, r6, lr
    aac2:	fa07 f70e 	lsl.w	r7, r7, lr
    aac6:	fa20 f901 	lsr.w	r9, r0, r1
    aaca:	ea4f 4817 	mov.w	r8, r7, lsr #16
    aace:	40ce      	lsrs	r6, r1
    aad0:	ea49 0903 	orr.w	r9, r9, r3
    aad4:	fbb6 faf8 	udiv	sl, r6, r8
    aad8:	ea4f 4419 	mov.w	r4, r9, lsr #16
    aadc:	fb08 661a 	mls	r6, r8, sl, r6
    aae0:	fa1f fc87 	uxth.w	ip, r7
    aae4:	ea44 4306 	orr.w	r3, r4, r6, lsl #16
    aae8:	fb0a f20c 	mul.w	r2, sl, ip
    aaec:	429a      	cmp	r2, r3
    aaee:	fa00 f40e 	lsl.w	r4, r0, lr
    aaf2:	d90a      	bls.n	ab0a <__udivmoddi4+0x1be>
    aaf4:	19db      	adds	r3, r3, r7
    aaf6:	f10a 31ff 	add.w	r1, sl, #4294967295
    aafa:	f080 8087 	bcs.w	ac0c <__udivmoddi4+0x2c0>
    aafe:	429a      	cmp	r2, r3
    ab00:	f240 8084 	bls.w	ac0c <__udivmoddi4+0x2c0>
    ab04:	f1aa 0a02 	sub.w	sl, sl, #2
    ab08:	443b      	add	r3, r7
    ab0a:	1a9b      	subs	r3, r3, r2
    ab0c:	fa1f f989 	uxth.w	r9, r9
    ab10:	fbb3 f1f8 	udiv	r1, r3, r8
    ab14:	fb08 3311 	mls	r3, r8, r1, r3
    ab18:	ea49 4303 	orr.w	r3, r9, r3, lsl #16
    ab1c:	fb01 f60c 	mul.w	r6, r1, ip
    ab20:	429e      	cmp	r6, r3
    ab22:	d907      	bls.n	ab34 <__udivmoddi4+0x1e8>
    ab24:	19db      	adds	r3, r3, r7
    ab26:	f101 32ff 	add.w	r2, r1, #4294967295
    ab2a:	d26b      	bcs.n	ac04 <__udivmoddi4+0x2b8>
    ab2c:	429e      	cmp	r6, r3
    ab2e:	d969      	bls.n	ac04 <__udivmoddi4+0x2b8>
    ab30:	3902      	subs	r1, #2
    ab32:	443b      	add	r3, r7
    ab34:	1b9b      	subs	r3, r3, r6
    ab36:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
    ab3a:	e78e      	b.n	aa5a <__udivmoddi4+0x10e>
    ab3c:	f1c1 0e20 	rsb	lr, r1, #32
    ab40:	fa22 f40e 	lsr.w	r4, r2, lr
    ab44:	408b      	lsls	r3, r1
    ab46:	4323      	orrs	r3, r4
    ab48:	fa20 f70e 	lsr.w	r7, r0, lr
    ab4c:	fa06 f401 	lsl.w	r4, r6, r1
    ab50:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    ab54:	fa26 f60e 	lsr.w	r6, r6, lr
    ab58:	433c      	orrs	r4, r7
    ab5a:	fbb6 f9fc 	udiv	r9, r6, ip
    ab5e:	0c27      	lsrs	r7, r4, #16
    ab60:	fb0c 6619 	mls	r6, ip, r9, r6
    ab64:	fa1f f883 	uxth.w	r8, r3
    ab68:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
    ab6c:	fb09 f708 	mul.w	r7, r9, r8
    ab70:	42b7      	cmp	r7, r6
    ab72:	fa02 f201 	lsl.w	r2, r2, r1
    ab76:	fa00 fa01 	lsl.w	sl, r0, r1
    ab7a:	d908      	bls.n	ab8e <__udivmoddi4+0x242>
    ab7c:	18f6      	adds	r6, r6, r3
    ab7e:	f109 30ff 	add.w	r0, r9, #4294967295
    ab82:	d241      	bcs.n	ac08 <__udivmoddi4+0x2bc>
    ab84:	42b7      	cmp	r7, r6
    ab86:	d93f      	bls.n	ac08 <__udivmoddi4+0x2bc>
    ab88:	f1a9 0902 	sub.w	r9, r9, #2
    ab8c:	441e      	add	r6, r3
    ab8e:	1bf6      	subs	r6, r6, r7
    ab90:	b2a0      	uxth	r0, r4
    ab92:	fbb6 f4fc 	udiv	r4, r6, ip
    ab96:	fb0c 6614 	mls	r6, ip, r4, r6
    ab9a:	ea40 4706 	orr.w	r7, r0, r6, lsl #16
    ab9e:	fb04 f808 	mul.w	r8, r4, r8
    aba2:	45b8      	cmp	r8, r7
    aba4:	d907      	bls.n	abb6 <__udivmoddi4+0x26a>
    aba6:	18ff      	adds	r7, r7, r3
    aba8:	f104 30ff 	add.w	r0, r4, #4294967295
    abac:	d228      	bcs.n	ac00 <__udivmoddi4+0x2b4>
    abae:	45b8      	cmp	r8, r7
    abb0:	d926      	bls.n	ac00 <__udivmoddi4+0x2b4>
    abb2:	3c02      	subs	r4, #2
    abb4:	441f      	add	r7, r3
    abb6:	ea44 4009 	orr.w	r0, r4, r9, lsl #16
    abba:	ebc8 0707 	rsb	r7, r8, r7
    abbe:	fba0 8902 	umull	r8, r9, r0, r2
    abc2:	454f      	cmp	r7, r9
    abc4:	4644      	mov	r4, r8
    abc6:	464e      	mov	r6, r9
    abc8:	d314      	bcc.n	abf4 <__udivmoddi4+0x2a8>
    abca:	d029      	beq.n	ac20 <__udivmoddi4+0x2d4>
    abcc:	b365      	cbz	r5, ac28 <__udivmoddi4+0x2dc>
    abce:	ebba 0304 	subs.w	r3, sl, r4
    abd2:	eb67 0706 	sbc.w	r7, r7, r6
    abd6:	fa07 fe0e 	lsl.w	lr, r7, lr
    abda:	40cb      	lsrs	r3, r1
    abdc:	40cf      	lsrs	r7, r1
    abde:	ea4e 0303 	orr.w	r3, lr, r3
    abe2:	e885 0088 	stmia.w	r5, {r3, r7}
    abe6:	2100      	movs	r1, #0
    abe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    abec:	4613      	mov	r3, r2
    abee:	e6f8      	b.n	a9e2 <__udivmoddi4+0x96>
    abf0:	4610      	mov	r0, r2
    abf2:	e6e0      	b.n	a9b6 <__udivmoddi4+0x6a>
    abf4:	ebb8 0402 	subs.w	r4, r8, r2
    abf8:	eb69 0603 	sbc.w	r6, r9, r3
    abfc:	3801      	subs	r0, #1
    abfe:	e7e5      	b.n	abcc <__udivmoddi4+0x280>
    ac00:	4604      	mov	r4, r0
    ac02:	e7d8      	b.n	abb6 <__udivmoddi4+0x26a>
    ac04:	4611      	mov	r1, r2
    ac06:	e795      	b.n	ab34 <__udivmoddi4+0x1e8>
    ac08:	4681      	mov	r9, r0
    ac0a:	e7c0      	b.n	ab8e <__udivmoddi4+0x242>
    ac0c:	468a      	mov	sl, r1
    ac0e:	e77c      	b.n	ab0a <__udivmoddi4+0x1be>
    ac10:	3b02      	subs	r3, #2
    ac12:	443c      	add	r4, r7
    ac14:	e748      	b.n	aaa8 <__udivmoddi4+0x15c>
    ac16:	4608      	mov	r0, r1
    ac18:	e70a      	b.n	aa30 <__udivmoddi4+0xe4>
    ac1a:	3802      	subs	r0, #2
    ac1c:	443e      	add	r6, r7
    ac1e:	e72f      	b.n	aa80 <__udivmoddi4+0x134>
    ac20:	45c2      	cmp	sl, r8
    ac22:	d3e7      	bcc.n	abf4 <__udivmoddi4+0x2a8>
    ac24:	463e      	mov	r6, r7
    ac26:	e7d1      	b.n	abcc <__udivmoddi4+0x280>
    ac28:	4629      	mov	r1, r5
    ac2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ac2e:	bf00      	nop

0000ac30 <__aeabi_idiv0>:
    ac30:	4770      	bx	lr
    ac32:	bf00      	nop

0000ac34 <__cxa_atexit>:
    ac34:	4613      	mov	r3, r2
    ac36:	460a      	mov	r2, r1
    ac38:	4601      	mov	r1, r0
    ac3a:	2002      	movs	r0, #2
    ac3c:	f002 ba3a 	b.w	d0b4 <__register_exitproc>

0000ac40 <__errno>:
    ac40:	4b01      	ldr	r3, [pc, #4]	; (ac48 <__errno+0x8>)
    ac42:	6818      	ldr	r0, [r3, #0]
    ac44:	4770      	bx	lr
    ac46:	bf00      	nop
    ac48:	200015a0 	.word	0x200015a0

0000ac4c <__libc_init_array>:
    ac4c:	b570      	push	{r4, r5, r6, lr}
    ac4e:	4e0f      	ldr	r6, [pc, #60]	; (ac8c <__libc_init_array+0x40>)
    ac50:	4d0f      	ldr	r5, [pc, #60]	; (ac90 <__libc_init_array+0x44>)
    ac52:	1b76      	subs	r6, r6, r5
    ac54:	10b6      	asrs	r6, r6, #2
    ac56:	bf18      	it	ne
    ac58:	2400      	movne	r4, #0
    ac5a:	d005      	beq.n	ac68 <__libc_init_array+0x1c>
    ac5c:	3401      	adds	r4, #1
    ac5e:	f855 3b04 	ldr.w	r3, [r5], #4
    ac62:	4798      	blx	r3
    ac64:	42a6      	cmp	r6, r4
    ac66:	d1f9      	bne.n	ac5c <__libc_init_array+0x10>
    ac68:	4e0a      	ldr	r6, [pc, #40]	; (ac94 <__libc_init_array+0x48>)
    ac6a:	4d0b      	ldr	r5, [pc, #44]	; (ac98 <__libc_init_array+0x4c>)
    ac6c:	1b76      	subs	r6, r6, r5
    ac6e:	f003 fe4f 	bl	e910 <___init_veneer>
    ac72:	10b6      	asrs	r6, r6, #2
    ac74:	bf18      	it	ne
    ac76:	2400      	movne	r4, #0
    ac78:	d006      	beq.n	ac88 <__libc_init_array+0x3c>
    ac7a:	3401      	adds	r4, #1
    ac7c:	f855 3b04 	ldr.w	r3, [r5], #4
    ac80:	4798      	blx	r3
    ac82:	42a6      	cmp	r6, r4
    ac84:	d1f9      	bne.n	ac7a <__libc_init_array+0x2e>
    ac86:	bd70      	pop	{r4, r5, r6, pc}
    ac88:	bd70      	pop	{r4, r5, r6, pc}
    ac8a:	bf00      	nop
    ac8c:	600016a0 	.word	0x600016a0
    ac90:	600016a0 	.word	0x600016a0
    ac94:	600016a8 	.word	0x600016a8
    ac98:	600016a0 	.word	0x600016a0

0000ac9c <malloc>:
    ac9c:	4b02      	ldr	r3, [pc, #8]	; (aca8 <malloc+0xc>)
    ac9e:	4601      	mov	r1, r0
    aca0:	6818      	ldr	r0, [r3, #0]
    aca2:	f000 b80b 	b.w	acbc <_malloc_r>
    aca6:	bf00      	nop
    aca8:	200015a0 	.word	0x200015a0

0000acac <free>:
    acac:	4b02      	ldr	r3, [pc, #8]	; (acb8 <free+0xc>)
    acae:	4601      	mov	r1, r0
    acb0:	6818      	ldr	r0, [r3, #0]
    acb2:	f003 b975 	b.w	dfa0 <_free_r>
    acb6:	bf00      	nop
    acb8:	200015a0 	.word	0x200015a0

0000acbc <_malloc_r>:
    acbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    acc0:	f101 050b 	add.w	r5, r1, #11
    acc4:	2d16      	cmp	r5, #22
    acc6:	b083      	sub	sp, #12
    acc8:	4606      	mov	r6, r0
    acca:	f240 809f 	bls.w	ae0c <_malloc_r+0x150>
    acce:	f035 0507 	bics.w	r5, r5, #7
    acd2:	f100 80bf 	bmi.w	ae54 <_malloc_r+0x198>
    acd6:	42a9      	cmp	r1, r5
    acd8:	f200 80bc 	bhi.w	ae54 <_malloc_r+0x198>
    acdc:	f000 fbf4 	bl	b4c8 <__malloc_lock>
    ace0:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
    ace4:	f0c0 829c 	bcc.w	b220 <_malloc_r+0x564>
    ace8:	0a6b      	lsrs	r3, r5, #9
    acea:	f000 80ba 	beq.w	ae62 <_malloc_r+0x1a6>
    acee:	2b04      	cmp	r3, #4
    acf0:	f200 8183 	bhi.w	affa <_malloc_r+0x33e>
    acf4:	09a8      	lsrs	r0, r5, #6
    acf6:	f100 0e39 	add.w	lr, r0, #57	; 0x39
    acfa:	ea4f 034e 	mov.w	r3, lr, lsl #1
    acfe:	3038      	adds	r0, #56	; 0x38
    ad00:	4fc4      	ldr	r7, [pc, #784]	; (b014 <_malloc_r+0x358>)
    ad02:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    ad06:	f1a3 0108 	sub.w	r1, r3, #8
    ad0a:	685c      	ldr	r4, [r3, #4]
    ad0c:	42a1      	cmp	r1, r4
    ad0e:	d107      	bne.n	ad20 <_malloc_r+0x64>
    ad10:	e0ac      	b.n	ae6c <_malloc_r+0x1b0>
    ad12:	2a00      	cmp	r2, #0
    ad14:	f280 80ac 	bge.w	ae70 <_malloc_r+0x1b4>
    ad18:	68e4      	ldr	r4, [r4, #12]
    ad1a:	42a1      	cmp	r1, r4
    ad1c:	f000 80a6 	beq.w	ae6c <_malloc_r+0x1b0>
    ad20:	6863      	ldr	r3, [r4, #4]
    ad22:	f023 0303 	bic.w	r3, r3, #3
    ad26:	1b5a      	subs	r2, r3, r5
    ad28:	2a0f      	cmp	r2, #15
    ad2a:	ddf2      	ble.n	ad12 <_malloc_r+0x56>
    ad2c:	49b9      	ldr	r1, [pc, #740]	; (b014 <_malloc_r+0x358>)
    ad2e:	693c      	ldr	r4, [r7, #16]
    ad30:	f101 0e08 	add.w	lr, r1, #8
    ad34:	4574      	cmp	r4, lr
    ad36:	f000 81b3 	beq.w	b0a0 <_malloc_r+0x3e4>
    ad3a:	6863      	ldr	r3, [r4, #4]
    ad3c:	f023 0303 	bic.w	r3, r3, #3
    ad40:	1b5a      	subs	r2, r3, r5
    ad42:	2a0f      	cmp	r2, #15
    ad44:	f300 8199 	bgt.w	b07a <_malloc_r+0x3be>
    ad48:	2a00      	cmp	r2, #0
    ad4a:	f8c1 e014 	str.w	lr, [r1, #20]
    ad4e:	f8c1 e010 	str.w	lr, [r1, #16]
    ad52:	f280 809e 	bge.w	ae92 <_malloc_r+0x1d6>
    ad56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    ad5a:	f080 8167 	bcs.w	b02c <_malloc_r+0x370>
    ad5e:	08db      	lsrs	r3, r3, #3
    ad60:	f103 0c01 	add.w	ip, r3, #1
    ad64:	2201      	movs	r2, #1
    ad66:	109b      	asrs	r3, r3, #2
    ad68:	fa02 f303 	lsl.w	r3, r2, r3
    ad6c:	684a      	ldr	r2, [r1, #4]
    ad6e:	f851 803c 	ldr.w	r8, [r1, ip, lsl #3]
    ad72:	f8c4 8008 	str.w	r8, [r4, #8]
    ad76:	eb01 09cc 	add.w	r9, r1, ip, lsl #3
    ad7a:	431a      	orrs	r2, r3
    ad7c:	f1a9 0308 	sub.w	r3, r9, #8
    ad80:	60e3      	str	r3, [r4, #12]
    ad82:	604a      	str	r2, [r1, #4]
    ad84:	f841 403c 	str.w	r4, [r1, ip, lsl #3]
    ad88:	f8c8 400c 	str.w	r4, [r8, #12]
    ad8c:	1083      	asrs	r3, r0, #2
    ad8e:	2401      	movs	r4, #1
    ad90:	409c      	lsls	r4, r3
    ad92:	4294      	cmp	r4, r2
    ad94:	f200 808a 	bhi.w	aeac <_malloc_r+0x1f0>
    ad98:	4214      	tst	r4, r2
    ad9a:	d106      	bne.n	adaa <_malloc_r+0xee>
    ad9c:	f020 0003 	bic.w	r0, r0, #3
    ada0:	0064      	lsls	r4, r4, #1
    ada2:	4214      	tst	r4, r2
    ada4:	f100 0004 	add.w	r0, r0, #4
    ada8:	d0fa      	beq.n	ada0 <_malloc_r+0xe4>
    adaa:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
    adae:	46cc      	mov	ip, r9
    adb0:	4680      	mov	r8, r0
    adb2:	f8dc 100c 	ldr.w	r1, [ip, #12]
    adb6:	458c      	cmp	ip, r1
    adb8:	d107      	bne.n	adca <_malloc_r+0x10e>
    adba:	e173      	b.n	b0a4 <_malloc_r+0x3e8>
    adbc:	2a00      	cmp	r2, #0
    adbe:	f280 8181 	bge.w	b0c4 <_malloc_r+0x408>
    adc2:	68c9      	ldr	r1, [r1, #12]
    adc4:	458c      	cmp	ip, r1
    adc6:	f000 816d 	beq.w	b0a4 <_malloc_r+0x3e8>
    adca:	684b      	ldr	r3, [r1, #4]
    adcc:	f023 0303 	bic.w	r3, r3, #3
    add0:	1b5a      	subs	r2, r3, r5
    add2:	2a0f      	cmp	r2, #15
    add4:	ddf2      	ble.n	adbc <_malloc_r+0x100>
    add6:	460c      	mov	r4, r1
    add8:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    addc:	f854 8f08 	ldr.w	r8, [r4, #8]!
    ade0:	194b      	adds	r3, r1, r5
    ade2:	f045 0501 	orr.w	r5, r5, #1
    ade6:	604d      	str	r5, [r1, #4]
    ade8:	f042 0101 	orr.w	r1, r2, #1
    adec:	f8c8 c00c 	str.w	ip, [r8, #12]
    adf0:	4630      	mov	r0, r6
    adf2:	f8cc 8008 	str.w	r8, [ip, #8]
    adf6:	617b      	str	r3, [r7, #20]
    adf8:	613b      	str	r3, [r7, #16]
    adfa:	f8c3 e00c 	str.w	lr, [r3, #12]
    adfe:	f8c3 e008 	str.w	lr, [r3, #8]
    ae02:	6059      	str	r1, [r3, #4]
    ae04:	509a      	str	r2, [r3, r2]
    ae06:	f000 fb61 	bl	b4cc <__malloc_unlock>
    ae0a:	e01f      	b.n	ae4c <_malloc_r+0x190>
    ae0c:	2910      	cmp	r1, #16
    ae0e:	d821      	bhi.n	ae54 <_malloc_r+0x198>
    ae10:	f000 fb5a 	bl	b4c8 <__malloc_lock>
    ae14:	2510      	movs	r5, #16
    ae16:	2306      	movs	r3, #6
    ae18:	2002      	movs	r0, #2
    ae1a:	4f7e      	ldr	r7, [pc, #504]	; (b014 <_malloc_r+0x358>)
    ae1c:	eb07 0383 	add.w	r3, r7, r3, lsl #2
    ae20:	f1a3 0208 	sub.w	r2, r3, #8
    ae24:	685c      	ldr	r4, [r3, #4]
    ae26:	4294      	cmp	r4, r2
    ae28:	f000 8145 	beq.w	b0b6 <_malloc_r+0x3fa>
    ae2c:	6863      	ldr	r3, [r4, #4]
    ae2e:	68e1      	ldr	r1, [r4, #12]
    ae30:	68a5      	ldr	r5, [r4, #8]
    ae32:	f023 0303 	bic.w	r3, r3, #3
    ae36:	4423      	add	r3, r4
    ae38:	4630      	mov	r0, r6
    ae3a:	685a      	ldr	r2, [r3, #4]
    ae3c:	60e9      	str	r1, [r5, #12]
    ae3e:	f042 0201 	orr.w	r2, r2, #1
    ae42:	608d      	str	r5, [r1, #8]
    ae44:	605a      	str	r2, [r3, #4]
    ae46:	f000 fb41 	bl	b4cc <__malloc_unlock>
    ae4a:	3408      	adds	r4, #8
    ae4c:	4620      	mov	r0, r4
    ae4e:	b003      	add	sp, #12
    ae50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae54:	2400      	movs	r4, #0
    ae56:	230c      	movs	r3, #12
    ae58:	4620      	mov	r0, r4
    ae5a:	6033      	str	r3, [r6, #0]
    ae5c:	b003      	add	sp, #12
    ae5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae62:	2380      	movs	r3, #128	; 0x80
    ae64:	f04f 0e40 	mov.w	lr, #64	; 0x40
    ae68:	203f      	movs	r0, #63	; 0x3f
    ae6a:	e749      	b.n	ad00 <_malloc_r+0x44>
    ae6c:	4670      	mov	r0, lr
    ae6e:	e75d      	b.n	ad2c <_malloc_r+0x70>
    ae70:	4423      	add	r3, r4
    ae72:	68e1      	ldr	r1, [r4, #12]
    ae74:	685a      	ldr	r2, [r3, #4]
    ae76:	68a5      	ldr	r5, [r4, #8]
    ae78:	f042 0201 	orr.w	r2, r2, #1
    ae7c:	60e9      	str	r1, [r5, #12]
    ae7e:	4630      	mov	r0, r6
    ae80:	608d      	str	r5, [r1, #8]
    ae82:	605a      	str	r2, [r3, #4]
    ae84:	f000 fb22 	bl	b4cc <__malloc_unlock>
    ae88:	3408      	adds	r4, #8
    ae8a:	4620      	mov	r0, r4
    ae8c:	b003      	add	sp, #12
    ae8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    ae92:	4423      	add	r3, r4
    ae94:	4630      	mov	r0, r6
    ae96:	685a      	ldr	r2, [r3, #4]
    ae98:	f042 0201 	orr.w	r2, r2, #1
    ae9c:	605a      	str	r2, [r3, #4]
    ae9e:	f000 fb15 	bl	b4cc <__malloc_unlock>
    aea2:	3408      	adds	r4, #8
    aea4:	4620      	mov	r0, r4
    aea6:	b003      	add	sp, #12
    aea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    aeac:	68bc      	ldr	r4, [r7, #8]
    aeae:	6863      	ldr	r3, [r4, #4]
    aeb0:	f023 0803 	bic.w	r8, r3, #3
    aeb4:	45a8      	cmp	r8, r5
    aeb6:	d304      	bcc.n	aec2 <_malloc_r+0x206>
    aeb8:	ebc5 0308 	rsb	r3, r5, r8
    aebc:	2b0f      	cmp	r3, #15
    aebe:	f300 808c 	bgt.w	afda <_malloc_r+0x31e>
    aec2:	4b55      	ldr	r3, [pc, #340]	; (b018 <_malloc_r+0x35c>)
    aec4:	f8df 9160 	ldr.w	r9, [pc, #352]	; b028 <_malloc_r+0x36c>
    aec8:	681a      	ldr	r2, [r3, #0]
    aeca:	f8d9 3000 	ldr.w	r3, [r9]
    aece:	3301      	adds	r3, #1
    aed0:	442a      	add	r2, r5
    aed2:	eb04 0a08 	add.w	sl, r4, r8
    aed6:	f000 8160 	beq.w	b19a <_malloc_r+0x4de>
    aeda:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
    aede:	320f      	adds	r2, #15
    aee0:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
    aee4:	f022 020f 	bic.w	r2, r2, #15
    aee8:	4611      	mov	r1, r2
    aeea:	4630      	mov	r0, r6
    aeec:	9201      	str	r2, [sp, #4]
    aeee:	f000 fcdf 	bl	b8b0 <_sbrk_r>
    aef2:	f1b0 3fff 	cmp.w	r0, #4294967295
    aef6:	4683      	mov	fp, r0
    aef8:	9a01      	ldr	r2, [sp, #4]
    aefa:	f000 8158 	beq.w	b1ae <_malloc_r+0x4f2>
    aefe:	4582      	cmp	sl, r0
    af00:	f200 80fc 	bhi.w	b0fc <_malloc_r+0x440>
    af04:	4b45      	ldr	r3, [pc, #276]	; (b01c <_malloc_r+0x360>)
    af06:	6819      	ldr	r1, [r3, #0]
    af08:	45da      	cmp	sl, fp
    af0a:	4411      	add	r1, r2
    af0c:	6019      	str	r1, [r3, #0]
    af0e:	f000 8153 	beq.w	b1b8 <_malloc_r+0x4fc>
    af12:	f8d9 0000 	ldr.w	r0, [r9]
    af16:	f8df e110 	ldr.w	lr, [pc, #272]	; b028 <_malloc_r+0x36c>
    af1a:	3001      	adds	r0, #1
    af1c:	bf1b      	ittet	ne
    af1e:	ebca 0a0b 	rsbne	sl, sl, fp
    af22:	4451      	addne	r1, sl
    af24:	f8ce b000 	streq.w	fp, [lr]
    af28:	6019      	strne	r1, [r3, #0]
    af2a:	f01b 0107 	ands.w	r1, fp, #7
    af2e:	f000 8117 	beq.w	b160 <_malloc_r+0x4a4>
    af32:	f1c1 0008 	rsb	r0, r1, #8
    af36:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
    af3a:	4483      	add	fp, r0
    af3c:	3108      	adds	r1, #8
    af3e:	445a      	add	r2, fp
    af40:	f3c2 020b 	ubfx	r2, r2, #0, #12
    af44:	ebc2 0901 	rsb	r9, r2, r1
    af48:	4649      	mov	r1, r9
    af4a:	4630      	mov	r0, r6
    af4c:	9301      	str	r3, [sp, #4]
    af4e:	f000 fcaf 	bl	b8b0 <_sbrk_r>
    af52:	1c43      	adds	r3, r0, #1
    af54:	9b01      	ldr	r3, [sp, #4]
    af56:	f000 813f 	beq.w	b1d8 <_malloc_r+0x51c>
    af5a:	ebcb 0200 	rsb	r2, fp, r0
    af5e:	444a      	add	r2, r9
    af60:	f042 0201 	orr.w	r2, r2, #1
    af64:	6819      	ldr	r1, [r3, #0]
    af66:	f8c7 b008 	str.w	fp, [r7, #8]
    af6a:	4449      	add	r1, r9
    af6c:	42bc      	cmp	r4, r7
    af6e:	f8cb 2004 	str.w	r2, [fp, #4]
    af72:	6019      	str	r1, [r3, #0]
    af74:	f8df 90a4 	ldr.w	r9, [pc, #164]	; b01c <_malloc_r+0x360>
    af78:	d016      	beq.n	afa8 <_malloc_r+0x2ec>
    af7a:	f1b8 0f0f 	cmp.w	r8, #15
    af7e:	f240 80fd 	bls.w	b17c <_malloc_r+0x4c0>
    af82:	6862      	ldr	r2, [r4, #4]
    af84:	f1a8 030c 	sub.w	r3, r8, #12
    af88:	f023 0307 	bic.w	r3, r3, #7
    af8c:	18e0      	adds	r0, r4, r3
    af8e:	f002 0201 	and.w	r2, r2, #1
    af92:	f04f 0e05 	mov.w	lr, #5
    af96:	431a      	orrs	r2, r3
    af98:	2b0f      	cmp	r3, #15
    af9a:	6062      	str	r2, [r4, #4]
    af9c:	f8c0 e004 	str.w	lr, [r0, #4]
    afa0:	f8c0 e008 	str.w	lr, [r0, #8]
    afa4:	f200 811c 	bhi.w	b1e0 <_malloc_r+0x524>
    afa8:	4b1d      	ldr	r3, [pc, #116]	; (b020 <_malloc_r+0x364>)
    afaa:	68bc      	ldr	r4, [r7, #8]
    afac:	681a      	ldr	r2, [r3, #0]
    afae:	4291      	cmp	r1, r2
    afb0:	bf88      	it	hi
    afb2:	6019      	strhi	r1, [r3, #0]
    afb4:	4b1b      	ldr	r3, [pc, #108]	; (b024 <_malloc_r+0x368>)
    afb6:	681a      	ldr	r2, [r3, #0]
    afb8:	4291      	cmp	r1, r2
    afba:	6862      	ldr	r2, [r4, #4]
    afbc:	bf88      	it	hi
    afbe:	6019      	strhi	r1, [r3, #0]
    afc0:	f022 0203 	bic.w	r2, r2, #3
    afc4:	4295      	cmp	r5, r2
    afc6:	eba2 0305 	sub.w	r3, r2, r5
    afca:	d801      	bhi.n	afd0 <_malloc_r+0x314>
    afcc:	2b0f      	cmp	r3, #15
    afce:	dc04      	bgt.n	afda <_malloc_r+0x31e>
    afd0:	4630      	mov	r0, r6
    afd2:	f000 fa7b 	bl	b4cc <__malloc_unlock>
    afd6:	2400      	movs	r4, #0
    afd8:	e738      	b.n	ae4c <_malloc_r+0x190>
    afda:	1962      	adds	r2, r4, r5
    afdc:	f043 0301 	orr.w	r3, r3, #1
    afe0:	f045 0501 	orr.w	r5, r5, #1
    afe4:	6065      	str	r5, [r4, #4]
    afe6:	4630      	mov	r0, r6
    afe8:	60ba      	str	r2, [r7, #8]
    afea:	6053      	str	r3, [r2, #4]
    afec:	f000 fa6e 	bl	b4cc <__malloc_unlock>
    aff0:	3408      	adds	r4, #8
    aff2:	4620      	mov	r0, r4
    aff4:	b003      	add	sp, #12
    aff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    affa:	2b14      	cmp	r3, #20
    affc:	d971      	bls.n	b0e2 <_malloc_r+0x426>
    affe:	2b54      	cmp	r3, #84	; 0x54
    b000:	f200 80a4 	bhi.w	b14c <_malloc_r+0x490>
    b004:	0b28      	lsrs	r0, r5, #12
    b006:	f100 0e6f 	add.w	lr, r0, #111	; 0x6f
    b00a:	ea4f 034e 	mov.w	r3, lr, lsl #1
    b00e:	306e      	adds	r0, #110	; 0x6e
    b010:	e676      	b.n	ad00 <_malloc_r+0x44>
    b012:	bf00      	nop
    b014:	20001710 	.word	0x20001710
    b018:	20036efc 	.word	0x20036efc
    b01c:	20036f00 	.word	0x20036f00
    b020:	20036ef8 	.word	0x20036ef8
    b024:	20036ef4 	.word	0x20036ef4
    b028:	20001b1c 	.word	0x20001b1c
    b02c:	0a5a      	lsrs	r2, r3, #9
    b02e:	2a04      	cmp	r2, #4
    b030:	d95e      	bls.n	b0f0 <_malloc_r+0x434>
    b032:	2a14      	cmp	r2, #20
    b034:	f200 80b3 	bhi.w	b19e <_malloc_r+0x4e2>
    b038:	f102 015c 	add.w	r1, r2, #92	; 0x5c
    b03c:	0049      	lsls	r1, r1, #1
    b03e:	325b      	adds	r2, #91	; 0x5b
    b040:	eb07 0c81 	add.w	ip, r7, r1, lsl #2
    b044:	f857 1021 	ldr.w	r1, [r7, r1, lsl #2]
    b048:	f8df 81dc 	ldr.w	r8, [pc, #476]	; b228 <_malloc_r+0x56c>
    b04c:	f1ac 0c08 	sub.w	ip, ip, #8
    b050:	458c      	cmp	ip, r1
    b052:	f000 8088 	beq.w	b166 <_malloc_r+0x4aa>
    b056:	684a      	ldr	r2, [r1, #4]
    b058:	f022 0203 	bic.w	r2, r2, #3
    b05c:	4293      	cmp	r3, r2
    b05e:	d202      	bcs.n	b066 <_malloc_r+0x3aa>
    b060:	6889      	ldr	r1, [r1, #8]
    b062:	458c      	cmp	ip, r1
    b064:	d1f7      	bne.n	b056 <_malloc_r+0x39a>
    b066:	f8d1 c00c 	ldr.w	ip, [r1, #12]
    b06a:	687a      	ldr	r2, [r7, #4]
    b06c:	f8c4 c00c 	str.w	ip, [r4, #12]
    b070:	60a1      	str	r1, [r4, #8]
    b072:	f8cc 4008 	str.w	r4, [ip, #8]
    b076:	60cc      	str	r4, [r1, #12]
    b078:	e688      	b.n	ad8c <_malloc_r+0xd0>
    b07a:	1963      	adds	r3, r4, r5
    b07c:	f042 0701 	orr.w	r7, r2, #1
    b080:	f045 0501 	orr.w	r5, r5, #1
    b084:	6065      	str	r5, [r4, #4]
    b086:	4630      	mov	r0, r6
    b088:	614b      	str	r3, [r1, #20]
    b08a:	610b      	str	r3, [r1, #16]
    b08c:	f8c3 e00c 	str.w	lr, [r3, #12]
    b090:	f8c3 e008 	str.w	lr, [r3, #8]
    b094:	605f      	str	r7, [r3, #4]
    b096:	509a      	str	r2, [r3, r2]
    b098:	3408      	adds	r4, #8
    b09a:	f000 fa17 	bl	b4cc <__malloc_unlock>
    b09e:	e6d5      	b.n	ae4c <_malloc_r+0x190>
    b0a0:	684a      	ldr	r2, [r1, #4]
    b0a2:	e673      	b.n	ad8c <_malloc_r+0xd0>
    b0a4:	f108 0801 	add.w	r8, r8, #1
    b0a8:	f018 0f03 	tst.w	r8, #3
    b0ac:	f10c 0c08 	add.w	ip, ip, #8
    b0b0:	f47f ae7f 	bne.w	adb2 <_malloc_r+0xf6>
    b0b4:	e030      	b.n	b118 <_malloc_r+0x45c>
    b0b6:	68dc      	ldr	r4, [r3, #12]
    b0b8:	42a3      	cmp	r3, r4
    b0ba:	bf08      	it	eq
    b0bc:	3002      	addeq	r0, #2
    b0be:	f43f ae35 	beq.w	ad2c <_malloc_r+0x70>
    b0c2:	e6b3      	b.n	ae2c <_malloc_r+0x170>
    b0c4:	440b      	add	r3, r1
    b0c6:	460c      	mov	r4, r1
    b0c8:	685a      	ldr	r2, [r3, #4]
    b0ca:	68c9      	ldr	r1, [r1, #12]
    b0cc:	f854 5f08 	ldr.w	r5, [r4, #8]!
    b0d0:	f042 0201 	orr.w	r2, r2, #1
    b0d4:	605a      	str	r2, [r3, #4]
    b0d6:	4630      	mov	r0, r6
    b0d8:	60e9      	str	r1, [r5, #12]
    b0da:	608d      	str	r5, [r1, #8]
    b0dc:	f000 f9f6 	bl	b4cc <__malloc_unlock>
    b0e0:	e6b4      	b.n	ae4c <_malloc_r+0x190>
    b0e2:	f103 0e5c 	add.w	lr, r3, #92	; 0x5c
    b0e6:	f103 005b 	add.w	r0, r3, #91	; 0x5b
    b0ea:	ea4f 034e 	mov.w	r3, lr, lsl #1
    b0ee:	e607      	b.n	ad00 <_malloc_r+0x44>
    b0f0:	099a      	lsrs	r2, r3, #6
    b0f2:	f102 0139 	add.w	r1, r2, #57	; 0x39
    b0f6:	0049      	lsls	r1, r1, #1
    b0f8:	3238      	adds	r2, #56	; 0x38
    b0fa:	e7a1      	b.n	b040 <_malloc_r+0x384>
    b0fc:	42bc      	cmp	r4, r7
    b0fe:	4b4a      	ldr	r3, [pc, #296]	; (b228 <_malloc_r+0x56c>)
    b100:	f43f af00 	beq.w	af04 <_malloc_r+0x248>
    b104:	689c      	ldr	r4, [r3, #8]
    b106:	6862      	ldr	r2, [r4, #4]
    b108:	f022 0203 	bic.w	r2, r2, #3
    b10c:	e75a      	b.n	afc4 <_malloc_r+0x308>
    b10e:	f859 3908 	ldr.w	r3, [r9], #-8
    b112:	4599      	cmp	r9, r3
    b114:	f040 8082 	bne.w	b21c <_malloc_r+0x560>
    b118:	f010 0f03 	tst.w	r0, #3
    b11c:	f100 30ff 	add.w	r0, r0, #4294967295
    b120:	d1f5      	bne.n	b10e <_malloc_r+0x452>
    b122:	687b      	ldr	r3, [r7, #4]
    b124:	ea23 0304 	bic.w	r3, r3, r4
    b128:	607b      	str	r3, [r7, #4]
    b12a:	0064      	lsls	r4, r4, #1
    b12c:	429c      	cmp	r4, r3
    b12e:	f63f aebd 	bhi.w	aeac <_malloc_r+0x1f0>
    b132:	2c00      	cmp	r4, #0
    b134:	f43f aeba 	beq.w	aeac <_malloc_r+0x1f0>
    b138:	421c      	tst	r4, r3
    b13a:	4640      	mov	r0, r8
    b13c:	f47f ae35 	bne.w	adaa <_malloc_r+0xee>
    b140:	0064      	lsls	r4, r4, #1
    b142:	421c      	tst	r4, r3
    b144:	f100 0004 	add.w	r0, r0, #4
    b148:	d0fa      	beq.n	b140 <_malloc_r+0x484>
    b14a:	e62e      	b.n	adaa <_malloc_r+0xee>
    b14c:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
    b150:	d818      	bhi.n	b184 <_malloc_r+0x4c8>
    b152:	0be8      	lsrs	r0, r5, #15
    b154:	f100 0e78 	add.w	lr, r0, #120	; 0x78
    b158:	ea4f 034e 	mov.w	r3, lr, lsl #1
    b15c:	3077      	adds	r0, #119	; 0x77
    b15e:	e5cf      	b.n	ad00 <_malloc_r+0x44>
    b160:	f44f 5180 	mov.w	r1, #4096	; 0x1000
    b164:	e6eb      	b.n	af3e <_malloc_r+0x282>
    b166:	2101      	movs	r1, #1
    b168:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b16c:	1092      	asrs	r2, r2, #2
    b16e:	fa01 f202 	lsl.w	r2, r1, r2
    b172:	431a      	orrs	r2, r3
    b174:	f8c8 2004 	str.w	r2, [r8, #4]
    b178:	4661      	mov	r1, ip
    b17a:	e777      	b.n	b06c <_malloc_r+0x3b0>
    b17c:	2301      	movs	r3, #1
    b17e:	f8cb 3004 	str.w	r3, [fp, #4]
    b182:	e725      	b.n	afd0 <_malloc_r+0x314>
    b184:	f240 5254 	movw	r2, #1364	; 0x554
    b188:	4293      	cmp	r3, r2
    b18a:	d820      	bhi.n	b1ce <_malloc_r+0x512>
    b18c:	0ca8      	lsrs	r0, r5, #18
    b18e:	f100 0e7d 	add.w	lr, r0, #125	; 0x7d
    b192:	ea4f 034e 	mov.w	r3, lr, lsl #1
    b196:	307c      	adds	r0, #124	; 0x7c
    b198:	e5b2      	b.n	ad00 <_malloc_r+0x44>
    b19a:	3210      	adds	r2, #16
    b19c:	e6a4      	b.n	aee8 <_malloc_r+0x22c>
    b19e:	2a54      	cmp	r2, #84	; 0x54
    b1a0:	d826      	bhi.n	b1f0 <_malloc_r+0x534>
    b1a2:	0b1a      	lsrs	r2, r3, #12
    b1a4:	f102 016f 	add.w	r1, r2, #111	; 0x6f
    b1a8:	0049      	lsls	r1, r1, #1
    b1aa:	326e      	adds	r2, #110	; 0x6e
    b1ac:	e748      	b.n	b040 <_malloc_r+0x384>
    b1ae:	68bc      	ldr	r4, [r7, #8]
    b1b0:	6862      	ldr	r2, [r4, #4]
    b1b2:	f022 0203 	bic.w	r2, r2, #3
    b1b6:	e705      	b.n	afc4 <_malloc_r+0x308>
    b1b8:	f3ca 000b 	ubfx	r0, sl, #0, #12
    b1bc:	2800      	cmp	r0, #0
    b1be:	f47f aea8 	bne.w	af12 <_malloc_r+0x256>
    b1c2:	4442      	add	r2, r8
    b1c4:	68bb      	ldr	r3, [r7, #8]
    b1c6:	f042 0201 	orr.w	r2, r2, #1
    b1ca:	605a      	str	r2, [r3, #4]
    b1cc:	e6ec      	b.n	afa8 <_malloc_r+0x2ec>
    b1ce:	23fe      	movs	r3, #254	; 0xfe
    b1d0:	f04f 0e7f 	mov.w	lr, #127	; 0x7f
    b1d4:	207e      	movs	r0, #126	; 0x7e
    b1d6:	e593      	b.n	ad00 <_malloc_r+0x44>
    b1d8:	2201      	movs	r2, #1
    b1da:	f04f 0900 	mov.w	r9, #0
    b1de:	e6c1      	b.n	af64 <_malloc_r+0x2a8>
    b1e0:	f104 0108 	add.w	r1, r4, #8
    b1e4:	4630      	mov	r0, r6
    b1e6:	f002 fedb 	bl	dfa0 <_free_r>
    b1ea:	f8d9 1000 	ldr.w	r1, [r9]
    b1ee:	e6db      	b.n	afa8 <_malloc_r+0x2ec>
    b1f0:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    b1f4:	d805      	bhi.n	b202 <_malloc_r+0x546>
    b1f6:	0bda      	lsrs	r2, r3, #15
    b1f8:	f102 0178 	add.w	r1, r2, #120	; 0x78
    b1fc:	0049      	lsls	r1, r1, #1
    b1fe:	3277      	adds	r2, #119	; 0x77
    b200:	e71e      	b.n	b040 <_malloc_r+0x384>
    b202:	f240 5154 	movw	r1, #1364	; 0x554
    b206:	428a      	cmp	r2, r1
    b208:	d805      	bhi.n	b216 <_malloc_r+0x55a>
    b20a:	0c9a      	lsrs	r2, r3, #18
    b20c:	f102 017d 	add.w	r1, r2, #125	; 0x7d
    b210:	0049      	lsls	r1, r1, #1
    b212:	327c      	adds	r2, #124	; 0x7c
    b214:	e714      	b.n	b040 <_malloc_r+0x384>
    b216:	21fe      	movs	r1, #254	; 0xfe
    b218:	227e      	movs	r2, #126	; 0x7e
    b21a:	e711      	b.n	b040 <_malloc_r+0x384>
    b21c:	687b      	ldr	r3, [r7, #4]
    b21e:	e784      	b.n	b12a <_malloc_r+0x46e>
    b220:	08e8      	lsrs	r0, r5, #3
    b222:	1c43      	adds	r3, r0, #1
    b224:	005b      	lsls	r3, r3, #1
    b226:	e5f8      	b.n	ae1a <_malloc_r+0x15e>
    b228:	20001710 	.word	0x20001710

0000b22c <__ascii_mbtowc>:
    b22c:	b082      	sub	sp, #8
    b22e:	b149      	cbz	r1, b244 <__ascii_mbtowc+0x18>
    b230:	b15a      	cbz	r2, b24a <__ascii_mbtowc+0x1e>
    b232:	b16b      	cbz	r3, b250 <__ascii_mbtowc+0x24>
    b234:	7813      	ldrb	r3, [r2, #0]
    b236:	600b      	str	r3, [r1, #0]
    b238:	7812      	ldrb	r2, [r2, #0]
    b23a:	1c10      	adds	r0, r2, #0
    b23c:	bf18      	it	ne
    b23e:	2001      	movne	r0, #1
    b240:	b002      	add	sp, #8
    b242:	4770      	bx	lr
    b244:	a901      	add	r1, sp, #4
    b246:	2a00      	cmp	r2, #0
    b248:	d1f3      	bne.n	b232 <__ascii_mbtowc+0x6>
    b24a:	4610      	mov	r0, r2
    b24c:	b002      	add	sp, #8
    b24e:	4770      	bx	lr
    b250:	f06f 0001 	mvn.w	r0, #1
    b254:	e7f4      	b.n	b240 <__ascii_mbtowc+0x14>
    b256:	bf00      	nop
	...

0000b260 <memchr>:
    b260:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b264:	2a10      	cmp	r2, #16
    b266:	db2b      	blt.n	b2c0 <memchr+0x60>
    b268:	f010 0f07 	tst.w	r0, #7
    b26c:	d008      	beq.n	b280 <memchr+0x20>
    b26e:	f810 3b01 	ldrb.w	r3, [r0], #1
    b272:	3a01      	subs	r2, #1
    b274:	428b      	cmp	r3, r1
    b276:	d02d      	beq.n	b2d4 <memchr+0x74>
    b278:	f010 0f07 	tst.w	r0, #7
    b27c:	b342      	cbz	r2, b2d0 <memchr+0x70>
    b27e:	d1f6      	bne.n	b26e <memchr+0xe>
    b280:	b4f0      	push	{r4, r5, r6, r7}
    b282:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
    b286:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
    b28a:	f022 0407 	bic.w	r4, r2, #7
    b28e:	f07f 0700 	mvns.w	r7, #0
    b292:	2300      	movs	r3, #0
    b294:	e8f0 5602 	ldrd	r5, r6, [r0], #8
    b298:	3c08      	subs	r4, #8
    b29a:	ea85 0501 	eor.w	r5, r5, r1
    b29e:	ea86 0601 	eor.w	r6, r6, r1
    b2a2:	fa85 f547 	uadd8	r5, r5, r7
    b2a6:	faa3 f587 	sel	r5, r3, r7
    b2aa:	fa86 f647 	uadd8	r6, r6, r7
    b2ae:	faa5 f687 	sel	r6, r5, r7
    b2b2:	b98e      	cbnz	r6, b2d8 <memchr+0x78>
    b2b4:	d1ee      	bne.n	b294 <memchr+0x34>
    b2b6:	bcf0      	pop	{r4, r5, r6, r7}
    b2b8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
    b2bc:	f002 0207 	and.w	r2, r2, #7
    b2c0:	b132      	cbz	r2, b2d0 <memchr+0x70>
    b2c2:	f810 3b01 	ldrb.w	r3, [r0], #1
    b2c6:	3a01      	subs	r2, #1
    b2c8:	ea83 0301 	eor.w	r3, r3, r1
    b2cc:	b113      	cbz	r3, b2d4 <memchr+0x74>
    b2ce:	d1f8      	bne.n	b2c2 <memchr+0x62>
    b2d0:	2000      	movs	r0, #0
    b2d2:	4770      	bx	lr
    b2d4:	3801      	subs	r0, #1
    b2d6:	4770      	bx	lr
    b2d8:	2d00      	cmp	r5, #0
    b2da:	bf06      	itte	eq
    b2dc:	4635      	moveq	r5, r6
    b2de:	3803      	subeq	r0, #3
    b2e0:	3807      	subne	r0, #7
    b2e2:	f015 0f01 	tst.w	r5, #1
    b2e6:	d107      	bne.n	b2f8 <memchr+0x98>
    b2e8:	3001      	adds	r0, #1
    b2ea:	f415 7f80 	tst.w	r5, #256	; 0x100
    b2ee:	bf02      	ittt	eq
    b2f0:	3001      	addeq	r0, #1
    b2f2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
    b2f6:	3001      	addeq	r0, #1
    b2f8:	bcf0      	pop	{r4, r5, r6, r7}
    b2fa:	3801      	subs	r0, #1
    b2fc:	4770      	bx	lr
    b2fe:	bf00      	nop

0000b300 <memcmp>:
    b300:	2a03      	cmp	r2, #3
    b302:	b470      	push	{r4, r5, r6}
    b304:	d926      	bls.n	b354 <memcmp+0x54>
    b306:	ea40 0301 	orr.w	r3, r0, r1
    b30a:	079b      	lsls	r3, r3, #30
    b30c:	d011      	beq.n	b332 <memcmp+0x32>
    b30e:	7804      	ldrb	r4, [r0, #0]
    b310:	780d      	ldrb	r5, [r1, #0]
    b312:	42ac      	cmp	r4, r5
    b314:	d122      	bne.n	b35c <memcmp+0x5c>
    b316:	4402      	add	r2, r0
    b318:	1c43      	adds	r3, r0, #1
    b31a:	e005      	b.n	b328 <memcmp+0x28>
    b31c:	f813 4b01 	ldrb.w	r4, [r3], #1
    b320:	f811 5f01 	ldrb.w	r5, [r1, #1]!
    b324:	42ac      	cmp	r4, r5
    b326:	d119      	bne.n	b35c <memcmp+0x5c>
    b328:	4293      	cmp	r3, r2
    b32a:	d1f7      	bne.n	b31c <memcmp+0x1c>
    b32c:	2000      	movs	r0, #0
    b32e:	bc70      	pop	{r4, r5, r6}
    b330:	4770      	bx	lr
    b332:	460c      	mov	r4, r1
    b334:	4603      	mov	r3, r0
    b336:	681e      	ldr	r6, [r3, #0]
    b338:	6825      	ldr	r5, [r4, #0]
    b33a:	42ae      	cmp	r6, r5
    b33c:	4618      	mov	r0, r3
    b33e:	4621      	mov	r1, r4
    b340:	f103 0304 	add.w	r3, r3, #4
    b344:	f104 0404 	add.w	r4, r4, #4
    b348:	d1e1      	bne.n	b30e <memcmp+0xe>
    b34a:	3a04      	subs	r2, #4
    b34c:	2a03      	cmp	r2, #3
    b34e:	4618      	mov	r0, r3
    b350:	4621      	mov	r1, r4
    b352:	d8f0      	bhi.n	b336 <memcmp+0x36>
    b354:	2a00      	cmp	r2, #0
    b356:	d1da      	bne.n	b30e <memcmp+0xe>
    b358:	4610      	mov	r0, r2
    b35a:	e7e8      	b.n	b32e <memcmp+0x2e>
    b35c:	1b60      	subs	r0, r4, r5
    b35e:	bc70      	pop	{r4, r5, r6}
    b360:	4770      	bx	lr
    b362:	bf00      	nop

0000b364 <memmove>:
    b364:	4288      	cmp	r0, r1
    b366:	b5f0      	push	{r4, r5, r6, r7, lr}
    b368:	d90d      	bls.n	b386 <memmove+0x22>
    b36a:	188b      	adds	r3, r1, r2
    b36c:	4298      	cmp	r0, r3
    b36e:	d20a      	bcs.n	b386 <memmove+0x22>
    b370:	1881      	adds	r1, r0, r2
    b372:	2a00      	cmp	r2, #0
    b374:	d051      	beq.n	b41a <memmove+0xb6>
    b376:	1a9a      	subs	r2, r3, r2
    b378:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
    b37c:	f801 4d01 	strb.w	r4, [r1, #-1]!
    b380:	4293      	cmp	r3, r2
    b382:	d1f9      	bne.n	b378 <memmove+0x14>
    b384:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b386:	2a0f      	cmp	r2, #15
    b388:	d948      	bls.n	b41c <memmove+0xb8>
    b38a:	ea41 0300 	orr.w	r3, r1, r0
    b38e:	079b      	lsls	r3, r3, #30
    b390:	d146      	bne.n	b420 <memmove+0xbc>
    b392:	f100 0410 	add.w	r4, r0, #16
    b396:	f101 0310 	add.w	r3, r1, #16
    b39a:	4615      	mov	r5, r2
    b39c:	f853 6c10 	ldr.w	r6, [r3, #-16]
    b3a0:	f844 6c10 	str.w	r6, [r4, #-16]
    b3a4:	f853 6c0c 	ldr.w	r6, [r3, #-12]
    b3a8:	f844 6c0c 	str.w	r6, [r4, #-12]
    b3ac:	f853 6c08 	ldr.w	r6, [r3, #-8]
    b3b0:	f844 6c08 	str.w	r6, [r4, #-8]
    b3b4:	3d10      	subs	r5, #16
    b3b6:	f853 6c04 	ldr.w	r6, [r3, #-4]
    b3ba:	f844 6c04 	str.w	r6, [r4, #-4]
    b3be:	2d0f      	cmp	r5, #15
    b3c0:	f103 0310 	add.w	r3, r3, #16
    b3c4:	f104 0410 	add.w	r4, r4, #16
    b3c8:	d8e8      	bhi.n	b39c <memmove+0x38>
    b3ca:	f1a2 0310 	sub.w	r3, r2, #16
    b3ce:	f023 030f 	bic.w	r3, r3, #15
    b3d2:	f002 0e0f 	and.w	lr, r2, #15
    b3d6:	3310      	adds	r3, #16
    b3d8:	f1be 0f03 	cmp.w	lr, #3
    b3dc:	4419      	add	r1, r3
    b3de:	4403      	add	r3, r0
    b3e0:	d921      	bls.n	b426 <memmove+0xc2>
    b3e2:	1f1e      	subs	r6, r3, #4
    b3e4:	460d      	mov	r5, r1
    b3e6:	4674      	mov	r4, lr
    b3e8:	3c04      	subs	r4, #4
    b3ea:	f855 7b04 	ldr.w	r7, [r5], #4
    b3ee:	f846 7f04 	str.w	r7, [r6, #4]!
    b3f2:	2c03      	cmp	r4, #3
    b3f4:	d8f8      	bhi.n	b3e8 <memmove+0x84>
    b3f6:	f1ae 0404 	sub.w	r4, lr, #4
    b3fa:	f024 0403 	bic.w	r4, r4, #3
    b3fe:	3404      	adds	r4, #4
    b400:	4423      	add	r3, r4
    b402:	4421      	add	r1, r4
    b404:	f002 0203 	and.w	r2, r2, #3
    b408:	b162      	cbz	r2, b424 <memmove+0xc0>
    b40a:	3b01      	subs	r3, #1
    b40c:	440a      	add	r2, r1
    b40e:	f811 4b01 	ldrb.w	r4, [r1], #1
    b412:	f803 4f01 	strb.w	r4, [r3, #1]!
    b416:	428a      	cmp	r2, r1
    b418:	d1f9      	bne.n	b40e <memmove+0xaa>
    b41a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b41c:	4603      	mov	r3, r0
    b41e:	e7f3      	b.n	b408 <memmove+0xa4>
    b420:	4603      	mov	r3, r0
    b422:	e7f2      	b.n	b40a <memmove+0xa6>
    b424:	bdf0      	pop	{r4, r5, r6, r7, pc}
    b426:	4672      	mov	r2, lr
    b428:	e7ee      	b.n	b408 <memmove+0xa4>
    b42a:	bf00      	nop

0000b42c <memset>:
    b42c:	b470      	push	{r4, r5, r6}
    b42e:	0784      	lsls	r4, r0, #30
    b430:	d046      	beq.n	b4c0 <memset+0x94>
    b432:	1e54      	subs	r4, r2, #1
    b434:	2a00      	cmp	r2, #0
    b436:	d041      	beq.n	b4bc <memset+0x90>
    b438:	b2cd      	uxtb	r5, r1
    b43a:	4603      	mov	r3, r0
    b43c:	e002      	b.n	b444 <memset+0x18>
    b43e:	1e62      	subs	r2, r4, #1
    b440:	b3e4      	cbz	r4, b4bc <memset+0x90>
    b442:	4614      	mov	r4, r2
    b444:	f803 5b01 	strb.w	r5, [r3], #1
    b448:	079a      	lsls	r2, r3, #30
    b44a:	d1f8      	bne.n	b43e <memset+0x12>
    b44c:	2c03      	cmp	r4, #3
    b44e:	d92e      	bls.n	b4ae <memset+0x82>
    b450:	b2cd      	uxtb	r5, r1
    b452:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
    b456:	2c0f      	cmp	r4, #15
    b458:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
    b45c:	d919      	bls.n	b492 <memset+0x66>
    b45e:	f103 0210 	add.w	r2, r3, #16
    b462:	4626      	mov	r6, r4
    b464:	3e10      	subs	r6, #16
    b466:	2e0f      	cmp	r6, #15
    b468:	f842 5c10 	str.w	r5, [r2, #-16]
    b46c:	f842 5c0c 	str.w	r5, [r2, #-12]
    b470:	f842 5c08 	str.w	r5, [r2, #-8]
    b474:	f842 5c04 	str.w	r5, [r2, #-4]
    b478:	f102 0210 	add.w	r2, r2, #16
    b47c:	d8f2      	bhi.n	b464 <memset+0x38>
    b47e:	f1a4 0210 	sub.w	r2, r4, #16
    b482:	f022 020f 	bic.w	r2, r2, #15
    b486:	f004 040f 	and.w	r4, r4, #15
    b48a:	3210      	adds	r2, #16
    b48c:	2c03      	cmp	r4, #3
    b48e:	4413      	add	r3, r2
    b490:	d90d      	bls.n	b4ae <memset+0x82>
    b492:	461e      	mov	r6, r3
    b494:	4622      	mov	r2, r4
    b496:	3a04      	subs	r2, #4
    b498:	2a03      	cmp	r2, #3
    b49a:	f846 5b04 	str.w	r5, [r6], #4
    b49e:	d8fa      	bhi.n	b496 <memset+0x6a>
    b4a0:	1f22      	subs	r2, r4, #4
    b4a2:	f022 0203 	bic.w	r2, r2, #3
    b4a6:	3204      	adds	r2, #4
    b4a8:	4413      	add	r3, r2
    b4aa:	f004 0403 	and.w	r4, r4, #3
    b4ae:	b12c      	cbz	r4, b4bc <memset+0x90>
    b4b0:	b2c9      	uxtb	r1, r1
    b4b2:	441c      	add	r4, r3
    b4b4:	f803 1b01 	strb.w	r1, [r3], #1
    b4b8:	42a3      	cmp	r3, r4
    b4ba:	d1fb      	bne.n	b4b4 <memset+0x88>
    b4bc:	bc70      	pop	{r4, r5, r6}
    b4be:	4770      	bx	lr
    b4c0:	4614      	mov	r4, r2
    b4c2:	4603      	mov	r3, r0
    b4c4:	e7c2      	b.n	b44c <memset+0x20>
    b4c6:	bf00      	nop

0000b4c8 <__malloc_lock>:
    b4c8:	4770      	bx	lr
    b4ca:	bf00      	nop

0000b4cc <__malloc_unlock>:
    b4cc:	4770      	bx	lr
    b4ce:	bf00      	nop

0000b4d0 <_realloc_r>:
    b4d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b4d4:	4617      	mov	r7, r2
    b4d6:	b083      	sub	sp, #12
    b4d8:	2900      	cmp	r1, #0
    b4da:	f000 80c1 	beq.w	b660 <_realloc_r+0x190>
    b4de:	460e      	mov	r6, r1
    b4e0:	4681      	mov	r9, r0
    b4e2:	f107 050b 	add.w	r5, r7, #11
    b4e6:	f7ff ffef 	bl	b4c8 <__malloc_lock>
    b4ea:	f856 ec04 	ldr.w	lr, [r6, #-4]
    b4ee:	2d16      	cmp	r5, #22
    b4f0:	f02e 0403 	bic.w	r4, lr, #3
    b4f4:	f1a6 0808 	sub.w	r8, r6, #8
    b4f8:	d840      	bhi.n	b57c <_realloc_r+0xac>
    b4fa:	2210      	movs	r2, #16
    b4fc:	4615      	mov	r5, r2
    b4fe:	42af      	cmp	r7, r5
    b500:	d841      	bhi.n	b586 <_realloc_r+0xb6>
    b502:	4294      	cmp	r4, r2
    b504:	da75      	bge.n	b5f2 <_realloc_r+0x122>
    b506:	4bc9      	ldr	r3, [pc, #804]	; (b82c <_realloc_r+0x35c>)
    b508:	6899      	ldr	r1, [r3, #8]
    b50a:	eb08 0004 	add.w	r0, r8, r4
    b50e:	4288      	cmp	r0, r1
    b510:	6841      	ldr	r1, [r0, #4]
    b512:	f000 80d9 	beq.w	b6c8 <_realloc_r+0x1f8>
    b516:	f021 0301 	bic.w	r3, r1, #1
    b51a:	4403      	add	r3, r0
    b51c:	685b      	ldr	r3, [r3, #4]
    b51e:	07db      	lsls	r3, r3, #31
    b520:	d57d      	bpl.n	b61e <_realloc_r+0x14e>
    b522:	f01e 0f01 	tst.w	lr, #1
    b526:	d035      	beq.n	b594 <_realloc_r+0xc4>
    b528:	4639      	mov	r1, r7
    b52a:	4648      	mov	r0, r9
    b52c:	f7ff fbc6 	bl	acbc <_malloc_r>
    b530:	4607      	mov	r7, r0
    b532:	b1e0      	cbz	r0, b56e <_realloc_r+0x9e>
    b534:	f856 3c04 	ldr.w	r3, [r6, #-4]
    b538:	f023 0301 	bic.w	r3, r3, #1
    b53c:	4443      	add	r3, r8
    b53e:	f1a0 0208 	sub.w	r2, r0, #8
    b542:	429a      	cmp	r2, r3
    b544:	f000 8144 	beq.w	b7d0 <_realloc_r+0x300>
    b548:	1f22      	subs	r2, r4, #4
    b54a:	2a24      	cmp	r2, #36	; 0x24
    b54c:	f200 8131 	bhi.w	b7b2 <_realloc_r+0x2e2>
    b550:	2a13      	cmp	r2, #19
    b552:	f200 8104 	bhi.w	b75e <_realloc_r+0x28e>
    b556:	4603      	mov	r3, r0
    b558:	4632      	mov	r2, r6
    b55a:	6811      	ldr	r1, [r2, #0]
    b55c:	6019      	str	r1, [r3, #0]
    b55e:	6851      	ldr	r1, [r2, #4]
    b560:	6059      	str	r1, [r3, #4]
    b562:	6892      	ldr	r2, [r2, #8]
    b564:	609a      	str	r2, [r3, #8]
    b566:	4631      	mov	r1, r6
    b568:	4648      	mov	r0, r9
    b56a:	f002 fd19 	bl	dfa0 <_free_r>
    b56e:	4648      	mov	r0, r9
    b570:	f7ff ffac 	bl	b4cc <__malloc_unlock>
    b574:	4638      	mov	r0, r7
    b576:	b003      	add	sp, #12
    b578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b57c:	f025 0507 	bic.w	r5, r5, #7
    b580:	2d00      	cmp	r5, #0
    b582:	462a      	mov	r2, r5
    b584:	dabb      	bge.n	b4fe <_realloc_r+0x2e>
    b586:	230c      	movs	r3, #12
    b588:	2000      	movs	r0, #0
    b58a:	f8c9 3000 	str.w	r3, [r9]
    b58e:	b003      	add	sp, #12
    b590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b594:	f856 3c08 	ldr.w	r3, [r6, #-8]
    b598:	ebc3 0a08 	rsb	sl, r3, r8
    b59c:	f8da 3004 	ldr.w	r3, [sl, #4]
    b5a0:	f023 0c03 	bic.w	ip, r3, #3
    b5a4:	eb04 030c 	add.w	r3, r4, ip
    b5a8:	4293      	cmp	r3, r2
    b5aa:	dbbd      	blt.n	b528 <_realloc_r+0x58>
    b5ac:	4657      	mov	r7, sl
    b5ae:	f8da 100c 	ldr.w	r1, [sl, #12]
    b5b2:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b5b6:	1f22      	subs	r2, r4, #4
    b5b8:	2a24      	cmp	r2, #36	; 0x24
    b5ba:	60c1      	str	r1, [r0, #12]
    b5bc:	6088      	str	r0, [r1, #8]
    b5be:	f200 8117 	bhi.w	b7f0 <_realloc_r+0x320>
    b5c2:	2a13      	cmp	r2, #19
    b5c4:	f240 8112 	bls.w	b7ec <_realloc_r+0x31c>
    b5c8:	6831      	ldr	r1, [r6, #0]
    b5ca:	f8ca 1008 	str.w	r1, [sl, #8]
    b5ce:	6871      	ldr	r1, [r6, #4]
    b5d0:	f8ca 100c 	str.w	r1, [sl, #12]
    b5d4:	2a1b      	cmp	r2, #27
    b5d6:	f200 812b 	bhi.w	b830 <_realloc_r+0x360>
    b5da:	3608      	adds	r6, #8
    b5dc:	f10a 0210 	add.w	r2, sl, #16
    b5e0:	6831      	ldr	r1, [r6, #0]
    b5e2:	6011      	str	r1, [r2, #0]
    b5e4:	6871      	ldr	r1, [r6, #4]
    b5e6:	6051      	str	r1, [r2, #4]
    b5e8:	68b1      	ldr	r1, [r6, #8]
    b5ea:	6091      	str	r1, [r2, #8]
    b5ec:	463e      	mov	r6, r7
    b5ee:	461c      	mov	r4, r3
    b5f0:	46d0      	mov	r8, sl
    b5f2:	1b63      	subs	r3, r4, r5
    b5f4:	2b0f      	cmp	r3, #15
    b5f6:	d81d      	bhi.n	b634 <_realloc_r+0x164>
    b5f8:	f8d8 3004 	ldr.w	r3, [r8, #4]
    b5fc:	f003 0301 	and.w	r3, r3, #1
    b600:	4323      	orrs	r3, r4
    b602:	4444      	add	r4, r8
    b604:	f8c8 3004 	str.w	r3, [r8, #4]
    b608:	6863      	ldr	r3, [r4, #4]
    b60a:	f043 0301 	orr.w	r3, r3, #1
    b60e:	6063      	str	r3, [r4, #4]
    b610:	4648      	mov	r0, r9
    b612:	f7ff ff5b 	bl	b4cc <__malloc_unlock>
    b616:	4630      	mov	r0, r6
    b618:	b003      	add	sp, #12
    b61a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    b61e:	f021 0103 	bic.w	r1, r1, #3
    b622:	4421      	add	r1, r4
    b624:	4291      	cmp	r1, r2
    b626:	db21      	blt.n	b66c <_realloc_r+0x19c>
    b628:	68c3      	ldr	r3, [r0, #12]
    b62a:	6882      	ldr	r2, [r0, #8]
    b62c:	460c      	mov	r4, r1
    b62e:	60d3      	str	r3, [r2, #12]
    b630:	609a      	str	r2, [r3, #8]
    b632:	e7de      	b.n	b5f2 <_realloc_r+0x122>
    b634:	f8d8 2004 	ldr.w	r2, [r8, #4]
    b638:	eb08 0105 	add.w	r1, r8, r5
    b63c:	f002 0201 	and.w	r2, r2, #1
    b640:	4315      	orrs	r5, r2
    b642:	f043 0201 	orr.w	r2, r3, #1
    b646:	440b      	add	r3, r1
    b648:	f8c8 5004 	str.w	r5, [r8, #4]
    b64c:	604a      	str	r2, [r1, #4]
    b64e:	685a      	ldr	r2, [r3, #4]
    b650:	f042 0201 	orr.w	r2, r2, #1
    b654:	3108      	adds	r1, #8
    b656:	605a      	str	r2, [r3, #4]
    b658:	4648      	mov	r0, r9
    b65a:	f002 fca1 	bl	dfa0 <_free_r>
    b65e:	e7d7      	b.n	b610 <_realloc_r+0x140>
    b660:	4611      	mov	r1, r2
    b662:	b003      	add	sp, #12
    b664:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    b668:	f7ff bb28 	b.w	acbc <_malloc_r>
    b66c:	f01e 0f01 	tst.w	lr, #1
    b670:	f47f af5a 	bne.w	b528 <_realloc_r+0x58>
    b674:	f856 3c08 	ldr.w	r3, [r6, #-8]
    b678:	ebc3 0a08 	rsb	sl, r3, r8
    b67c:	f8da 3004 	ldr.w	r3, [sl, #4]
    b680:	f023 0c03 	bic.w	ip, r3, #3
    b684:	eb01 0e0c 	add.w	lr, r1, ip
    b688:	4596      	cmp	lr, r2
    b68a:	db8b      	blt.n	b5a4 <_realloc_r+0xd4>
    b68c:	68c3      	ldr	r3, [r0, #12]
    b68e:	6882      	ldr	r2, [r0, #8]
    b690:	4657      	mov	r7, sl
    b692:	60d3      	str	r3, [r2, #12]
    b694:	609a      	str	r2, [r3, #8]
    b696:	f857 1f08 	ldr.w	r1, [r7, #8]!
    b69a:	f8da 300c 	ldr.w	r3, [sl, #12]
    b69e:	60cb      	str	r3, [r1, #12]
    b6a0:	1f22      	subs	r2, r4, #4
    b6a2:	2a24      	cmp	r2, #36	; 0x24
    b6a4:	6099      	str	r1, [r3, #8]
    b6a6:	f200 8099 	bhi.w	b7dc <_realloc_r+0x30c>
    b6aa:	2a13      	cmp	r2, #19
    b6ac:	d962      	bls.n	b774 <_realloc_r+0x2a4>
    b6ae:	6833      	ldr	r3, [r6, #0]
    b6b0:	f8ca 3008 	str.w	r3, [sl, #8]
    b6b4:	6873      	ldr	r3, [r6, #4]
    b6b6:	f8ca 300c 	str.w	r3, [sl, #12]
    b6ba:	2a1b      	cmp	r2, #27
    b6bc:	f200 80a0 	bhi.w	b800 <_realloc_r+0x330>
    b6c0:	3608      	adds	r6, #8
    b6c2:	f10a 0310 	add.w	r3, sl, #16
    b6c6:	e056      	b.n	b776 <_realloc_r+0x2a6>
    b6c8:	f021 0b03 	bic.w	fp, r1, #3
    b6cc:	44a3      	add	fp, r4
    b6ce:	f105 0010 	add.w	r0, r5, #16
    b6d2:	4583      	cmp	fp, r0
    b6d4:	da59      	bge.n	b78a <_realloc_r+0x2ba>
    b6d6:	f01e 0f01 	tst.w	lr, #1
    b6da:	f47f af25 	bne.w	b528 <_realloc_r+0x58>
    b6de:	f856 1c08 	ldr.w	r1, [r6, #-8]
    b6e2:	ebc1 0a08 	rsb	sl, r1, r8
    b6e6:	f8da 1004 	ldr.w	r1, [sl, #4]
    b6ea:	f021 0c03 	bic.w	ip, r1, #3
    b6ee:	44e3      	add	fp, ip
    b6f0:	4558      	cmp	r0, fp
    b6f2:	f73f af57 	bgt.w	b5a4 <_realloc_r+0xd4>
    b6f6:	4657      	mov	r7, sl
    b6f8:	f8da 100c 	ldr.w	r1, [sl, #12]
    b6fc:	f857 0f08 	ldr.w	r0, [r7, #8]!
    b700:	1f22      	subs	r2, r4, #4
    b702:	2a24      	cmp	r2, #36	; 0x24
    b704:	60c1      	str	r1, [r0, #12]
    b706:	6088      	str	r0, [r1, #8]
    b708:	f200 80b4 	bhi.w	b874 <_realloc_r+0x3a4>
    b70c:	2a13      	cmp	r2, #19
    b70e:	f240 80a5 	bls.w	b85c <_realloc_r+0x38c>
    b712:	6831      	ldr	r1, [r6, #0]
    b714:	f8ca 1008 	str.w	r1, [sl, #8]
    b718:	6871      	ldr	r1, [r6, #4]
    b71a:	f8ca 100c 	str.w	r1, [sl, #12]
    b71e:	2a1b      	cmp	r2, #27
    b720:	f200 80af 	bhi.w	b882 <_realloc_r+0x3b2>
    b724:	3608      	adds	r6, #8
    b726:	f10a 0210 	add.w	r2, sl, #16
    b72a:	6831      	ldr	r1, [r6, #0]
    b72c:	6011      	str	r1, [r2, #0]
    b72e:	6871      	ldr	r1, [r6, #4]
    b730:	6051      	str	r1, [r2, #4]
    b732:	68b1      	ldr	r1, [r6, #8]
    b734:	6091      	str	r1, [r2, #8]
    b736:	eb0a 0105 	add.w	r1, sl, r5
    b73a:	ebc5 020b 	rsb	r2, r5, fp
    b73e:	f042 0201 	orr.w	r2, r2, #1
    b742:	6099      	str	r1, [r3, #8]
    b744:	604a      	str	r2, [r1, #4]
    b746:	f8da 3004 	ldr.w	r3, [sl, #4]
    b74a:	f003 0301 	and.w	r3, r3, #1
    b74e:	431d      	orrs	r5, r3
    b750:	4648      	mov	r0, r9
    b752:	f8ca 5004 	str.w	r5, [sl, #4]
    b756:	f7ff feb9 	bl	b4cc <__malloc_unlock>
    b75a:	4638      	mov	r0, r7
    b75c:	e75c      	b.n	b618 <_realloc_r+0x148>
    b75e:	6833      	ldr	r3, [r6, #0]
    b760:	6003      	str	r3, [r0, #0]
    b762:	6873      	ldr	r3, [r6, #4]
    b764:	6043      	str	r3, [r0, #4]
    b766:	2a1b      	cmp	r2, #27
    b768:	d827      	bhi.n	b7ba <_realloc_r+0x2ea>
    b76a:	f100 0308 	add.w	r3, r0, #8
    b76e:	f106 0208 	add.w	r2, r6, #8
    b772:	e6f2      	b.n	b55a <_realloc_r+0x8a>
    b774:	463b      	mov	r3, r7
    b776:	6832      	ldr	r2, [r6, #0]
    b778:	601a      	str	r2, [r3, #0]
    b77a:	6872      	ldr	r2, [r6, #4]
    b77c:	605a      	str	r2, [r3, #4]
    b77e:	68b2      	ldr	r2, [r6, #8]
    b780:	609a      	str	r2, [r3, #8]
    b782:	463e      	mov	r6, r7
    b784:	4674      	mov	r4, lr
    b786:	46d0      	mov	r8, sl
    b788:	e733      	b.n	b5f2 <_realloc_r+0x122>
    b78a:	eb08 0105 	add.w	r1, r8, r5
    b78e:	ebc5 0b0b 	rsb	fp, r5, fp
    b792:	f04b 0201 	orr.w	r2, fp, #1
    b796:	6099      	str	r1, [r3, #8]
    b798:	604a      	str	r2, [r1, #4]
    b79a:	f856 3c04 	ldr.w	r3, [r6, #-4]
    b79e:	f003 0301 	and.w	r3, r3, #1
    b7a2:	431d      	orrs	r5, r3
    b7a4:	4648      	mov	r0, r9
    b7a6:	f846 5c04 	str.w	r5, [r6, #-4]
    b7aa:	f7ff fe8f 	bl	b4cc <__malloc_unlock>
    b7ae:	4630      	mov	r0, r6
    b7b0:	e732      	b.n	b618 <_realloc_r+0x148>
    b7b2:	4631      	mov	r1, r6
    b7b4:	f7ff fdd6 	bl	b364 <memmove>
    b7b8:	e6d5      	b.n	b566 <_realloc_r+0x96>
    b7ba:	68b3      	ldr	r3, [r6, #8]
    b7bc:	6083      	str	r3, [r0, #8]
    b7be:	68f3      	ldr	r3, [r6, #12]
    b7c0:	60c3      	str	r3, [r0, #12]
    b7c2:	2a24      	cmp	r2, #36	; 0x24
    b7c4:	d028      	beq.n	b818 <_realloc_r+0x348>
    b7c6:	f100 0310 	add.w	r3, r0, #16
    b7ca:	f106 0210 	add.w	r2, r6, #16
    b7ce:	e6c4      	b.n	b55a <_realloc_r+0x8a>
    b7d0:	f850 3c04 	ldr.w	r3, [r0, #-4]
    b7d4:	f023 0303 	bic.w	r3, r3, #3
    b7d8:	441c      	add	r4, r3
    b7da:	e70a      	b.n	b5f2 <_realloc_r+0x122>
    b7dc:	4631      	mov	r1, r6
    b7de:	4638      	mov	r0, r7
    b7e0:	4674      	mov	r4, lr
    b7e2:	46d0      	mov	r8, sl
    b7e4:	f7ff fdbe 	bl	b364 <memmove>
    b7e8:	463e      	mov	r6, r7
    b7ea:	e702      	b.n	b5f2 <_realloc_r+0x122>
    b7ec:	463a      	mov	r2, r7
    b7ee:	e6f7      	b.n	b5e0 <_realloc_r+0x110>
    b7f0:	4631      	mov	r1, r6
    b7f2:	4638      	mov	r0, r7
    b7f4:	461c      	mov	r4, r3
    b7f6:	46d0      	mov	r8, sl
    b7f8:	f7ff fdb4 	bl	b364 <memmove>
    b7fc:	463e      	mov	r6, r7
    b7fe:	e6f8      	b.n	b5f2 <_realloc_r+0x122>
    b800:	68b3      	ldr	r3, [r6, #8]
    b802:	f8ca 3010 	str.w	r3, [sl, #16]
    b806:	68f3      	ldr	r3, [r6, #12]
    b808:	f8ca 3014 	str.w	r3, [sl, #20]
    b80c:	2a24      	cmp	r2, #36	; 0x24
    b80e:	d01b      	beq.n	b848 <_realloc_r+0x378>
    b810:	3610      	adds	r6, #16
    b812:	f10a 0318 	add.w	r3, sl, #24
    b816:	e7ae      	b.n	b776 <_realloc_r+0x2a6>
    b818:	6933      	ldr	r3, [r6, #16]
    b81a:	6103      	str	r3, [r0, #16]
    b81c:	6973      	ldr	r3, [r6, #20]
    b81e:	6143      	str	r3, [r0, #20]
    b820:	f106 0218 	add.w	r2, r6, #24
    b824:	f100 0318 	add.w	r3, r0, #24
    b828:	e697      	b.n	b55a <_realloc_r+0x8a>
    b82a:	bf00      	nop
    b82c:	20001710 	.word	0x20001710
    b830:	68b1      	ldr	r1, [r6, #8]
    b832:	f8ca 1010 	str.w	r1, [sl, #16]
    b836:	68f1      	ldr	r1, [r6, #12]
    b838:	f8ca 1014 	str.w	r1, [sl, #20]
    b83c:	2a24      	cmp	r2, #36	; 0x24
    b83e:	d00f      	beq.n	b860 <_realloc_r+0x390>
    b840:	3610      	adds	r6, #16
    b842:	f10a 0218 	add.w	r2, sl, #24
    b846:	e6cb      	b.n	b5e0 <_realloc_r+0x110>
    b848:	6933      	ldr	r3, [r6, #16]
    b84a:	f8ca 3018 	str.w	r3, [sl, #24]
    b84e:	6973      	ldr	r3, [r6, #20]
    b850:	f8ca 301c 	str.w	r3, [sl, #28]
    b854:	3618      	adds	r6, #24
    b856:	f10a 0320 	add.w	r3, sl, #32
    b85a:	e78c      	b.n	b776 <_realloc_r+0x2a6>
    b85c:	463a      	mov	r2, r7
    b85e:	e764      	b.n	b72a <_realloc_r+0x25a>
    b860:	6932      	ldr	r2, [r6, #16]
    b862:	f8ca 2018 	str.w	r2, [sl, #24]
    b866:	6972      	ldr	r2, [r6, #20]
    b868:	f8ca 201c 	str.w	r2, [sl, #28]
    b86c:	3618      	adds	r6, #24
    b86e:	f10a 0220 	add.w	r2, sl, #32
    b872:	e6b5      	b.n	b5e0 <_realloc_r+0x110>
    b874:	4631      	mov	r1, r6
    b876:	4638      	mov	r0, r7
    b878:	9301      	str	r3, [sp, #4]
    b87a:	f7ff fd73 	bl	b364 <memmove>
    b87e:	9b01      	ldr	r3, [sp, #4]
    b880:	e759      	b.n	b736 <_realloc_r+0x266>
    b882:	68b1      	ldr	r1, [r6, #8]
    b884:	f8ca 1010 	str.w	r1, [sl, #16]
    b888:	68f1      	ldr	r1, [r6, #12]
    b88a:	f8ca 1014 	str.w	r1, [sl, #20]
    b88e:	2a24      	cmp	r2, #36	; 0x24
    b890:	d003      	beq.n	b89a <_realloc_r+0x3ca>
    b892:	3610      	adds	r6, #16
    b894:	f10a 0218 	add.w	r2, sl, #24
    b898:	e747      	b.n	b72a <_realloc_r+0x25a>
    b89a:	6932      	ldr	r2, [r6, #16]
    b89c:	f8ca 2018 	str.w	r2, [sl, #24]
    b8a0:	6972      	ldr	r2, [r6, #20]
    b8a2:	f8ca 201c 	str.w	r2, [sl, #28]
    b8a6:	3618      	adds	r6, #24
    b8a8:	f10a 0220 	add.w	r2, sl, #32
    b8ac:	e73d      	b.n	b72a <_realloc_r+0x25a>
    b8ae:	bf00      	nop

0000b8b0 <_sbrk_r>:
    b8b0:	b538      	push	{r3, r4, r5, lr}
    b8b2:	4c07      	ldr	r4, [pc, #28]	; (b8d0 <_sbrk_r+0x20>)
    b8b4:	2300      	movs	r3, #0
    b8b6:	4605      	mov	r5, r0
    b8b8:	4608      	mov	r0, r1
    b8ba:	6023      	str	r3, [r4, #0]
    b8bc:	f7fd fc4c 	bl	9158 <_sbrk>
    b8c0:	1c43      	adds	r3, r0, #1
    b8c2:	d000      	beq.n	b8c6 <_sbrk_r+0x16>
    b8c4:	bd38      	pop	{r3, r4, r5, pc}
    b8c6:	6823      	ldr	r3, [r4, #0]
    b8c8:	2b00      	cmp	r3, #0
    b8ca:	d0fb      	beq.n	b8c4 <_sbrk_r+0x14>
    b8cc:	602b      	str	r3, [r5, #0]
    b8ce:	bd38      	pop	{r3, r4, r5, pc}
    b8d0:	200382cc 	.word	0x200382cc

0000b8d4 <sprintf>:
    b8d4:	b40e      	push	{r1, r2, r3}
    b8d6:	b5f0      	push	{r4, r5, r6, r7, lr}
    b8d8:	b09c      	sub	sp, #112	; 0x70
    b8da:	ab21      	add	r3, sp, #132	; 0x84
    b8dc:	490f      	ldr	r1, [pc, #60]	; (b91c <sprintf+0x48>)
    b8de:	f853 2b04 	ldr.w	r2, [r3], #4
    b8e2:	9301      	str	r3, [sp, #4]
    b8e4:	4605      	mov	r5, r0
    b8e6:	f06f 4400 	mvn.w	r4, #2147483648	; 0x80000000
    b8ea:	6808      	ldr	r0, [r1, #0]
    b8ec:	9502      	str	r5, [sp, #8]
    b8ee:	f44f 7702 	mov.w	r7, #520	; 0x208
    b8f2:	f64f 76ff 	movw	r6, #65535	; 0xffff
    b8f6:	a902      	add	r1, sp, #8
    b8f8:	9506      	str	r5, [sp, #24]
    b8fa:	f8ad 7014 	strh.w	r7, [sp, #20]
    b8fe:	9404      	str	r4, [sp, #16]
    b900:	9407      	str	r4, [sp, #28]
    b902:	f8ad 6016 	strh.w	r6, [sp, #22]
    b906:	f000 f90f 	bl	bb28 <_svfprintf_r>
    b90a:	9b02      	ldr	r3, [sp, #8]
    b90c:	2200      	movs	r2, #0
    b90e:	701a      	strb	r2, [r3, #0]
    b910:	b01c      	add	sp, #112	; 0x70
    b912:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
    b916:	b003      	add	sp, #12
    b918:	4770      	bx	lr
    b91a:	bf00      	nop
    b91c:	200015a0 	.word	0x200015a0
	...

0000b940 <strlen>:
    b940:	f890 f000 	pld	[r0]
    b944:	e96d 4502 	strd	r4, r5, [sp, #-8]!
    b948:	f020 0107 	bic.w	r1, r0, #7
    b94c:	f06f 0c00 	mvn.w	ip, #0
    b950:	f010 0407 	ands.w	r4, r0, #7
    b954:	f891 f020 	pld	[r1, #32]
    b958:	f040 8049 	bne.w	b9ee <strlen+0xae>
    b95c:	f04f 0400 	mov.w	r4, #0
    b960:	f06f 0007 	mvn.w	r0, #7
    b964:	e9d1 2300 	ldrd	r2, r3, [r1]
    b968:	f891 f040 	pld	[r1, #64]	; 0x40
    b96c:	f100 0008 	add.w	r0, r0, #8
    b970:	fa82 f24c 	uadd8	r2, r2, ip
    b974:	faa4 f28c 	sel	r2, r4, ip
    b978:	fa83 f34c 	uadd8	r3, r3, ip
    b97c:	faa2 f38c 	sel	r3, r2, ip
    b980:	bb4b      	cbnz	r3, b9d6 <strlen+0x96>
    b982:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
    b986:	fa82 f24c 	uadd8	r2, r2, ip
    b98a:	f100 0008 	add.w	r0, r0, #8
    b98e:	faa4 f28c 	sel	r2, r4, ip
    b992:	fa83 f34c 	uadd8	r3, r3, ip
    b996:	faa2 f38c 	sel	r3, r2, ip
    b99a:	b9e3      	cbnz	r3, b9d6 <strlen+0x96>
    b99c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
    b9a0:	fa82 f24c 	uadd8	r2, r2, ip
    b9a4:	f100 0008 	add.w	r0, r0, #8
    b9a8:	faa4 f28c 	sel	r2, r4, ip
    b9ac:	fa83 f34c 	uadd8	r3, r3, ip
    b9b0:	faa2 f38c 	sel	r3, r2, ip
    b9b4:	b97b      	cbnz	r3, b9d6 <strlen+0x96>
    b9b6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
    b9ba:	f101 0120 	add.w	r1, r1, #32
    b9be:	fa82 f24c 	uadd8	r2, r2, ip
    b9c2:	f100 0008 	add.w	r0, r0, #8
    b9c6:	faa4 f28c 	sel	r2, r4, ip
    b9ca:	fa83 f34c 	uadd8	r3, r3, ip
    b9ce:	faa2 f38c 	sel	r3, r2, ip
    b9d2:	2b00      	cmp	r3, #0
    b9d4:	d0c6      	beq.n	b964 <strlen+0x24>
    b9d6:	2a00      	cmp	r2, #0
    b9d8:	bf04      	itt	eq
    b9da:	3004      	addeq	r0, #4
    b9dc:	461a      	moveq	r2, r3
    b9de:	ba12      	rev	r2, r2
    b9e0:	fab2 f282 	clz	r2, r2
    b9e4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
    b9e8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
    b9ec:	4770      	bx	lr
    b9ee:	e9d1 2300 	ldrd	r2, r3, [r1]
    b9f2:	f004 0503 	and.w	r5, r4, #3
    b9f6:	f1c4 0000 	rsb	r0, r4, #0
    b9fa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
    b9fe:	f014 0f04 	tst.w	r4, #4
    ba02:	f891 f040 	pld	[r1, #64]	; 0x40
    ba06:	fa0c f505 	lsl.w	r5, ip, r5
    ba0a:	ea62 0205 	orn	r2, r2, r5
    ba0e:	bf1c      	itt	ne
    ba10:	ea63 0305 	ornne	r3, r3, r5
    ba14:	4662      	movne	r2, ip
    ba16:	f04f 0400 	mov.w	r4, #0
    ba1a:	e7a9      	b.n	b970 <strlen+0x30>

0000ba1c <strncmp>:
    ba1c:	2a00      	cmp	r2, #0
    ba1e:	d041      	beq.n	baa4 <strncmp+0x88>
    ba20:	ea40 0301 	orr.w	r3, r0, r1
    ba24:	f013 0303 	ands.w	r3, r3, #3
    ba28:	b4f0      	push	{r4, r5, r6, r7}
    ba2a:	d125      	bne.n	ba78 <strncmp+0x5c>
    ba2c:	2a03      	cmp	r2, #3
    ba2e:	d923      	bls.n	ba78 <strncmp+0x5c>
    ba30:	6804      	ldr	r4, [r0, #0]
    ba32:	680d      	ldr	r5, [r1, #0]
    ba34:	42ac      	cmp	r4, r5
    ba36:	d11f      	bne.n	ba78 <strncmp+0x5c>
    ba38:	3a04      	subs	r2, #4
    ba3a:	d035      	beq.n	baa8 <strncmp+0x8c>
    ba3c:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
    ba40:	ea25 0404 	bic.w	r4, r5, r4
    ba44:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    ba48:	d131      	bne.n	baae <strncmp+0x92>
    ba4a:	1d07      	adds	r7, r0, #4
    ba4c:	1d0d      	adds	r5, r1, #4
    ba4e:	e00d      	b.n	ba6c <strncmp+0x50>
    ba50:	f857 3b04 	ldr.w	r3, [r7], #4
    ba54:	680e      	ldr	r6, [r1, #0]
    ba56:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
    ba5a:	42b3      	cmp	r3, r6
    ba5c:	ea24 0403 	bic.w	r4, r4, r3
    ba60:	d10a      	bne.n	ba78 <strncmp+0x5c>
    ba62:	3a04      	subs	r2, #4
    ba64:	d020      	beq.n	baa8 <strncmp+0x8c>
    ba66:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
    ba6a:	d123      	bne.n	bab4 <strncmp+0x98>
    ba6c:	2a03      	cmp	r2, #3
    ba6e:	4629      	mov	r1, r5
    ba70:	4638      	mov	r0, r7
    ba72:	f105 0504 	add.w	r5, r5, #4
    ba76:	d8eb      	bhi.n	ba50 <strncmp+0x34>
    ba78:	7803      	ldrb	r3, [r0, #0]
    ba7a:	780c      	ldrb	r4, [r1, #0]
    ba7c:	429c      	cmp	r4, r3
    ba7e:	f102 32ff 	add.w	r2, r2, #4294967295
    ba82:	d10c      	bne.n	ba9e <strncmp+0x82>
    ba84:	b182      	cbz	r2, baa8 <strncmp+0x8c>
    ba86:	b914      	cbnz	r4, ba8e <strncmp+0x72>
    ba88:	e016      	b.n	bab8 <strncmp+0x9c>
    ba8a:	b16a      	cbz	r2, baa8 <strncmp+0x8c>
    ba8c:	b17b      	cbz	r3, baae <strncmp+0x92>
    ba8e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
    ba92:	f811 4f01 	ldrb.w	r4, [r1, #1]!
    ba96:	42a3      	cmp	r3, r4
    ba98:	f102 32ff 	add.w	r2, r2, #4294967295
    ba9c:	d0f5      	beq.n	ba8a <strncmp+0x6e>
    ba9e:	1b18      	subs	r0, r3, r4
    baa0:	bcf0      	pop	{r4, r5, r6, r7}
    baa2:	4770      	bx	lr
    baa4:	4610      	mov	r0, r2
    baa6:	4770      	bx	lr
    baa8:	4610      	mov	r0, r2
    baaa:	bcf0      	pop	{r4, r5, r6, r7}
    baac:	4770      	bx	lr
    baae:	4618      	mov	r0, r3
    bab0:	bcf0      	pop	{r4, r5, r6, r7}
    bab2:	4770      	bx	lr
    bab4:	2000      	movs	r0, #0
    bab6:	e7f3      	b.n	baa0 <strncmp+0x84>
    bab8:	4620      	mov	r0, r4
    baba:	e7f1      	b.n	baa0 <strncmp+0x84>

0000babc <strncpy>:
    babc:	ea40 0301 	orr.w	r3, r0, r1
    bac0:	079b      	lsls	r3, r3, #30
    bac2:	b470      	push	{r4, r5, r6}
    bac4:	d12b      	bne.n	bb1e <strncpy+0x62>
    bac6:	2a03      	cmp	r2, #3
    bac8:	d929      	bls.n	bb1e <strncpy+0x62>
    baca:	460c      	mov	r4, r1
    bacc:	4603      	mov	r3, r0
    bace:	4621      	mov	r1, r4
    bad0:	f854 6b04 	ldr.w	r6, [r4], #4
    bad4:	f1a6 3501 	sub.w	r5, r6, #16843009	; 0x1010101
    bad8:	ea25 0506 	bic.w	r5, r5, r6
    badc:	f015 3f80 	tst.w	r5, #2155905152	; 0x80808080
    bae0:	d106      	bne.n	baf0 <strncpy+0x34>
    bae2:	3a04      	subs	r2, #4
    bae4:	2a03      	cmp	r2, #3
    bae6:	f843 6b04 	str.w	r6, [r3], #4
    baea:	4621      	mov	r1, r4
    baec:	d8ef      	bhi.n	bace <strncpy+0x12>
    baee:	b1a2      	cbz	r2, bb1a <strncpy+0x5e>
    baf0:	780c      	ldrb	r4, [r1, #0]
    baf2:	701c      	strb	r4, [r3, #0]
    baf4:	3a01      	subs	r2, #1
    baf6:	3301      	adds	r3, #1
    baf8:	3101      	adds	r1, #1
    bafa:	b13c      	cbz	r4, bb0c <strncpy+0x50>
    bafc:	b16a      	cbz	r2, bb1a <strncpy+0x5e>
    bafe:	f811 4b01 	ldrb.w	r4, [r1], #1
    bb02:	f803 4b01 	strb.w	r4, [r3], #1
    bb06:	3a01      	subs	r2, #1
    bb08:	2c00      	cmp	r4, #0
    bb0a:	d1f7      	bne.n	bafc <strncpy+0x40>
    bb0c:	b12a      	cbz	r2, bb1a <strncpy+0x5e>
    bb0e:	441a      	add	r2, r3
    bb10:	2100      	movs	r1, #0
    bb12:	f803 1b01 	strb.w	r1, [r3], #1
    bb16:	429a      	cmp	r2, r3
    bb18:	d1fb      	bne.n	bb12 <strncpy+0x56>
    bb1a:	bc70      	pop	{r4, r5, r6}
    bb1c:	4770      	bx	lr
    bb1e:	4603      	mov	r3, r0
    bb20:	e7e5      	b.n	baee <strncpy+0x32>
    bb22:	bf00      	nop
    bb24:	0000      	movs	r0, r0
	...

0000bb28 <_svfprintf_r>:
    bb28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    bb2c:	ed2d 8b06 	vpush	{d8-d10}
    bb30:	b0b9      	sub	sp, #228	; 0xe4
    bb32:	460c      	mov	r4, r1
    bb34:	9103      	str	r1, [sp, #12]
    bb36:	4692      	mov	sl, r2
    bb38:	9309      	str	r3, [sp, #36]	; 0x24
    bb3a:	9005      	str	r0, [sp, #20]
    bb3c:	f002 fb18 	bl	e170 <_localeconv_r>
    bb40:	6803      	ldr	r3, [r0, #0]
    bb42:	9310      	str	r3, [sp, #64]	; 0x40
    bb44:	4618      	mov	r0, r3
    bb46:	f7ff fefb 	bl	b940 <strlen>
    bb4a:	89a3      	ldrh	r3, [r4, #12]
    bb4c:	900f      	str	r0, [sp, #60]	; 0x3c
    bb4e:	0619      	lsls	r1, r3, #24
    bb50:	d503      	bpl.n	bb5a <_svfprintf_r+0x32>
    bb52:	6923      	ldr	r3, [r4, #16]
    bb54:	2b00      	cmp	r3, #0
    bb56:	f001 807d 	beq.w	cc54 <_svfprintf_r+0x112c>
    bb5a:	2300      	movs	r3, #0
    bb5c:	ed9f 8ba4 	vldr	d8, [pc, #656]	; bdf0 <_svfprintf_r+0x2c8>
    bb60:	ed9f 9ba5 	vldr	d9, [pc, #660]	; bdf8 <_svfprintf_r+0x2d0>
    bb64:	930d      	str	r3, [sp, #52]	; 0x34
    bb66:	931d      	str	r3, [sp, #116]	; 0x74
    bb68:	931c      	str	r3, [sp, #112]	; 0x70
    bb6a:	9311      	str	r3, [sp, #68]	; 0x44
    bb6c:	9306      	str	r3, [sp, #24]
    bb6e:	ab28      	add	r3, sp, #160	; 0xa0
    bb70:	931b      	str	r3, [sp, #108]	; 0x6c
    bb72:	4699      	mov	r9, r3
    bb74:	f89a 3000 	ldrb.w	r3, [sl]
    bb78:	4654      	mov	r4, sl
    bb7a:	b1eb      	cbz	r3, bbb8 <_svfprintf_r+0x90>
    bb7c:	2b25      	cmp	r3, #37	; 0x25
    bb7e:	d102      	bne.n	bb86 <_svfprintf_r+0x5e>
    bb80:	e01a      	b.n	bbb8 <_svfprintf_r+0x90>
    bb82:	2b25      	cmp	r3, #37	; 0x25
    bb84:	d003      	beq.n	bb8e <_svfprintf_r+0x66>
    bb86:	f814 3f01 	ldrb.w	r3, [r4, #1]!
    bb8a:	2b00      	cmp	r3, #0
    bb8c:	d1f9      	bne.n	bb82 <_svfprintf_r+0x5a>
    bb8e:	ebca 0504 	rsb	r5, sl, r4
    bb92:	b18d      	cbz	r5, bbb8 <_svfprintf_r+0x90>
    bb94:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    bb96:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    bb98:	f8c9 a000 	str.w	sl, [r9]
    bb9c:	3301      	adds	r3, #1
    bb9e:	442a      	add	r2, r5
    bba0:	2b07      	cmp	r3, #7
    bba2:	f8c9 5004 	str.w	r5, [r9, #4]
    bba6:	921d      	str	r2, [sp, #116]	; 0x74
    bba8:	931c      	str	r3, [sp, #112]	; 0x70
    bbaa:	f300 80a3 	bgt.w	bcf4 <_svfprintf_r+0x1cc>
    bbae:	f109 0908 	add.w	r9, r9, #8
    bbb2:	9b06      	ldr	r3, [sp, #24]
    bbb4:	442b      	add	r3, r5
    bbb6:	9306      	str	r3, [sp, #24]
    bbb8:	7823      	ldrb	r3, [r4, #0]
    bbba:	2b00      	cmp	r3, #0
    bbbc:	f000 80a3 	beq.w	bd06 <_svfprintf_r+0x1de>
    bbc0:	2300      	movs	r3, #0
    bbc2:	461a      	mov	r2, r3
    bbc4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    bbc8:	4619      	mov	r1, r3
    bbca:	9307      	str	r3, [sp, #28]
    bbcc:	469b      	mov	fp, r3
    bbce:	f04f 38ff 	mov.w	r8, #4294967295
    bbd2:	7863      	ldrb	r3, [r4, #1]
    bbd4:	f104 0a01 	add.w	sl, r4, #1
    bbd8:	4645      	mov	r5, r8
    bbda:	f10a 0a01 	add.w	sl, sl, #1
    bbde:	f1a3 0020 	sub.w	r0, r3, #32
    bbe2:	2858      	cmp	r0, #88	; 0x58
    bbe4:	f200 83f8 	bhi.w	c3d8 <_svfprintf_r+0x8b0>
    bbe8:	e8df f010 	tbh	[pc, r0, lsl #1]
    bbec:	03f60363 	.word	0x03f60363
    bbf0:	036b03f6 	.word	0x036b03f6
    bbf4:	03f603f6 	.word	0x03f603f6
    bbf8:	03f603f6 	.word	0x03f603f6
    bbfc:	03f603f6 	.word	0x03f603f6
    bc00:	037e0370 	.word	0x037e0370
    bc04:	005d03f6 	.word	0x005d03f6
    bc08:	03f600df 	.word	0x03f600df
    bc0c:	010c00fb 	.word	0x010c00fb
    bc10:	010c010c 	.word	0x010c010c
    bc14:	010c010c 	.word	0x010c010c
    bc18:	010c010c 	.word	0x010c010c
    bc1c:	010c010c 	.word	0x010c010c
    bc20:	03f603f6 	.word	0x03f603f6
    bc24:	03f603f6 	.word	0x03f603f6
    bc28:	03f603f6 	.word	0x03f603f6
    bc2c:	03f603f6 	.word	0x03f603f6
    bc30:	03f603f6 	.word	0x03f603f6
    bc34:	015e011c 	.word	0x015e011c
    bc38:	015e03f6 	.word	0x015e03f6
    bc3c:	03f603f6 	.word	0x03f603f6
    bc40:	03f603f6 	.word	0x03f603f6
    bc44:	03f602a1 	.word	0x03f602a1
    bc48:	02a603f6 	.word	0x02a603f6
    bc4c:	03f603f6 	.word	0x03f603f6
    bc50:	03f603f6 	.word	0x03f603f6
    bc54:	02d803f6 	.word	0x02d803f6
    bc58:	03f603f6 	.word	0x03f603f6
    bc5c:	03f60305 	.word	0x03f60305
    bc60:	03f603f6 	.word	0x03f603f6
    bc64:	03f603f6 	.word	0x03f603f6
    bc68:	03f603f6 	.word	0x03f603f6
    bc6c:	03f603f6 	.word	0x03f603f6
    bc70:	034303f6 	.word	0x034303f6
    bc74:	015e0356 	.word	0x015e0356
    bc78:	015e015e 	.word	0x015e015e
    bc7c:	0356035e 	.word	0x0356035e
    bc80:	03f603f6 	.word	0x03f603f6
    bc84:	03f603a4 	.word	0x03f603a4
    bc88:	00a203b1 	.word	0x00a203b1
    bc8c:	03c30062 	.word	0x03c30062
    bc90:	03c803f6 	.word	0x03c803f6
    bc94:	038303f6 	.word	0x038303f6
    bc98:	03f603f6 	.word	0x03f603f6
    bc9c:	038b      	.short	0x038b
    bc9e:	9807      	ldr	r0, [sp, #28]
    bca0:	9309      	str	r3, [sp, #36]	; 0x24
    bca2:	4240      	negs	r0, r0
    bca4:	9007      	str	r0, [sp, #28]
    bca6:	f04b 0b04 	orr.w	fp, fp, #4
    bcaa:	f89a 3000 	ldrb.w	r3, [sl]
    bcae:	e794      	b.n	bbda <_svfprintf_r+0xb2>
    bcb0:	46a8      	mov	r8, r5
    bcb2:	9809      	ldr	r0, [sp, #36]	; 0x24
    bcb4:	2100      	movs	r1, #0
    bcb6:	2330      	movs	r3, #48	; 0x30
    bcb8:	2278      	movs	r2, #120	; 0x78
    bcba:	4588      	cmp	r8, r1
    bcbc:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    bcc0:	6804      	ldr	r4, [r0, #0]
    bcc2:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    bcc6:	f100 0704 	add.w	r7, r0, #4
    bcca:	f04f 0500 	mov.w	r5, #0
    bcce:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    bcd2:	f04b 0302 	orr.w	r3, fp, #2
    bcd6:	f2c0 839c 	blt.w	c412 <_svfprintf_r+0x8ea>
    bcda:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    bcde:	f043 0b02 	orr.w	fp, r3, #2
    bce2:	ea54 0305 	orrs.w	r3, r4, r5
    bce6:	9709      	str	r7, [sp, #36]	; 0x24
    bce8:	f000 8369 	beq.w	c3be <_svfprintf_r+0x896>
    bcec:	460f      	mov	r7, r1
    bcee:	920c      	str	r2, [sp, #48]	; 0x30
    bcf0:	4843      	ldr	r0, [pc, #268]	; (be00 <_svfprintf_r+0x2d8>)
    bcf2:	e2ae      	b.n	c252 <_svfprintf_r+0x72a>
    bcf4:	aa1b      	add	r2, sp, #108	; 0x6c
    bcf6:	9903      	ldr	r1, [sp, #12]
    bcf8:	9805      	ldr	r0, [sp, #20]
    bcfa:	f002 fd59 	bl	e7b0 <__ssprint_r>
    bcfe:	b948      	cbnz	r0, bd14 <_svfprintf_r+0x1ec>
    bd00:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    bd04:	e755      	b.n	bbb2 <_svfprintf_r+0x8a>
    bd06:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    bd08:	b123      	cbz	r3, bd14 <_svfprintf_r+0x1ec>
    bd0a:	9805      	ldr	r0, [sp, #20]
    bd0c:	9903      	ldr	r1, [sp, #12]
    bd0e:	aa1b      	add	r2, sp, #108	; 0x6c
    bd10:	f002 fd4e 	bl	e7b0 <__ssprint_r>
    bd14:	9b03      	ldr	r3, [sp, #12]
    bd16:	899b      	ldrh	r3, [r3, #12]
    bd18:	f013 0f40 	tst.w	r3, #64	; 0x40
    bd1c:	9b06      	ldr	r3, [sp, #24]
    bd1e:	bf18      	it	ne
    bd20:	f04f 33ff 	movne.w	r3, #4294967295
    bd24:	4618      	mov	r0, r3
    bd26:	b039      	add	sp, #228	; 0xe4
    bd28:	ecbd 8b06 	vpop	{d8-d10}
    bd2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    bd30:	930c      	str	r3, [sp, #48]	; 0x30
    bd32:	46a8      	mov	r8, r5
    bd34:	2a00      	cmp	r2, #0
    bd36:	f041 819a 	bne.w	d06e <_svfprintf_r+0x1546>
    bd3a:	f01b 0320 	ands.w	r3, fp, #32
    bd3e:	f000 8206 	beq.w	c14e <_svfprintf_r+0x626>
    bd42:	9f09      	ldr	r7, [sp, #36]	; 0x24
    bd44:	3707      	adds	r7, #7
    bd46:	f027 0307 	bic.w	r3, r7, #7
    bd4a:	2700      	movs	r7, #0
    bd4c:	f103 0208 	add.w	r2, r3, #8
    bd50:	45b8      	cmp	r8, r7
    bd52:	9209      	str	r2, [sp, #36]	; 0x24
    bd54:	e9d3 4500 	ldrd	r4, r5, [r3]
    bd58:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    bd5c:	f2c0 865e 	blt.w	ca1c <_svfprintf_r+0xef4>
    bd60:	ea54 0305 	orrs.w	r3, r4, r5
    bd64:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    bd68:	f000 834b 	beq.w	c402 <_svfprintf_r+0x8da>
    bd6c:	ae28      	add	r6, sp, #160	; 0xa0
    bd6e:	08e2      	lsrs	r2, r4, #3
    bd70:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
    bd74:	08e9      	lsrs	r1, r5, #3
    bd76:	f004 0307 	and.w	r3, r4, #7
    bd7a:	460d      	mov	r5, r1
    bd7c:	4614      	mov	r4, r2
    bd7e:	3330      	adds	r3, #48	; 0x30
    bd80:	ea54 0205 	orrs.w	r2, r4, r5
    bd84:	f806 3d01 	strb.w	r3, [r6, #-1]!
    bd88:	d1f1      	bne.n	bd6e <_svfprintf_r+0x246>
    bd8a:	f01b 0f01 	tst.w	fp, #1
    bd8e:	f000 8227 	beq.w	c1e0 <_svfprintf_r+0x6b8>
    bd92:	2b30      	cmp	r3, #48	; 0x30
    bd94:	f000 8224 	beq.w	c1e0 <_svfprintf_r+0x6b8>
    bd98:	2230      	movs	r2, #48	; 0x30
    bd9a:	1e73      	subs	r3, r6, #1
    bd9c:	f806 2c01 	strb.w	r2, [r6, #-1]
    bda0:	aa28      	add	r2, sp, #160	; 0xa0
    bda2:	1ad2      	subs	r2, r2, r3
    bda4:	9208      	str	r2, [sp, #32]
    bda6:	461e      	mov	r6, r3
    bda8:	e21d      	b.n	c1e6 <_svfprintf_r+0x6be>
    bdaa:	f89a 3000 	ldrb.w	r3, [sl]
    bdae:	2b2a      	cmp	r3, #42	; 0x2a
    bdb0:	f10a 0401 	add.w	r4, sl, #1
    bdb4:	f001 812f 	beq.w	d016 <_svfprintf_r+0x14ee>
    bdb8:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    bdbc:	2809      	cmp	r0, #9
    bdbe:	bf98      	it	ls
    bdc0:	2500      	movls	r5, #0
    bdc2:	f201 80d5 	bhi.w	cf70 <_svfprintf_r+0x1448>
    bdc6:	f814 3b01 	ldrb.w	r3, [r4], #1
    bdca:	eb05 0585 	add.w	r5, r5, r5, lsl #2
    bdce:	eb00 0545 	add.w	r5, r0, r5, lsl #1
    bdd2:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    bdd6:	2809      	cmp	r0, #9
    bdd8:	d9f5      	bls.n	bdc6 <_svfprintf_r+0x29e>
    bdda:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
    bdde:	46a2      	mov	sl, r4
    bde0:	e6fd      	b.n	bbde <_svfprintf_r+0xb6>
    bde2:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
    bde6:	f89a 3000 	ldrb.w	r3, [sl]
    bdea:	e6f6      	b.n	bbda <_svfprintf_r+0xb2>
    bdec:	f3af 8000 	nop.w
	...
    bdf8:	ffffffff 	.word	0xffffffff
    bdfc:	7fefffff 	.word	0x7fefffff
    be00:	20000e04 	.word	0x20000e04
    be04:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    be08:	2300      	movs	r3, #0
    be0a:	461c      	mov	r4, r3
    be0c:	f81a 3b01 	ldrb.w	r3, [sl], #1
    be10:	eb04 0484 	add.w	r4, r4, r4, lsl #2
    be14:	eb00 0444 	add.w	r4, r0, r4, lsl #1
    be18:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
    be1c:	2809      	cmp	r0, #9
    be1e:	d9f5      	bls.n	be0c <_svfprintf_r+0x2e4>
    be20:	9407      	str	r4, [sp, #28]
    be22:	e6dc      	b.n	bbde <_svfprintf_r+0xb6>
    be24:	930c      	str	r3, [sp, #48]	; 0x30
    be26:	46a8      	mov	r8, r5
    be28:	2a00      	cmp	r2, #0
    be2a:	f041 812c 	bne.w	d086 <_svfprintf_r+0x155e>
    be2e:	f04b 0b10 	orr.w	fp, fp, #16
    be32:	f01b 0f20 	tst.w	fp, #32
    be36:	f000 8503 	beq.w	c840 <_svfprintf_r+0xd18>
    be3a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    be3c:	3707      	adds	r7, #7
    be3e:	f027 0707 	bic.w	r7, r7, #7
    be42:	e9d7 2300 	ldrd	r2, r3, [r7]
    be46:	f107 0108 	add.w	r1, r7, #8
    be4a:	9109      	str	r1, [sp, #36]	; 0x24
    be4c:	4614      	mov	r4, r2
    be4e:	461d      	mov	r5, r3
    be50:	2a00      	cmp	r2, #0
    be52:	f173 0300 	sbcs.w	r3, r3, #0
    be56:	f2c0 8537 	blt.w	c8c8 <_svfprintf_r+0xda0>
    be5a:	f1b8 0f00 	cmp.w	r8, #0
    be5e:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    be62:	f2c0 81b5 	blt.w	c1d0 <_svfprintf_r+0x6a8>
    be66:	ea54 0305 	orrs.w	r3, r4, r5
    be6a:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    be6e:	f000 83f6 	beq.w	c65e <_svfprintf_r+0xb36>
    be72:	2d00      	cmp	r5, #0
    be74:	bf08      	it	eq
    be76:	2c0a      	cmpeq	r4, #10
    be78:	f0c0 81ae 	bcc.w	c1d8 <_svfprintf_r+0x6b0>
    be7c:	ae28      	add	r6, sp, #160	; 0xa0
    be7e:	4620      	mov	r0, r4
    be80:	4629      	mov	r1, r5
    be82:	220a      	movs	r2, #10
    be84:	2300      	movs	r3, #0
    be86:	f7fe fd49 	bl	a91c <__aeabi_uldivmod>
    be8a:	3230      	adds	r2, #48	; 0x30
    be8c:	f806 2d01 	strb.w	r2, [r6, #-1]!
    be90:	4620      	mov	r0, r4
    be92:	4629      	mov	r1, r5
    be94:	2300      	movs	r3, #0
    be96:	220a      	movs	r2, #10
    be98:	f7fe fd40 	bl	a91c <__aeabi_uldivmod>
    be9c:	4604      	mov	r4, r0
    be9e:	460d      	mov	r5, r1
    bea0:	ea54 0305 	orrs.w	r3, r4, r5
    bea4:	d1eb      	bne.n	be7e <_svfprintf_r+0x356>
    bea6:	e19b      	b.n	c1e0 <_svfprintf_r+0x6b8>
    bea8:	930c      	str	r3, [sp, #48]	; 0x30
    beaa:	46a8      	mov	r8, r5
    beac:	2a00      	cmp	r2, #0
    beae:	f041 80e6 	bne.w	d07e <_svfprintf_r+0x1556>
    beb2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    beb4:	f01b 0f08 	tst.w	fp, #8
    beb8:	f107 0707 	add.w	r7, r7, #7
    bebc:	f000 8640 	beq.w	cb40 <_svfprintf_r+0x1018>
    bec0:	f027 0307 	bic.w	r3, r7, #7
    bec4:	ed93 8b00 	vldr	d8, [r3]
    bec8:	f103 0208 	add.w	r2, r3, #8
    becc:	9209      	str	r2, [sp, #36]	; 0x24
    bece:	eeb0 7bc8 	vabs.f64	d7, d8
    bed2:	eeb4 7b49 	vcmp.f64	d7, d9
    bed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    beda:	f340 85bc 	ble.w	ca56 <_svfprintf_r+0xf2e>
    bede:	eeb5 8bc0 	vcmpe.f64	d8, #0.0
    bee2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    bee6:	f100 87ca 	bmi.w	ce7e <_svfprintf_r+0x1356>
    beea:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    beee:	4ea7      	ldr	r6, [pc, #668]	; (c18c <_svfprintf_r+0x664>)
    bef0:	4ba7      	ldr	r3, [pc, #668]	; (c190 <_svfprintf_r+0x668>)
    bef2:	990c      	ldr	r1, [sp, #48]	; 0x30
    bef4:	2203      	movs	r2, #3
    bef6:	f04f 0800 	mov.w	r8, #0
    befa:	9204      	str	r2, [sp, #16]
    befc:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    bf00:	2947      	cmp	r1, #71	; 0x47
    bf02:	bfd8      	it	le
    bf04:	461e      	movle	r6, r3
    bf06:	9208      	str	r2, [sp, #32]
    bf08:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    bf0c:	b117      	cbz	r7, bf14 <_svfprintf_r+0x3ec>
    bf0e:	9b04      	ldr	r3, [sp, #16]
    bf10:	3301      	adds	r3, #1
    bf12:	9304      	str	r3, [sp, #16]
    bf14:	f01b 0302 	ands.w	r3, fp, #2
    bf18:	930a      	str	r3, [sp, #40]	; 0x28
    bf1a:	d002      	beq.n	bf22 <_svfprintf_r+0x3fa>
    bf1c:	9b04      	ldr	r3, [sp, #16]
    bf1e:	3302      	adds	r3, #2
    bf20:	9304      	str	r3, [sp, #16]
    bf22:	f01b 0384 	ands.w	r3, fp, #132	; 0x84
    bf26:	930b      	str	r3, [sp, #44]	; 0x2c
    bf28:	f040 8280 	bne.w	c42c <_svfprintf_r+0x904>
    bf2c:	9b07      	ldr	r3, [sp, #28]
    bf2e:	9a04      	ldr	r2, [sp, #16]
    bf30:	1a9c      	subs	r4, r3, r2
    bf32:	2c00      	cmp	r4, #0
    bf34:	f340 827a 	ble.w	c42c <_svfprintf_r+0x904>
    bf38:	2c10      	cmp	r4, #16
    bf3a:	991d      	ldr	r1, [sp, #116]	; 0x74
    bf3c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    bf3e:	4f95      	ldr	r7, [pc, #596]	; (c194 <_svfprintf_r+0x66c>)
    bf40:	dd23      	ble.n	bf8a <_svfprintf_r+0x462>
    bf42:	4648      	mov	r0, r9
    bf44:	2510      	movs	r5, #16
    bf46:	46c1      	mov	r9, r8
    bf48:	46b0      	mov	r8, r6
    bf4a:	9e05      	ldr	r6, [sp, #20]
    bf4c:	e004      	b.n	bf58 <_svfprintf_r+0x430>
    bf4e:	3c10      	subs	r4, #16
    bf50:	2c10      	cmp	r4, #16
    bf52:	f100 0008 	add.w	r0, r0, #8
    bf56:	dd15      	ble.n	bf84 <_svfprintf_r+0x45c>
    bf58:	3201      	adds	r2, #1
    bf5a:	3110      	adds	r1, #16
    bf5c:	2a07      	cmp	r2, #7
    bf5e:	911d      	str	r1, [sp, #116]	; 0x74
    bf60:	921c      	str	r2, [sp, #112]	; 0x70
    bf62:	6007      	str	r7, [r0, #0]
    bf64:	6045      	str	r5, [r0, #4]
    bf66:	ddf2      	ble.n	bf4e <_svfprintf_r+0x426>
    bf68:	aa1b      	add	r2, sp, #108	; 0x6c
    bf6a:	9903      	ldr	r1, [sp, #12]
    bf6c:	4630      	mov	r0, r6
    bf6e:	f002 fc1f 	bl	e7b0 <__ssprint_r>
    bf72:	2800      	cmp	r0, #0
    bf74:	f47f aece 	bne.w	bd14 <_svfprintf_r+0x1ec>
    bf78:	3c10      	subs	r4, #16
    bf7a:	2c10      	cmp	r4, #16
    bf7c:	991d      	ldr	r1, [sp, #116]	; 0x74
    bf7e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    bf80:	a828      	add	r0, sp, #160	; 0xa0
    bf82:	dce9      	bgt.n	bf58 <_svfprintf_r+0x430>
    bf84:	4646      	mov	r6, r8
    bf86:	46c8      	mov	r8, r9
    bf88:	4681      	mov	r9, r0
    bf8a:	3201      	adds	r2, #1
    bf8c:	1863      	adds	r3, r4, r1
    bf8e:	2a07      	cmp	r2, #7
    bf90:	931d      	str	r3, [sp, #116]	; 0x74
    bf92:	921c      	str	r2, [sp, #112]	; 0x70
    bf94:	f8c9 7000 	str.w	r7, [r9]
    bf98:	f8c9 4004 	str.w	r4, [r9, #4]
    bf9c:	f300 83e2 	bgt.w	c764 <_svfprintf_r+0xc3c>
    bfa0:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    bfa4:	f109 0908 	add.w	r9, r9, #8
    bfa8:	b177      	cbz	r7, bfc8 <_svfprintf_r+0x4a0>
    bfaa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    bfac:	3201      	adds	r2, #1
    bfae:	3301      	adds	r3, #1
    bfb0:	f10d 004f 	add.w	r0, sp, #79	; 0x4f
    bfb4:	2101      	movs	r1, #1
    bfb6:	2a07      	cmp	r2, #7
    bfb8:	931d      	str	r3, [sp, #116]	; 0x74
    bfba:	921c      	str	r2, [sp, #112]	; 0x70
    bfbc:	e889 0003 	stmia.w	r9, {r0, r1}
    bfc0:	f300 835f 	bgt.w	c682 <_svfprintf_r+0xb5a>
    bfc4:	f109 0908 	add.w	r9, r9, #8
    bfc8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    bfca:	b16a      	cbz	r2, bfe8 <_svfprintf_r+0x4c0>
    bfcc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    bfce:	3201      	adds	r2, #1
    bfd0:	3302      	adds	r3, #2
    bfd2:	a814      	add	r0, sp, #80	; 0x50
    bfd4:	2102      	movs	r1, #2
    bfd6:	2a07      	cmp	r2, #7
    bfd8:	931d      	str	r3, [sp, #116]	; 0x74
    bfda:	921c      	str	r2, [sp, #112]	; 0x70
    bfdc:	e889 0003 	stmia.w	r9, {r0, r1}
    bfe0:	f300 835b 	bgt.w	c69a <_svfprintf_r+0xb72>
    bfe4:	f109 0908 	add.w	r9, r9, #8
    bfe8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
    bfea:	2a80      	cmp	r2, #128	; 0x80
    bfec:	f000 827e 	beq.w	c4ec <_svfprintf_r+0x9c4>
    bff0:	9a08      	ldr	r2, [sp, #32]
    bff2:	ebc2 0408 	rsb	r4, r2, r8
    bff6:	2c00      	cmp	r4, #0
    bff8:	dd34      	ble.n	c064 <_svfprintf_r+0x53c>
    bffa:	2c10      	cmp	r4, #16
    bffc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    bffe:	4f66      	ldr	r7, [pc, #408]	; (c198 <_svfprintf_r+0x670>)
    c000:	dd23      	ble.n	c04a <_svfprintf_r+0x522>
    c002:	4649      	mov	r1, r9
    c004:	f04f 0810 	mov.w	r8, #16
    c008:	46b1      	mov	r9, r6
    c00a:	9d05      	ldr	r5, [sp, #20]
    c00c:	9e03      	ldr	r6, [sp, #12]
    c00e:	e004      	b.n	c01a <_svfprintf_r+0x4f2>
    c010:	3c10      	subs	r4, #16
    c012:	2c10      	cmp	r4, #16
    c014:	f101 0108 	add.w	r1, r1, #8
    c018:	dd15      	ble.n	c046 <_svfprintf_r+0x51e>
    c01a:	3201      	adds	r2, #1
    c01c:	3310      	adds	r3, #16
    c01e:	2a07      	cmp	r2, #7
    c020:	931d      	str	r3, [sp, #116]	; 0x74
    c022:	921c      	str	r2, [sp, #112]	; 0x70
    c024:	e881 0180 	stmia.w	r1, {r7, r8}
    c028:	ddf2      	ble.n	c010 <_svfprintf_r+0x4e8>
    c02a:	aa1b      	add	r2, sp, #108	; 0x6c
    c02c:	4631      	mov	r1, r6
    c02e:	4628      	mov	r0, r5
    c030:	f002 fbbe 	bl	e7b0 <__ssprint_r>
    c034:	2800      	cmp	r0, #0
    c036:	f47f ae6d 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c03a:	3c10      	subs	r4, #16
    c03c:	2c10      	cmp	r4, #16
    c03e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c040:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c042:	a928      	add	r1, sp, #160	; 0xa0
    c044:	dce9      	bgt.n	c01a <_svfprintf_r+0x4f2>
    c046:	464e      	mov	r6, r9
    c048:	4689      	mov	r9, r1
    c04a:	3201      	adds	r2, #1
    c04c:	4423      	add	r3, r4
    c04e:	2a07      	cmp	r2, #7
    c050:	931d      	str	r3, [sp, #116]	; 0x74
    c052:	921c      	str	r2, [sp, #112]	; 0x70
    c054:	f8c9 7000 	str.w	r7, [r9]
    c058:	f8c9 4004 	str.w	r4, [r9, #4]
    c05c:	f300 8305 	bgt.w	c66a <_svfprintf_r+0xb42>
    c060:	f109 0908 	add.w	r9, r9, #8
    c064:	f41b 7f80 	tst.w	fp, #256	; 0x100
    c068:	f040 81e2 	bne.w	c430 <_svfprintf_r+0x908>
    c06c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c06e:	9808      	ldr	r0, [sp, #32]
    c070:	f8c9 6000 	str.w	r6, [r9]
    c074:	3201      	adds	r2, #1
    c076:	4403      	add	r3, r0
    c078:	2a07      	cmp	r2, #7
    c07a:	931d      	str	r3, [sp, #116]	; 0x74
    c07c:	f8c9 0004 	str.w	r0, [r9, #4]
    c080:	921c      	str	r2, [sp, #112]	; 0x70
    c082:	f300 82c2 	bgt.w	c60a <_svfprintf_r+0xae2>
    c086:	f109 0908 	add.w	r9, r9, #8
    c08a:	f01b 0f04 	tst.w	fp, #4
    c08e:	d03e      	beq.n	c10e <_svfprintf_r+0x5e6>
    c090:	9a07      	ldr	r2, [sp, #28]
    c092:	9904      	ldr	r1, [sp, #16]
    c094:	1a54      	subs	r4, r2, r1
    c096:	2c00      	cmp	r4, #0
    c098:	dd39      	ble.n	c10e <_svfprintf_r+0x5e6>
    c09a:	2c10      	cmp	r4, #16
    c09c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c09e:	4f3d      	ldr	r7, [pc, #244]	; (c194 <_svfprintf_r+0x66c>)
    c0a0:	dd22      	ble.n	c0e8 <_svfprintf_r+0x5c0>
    c0a2:	2510      	movs	r5, #16
    c0a4:	9e05      	ldr	r6, [sp, #20]
    c0a6:	f8dd 800c 	ldr.w	r8, [sp, #12]
    c0aa:	e004      	b.n	c0b6 <_svfprintf_r+0x58e>
    c0ac:	3c10      	subs	r4, #16
    c0ae:	2c10      	cmp	r4, #16
    c0b0:	f109 0908 	add.w	r9, r9, #8
    c0b4:	dd18      	ble.n	c0e8 <_svfprintf_r+0x5c0>
    c0b6:	3201      	adds	r2, #1
    c0b8:	3310      	adds	r3, #16
    c0ba:	2a07      	cmp	r2, #7
    c0bc:	931d      	str	r3, [sp, #116]	; 0x74
    c0be:	921c      	str	r2, [sp, #112]	; 0x70
    c0c0:	f8c9 7000 	str.w	r7, [r9]
    c0c4:	f8c9 5004 	str.w	r5, [r9, #4]
    c0c8:	ddf0      	ble.n	c0ac <_svfprintf_r+0x584>
    c0ca:	aa1b      	add	r2, sp, #108	; 0x6c
    c0cc:	4641      	mov	r1, r8
    c0ce:	4630      	mov	r0, r6
    c0d0:	f002 fb6e 	bl	e7b0 <__ssprint_r>
    c0d4:	2800      	cmp	r0, #0
    c0d6:	f47f ae1d 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c0da:	3c10      	subs	r4, #16
    c0dc:	2c10      	cmp	r4, #16
    c0de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c0e0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c0e2:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c0e6:	dce6      	bgt.n	c0b6 <_svfprintf_r+0x58e>
    c0e8:	3201      	adds	r2, #1
    c0ea:	4423      	add	r3, r4
    c0ec:	2a07      	cmp	r2, #7
    c0ee:	931d      	str	r3, [sp, #116]	; 0x74
    c0f0:	921c      	str	r2, [sp, #112]	; 0x70
    c0f2:	f8c9 7000 	str.w	r7, [r9]
    c0f6:	f8c9 4004 	str.w	r4, [r9, #4]
    c0fa:	dd08      	ble.n	c10e <_svfprintf_r+0x5e6>
    c0fc:	aa1b      	add	r2, sp, #108	; 0x6c
    c0fe:	9903      	ldr	r1, [sp, #12]
    c100:	9805      	ldr	r0, [sp, #20]
    c102:	f002 fb55 	bl	e7b0 <__ssprint_r>
    c106:	2800      	cmp	r0, #0
    c108:	f47f ae04 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c10c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c10e:	9a06      	ldr	r2, [sp, #24]
    c110:	9907      	ldr	r1, [sp, #28]
    c112:	9804      	ldr	r0, [sp, #16]
    c114:	4281      	cmp	r1, r0
    c116:	bfac      	ite	ge
    c118:	1852      	addge	r2, r2, r1
    c11a:	1812      	addlt	r2, r2, r0
    c11c:	9206      	str	r2, [sp, #24]
    c11e:	2b00      	cmp	r3, #0
    c120:	f040 827f 	bne.w	c622 <_svfprintf_r+0xafa>
    c124:	2300      	movs	r3, #0
    c126:	931c      	str	r3, [sp, #112]	; 0x70
    c128:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c12c:	e522      	b.n	bb74 <_svfprintf_r+0x4c>
    c12e:	f04b 0b08 	orr.w	fp, fp, #8
    c132:	f89a 3000 	ldrb.w	r3, [sl]
    c136:	e550      	b.n	bbda <_svfprintf_r+0xb2>
    c138:	930c      	str	r3, [sp, #48]	; 0x30
    c13a:	46a8      	mov	r8, r5
    c13c:	2a00      	cmp	r2, #0
    c13e:	f040 879a 	bne.w	d076 <_svfprintf_r+0x154e>
    c142:	f04b 0b10 	orr.w	fp, fp, #16
    c146:	f01b 0320 	ands.w	r3, fp, #32
    c14a:	f47f adfa 	bne.w	bd42 <_svfprintf_r+0x21a>
    c14e:	f01b 0210 	ands.w	r2, fp, #16
    c152:	f040 8391 	bne.w	c878 <_svfprintf_r+0xd50>
    c156:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    c15a:	f000 838d 	beq.w	c878 <_svfprintf_r+0xd50>
    c15e:	9909      	ldr	r1, [sp, #36]	; 0x24
    c160:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    c164:	460b      	mov	r3, r1
    c166:	f1b8 0f00 	cmp.w	r8, #0
    c16a:	f103 0304 	add.w	r3, r3, #4
    c16e:	880c      	ldrh	r4, [r1, #0]
    c170:	f04f 0500 	mov.w	r5, #0
    c174:	f2c0 85ab 	blt.w	ccce <_svfprintf_r+0x11a6>
    c178:	ea54 0105 	orrs.w	r1, r4, r5
    c17c:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    c180:	9309      	str	r3, [sp, #36]	; 0x24
    c182:	f000 813e 	beq.w	c402 <_svfprintf_r+0x8da>
    c186:	4617      	mov	r7, r2
    c188:	e5f0      	b.n	bd6c <_svfprintf_r+0x244>
    c18a:	bf00      	nop
    c18c:	20000d98 	.word	0x20000d98
    c190:	20000de8 	.word	0x20000de8
    c194:	20000e24 	.word	0x20000e24
    c198:	20000dd8 	.word	0x20000dd8
    c19c:	930c      	str	r3, [sp, #48]	; 0x30
    c19e:	46a8      	mov	r8, r5
    c1a0:	2a00      	cmp	r2, #0
    c1a2:	f040 8759 	bne.w	d058 <_svfprintf_r+0x1530>
    c1a6:	f04b 0b10 	orr.w	fp, fp, #16
    c1aa:	f01b 0320 	ands.w	r3, fp, #32
    c1ae:	f000 82e7 	beq.w	c780 <_svfprintf_r+0xc58>
    c1b2:	9f09      	ldr	r7, [sp, #36]	; 0x24
    c1b4:	3707      	adds	r7, #7
    c1b6:	f027 0307 	bic.w	r3, r7, #7
    c1ba:	2700      	movs	r7, #0
    c1bc:	f103 0208 	add.w	r2, r3, #8
    c1c0:	45b8      	cmp	r8, r7
    c1c2:	9209      	str	r2, [sp, #36]	; 0x24
    c1c4:	e9d3 4500 	ldrd	r4, r5, [r3]
    c1c8:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    c1cc:	f6bf ae4b 	bge.w	be66 <_svfprintf_r+0x33e>
    c1d0:	ea54 0305 	orrs.w	r3, r4, r5
    c1d4:	f47f ae4d 	bne.w	be72 <_svfprintf_r+0x34a>
    c1d8:	ae38      	add	r6, sp, #224	; 0xe0
    c1da:	3430      	adds	r4, #48	; 0x30
    c1dc:	f806 4d41 	strb.w	r4, [r6, #-65]!
    c1e0:	ab28      	add	r3, sp, #160	; 0xa0
    c1e2:	1b9b      	subs	r3, r3, r6
    c1e4:	9308      	str	r3, [sp, #32]
    c1e6:	9b08      	ldr	r3, [sp, #32]
    c1e8:	4543      	cmp	r3, r8
    c1ea:	bfb8      	it	lt
    c1ec:	4643      	movlt	r3, r8
    c1ee:	9304      	str	r3, [sp, #16]
    c1f0:	2300      	movs	r3, #0
    c1f2:	930e      	str	r3, [sp, #56]	; 0x38
    c1f4:	e68a      	b.n	bf0c <_svfprintf_r+0x3e4>
    c1f6:	930c      	str	r3, [sp, #48]	; 0x30
    c1f8:	46a8      	mov	r8, r5
    c1fa:	2a00      	cmp	r2, #0
    c1fc:	f040 8728 	bne.w	d050 <_svfprintf_r+0x1528>
    c200:	f01b 0f20 	tst.w	fp, #32
    c204:	48c2      	ldr	r0, [pc, #776]	; (c510 <_svfprintf_r+0x9e8>)
    c206:	f000 8086 	beq.w	c316 <_svfprintf_r+0x7ee>
    c20a:	9f09      	ldr	r7, [sp, #36]	; 0x24
    c20c:	3707      	adds	r7, #7
    c20e:	f027 0307 	bic.w	r3, r7, #7
    c212:	e9d3 4500 	ldrd	r4, r5, [r3]
    c216:	f103 0208 	add.w	r2, r3, #8
    c21a:	9209      	str	r2, [sp, #36]	; 0x24
    c21c:	f01b 0701 	ands.w	r7, fp, #1
    c220:	f000 8247 	beq.w	c6b2 <_svfprintf_r+0xb8a>
    c224:	ea54 0305 	orrs.w	r3, r4, r5
    c228:	f000 84a3 	beq.w	cb72 <_svfprintf_r+0x104a>
    c22c:	2700      	movs	r7, #0
    c22e:	2330      	movs	r3, #48	; 0x30
    c230:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    c234:	f88d 3050 	strb.w	r3, [sp, #80]	; 0x50
    c238:	45b8      	cmp	r8, r7
    c23a:	f88d 2051 	strb.w	r2, [sp, #81]	; 0x51
    c23e:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    c242:	f04b 0302 	orr.w	r3, fp, #2
    c246:	f2c0 8617 	blt.w	ce78 <_svfprintf_r+0x1350>
    c24a:	f02b 0380 	bic.w	r3, fp, #128	; 0x80
    c24e:	f043 0b02 	orr.w	fp, r3, #2
    c252:	ae28      	add	r6, sp, #160	; 0xa0
    c254:	0923      	lsrs	r3, r4, #4
    c256:	f004 010f 	and.w	r1, r4, #15
    c25a:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
    c25e:	092a      	lsrs	r2, r5, #4
    c260:	461c      	mov	r4, r3
    c262:	4615      	mov	r5, r2
    c264:	5c43      	ldrb	r3, [r0, r1]
    c266:	f806 3d01 	strb.w	r3, [r6, #-1]!
    c26a:	ea54 0305 	orrs.w	r3, r4, r5
    c26e:	d1f1      	bne.n	c254 <_svfprintf_r+0x72c>
    c270:	e7b6      	b.n	c1e0 <_svfprintf_r+0x6b8>
    c272:	9909      	ldr	r1, [sp, #36]	; 0x24
    c274:	930c      	str	r3, [sp, #48]	; 0x30
    c276:	680a      	ldr	r2, [r1, #0]
    c278:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    c27c:	2300      	movs	r3, #0
    c27e:	460a      	mov	r2, r1
    c280:	461f      	mov	r7, r3
    c282:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    c286:	3204      	adds	r2, #4
    c288:	2301      	movs	r3, #1
    c28a:	9304      	str	r3, [sp, #16]
    c28c:	46b8      	mov	r8, r7
    c28e:	970e      	str	r7, [sp, #56]	; 0x38
    c290:	9209      	str	r2, [sp, #36]	; 0x24
    c292:	9308      	str	r3, [sp, #32]
    c294:	ae1e      	add	r6, sp, #120	; 0x78
    c296:	e63d      	b.n	bf14 <_svfprintf_r+0x3ec>
    c298:	930c      	str	r3, [sp, #48]	; 0x30
    c29a:	46a8      	mov	r8, r5
    c29c:	2a00      	cmp	r2, #0
    c29e:	f43f adc8 	beq.w	be32 <_svfprintf_r+0x30a>
    c2a2:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    c2a6:	e5c4      	b.n	be32 <_svfprintf_r+0x30a>
    c2a8:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
    c2ac:	f89a 3000 	ldrb.w	r3, [sl]
    c2b0:	e493      	b.n	bbda <_svfprintf_r+0xb2>
    c2b2:	f89a 3000 	ldrb.w	r3, [sl]
    c2b6:	2900      	cmp	r1, #0
    c2b8:	f47f ac8f 	bne.w	bbda <_svfprintf_r+0xb2>
    c2bc:	2201      	movs	r2, #1
    c2be:	2120      	movs	r1, #32
    c2c0:	e48b      	b.n	bbda <_svfprintf_r+0xb2>
    c2c2:	f04b 0b01 	orr.w	fp, fp, #1
    c2c6:	f89a 3000 	ldrb.w	r3, [sl]
    c2ca:	e486      	b.n	bbda <_svfprintf_r+0xb2>
    c2cc:	9c09      	ldr	r4, [sp, #36]	; 0x24
    c2ce:	6823      	ldr	r3, [r4, #0]
    c2d0:	9307      	str	r3, [sp, #28]
    c2d2:	4618      	mov	r0, r3
    c2d4:	2800      	cmp	r0, #0
    c2d6:	4623      	mov	r3, r4
    c2d8:	f103 0304 	add.w	r3, r3, #4
    c2dc:	f6ff acdf 	blt.w	bc9e <_svfprintf_r+0x176>
    c2e0:	9309      	str	r3, [sp, #36]	; 0x24
    c2e2:	f89a 3000 	ldrb.w	r3, [sl]
    c2e6:	e478      	b.n	bbda <_svfprintf_r+0xb2>
    c2e8:	f89a 3000 	ldrb.w	r3, [sl]
    c2ec:	2201      	movs	r2, #1
    c2ee:	212b      	movs	r1, #43	; 0x2b
    c2f0:	e473      	b.n	bbda <_svfprintf_r+0xb2>
    c2f2:	930c      	str	r3, [sp, #48]	; 0x30
    c2f4:	46a8      	mov	r8, r5
    c2f6:	2a00      	cmp	r2, #0
    c2f8:	f43f af57 	beq.w	c1aa <_svfprintf_r+0x682>
    c2fc:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    c300:	e753      	b.n	c1aa <_svfprintf_r+0x682>
    c302:	930c      	str	r3, [sp, #48]	; 0x30
    c304:	46a8      	mov	r8, r5
    c306:	2a00      	cmp	r2, #0
    c308:	f040 86aa 	bne.w	d060 <_svfprintf_r+0x1538>
    c30c:	f01b 0f20 	tst.w	fp, #32
    c310:	4880      	ldr	r0, [pc, #512]	; (c514 <_svfprintf_r+0x9ec>)
    c312:	f47f af7a 	bne.w	c20a <_svfprintf_r+0x6e2>
    c316:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c318:	f01b 0f10 	tst.w	fp, #16
    c31c:	4613      	mov	r3, r2
    c31e:	f040 82c1 	bne.w	c8a4 <_svfprintf_r+0xd7c>
    c322:	f01b 0f40 	tst.w	fp, #64	; 0x40
    c326:	f000 82bd 	beq.w	c8a4 <_svfprintf_r+0xd7c>
    c32a:	3304      	adds	r3, #4
    c32c:	8814      	ldrh	r4, [r2, #0]
    c32e:	9309      	str	r3, [sp, #36]	; 0x24
    c330:	2500      	movs	r5, #0
    c332:	e773      	b.n	c21c <_svfprintf_r+0x6f4>
    c334:	f89a 3000 	ldrb.w	r3, [sl]
    c338:	2b6c      	cmp	r3, #108	; 0x6c
    c33a:	bf03      	ittte	eq
    c33c:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
    c340:	f04b 0b20 	orreq.w	fp, fp, #32
    c344:	f10a 0a01 	addeq.w	sl, sl, #1
    c348:	f04b 0b10 	orrne.w	fp, fp, #16
    c34c:	e445      	b.n	bbda <_svfprintf_r+0xb2>
    c34e:	2a00      	cmp	r2, #0
    c350:	f040 866f 	bne.w	d032 <_svfprintf_r+0x150a>
    c354:	f01b 0f20 	tst.w	fp, #32
    c358:	f000 8366 	beq.w	ca28 <_svfprintf_r+0xf00>
    c35c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c35e:	9906      	ldr	r1, [sp, #24]
    c360:	6813      	ldr	r3, [r2, #0]
    c362:	17cd      	asrs	r5, r1, #31
    c364:	4608      	mov	r0, r1
    c366:	3204      	adds	r2, #4
    c368:	4629      	mov	r1, r5
    c36a:	9209      	str	r2, [sp, #36]	; 0x24
    c36c:	e9c3 0100 	strd	r0, r1, [r3]
    c370:	e400      	b.n	bb74 <_svfprintf_r+0x4c>
    c372:	f04b 0b20 	orr.w	fp, fp, #32
    c376:	f89a 3000 	ldrb.w	r3, [sl]
    c37a:	e42e      	b.n	bbda <_svfprintf_r+0xb2>
    c37c:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c37e:	930c      	str	r3, [sp, #48]	; 0x30
    c380:	6816      	ldr	r6, [r2, #0]
    c382:	2400      	movs	r4, #0
    c384:	f88d 404f 	strb.w	r4, [sp, #79]	; 0x4f
    c388:	1d17      	adds	r7, r2, #4
    c38a:	2e00      	cmp	r6, #0
    c38c:	f000 8565 	beq.w	ce5a <_svfprintf_r+0x1332>
    c390:	2d00      	cmp	r5, #0
    c392:	f2c0 84a2 	blt.w	ccda <_svfprintf_r+0x11b2>
    c396:	462a      	mov	r2, r5
    c398:	4621      	mov	r1, r4
    c39a:	4630      	mov	r0, r6
    c39c:	f7fe ff60 	bl	b260 <memchr>
    c3a0:	2800      	cmp	r0, #0
    c3a2:	f000 85cc 	beq.w	cf3e <_svfprintf_r+0x1416>
    c3a6:	1b83      	subs	r3, r0, r6
    c3a8:	9308      	str	r3, [sp, #32]
    c3aa:	46a0      	mov	r8, r4
    c3ac:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    c3b0:	9709      	str	r7, [sp, #36]	; 0x24
    c3b2:	9304      	str	r3, [sp, #16]
    c3b4:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
    c3b8:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    c3bc:	e5a6      	b.n	bf0c <_svfprintf_r+0x3e4>
    c3be:	4855      	ldr	r0, [pc, #340]	; (c514 <_svfprintf_r+0x9ec>)
    c3c0:	920c      	str	r2, [sp, #48]	; 0x30
    c3c2:	f1b8 0f00 	cmp.w	r8, #0
    c3c6:	f040 8184 	bne.w	c6d2 <_svfprintf_r+0xbaa>
    c3ca:	4647      	mov	r7, r8
    c3cc:	f04f 0800 	mov.w	r8, #0
    c3d0:	f8cd 8020 	str.w	r8, [sp, #32]
    c3d4:	ae28      	add	r6, sp, #160	; 0xa0
    c3d6:	e706      	b.n	c1e6 <_svfprintf_r+0x6be>
    c3d8:	930c      	str	r3, [sp, #48]	; 0x30
    c3da:	2a00      	cmp	r2, #0
    c3dc:	f040 862d 	bne.w	d03a <_svfprintf_r+0x1512>
    c3e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c3e2:	2a00      	cmp	r2, #0
    c3e4:	f43f ac8f 	beq.w	bd06 <_svfprintf_r+0x1de>
    c3e8:	2300      	movs	r3, #0
    c3ea:	2101      	movs	r1, #1
    c3ec:	461f      	mov	r7, r3
    c3ee:	9104      	str	r1, [sp, #16]
    c3f0:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
    c3f4:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    c3f8:	4698      	mov	r8, r3
    c3fa:	930e      	str	r3, [sp, #56]	; 0x38
    c3fc:	9108      	str	r1, [sp, #32]
    c3fe:	ae1e      	add	r6, sp, #120	; 0x78
    c400:	e588      	b.n	bf14 <_svfprintf_r+0x3ec>
    c402:	f1b8 0f00 	cmp.w	r8, #0
    c406:	f000 858b 	beq.w	cf20 <_svfprintf_r+0x13f8>
    c40a:	2700      	movs	r7, #0
    c40c:	2400      	movs	r4, #0
    c40e:	2500      	movs	r5, #0
    c410:	e4ac      	b.n	bd6c <_svfprintf_r+0x244>
    c412:	4840      	ldr	r0, [pc, #256]	; (c514 <_svfprintf_r+0x9ec>)
    c414:	920c      	str	r2, [sp, #48]	; 0x30
    c416:	469b      	mov	fp, r3
    c418:	ea54 0305 	orrs.w	r3, r4, r5
    c41c:	9709      	str	r7, [sp, #36]	; 0x24
    c41e:	f04f 0700 	mov.w	r7, #0
    c422:	f47f af16 	bne.w	c252 <_svfprintf_r+0x72a>
    c426:	2400      	movs	r4, #0
    c428:	2500      	movs	r5, #0
    c42a:	e712      	b.n	c252 <_svfprintf_r+0x72a>
    c42c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c42e:	e5bb      	b.n	bfa8 <_svfprintf_r+0x480>
    c430:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    c432:	2a65      	cmp	r2, #101	; 0x65
    c434:	f340 80a1 	ble.w	c57a <_svfprintf_r+0xa52>
    c438:	eeb5 8b40 	vcmp.f64	d8, #0.0
    c43c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c440:	f040 8149 	bne.w	c6d6 <_svfprintf_r+0xbae>
    c444:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c446:	4934      	ldr	r1, [pc, #208]	; (c518 <_svfprintf_r+0x9f0>)
    c448:	f8c9 1000 	str.w	r1, [r9]
    c44c:	3201      	adds	r2, #1
    c44e:	3301      	adds	r3, #1
    c450:	2101      	movs	r1, #1
    c452:	2a07      	cmp	r2, #7
    c454:	931d      	str	r3, [sp, #116]	; 0x74
    c456:	921c      	str	r2, [sp, #112]	; 0x70
    c458:	f8c9 1004 	str.w	r1, [r9, #4]
    c45c:	f300 8392 	bgt.w	cb84 <_svfprintf_r+0x105c>
    c460:	f109 0908 	add.w	r9, r9, #8
    c464:	9a15      	ldr	r2, [sp, #84]	; 0x54
    c466:	990d      	ldr	r1, [sp, #52]	; 0x34
    c468:	428a      	cmp	r2, r1
    c46a:	db03      	blt.n	c474 <_svfprintf_r+0x94c>
    c46c:	f01b 0f01 	tst.w	fp, #1
    c470:	f43f ae0b 	beq.w	c08a <_svfprintf_r+0x562>
    c474:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c476:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c478:	9910      	ldr	r1, [sp, #64]	; 0x40
    c47a:	f8c9 1000 	str.w	r1, [r9]
    c47e:	3201      	adds	r2, #1
    c480:	4403      	add	r3, r0
    c482:	2a07      	cmp	r2, #7
    c484:	931d      	str	r3, [sp, #116]	; 0x74
    c486:	f8c9 0004 	str.w	r0, [r9, #4]
    c48a:	921c      	str	r2, [sp, #112]	; 0x70
    c48c:	f300 83d6 	bgt.w	cc3c <_svfprintf_r+0x1114>
    c490:	f109 0908 	add.w	r9, r9, #8
    c494:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c496:	1e54      	subs	r4, r2, #1
    c498:	2c00      	cmp	r4, #0
    c49a:	f77f adf6 	ble.w	c08a <_svfprintf_r+0x562>
    c49e:	2c10      	cmp	r4, #16
    c4a0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c4a2:	4f1e      	ldr	r7, [pc, #120]	; (c51c <_svfprintf_r+0x9f4>)
    c4a4:	f340 81dc 	ble.w	c860 <_svfprintf_r+0xd38>
    c4a8:	2510      	movs	r5, #16
    c4aa:	9e05      	ldr	r6, [sp, #20]
    c4ac:	f8dd 800c 	ldr.w	r8, [sp, #12]
    c4b0:	e005      	b.n	c4be <_svfprintf_r+0x996>
    c4b2:	f109 0908 	add.w	r9, r9, #8
    c4b6:	3c10      	subs	r4, #16
    c4b8:	2c10      	cmp	r4, #16
    c4ba:	f340 81d1 	ble.w	c860 <_svfprintf_r+0xd38>
    c4be:	3201      	adds	r2, #1
    c4c0:	3310      	adds	r3, #16
    c4c2:	2a07      	cmp	r2, #7
    c4c4:	931d      	str	r3, [sp, #116]	; 0x74
    c4c6:	921c      	str	r2, [sp, #112]	; 0x70
    c4c8:	f8c9 7000 	str.w	r7, [r9]
    c4cc:	f8c9 5004 	str.w	r5, [r9, #4]
    c4d0:	ddef      	ble.n	c4b2 <_svfprintf_r+0x98a>
    c4d2:	aa1b      	add	r2, sp, #108	; 0x6c
    c4d4:	4641      	mov	r1, r8
    c4d6:	4630      	mov	r0, r6
    c4d8:	f002 f96a 	bl	e7b0 <__ssprint_r>
    c4dc:	2800      	cmp	r0, #0
    c4de:	f47f ac19 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c4e2:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c4e4:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c4e6:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c4ea:	e7e4      	b.n	c4b6 <_svfprintf_r+0x98e>
    c4ec:	9a07      	ldr	r2, [sp, #28]
    c4ee:	9904      	ldr	r1, [sp, #16]
    c4f0:	1a54      	subs	r4, r2, r1
    c4f2:	2c00      	cmp	r4, #0
    c4f4:	f77f ad7c 	ble.w	bff0 <_svfprintf_r+0x4c8>
    c4f8:	2c10      	cmp	r4, #16
    c4fa:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c4fc:	4f07      	ldr	r7, [pc, #28]	; (c51c <_svfprintf_r+0x9f4>)
    c4fe:	dd2e      	ble.n	c55e <_svfprintf_r+0xa36>
    c500:	4649      	mov	r1, r9
    c502:	2510      	movs	r5, #16
    c504:	46c1      	mov	r9, r8
    c506:	4618      	mov	r0, r3
    c508:	46b0      	mov	r8, r6
    c50a:	9e05      	ldr	r6, [sp, #20]
    c50c:	e00d      	b.n	c52a <_svfprintf_r+0xa02>
    c50e:	bf00      	nop
    c510:	20000df0 	.word	0x20000df0
    c514:	20000e04 	.word	0x20000e04
    c518:	20000e20 	.word	0x20000e20
    c51c:	20000dd8 	.word	0x20000dd8
    c520:	3c10      	subs	r4, #16
    c522:	2c10      	cmp	r4, #16
    c524:	f101 0108 	add.w	r1, r1, #8
    c528:	dd15      	ble.n	c556 <_svfprintf_r+0xa2e>
    c52a:	3201      	adds	r2, #1
    c52c:	3010      	adds	r0, #16
    c52e:	2a07      	cmp	r2, #7
    c530:	901d      	str	r0, [sp, #116]	; 0x74
    c532:	921c      	str	r2, [sp, #112]	; 0x70
    c534:	600f      	str	r7, [r1, #0]
    c536:	604d      	str	r5, [r1, #4]
    c538:	ddf2      	ble.n	c520 <_svfprintf_r+0x9f8>
    c53a:	aa1b      	add	r2, sp, #108	; 0x6c
    c53c:	9903      	ldr	r1, [sp, #12]
    c53e:	4630      	mov	r0, r6
    c540:	f002 f936 	bl	e7b0 <__ssprint_r>
    c544:	2800      	cmp	r0, #0
    c546:	f47f abe5 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c54a:	3c10      	subs	r4, #16
    c54c:	2c10      	cmp	r4, #16
    c54e:	981d      	ldr	r0, [sp, #116]	; 0x74
    c550:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c552:	a928      	add	r1, sp, #160	; 0xa0
    c554:	dce9      	bgt.n	c52a <_svfprintf_r+0xa02>
    c556:	4646      	mov	r6, r8
    c558:	4603      	mov	r3, r0
    c55a:	46c8      	mov	r8, r9
    c55c:	4689      	mov	r9, r1
    c55e:	3201      	adds	r2, #1
    c560:	4423      	add	r3, r4
    c562:	2a07      	cmp	r2, #7
    c564:	931d      	str	r3, [sp, #116]	; 0x74
    c566:	921c      	str	r2, [sp, #112]	; 0x70
    c568:	f8c9 7000 	str.w	r7, [r9]
    c56c:	f8c9 4004 	str.w	r4, [r9, #4]
    c570:	f300 8246 	bgt.w	ca00 <_svfprintf_r+0xed8>
    c574:	f109 0908 	add.w	r9, r9, #8
    c578:	e53a      	b.n	bff0 <_svfprintf_r+0x4c8>
    c57a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    c57c:	f8c9 6000 	str.w	r6, [r9]
    c580:	2a01      	cmp	r2, #1
    c582:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c584:	f103 0301 	add.w	r3, r3, #1
    c588:	f102 0201 	add.w	r2, r2, #1
    c58c:	f04f 0101 	mov.w	r1, #1
    c590:	931d      	str	r3, [sp, #116]	; 0x74
    c592:	921c      	str	r2, [sp, #112]	; 0x70
    c594:	f8c9 1004 	str.w	r1, [r9, #4]
    c598:	f340 8210 	ble.w	c9bc <_svfprintf_r+0xe94>
    c59c:	2a07      	cmp	r2, #7
    c59e:	f300 8215 	bgt.w	c9cc <_svfprintf_r+0xea4>
    c5a2:	f109 0908 	add.w	r9, r9, #8
    c5a6:	980f      	ldr	r0, [sp, #60]	; 0x3c
    c5a8:	9910      	ldr	r1, [sp, #64]	; 0x40
    c5aa:	f8c9 1000 	str.w	r1, [r9]
    c5ae:	3201      	adds	r2, #1
    c5b0:	4403      	add	r3, r0
    c5b2:	2a07      	cmp	r2, #7
    c5b4:	931d      	str	r3, [sp, #116]	; 0x74
    c5b6:	921c      	str	r2, [sp, #112]	; 0x70
    c5b8:	f8c9 0004 	str.w	r0, [r9, #4]
    c5bc:	f300 8213 	bgt.w	c9e6 <_svfprintf_r+0xebe>
    c5c0:	f109 0908 	add.w	r9, r9, #8
    c5c4:	eeb5 8b40 	vcmp.f64	d8, #0.0
    c5c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    c5cc:	990d      	ldr	r1, [sp, #52]	; 0x34
    c5ce:	f000 80f5 	beq.w	c7bc <_svfprintf_r+0xc94>
    c5d2:	3901      	subs	r1, #1
    c5d4:	3201      	adds	r2, #1
    c5d6:	3601      	adds	r6, #1
    c5d8:	440b      	add	r3, r1
    c5da:	2a07      	cmp	r2, #7
    c5dc:	f8c9 6000 	str.w	r6, [r9]
    c5e0:	921c      	str	r2, [sp, #112]	; 0x70
    c5e2:	931d      	str	r3, [sp, #116]	; 0x74
    c5e4:	f8c9 1004 	str.w	r1, [r9, #4]
    c5e8:	f300 811d 	bgt.w	c826 <_svfprintf_r+0xcfe>
    c5ec:	f109 0908 	add.w	r9, r9, #8
    c5f0:	9811      	ldr	r0, [sp, #68]	; 0x44
    c5f2:	f8c9 0004 	str.w	r0, [r9, #4]
    c5f6:	3201      	adds	r2, #1
    c5f8:	4403      	add	r3, r0
    c5fa:	a917      	add	r1, sp, #92	; 0x5c
    c5fc:	2a07      	cmp	r2, #7
    c5fe:	931d      	str	r3, [sp, #116]	; 0x74
    c600:	921c      	str	r2, [sp, #112]	; 0x70
    c602:	f8c9 1000 	str.w	r1, [r9]
    c606:	f77f ad3e 	ble.w	c086 <_svfprintf_r+0x55e>
    c60a:	aa1b      	add	r2, sp, #108	; 0x6c
    c60c:	9903      	ldr	r1, [sp, #12]
    c60e:	9805      	ldr	r0, [sp, #20]
    c610:	f002 f8ce 	bl	e7b0 <__ssprint_r>
    c614:	2800      	cmp	r0, #0
    c616:	f47f ab7d 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c61a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c61c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c620:	e533      	b.n	c08a <_svfprintf_r+0x562>
    c622:	aa1b      	add	r2, sp, #108	; 0x6c
    c624:	9903      	ldr	r1, [sp, #12]
    c626:	9805      	ldr	r0, [sp, #20]
    c628:	f002 f8c2 	bl	e7b0 <__ssprint_r>
    c62c:	2800      	cmp	r0, #0
    c62e:	f43f ad79 	beq.w	c124 <_svfprintf_r+0x5fc>
    c632:	f7ff bb6f 	b.w	bd14 <_svfprintf_r+0x1ec>
    c636:	9909      	ldr	r1, [sp, #36]	; 0x24
    c638:	f1b8 0f00 	cmp.w	r8, #0
    c63c:	680c      	ldr	r4, [r1, #0]
    c63e:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    c642:	f101 0704 	add.w	r7, r1, #4
    c646:	f04f 0500 	mov.w	r5, #0
    c64a:	f2c0 8371 	blt.w	cd30 <_svfprintf_r+0x1208>
    c64e:	ea54 0205 	orrs.w	r2, r4, r5
    c652:	9709      	str	r7, [sp, #36]	; 0x24
    c654:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    c658:	461f      	mov	r7, r3
    c65a:	f47f ac0a 	bne.w	be72 <_svfprintf_r+0x34a>
    c65e:	f1b8 0f00 	cmp.w	r8, #0
    c662:	f43f aeb3 	beq.w	c3cc <_svfprintf_r+0x8a4>
    c666:	2400      	movs	r4, #0
    c668:	e5b6      	b.n	c1d8 <_svfprintf_r+0x6b0>
    c66a:	aa1b      	add	r2, sp, #108	; 0x6c
    c66c:	9903      	ldr	r1, [sp, #12]
    c66e:	9805      	ldr	r0, [sp, #20]
    c670:	f002 f89e 	bl	e7b0 <__ssprint_r>
    c674:	2800      	cmp	r0, #0
    c676:	f47f ab4d 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c67a:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c67c:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c680:	e4f0      	b.n	c064 <_svfprintf_r+0x53c>
    c682:	aa1b      	add	r2, sp, #108	; 0x6c
    c684:	9903      	ldr	r1, [sp, #12]
    c686:	9805      	ldr	r0, [sp, #20]
    c688:	f002 f892 	bl	e7b0 <__ssprint_r>
    c68c:	2800      	cmp	r0, #0
    c68e:	f47f ab41 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c692:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c694:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c698:	e496      	b.n	bfc8 <_svfprintf_r+0x4a0>
    c69a:	aa1b      	add	r2, sp, #108	; 0x6c
    c69c:	9903      	ldr	r1, [sp, #12]
    c69e:	9805      	ldr	r0, [sp, #20]
    c6a0:	f002 f886 	bl	e7b0 <__ssprint_r>
    c6a4:	2800      	cmp	r0, #0
    c6a6:	f47f ab35 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c6aa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c6ac:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c6b0:	e49a      	b.n	bfe8 <_svfprintf_r+0x4c0>
    c6b2:	f1b8 0f00 	cmp.w	r8, #0
    c6b6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    c6ba:	f2c0 826f 	blt.w	cb9c <_svfprintf_r+0x1074>
    c6be:	ea54 0305 	orrs.w	r3, r4, r5
    c6c2:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    c6c6:	f47f adc4 	bne.w	c252 <_svfprintf_r+0x72a>
    c6ca:	f1b8 0f00 	cmp.w	r8, #0
    c6ce:	f43f ae7c 	beq.w	c3ca <_svfprintf_r+0x8a2>
    c6d2:	2700      	movs	r7, #0
    c6d4:	e6a7      	b.n	c426 <_svfprintf_r+0x8fe>
    c6d6:	9c15      	ldr	r4, [sp, #84]	; 0x54
    c6d8:	2c00      	cmp	r4, #0
    c6da:	f340 8261 	ble.w	cba0 <_svfprintf_r+0x1078>
    c6de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c6e0:	990d      	ldr	r1, [sp, #52]	; 0x34
    c6e2:	428a      	cmp	r2, r1
    c6e4:	bfa8      	it	ge
    c6e6:	460a      	movge	r2, r1
    c6e8:	2a00      	cmp	r2, #0
    c6ea:	4614      	mov	r4, r2
    c6ec:	dd0d      	ble.n	c70a <_svfprintf_r+0xbe2>
    c6ee:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c6f0:	f8c9 6000 	str.w	r6, [r9]
    c6f4:	3201      	adds	r2, #1
    c6f6:	4423      	add	r3, r4
    c6f8:	2a07      	cmp	r2, #7
    c6fa:	931d      	str	r3, [sp, #116]	; 0x74
    c6fc:	f8c9 4004 	str.w	r4, [r9, #4]
    c700:	921c      	str	r2, [sp, #112]	; 0x70
    c702:	f300 8372 	bgt.w	cdea <_svfprintf_r+0x12c2>
    c706:	f109 0908 	add.w	r9, r9, #8
    c70a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    c70c:	2c00      	cmp	r4, #0
    c70e:	bfa8      	it	ge
    c710:	1b12      	subge	r2, r2, r4
    c712:	2a00      	cmp	r2, #0
    c714:	4614      	mov	r4, r2
    c716:	f340 80f1 	ble.w	c8fc <_svfprintf_r+0xdd4>
    c71a:	2c10      	cmp	r4, #16
    c71c:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c71e:	4fc1      	ldr	r7, [pc, #772]	; (ca24 <_svfprintf_r+0xefc>)
    c720:	f340 8219 	ble.w	cb56 <_svfprintf_r+0x102e>
    c724:	4649      	mov	r1, r9
    c726:	2510      	movs	r5, #16
    c728:	46b1      	mov	r9, r6
    c72a:	f8dd 8014 	ldr.w	r8, [sp, #20]
    c72e:	9e03      	ldr	r6, [sp, #12]
    c730:	e004      	b.n	c73c <_svfprintf_r+0xc14>
    c732:	3108      	adds	r1, #8
    c734:	3c10      	subs	r4, #16
    c736:	2c10      	cmp	r4, #16
    c738:	f340 820b 	ble.w	cb52 <_svfprintf_r+0x102a>
    c73c:	3201      	adds	r2, #1
    c73e:	3310      	adds	r3, #16
    c740:	2a07      	cmp	r2, #7
    c742:	931d      	str	r3, [sp, #116]	; 0x74
    c744:	921c      	str	r2, [sp, #112]	; 0x70
    c746:	600f      	str	r7, [r1, #0]
    c748:	604d      	str	r5, [r1, #4]
    c74a:	ddf2      	ble.n	c732 <_svfprintf_r+0xc0a>
    c74c:	aa1b      	add	r2, sp, #108	; 0x6c
    c74e:	4631      	mov	r1, r6
    c750:	4640      	mov	r0, r8
    c752:	f002 f82d 	bl	e7b0 <__ssprint_r>
    c756:	2800      	cmp	r0, #0
    c758:	f47f aadc 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c75c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c75e:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c760:	a928      	add	r1, sp, #160	; 0xa0
    c762:	e7e7      	b.n	c734 <_svfprintf_r+0xc0c>
    c764:	aa1b      	add	r2, sp, #108	; 0x6c
    c766:	9903      	ldr	r1, [sp, #12]
    c768:	9805      	ldr	r0, [sp, #20]
    c76a:	f002 f821 	bl	e7b0 <__ssprint_r>
    c76e:	2800      	cmp	r0, #0
    c770:	f47f aad0 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c774:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    c778:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c77a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c77e:	e413      	b.n	bfa8 <_svfprintf_r+0x480>
    c780:	f01b 0210 	ands.w	r2, fp, #16
    c784:	f47f af57 	bne.w	c636 <_svfprintf_r+0xb0e>
    c788:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
    c78c:	f43f af53 	beq.w	c636 <_svfprintf_r+0xb0e>
    c790:	9909      	ldr	r1, [sp, #36]	; 0x24
    c792:	f88d 204f 	strb.w	r2, [sp, #79]	; 0x4f
    c796:	460b      	mov	r3, r1
    c798:	f1b8 0f00 	cmp.w	r8, #0
    c79c:	f103 0304 	add.w	r3, r3, #4
    c7a0:	880c      	ldrh	r4, [r1, #0]
    c7a2:	f04f 0500 	mov.w	r5, #0
    c7a6:	f2c0 8294 	blt.w	ccd2 <_svfprintf_r+0x11aa>
    c7aa:	ea54 0105 	orrs.w	r1, r4, r5
    c7ae:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    c7b2:	9309      	str	r3, [sp, #36]	; 0x24
    c7b4:	4617      	mov	r7, r2
    c7b6:	f47f ab5c 	bne.w	be72 <_svfprintf_r+0x34a>
    c7ba:	e750      	b.n	c65e <_svfprintf_r+0xb36>
    c7bc:	1e4c      	subs	r4, r1, #1
    c7be:	2c00      	cmp	r4, #0
    c7c0:	f77f af16 	ble.w	c5f0 <_svfprintf_r+0xac8>
    c7c4:	2c10      	cmp	r4, #16
    c7c6:	4f97      	ldr	r7, [pc, #604]	; (ca24 <_svfprintf_r+0xefc>)
    c7c8:	dd22      	ble.n	c810 <_svfprintf_r+0xce8>
    c7ca:	2510      	movs	r5, #16
    c7cc:	9e05      	ldr	r6, [sp, #20]
    c7ce:	f8dd 800c 	ldr.w	r8, [sp, #12]
    c7d2:	e004      	b.n	c7de <_svfprintf_r+0xcb6>
    c7d4:	3c10      	subs	r4, #16
    c7d6:	2c10      	cmp	r4, #16
    c7d8:	f109 0908 	add.w	r9, r9, #8
    c7dc:	dd18      	ble.n	c810 <_svfprintf_r+0xce8>
    c7de:	3201      	adds	r2, #1
    c7e0:	3310      	adds	r3, #16
    c7e2:	2a07      	cmp	r2, #7
    c7e4:	931d      	str	r3, [sp, #116]	; 0x74
    c7e6:	921c      	str	r2, [sp, #112]	; 0x70
    c7e8:	f8c9 7000 	str.w	r7, [r9]
    c7ec:	f8c9 5004 	str.w	r5, [r9, #4]
    c7f0:	ddf0      	ble.n	c7d4 <_svfprintf_r+0xcac>
    c7f2:	aa1b      	add	r2, sp, #108	; 0x6c
    c7f4:	4641      	mov	r1, r8
    c7f6:	4630      	mov	r0, r6
    c7f8:	f001 ffda 	bl	e7b0 <__ssprint_r>
    c7fc:	2800      	cmp	r0, #0
    c7fe:	f47f aa89 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c802:	3c10      	subs	r4, #16
    c804:	2c10      	cmp	r4, #16
    c806:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c808:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c80a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c80e:	dce6      	bgt.n	c7de <_svfprintf_r+0xcb6>
    c810:	3201      	adds	r2, #1
    c812:	4423      	add	r3, r4
    c814:	2a07      	cmp	r2, #7
    c816:	931d      	str	r3, [sp, #116]	; 0x74
    c818:	921c      	str	r2, [sp, #112]	; 0x70
    c81a:	f8c9 7000 	str.w	r7, [r9]
    c81e:	f8c9 4004 	str.w	r4, [r9, #4]
    c822:	f77f aee3 	ble.w	c5ec <_svfprintf_r+0xac4>
    c826:	aa1b      	add	r2, sp, #108	; 0x6c
    c828:	9903      	ldr	r1, [sp, #12]
    c82a:	9805      	ldr	r0, [sp, #20]
    c82c:	f001 ffc0 	bl	e7b0 <__ssprint_r>
    c830:	2800      	cmp	r0, #0
    c832:	f47f aa6f 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c836:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c838:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c83a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c83e:	e6d7      	b.n	c5f0 <_svfprintf_r+0xac8>
    c840:	f01b 0f10 	tst.w	fp, #16
    c844:	d133      	bne.n	c8ae <_svfprintf_r+0xd86>
    c846:	f01b 0f40 	tst.w	fp, #64	; 0x40
    c84a:	d030      	beq.n	c8ae <_svfprintf_r+0xd86>
    c84c:	9909      	ldr	r1, [sp, #36]	; 0x24
    c84e:	f9b1 4000 	ldrsh.w	r4, [r1]
    c852:	3104      	adds	r1, #4
    c854:	17e5      	asrs	r5, r4, #31
    c856:	4622      	mov	r2, r4
    c858:	462b      	mov	r3, r5
    c85a:	9109      	str	r1, [sp, #36]	; 0x24
    c85c:	f7ff baf8 	b.w	be50 <_svfprintf_r+0x328>
    c860:	3201      	adds	r2, #1
    c862:	4423      	add	r3, r4
    c864:	2a07      	cmp	r2, #7
    c866:	931d      	str	r3, [sp, #116]	; 0x74
    c868:	921c      	str	r2, [sp, #112]	; 0x70
    c86a:	f8c9 7000 	str.w	r7, [r9]
    c86e:	f8c9 4004 	str.w	r4, [r9, #4]
    c872:	f77f ac08 	ble.w	c086 <_svfprintf_r+0x55e>
    c876:	e6c8      	b.n	c60a <_svfprintf_r+0xae2>
    c878:	9909      	ldr	r1, [sp, #36]	; 0x24
    c87a:	f1b8 0f00 	cmp.w	r8, #0
    c87e:	680c      	ldr	r4, [r1, #0]
    c880:	f88d 304f 	strb.w	r3, [sp, #79]	; 0x4f
    c884:	f101 0704 	add.w	r7, r1, #4
    c888:	f04f 0500 	mov.w	r5, #0
    c88c:	f2c0 80c5 	blt.w	ca1a <_svfprintf_r+0xef2>
    c890:	ea54 0205 	orrs.w	r2, r4, r5
    c894:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    c898:	9709      	str	r7, [sp, #36]	; 0x24
    c89a:	f43f adb2 	beq.w	c402 <_svfprintf_r+0x8da>
    c89e:	461f      	mov	r7, r3
    c8a0:	f7ff ba64 	b.w	bd6c <_svfprintf_r+0x244>
    c8a4:	681c      	ldr	r4, [r3, #0]
    c8a6:	3304      	adds	r3, #4
    c8a8:	9309      	str	r3, [sp, #36]	; 0x24
    c8aa:	2500      	movs	r5, #0
    c8ac:	e4b6      	b.n	c21c <_svfprintf_r+0x6f4>
    c8ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
    c8b0:	6814      	ldr	r4, [r2, #0]
    c8b2:	4613      	mov	r3, r2
    c8b4:	3304      	adds	r3, #4
    c8b6:	17e5      	asrs	r5, r4, #31
    c8b8:	4622      	mov	r2, r4
    c8ba:	9309      	str	r3, [sp, #36]	; 0x24
    c8bc:	2a00      	cmp	r2, #0
    c8be:	462b      	mov	r3, r5
    c8c0:	f173 0300 	sbcs.w	r3, r3, #0
    c8c4:	f6bf aac9 	bge.w	be5a <_svfprintf_r+0x332>
    c8c8:	4264      	negs	r4, r4
    c8ca:	f04f 072d 	mov.w	r7, #45	; 0x2d
    c8ce:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
    c8d2:	f1b8 0f00 	cmp.w	r8, #0
    c8d6:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    c8da:	f6ff aaca 	blt.w	be72 <_svfprintf_r+0x34a>
    c8de:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    c8e2:	f7ff bac6 	b.w	be72 <_svfprintf_r+0x34a>
    c8e6:	aa1b      	add	r2, sp, #108	; 0x6c
    c8e8:	9903      	ldr	r1, [sp, #12]
    c8ea:	9805      	ldr	r0, [sp, #20]
    c8ec:	f001 ff60 	bl	e7b0 <__ssprint_r>
    c8f0:	2800      	cmp	r0, #0
    c8f2:	f47f aa0f 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c8f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c8f8:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c8fc:	990e      	ldr	r1, [sp, #56]	; 0x38
    c8fe:	9a15      	ldr	r2, [sp, #84]	; 0x54
    c900:	4431      	add	r1, r6
    c902:	460d      	mov	r5, r1
    c904:	990d      	ldr	r1, [sp, #52]	; 0x34
    c906:	428a      	cmp	r2, r1
    c908:	db47      	blt.n	c99a <_svfprintf_r+0xe72>
    c90a:	f01b 0f01 	tst.w	fp, #1
    c90e:	d144      	bne.n	c99a <_svfprintf_r+0xe72>
    c910:	980d      	ldr	r0, [sp, #52]	; 0x34
    c912:	4406      	add	r6, r0
    c914:	1b74      	subs	r4, r6, r5
    c916:	1a82      	subs	r2, r0, r2
    c918:	4294      	cmp	r4, r2
    c91a:	bfa8      	it	ge
    c91c:	4614      	movge	r4, r2
    c91e:	2c00      	cmp	r4, #0
    c920:	4626      	mov	r6, r4
    c922:	dd0d      	ble.n	c940 <_svfprintf_r+0xe18>
    c924:	991c      	ldr	r1, [sp, #112]	; 0x70
    c926:	f8c9 5000 	str.w	r5, [r9]
    c92a:	3101      	adds	r1, #1
    c92c:	4423      	add	r3, r4
    c92e:	2907      	cmp	r1, #7
    c930:	931d      	str	r3, [sp, #116]	; 0x74
    c932:	f8c9 4004 	str.w	r4, [r9, #4]
    c936:	911c      	str	r1, [sp, #112]	; 0x70
    c938:	f300 8280 	bgt.w	ce3c <_svfprintf_r+0x1314>
    c93c:	f109 0908 	add.w	r9, r9, #8
    c940:	2e00      	cmp	r6, #0
    c942:	bfac      	ite	ge
    c944:	1b94      	subge	r4, r2, r6
    c946:	4614      	movlt	r4, r2
    c948:	2c00      	cmp	r4, #0
    c94a:	f77f ab9e 	ble.w	c08a <_svfprintf_r+0x562>
    c94e:	2c10      	cmp	r4, #16
    c950:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c952:	4f34      	ldr	r7, [pc, #208]	; (ca24 <_svfprintf_r+0xefc>)
    c954:	dd84      	ble.n	c860 <_svfprintf_r+0xd38>
    c956:	2510      	movs	r5, #16
    c958:	9e05      	ldr	r6, [sp, #20]
    c95a:	f8dd 800c 	ldr.w	r8, [sp, #12]
    c95e:	e005      	b.n	c96c <_svfprintf_r+0xe44>
    c960:	f109 0908 	add.w	r9, r9, #8
    c964:	3c10      	subs	r4, #16
    c966:	2c10      	cmp	r4, #16
    c968:	f77f af7a 	ble.w	c860 <_svfprintf_r+0xd38>
    c96c:	3201      	adds	r2, #1
    c96e:	3310      	adds	r3, #16
    c970:	2a07      	cmp	r2, #7
    c972:	931d      	str	r3, [sp, #116]	; 0x74
    c974:	921c      	str	r2, [sp, #112]	; 0x70
    c976:	f8c9 7000 	str.w	r7, [r9]
    c97a:	f8c9 5004 	str.w	r5, [r9, #4]
    c97e:	ddef      	ble.n	c960 <_svfprintf_r+0xe38>
    c980:	aa1b      	add	r2, sp, #108	; 0x6c
    c982:	4641      	mov	r1, r8
    c984:	4630      	mov	r0, r6
    c986:	f001 ff13 	bl	e7b0 <__ssprint_r>
    c98a:	2800      	cmp	r0, #0
    c98c:	f47f a9c2 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c990:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c992:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c994:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c998:	e7e4      	b.n	c964 <_svfprintf_r+0xe3c>
    c99a:	991c      	ldr	r1, [sp, #112]	; 0x70
    c99c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
    c99e:	9810      	ldr	r0, [sp, #64]	; 0x40
    c9a0:	f8c9 0000 	str.w	r0, [r9]
    c9a4:	3101      	adds	r1, #1
    c9a6:	4423      	add	r3, r4
    c9a8:	2907      	cmp	r1, #7
    c9aa:	931d      	str	r3, [sp, #116]	; 0x74
    c9ac:	f8c9 4004 	str.w	r4, [r9, #4]
    c9b0:	911c      	str	r1, [sp, #112]	; 0x70
    c9b2:	f300 8226 	bgt.w	ce02 <_svfprintf_r+0x12da>
    c9b6:	f109 0908 	add.w	r9, r9, #8
    c9ba:	e7a9      	b.n	c910 <_svfprintf_r+0xde8>
    c9bc:	f01b 0f01 	tst.w	fp, #1
    c9c0:	f47f adec 	bne.w	c59c <_svfprintf_r+0xa74>
    c9c4:	2a07      	cmp	r2, #7
    c9c6:	f77f ae11 	ble.w	c5ec <_svfprintf_r+0xac4>
    c9ca:	e72c      	b.n	c826 <_svfprintf_r+0xcfe>
    c9cc:	aa1b      	add	r2, sp, #108	; 0x6c
    c9ce:	9903      	ldr	r1, [sp, #12]
    c9d0:	9805      	ldr	r0, [sp, #20]
    c9d2:	f001 feed 	bl	e7b0 <__ssprint_r>
    c9d6:	2800      	cmp	r0, #0
    c9d8:	f47f a99c 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c9dc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c9de:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c9e0:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c9e4:	e5df      	b.n	c5a6 <_svfprintf_r+0xa7e>
    c9e6:	aa1b      	add	r2, sp, #108	; 0x6c
    c9e8:	9903      	ldr	r1, [sp, #12]
    c9ea:	9805      	ldr	r0, [sp, #20]
    c9ec:	f001 fee0 	bl	e7b0 <__ssprint_r>
    c9f0:	2800      	cmp	r0, #0
    c9f2:	f47f a98f 	bne.w	bd14 <_svfprintf_r+0x1ec>
    c9f6:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    c9f8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    c9fa:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    c9fe:	e5e1      	b.n	c5c4 <_svfprintf_r+0xa9c>
    ca00:	aa1b      	add	r2, sp, #108	; 0x6c
    ca02:	9903      	ldr	r1, [sp, #12]
    ca04:	9805      	ldr	r0, [sp, #20]
    ca06:	f001 fed3 	bl	e7b0 <__ssprint_r>
    ca0a:	2800      	cmp	r0, #0
    ca0c:	f47f a982 	bne.w	bd14 <_svfprintf_r+0x1ec>
    ca10:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ca12:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ca16:	f7ff baeb 	b.w	bff0 <_svfprintf_r+0x4c8>
    ca1a:	9709      	str	r7, [sp, #36]	; 0x24
    ca1c:	2700      	movs	r7, #0
    ca1e:	f7ff b9a5 	b.w	bd6c <_svfprintf_r+0x244>
    ca22:	bf00      	nop
    ca24:	20000dd8 	.word	0x20000dd8
    ca28:	f01b 0f10 	tst.w	fp, #16
    ca2c:	d10b      	bne.n	ca46 <_svfprintf_r+0xf1e>
    ca2e:	f01b 0f40 	tst.w	fp, #64	; 0x40
    ca32:	d008      	beq.n	ca46 <_svfprintf_r+0xf1e>
    ca34:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca36:	6813      	ldr	r3, [r2, #0]
    ca38:	3204      	adds	r2, #4
    ca3a:	9209      	str	r2, [sp, #36]	; 0x24
    ca3c:	f8bd 2018 	ldrh.w	r2, [sp, #24]
    ca40:	801a      	strh	r2, [r3, #0]
    ca42:	f7ff b897 	b.w	bb74 <_svfprintf_r+0x4c>
    ca46:	9a09      	ldr	r2, [sp, #36]	; 0x24
    ca48:	6813      	ldr	r3, [r2, #0]
    ca4a:	3204      	adds	r2, #4
    ca4c:	9209      	str	r2, [sp, #36]	; 0x24
    ca4e:	9a06      	ldr	r2, [sp, #24]
    ca50:	601a      	str	r2, [r3, #0]
    ca52:	f7ff b88f 	b.w	bb74 <_svfprintf_r+0x4c>
    ca56:	eeb4 8b48 	vcmp.f64	d8, d8
    ca5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ca5e:	f180 829e 	bvs.w	cf9e <_svfprintf_r+0x1476>
    ca62:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca64:	f1b8 3fff 	cmp.w	r8, #4294967295
    ca68:	f023 0520 	bic.w	r5, r3, #32
    ca6c:	f000 8225 	beq.w	ceba <_svfprintf_r+0x1392>
    ca70:	2d47      	cmp	r5, #71	; 0x47
    ca72:	f000 8126 	beq.w	ccc2 <_svfprintf_r+0x119a>
    ca76:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
    ca7a:	930a      	str	r3, [sp, #40]	; 0x28
    ca7c:	ee18 3a90 	vmov	r3, s17
    ca80:	2b00      	cmp	r3, #0
    ca82:	f2c0 821d 	blt.w	cec0 <_svfprintf_r+0x1398>
    ca86:	eeb0 ab48 	vmov.f64	d10, d8
    ca8a:	2700      	movs	r7, #0
    ca8c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    ca8e:	2b66      	cmp	r3, #102	; 0x66
    ca90:	f000 8202 	beq.w	ce98 <_svfprintf_r+0x1370>
    ca94:	2b46      	cmp	r3, #70	; 0x46
    ca96:	f000 80ec 	beq.w	cc72 <_svfprintf_r+0x114a>
    ca9a:	eeb0 0b4a 	vmov.f64	d0, d10
    ca9e:	2d45      	cmp	r5, #69	; 0x45
    caa0:	bf0c      	ite	eq
    caa2:	f108 0401 	addeq.w	r4, r8, #1
    caa6:	4644      	movne	r4, r8
    caa8:	aa19      	add	r2, sp, #100	; 0x64
    caaa:	ab16      	add	r3, sp, #88	; 0x58
    caac:	9201      	str	r2, [sp, #4]
    caae:	9300      	str	r3, [sp, #0]
    cab0:	4622      	mov	r2, r4
    cab2:	ab15      	add	r3, sp, #84	; 0x54
    cab4:	2102      	movs	r1, #2
    cab6:	9805      	ldr	r0, [sp, #20]
    cab8:	f000 fbe2 	bl	d280 <_dtoa_r>
    cabc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cabe:	2b67      	cmp	r3, #103	; 0x67
    cac0:	4606      	mov	r6, r0
    cac2:	f040 820e 	bne.w	cee2 <_svfprintf_r+0x13ba>
    cac6:	f01b 0f01 	tst.w	fp, #1
    caca:	f000 8266 	beq.w	cf9a <_svfprintf_r+0x1472>
    cace:	1931      	adds	r1, r6, r4
    cad0:	eeb5 ab40 	vcmp.f64	d10, #0.0
    cad4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cad8:	f000 8185 	beq.w	cde6 <_svfprintf_r+0x12be>
    cadc:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cade:	4299      	cmp	r1, r3
    cae0:	d906      	bls.n	caf0 <_svfprintf_r+0xfc8>
    cae2:	2030      	movs	r0, #48	; 0x30
    cae4:	1c5a      	adds	r2, r3, #1
    cae6:	9219      	str	r2, [sp, #100]	; 0x64
    cae8:	7018      	strb	r0, [r3, #0]
    caea:	9b19      	ldr	r3, [sp, #100]	; 0x64
    caec:	4299      	cmp	r1, r3
    caee:	d8f9      	bhi.n	cae4 <_svfprintf_r+0xfbc>
    caf0:	1b9b      	subs	r3, r3, r6
    caf2:	2d47      	cmp	r5, #71	; 0x47
    caf4:	930d      	str	r3, [sp, #52]	; 0x34
    caf6:	f000 811f 	beq.w	cd38 <_svfprintf_r+0x1210>
    cafa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cafc:	2b65      	cmp	r3, #101	; 0x65
    cafe:	f340 81ff 	ble.w	cf00 <_svfprintf_r+0x13d8>
    cb02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cb04:	2b66      	cmp	r3, #102	; 0x66
    cb06:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cb08:	f000 81fc 	beq.w	cf04 <_svfprintf_r+0x13dc>
    cb0c:	930e      	str	r3, [sp, #56]	; 0x38
    cb0e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    cb10:	990d      	ldr	r1, [sp, #52]	; 0x34
    cb12:	428a      	cmp	r2, r1
    cb14:	f2c0 81d8 	blt.w	cec8 <_svfprintf_r+0x13a0>
    cb18:	f01b 0f01 	tst.w	fp, #1
    cb1c:	f040 8234 	bne.w	cf88 <_svfprintf_r+0x1460>
    cb20:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
    cb24:	9208      	str	r2, [sp, #32]
    cb26:	2267      	movs	r2, #103	; 0x67
    cb28:	920c      	str	r2, [sp, #48]	; 0x30
    cb2a:	2f00      	cmp	r7, #0
    cb2c:	f040 80f6 	bne.w	cd1c <_svfprintf_r+0x11f4>
    cb30:	46b8      	mov	r8, r7
    cb32:	9304      	str	r3, [sp, #16]
    cb34:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    cb38:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    cb3c:	f7ff b9e6 	b.w	bf0c <_svfprintf_r+0x3e4>
    cb40:	f027 0707 	bic.w	r7, r7, #7
    cb44:	f107 0308 	add.w	r3, r7, #8
    cb48:	ed97 8b00 	vldr	d8, [r7]
    cb4c:	9309      	str	r3, [sp, #36]	; 0x24
    cb4e:	f7ff b9be 	b.w	bece <_svfprintf_r+0x3a6>
    cb52:	464e      	mov	r6, r9
    cb54:	4689      	mov	r9, r1
    cb56:	3201      	adds	r2, #1
    cb58:	4423      	add	r3, r4
    cb5a:	2a07      	cmp	r2, #7
    cb5c:	931d      	str	r3, [sp, #116]	; 0x74
    cb5e:	921c      	str	r2, [sp, #112]	; 0x70
    cb60:	f8c9 7000 	str.w	r7, [r9]
    cb64:	f8c9 4004 	str.w	r4, [r9, #4]
    cb68:	f73f aebd 	bgt.w	c8e6 <_svfprintf_r+0xdbe>
    cb6c:	f109 0908 	add.w	r9, r9, #8
    cb70:	e6c4      	b.n	c8fc <_svfprintf_r+0xdd4>
    cb72:	2700      	movs	r7, #0
    cb74:	45b8      	cmp	r8, r7
    cb76:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    cb7a:	f6ff ac54 	blt.w	c426 <_svfprintf_r+0x8fe>
    cb7e:	f02b 0b80 	bic.w	fp, fp, #128	; 0x80
    cb82:	e41e      	b.n	c3c2 <_svfprintf_r+0x89a>
    cb84:	aa1b      	add	r2, sp, #108	; 0x6c
    cb86:	9903      	ldr	r1, [sp, #12]
    cb88:	9805      	ldr	r0, [sp, #20]
    cb8a:	f001 fe11 	bl	e7b0 <__ssprint_r>
    cb8e:	2800      	cmp	r0, #0
    cb90:	f47f a8c0 	bne.w	bd14 <_svfprintf_r+0x1ec>
    cb94:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    cb96:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    cb9a:	e463      	b.n	c464 <_svfprintf_r+0x93c>
    cb9c:	9f09      	ldr	r7, [sp, #36]	; 0x24
    cb9e:	e43b      	b.n	c418 <_svfprintf_r+0x8f0>
    cba0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cba2:	49b9      	ldr	r1, [pc, #740]	; (ce88 <_svfprintf_r+0x1360>)
    cba4:	f8c9 1000 	str.w	r1, [r9]
    cba8:	3201      	adds	r2, #1
    cbaa:	3301      	adds	r3, #1
    cbac:	2101      	movs	r1, #1
    cbae:	2a07      	cmp	r2, #7
    cbb0:	931d      	str	r3, [sp, #116]	; 0x74
    cbb2:	921c      	str	r2, [sp, #112]	; 0x70
    cbb4:	f8c9 1004 	str.w	r1, [r9, #4]
    cbb8:	dc76      	bgt.n	cca8 <_svfprintf_r+0x1180>
    cbba:	f109 0908 	add.w	r9, r9, #8
    cbbe:	b92c      	cbnz	r4, cbcc <_svfprintf_r+0x10a4>
    cbc0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cbc2:	b91a      	cbnz	r2, cbcc <_svfprintf_r+0x10a4>
    cbc4:	f01b 0f01 	tst.w	fp, #1
    cbc8:	f43f aa5f 	beq.w	c08a <_svfprintf_r+0x562>
    cbcc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cbce:	980f      	ldr	r0, [sp, #60]	; 0x3c
    cbd0:	9910      	ldr	r1, [sp, #64]	; 0x40
    cbd2:	f8c9 1000 	str.w	r1, [r9]
    cbd6:	3201      	adds	r2, #1
    cbd8:	4403      	add	r3, r0
    cbda:	2a07      	cmp	r2, #7
    cbdc:	931d      	str	r3, [sp, #116]	; 0x74
    cbde:	f8c9 0004 	str.w	r0, [r9, #4]
    cbe2:	921c      	str	r2, [sp, #112]	; 0x70
    cbe4:	f300 81b6 	bgt.w	cf54 <_svfprintf_r+0x142c>
    cbe8:	f109 0908 	add.w	r9, r9, #8
    cbec:	4264      	negs	r4, r4
    cbee:	2c00      	cmp	r4, #0
    cbf0:	f340 8087 	ble.w	cd02 <_svfprintf_r+0x11da>
    cbf4:	2c10      	cmp	r4, #16
    cbf6:	4fa5      	ldr	r7, [pc, #660]	; (ce8c <_svfprintf_r+0x1364>)
    cbf8:	f340 8112 	ble.w	ce20 <_svfprintf_r+0x12f8>
    cbfc:	4649      	mov	r1, r9
    cbfe:	2510      	movs	r5, #16
    cc00:	46b1      	mov	r9, r6
    cc02:	f8dd 8014 	ldr.w	r8, [sp, #20]
    cc06:	9e03      	ldr	r6, [sp, #12]
    cc08:	e004      	b.n	cc14 <_svfprintf_r+0x10ec>
    cc0a:	3108      	adds	r1, #8
    cc0c:	3c10      	subs	r4, #16
    cc0e:	2c10      	cmp	r4, #16
    cc10:	f340 8104 	ble.w	ce1c <_svfprintf_r+0x12f4>
    cc14:	3201      	adds	r2, #1
    cc16:	3310      	adds	r3, #16
    cc18:	2a07      	cmp	r2, #7
    cc1a:	931d      	str	r3, [sp, #116]	; 0x74
    cc1c:	921c      	str	r2, [sp, #112]	; 0x70
    cc1e:	600f      	str	r7, [r1, #0]
    cc20:	604d      	str	r5, [r1, #4]
    cc22:	ddf2      	ble.n	cc0a <_svfprintf_r+0x10e2>
    cc24:	aa1b      	add	r2, sp, #108	; 0x6c
    cc26:	4631      	mov	r1, r6
    cc28:	4640      	mov	r0, r8
    cc2a:	f001 fdc1 	bl	e7b0 <__ssprint_r>
    cc2e:	2800      	cmp	r0, #0
    cc30:	f47f a870 	bne.w	bd14 <_svfprintf_r+0x1ec>
    cc34:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    cc36:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cc38:	a928      	add	r1, sp, #160	; 0xa0
    cc3a:	e7e7      	b.n	cc0c <_svfprintf_r+0x10e4>
    cc3c:	aa1b      	add	r2, sp, #108	; 0x6c
    cc3e:	9903      	ldr	r1, [sp, #12]
    cc40:	9805      	ldr	r0, [sp, #20]
    cc42:	f001 fdb5 	bl	e7b0 <__ssprint_r>
    cc46:	2800      	cmp	r0, #0
    cc48:	f47f a864 	bne.w	bd14 <_svfprintf_r+0x1ec>
    cc4c:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    cc4e:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    cc52:	e41f      	b.n	c494 <_svfprintf_r+0x96c>
    cc54:	2140      	movs	r1, #64	; 0x40
    cc56:	9805      	ldr	r0, [sp, #20]
    cc58:	f7fe f830 	bl	acbc <_malloc_r>
    cc5c:	9a03      	ldr	r2, [sp, #12]
    cc5e:	6010      	str	r0, [r2, #0]
    cc60:	6110      	str	r0, [r2, #16]
    cc62:	2800      	cmp	r0, #0
    cc64:	f000 81ed 	beq.w	d042 <_svfprintf_r+0x151a>
    cc68:	9a03      	ldr	r2, [sp, #12]
    cc6a:	2340      	movs	r3, #64	; 0x40
    cc6c:	6153      	str	r3, [r2, #20]
    cc6e:	f7fe bf74 	b.w	bb5a <_svfprintf_r+0x32>
    cc72:	aa19      	add	r2, sp, #100	; 0x64
    cc74:	ab16      	add	r3, sp, #88	; 0x58
    cc76:	9201      	str	r2, [sp, #4]
    cc78:	9300      	str	r3, [sp, #0]
    cc7a:	4642      	mov	r2, r8
    cc7c:	ab15      	add	r3, sp, #84	; 0x54
    cc7e:	2103      	movs	r1, #3
    cc80:	eeb0 0b4a 	vmov.f64	d0, d10
    cc84:	9805      	ldr	r0, [sp, #20]
    cc86:	f000 fafb 	bl	d280 <_dtoa_r>
    cc8a:	4644      	mov	r4, r8
    cc8c:	4606      	mov	r6, r0
    cc8e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cc90:	2b46      	cmp	r3, #70	; 0x46
    cc92:	eb06 0104 	add.w	r1, r6, r4
    cc96:	f47f af1b 	bne.w	cad0 <_svfprintf_r+0xfa8>
    cc9a:	7833      	ldrb	r3, [r6, #0]
    cc9c:	2b30      	cmp	r3, #48	; 0x30
    cc9e:	f000 818d 	beq.w	cfbc <_svfprintf_r+0x1494>
    cca2:	9c15      	ldr	r4, [sp, #84]	; 0x54
    cca4:	4421      	add	r1, r4
    cca6:	e713      	b.n	cad0 <_svfprintf_r+0xfa8>
    cca8:	aa1b      	add	r2, sp, #108	; 0x6c
    ccaa:	9903      	ldr	r1, [sp, #12]
    ccac:	9805      	ldr	r0, [sp, #20]
    ccae:	f001 fd7f 	bl	e7b0 <__ssprint_r>
    ccb2:	2800      	cmp	r0, #0
    ccb4:	f47f a82e 	bne.w	bd14 <_svfprintf_r+0x1ec>
    ccb8:	9c15      	ldr	r4, [sp, #84]	; 0x54
    ccba:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ccbc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ccc0:	e77d      	b.n	cbbe <_svfprintf_r+0x1096>
    ccc2:	f1b8 0f00 	cmp.w	r8, #0
    ccc6:	bf08      	it	eq
    ccc8:	f04f 0801 	moveq.w	r8, #1
    cccc:	e6d3      	b.n	ca76 <_svfprintf_r+0xf4e>
    ccce:	9309      	str	r3, [sp, #36]	; 0x24
    ccd0:	e6a4      	b.n	ca1c <_svfprintf_r+0xef4>
    ccd2:	9309      	str	r3, [sp, #36]	; 0x24
    ccd4:	4617      	mov	r7, r2
    ccd6:	f7ff ba7b 	b.w	c1d0 <_svfprintf_r+0x6a8>
    ccda:	4630      	mov	r0, r6
    ccdc:	f7fe fe30 	bl	b940 <strlen>
    cce0:	46a0      	mov	r8, r4
    cce2:	4603      	mov	r3, r0
    cce4:	9008      	str	r0, [sp, #32]
    cce6:	f7ff bb61 	b.w	c3ac <_svfprintf_r+0x884>
    ccea:	aa1b      	add	r2, sp, #108	; 0x6c
    ccec:	9903      	ldr	r1, [sp, #12]
    ccee:	9805      	ldr	r0, [sp, #20]
    ccf0:	f001 fd5e 	bl	e7b0 <__ssprint_r>
    ccf4:	2800      	cmp	r0, #0
    ccf6:	f47f a80d 	bne.w	bd14 <_svfprintf_r+0x1ec>
    ccfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ccfc:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    ccfe:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    cd02:	980d      	ldr	r0, [sp, #52]	; 0x34
    cd04:	f8c9 6000 	str.w	r6, [r9]
    cd08:	3201      	adds	r2, #1
    cd0a:	4403      	add	r3, r0
    cd0c:	2a07      	cmp	r2, #7
    cd0e:	931d      	str	r3, [sp, #116]	; 0x74
    cd10:	921c      	str	r2, [sp, #112]	; 0x70
    cd12:	f8c9 0004 	str.w	r0, [r9, #4]
    cd16:	f77f a9b6 	ble.w	c086 <_svfprintf_r+0x55e>
    cd1a:	e476      	b.n	c60a <_svfprintf_r+0xae2>
    cd1c:	272d      	movs	r7, #45	; 0x2d
    cd1e:	9304      	str	r3, [sp, #16]
    cd20:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
    cd24:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    cd28:	f04f 0800 	mov.w	r8, #0
    cd2c:	f7ff b8ef 	b.w	bf0e <_svfprintf_r+0x3e6>
    cd30:	9709      	str	r7, [sp, #36]	; 0x24
    cd32:	461f      	mov	r7, r3
    cd34:	f7ff ba4c 	b.w	c1d0 <_svfprintf_r+0x6a8>
    cd38:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cd3a:	1cda      	adds	r2, r3, #3
    cd3c:	db02      	blt.n	cd44 <_svfprintf_r+0x121c>
    cd3e:	4598      	cmp	r8, r3
    cd40:	f6bf aee4 	bge.w	cb0c <_svfprintf_r+0xfe4>
    cd44:	9a0c      	ldr	r2, [sp, #48]	; 0x30
    cd46:	3a02      	subs	r2, #2
    cd48:	920c      	str	r2, [sp, #48]	; 0x30
    cd4a:	3b01      	subs	r3, #1
    cd4c:	2b00      	cmp	r3, #0
    cd4e:	f89d 2030 	ldrb.w	r2, [sp, #48]	; 0x30
    cd52:	9315      	str	r3, [sp, #84]	; 0x54
    cd54:	bfb8      	it	lt
    cd56:	425b      	neglt	r3, r3
    cd58:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
    cd5c:	bfb4      	ite	lt
    cd5e:	222d      	movlt	r2, #45	; 0x2d
    cd60:	222b      	movge	r2, #43	; 0x2b
    cd62:	2b09      	cmp	r3, #9
    cd64:	f88d 205d 	strb.w	r2, [sp, #93]	; 0x5d
    cd68:	f340 8106 	ble.w	cf78 <_svfprintf_r+0x1450>
    cd6c:	f10d 006b 	add.w	r0, sp, #107	; 0x6b
    cd70:	4604      	mov	r4, r0
    cd72:	4a47      	ldr	r2, [pc, #284]	; (ce90 <_svfprintf_r+0x1368>)
    cd74:	fb82 2103 	smull	r2, r1, r2, r3
    cd78:	17da      	asrs	r2, r3, #31
    cd7a:	ebc2 02a1 	rsb	r2, r2, r1, asr #2
    cd7e:	eb02 0182 	add.w	r1, r2, r2, lsl #2
    cd82:	eba3 0341 	sub.w	r3, r3, r1, lsl #1
    cd86:	f103 0130 	add.w	r1, r3, #48	; 0x30
    cd8a:	2a09      	cmp	r2, #9
    cd8c:	4613      	mov	r3, r2
    cd8e:	f804 1d01 	strb.w	r1, [r4, #-1]!
    cd92:	dcee      	bgt.n	cd72 <_svfprintf_r+0x124a>
    cd94:	4621      	mov	r1, r4
    cd96:	3330      	adds	r3, #48	; 0x30
    cd98:	b2da      	uxtb	r2, r3
    cd9a:	f801 2d01 	strb.w	r2, [r1, #-1]!
    cd9e:	4288      	cmp	r0, r1
    cda0:	f240 8162 	bls.w	d068 <_svfprintf_r+0x1540>
    cda4:	f10d 015e 	add.w	r1, sp, #94	; 0x5e
    cda8:	4623      	mov	r3, r4
    cdaa:	e001      	b.n	cdb0 <_svfprintf_r+0x1288>
    cdac:	f813 2b01 	ldrb.w	r2, [r3], #1
    cdb0:	f801 2b01 	strb.w	r2, [r1], #1
    cdb4:	4298      	cmp	r0, r3
    cdb6:	d1f9      	bne.n	cdac <_svfprintf_r+0x1284>
    cdb8:	1c43      	adds	r3, r0, #1
    cdba:	1b1b      	subs	r3, r3, r4
    cdbc:	f10d 025e 	add.w	r2, sp, #94	; 0x5e
    cdc0:	4413      	add	r3, r2
    cdc2:	aa17      	add	r2, sp, #92	; 0x5c
    cdc4:	1a9b      	subs	r3, r3, r2
    cdc6:	9a0d      	ldr	r2, [sp, #52]	; 0x34
    cdc8:	9311      	str	r3, [sp, #68]	; 0x44
    cdca:	2a01      	cmp	r2, #1
    cdcc:	4413      	add	r3, r2
    cdce:	9308      	str	r3, [sp, #32]
    cdd0:	f340 80ff 	ble.w	cfd2 <_svfprintf_r+0x14aa>
    cdd4:	9b08      	ldr	r3, [sp, #32]
    cdd6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cdd8:	4413      	add	r3, r2
    cdda:	2200      	movs	r2, #0
    cddc:	9308      	str	r3, [sp, #32]
    cdde:	920e      	str	r2, [sp, #56]	; 0x38
    cde0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cde4:	e6a1      	b.n	cb2a <_svfprintf_r+0x1002>
    cde6:	460b      	mov	r3, r1
    cde8:	e682      	b.n	caf0 <_svfprintf_r+0xfc8>
    cdea:	aa1b      	add	r2, sp, #108	; 0x6c
    cdec:	9903      	ldr	r1, [sp, #12]
    cdee:	9805      	ldr	r0, [sp, #20]
    cdf0:	f001 fcde 	bl	e7b0 <__ssprint_r>
    cdf4:	2800      	cmp	r0, #0
    cdf6:	f47e af8d 	bne.w	bd14 <_svfprintf_r+0x1ec>
    cdfa:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    cdfc:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ce00:	e483      	b.n	c70a <_svfprintf_r+0xbe2>
    ce02:	aa1b      	add	r2, sp, #108	; 0x6c
    ce04:	9903      	ldr	r1, [sp, #12]
    ce06:	9805      	ldr	r0, [sp, #20]
    ce08:	f001 fcd2 	bl	e7b0 <__ssprint_r>
    ce0c:	2800      	cmp	r0, #0
    ce0e:	f47e af81 	bne.w	bd14 <_svfprintf_r+0x1ec>
    ce12:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ce14:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ce16:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ce1a:	e579      	b.n	c910 <_svfprintf_r+0xde8>
    ce1c:	464e      	mov	r6, r9
    ce1e:	4689      	mov	r9, r1
    ce20:	3201      	adds	r2, #1
    ce22:	4423      	add	r3, r4
    ce24:	2a07      	cmp	r2, #7
    ce26:	931d      	str	r3, [sp, #116]	; 0x74
    ce28:	921c      	str	r2, [sp, #112]	; 0x70
    ce2a:	f8c9 7000 	str.w	r7, [r9]
    ce2e:	f8c9 4004 	str.w	r4, [r9, #4]
    ce32:	f73f af5a 	bgt.w	ccea <_svfprintf_r+0x11c2>
    ce36:	f109 0908 	add.w	r9, r9, #8
    ce3a:	e762      	b.n	cd02 <_svfprintf_r+0x11da>
    ce3c:	aa1b      	add	r2, sp, #108	; 0x6c
    ce3e:	9903      	ldr	r1, [sp, #12]
    ce40:	9805      	ldr	r0, [sp, #20]
    ce42:	f001 fcb5 	bl	e7b0 <__ssprint_r>
    ce46:	2800      	cmp	r0, #0
    ce48:	f47e af64 	bne.w	bd14 <_svfprintf_r+0x1ec>
    ce4c:	9a15      	ldr	r2, [sp, #84]	; 0x54
    ce4e:	990d      	ldr	r1, [sp, #52]	; 0x34
    ce50:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    ce52:	1a8a      	subs	r2, r1, r2
    ce54:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    ce58:	e572      	b.n	c940 <_svfprintf_r+0xe18>
    ce5a:	2d06      	cmp	r5, #6
    ce5c:	462b      	mov	r3, r5
    ce5e:	bf28      	it	cs
    ce60:	2306      	movcs	r3, #6
    ce62:	9308      	str	r3, [sp, #32]
    ce64:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    ce68:	46b0      	mov	r8, r6
    ce6a:	9709      	str	r7, [sp, #36]	; 0x24
    ce6c:	960e      	str	r6, [sp, #56]	; 0x38
    ce6e:	4637      	mov	r7, r6
    ce70:	9304      	str	r3, [sp, #16]
    ce72:	4e08      	ldr	r6, [pc, #32]	; (ce94 <_svfprintf_r+0x136c>)
    ce74:	f7ff b84a 	b.w	bf0c <_svfprintf_r+0x3e4>
    ce78:	469b      	mov	fp, r3
    ce7a:	f7ff b9ea 	b.w	c252 <_svfprintf_r+0x72a>
    ce7e:	272d      	movs	r7, #45	; 0x2d
    ce80:	f88d 704f 	strb.w	r7, [sp, #79]	; 0x4f
    ce84:	f7ff b833 	b.w	beee <_svfprintf_r+0x3c6>
    ce88:	20000e20 	.word	0x20000e20
    ce8c:	20000dd8 	.word	0x20000dd8
    ce90:	66666667 	.word	0x66666667
    ce94:	20000e18 	.word	0x20000e18
    ce98:	aa19      	add	r2, sp, #100	; 0x64
    ce9a:	ab16      	add	r3, sp, #88	; 0x58
    ce9c:	9201      	str	r2, [sp, #4]
    ce9e:	9300      	str	r3, [sp, #0]
    cea0:	2103      	movs	r1, #3
    cea2:	ab15      	add	r3, sp, #84	; 0x54
    cea4:	4642      	mov	r2, r8
    cea6:	eeb0 0b4a 	vmov.f64	d0, d10
    ceaa:	9805      	ldr	r0, [sp, #20]
    ceac:	f000 f9e8 	bl	d280 <_dtoa_r>
    ceb0:	4644      	mov	r4, r8
    ceb2:	4606      	mov	r6, r0
    ceb4:	eb00 0108 	add.w	r1, r0, r8
    ceb8:	e6ef      	b.n	cc9a <_svfprintf_r+0x1172>
    ceba:	f04f 0806 	mov.w	r8, #6
    cebe:	e5da      	b.n	ca76 <_svfprintf_r+0xf4e>
    cec0:	eeb1 ab48 	vneg.f64	d10, d8
    cec4:	272d      	movs	r7, #45	; 0x2d
    cec6:	e5e1      	b.n	ca8c <_svfprintf_r+0xf64>
    cec8:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    ceca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    cecc:	4413      	add	r3, r2
    cece:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    ced0:	9308      	str	r3, [sp, #32]
    ced2:	2a00      	cmp	r2, #0
    ced4:	f340 8086 	ble.w	cfe4 <_svfprintf_r+0x14bc>
    ced8:	2267      	movs	r2, #103	; 0x67
    ceda:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cede:	920c      	str	r2, [sp, #48]	; 0x30
    cee0:	e623      	b.n	cb2a <_svfprintf_r+0x1002>
    cee2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    cee4:	2b47      	cmp	r3, #71	; 0x47
    cee6:	f47f adf2 	bne.w	cace <_svfprintf_r+0xfa6>
    ceea:	f01b 0f01 	tst.w	fp, #1
    ceee:	f47f aece 	bne.w	cc8e <_svfprintf_r+0x1166>
    cef2:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cef4:	2d47      	cmp	r5, #71	; 0x47
    cef6:	eba3 0306 	sub.w	r3, r3, r6
    cefa:	930d      	str	r3, [sp, #52]	; 0x34
    cefc:	f43f af1c 	beq.w	cd38 <_svfprintf_r+0x1210>
    cf00:	9b15      	ldr	r3, [sp, #84]	; 0x54
    cf02:	e722      	b.n	cd4a <_svfprintf_r+0x1222>
    cf04:	2b00      	cmp	r3, #0
    cf06:	461a      	mov	r2, r3
    cf08:	930e      	str	r3, [sp, #56]	; 0x38
    cf0a:	dd73      	ble.n	cff4 <_svfprintf_r+0x14cc>
    cf0c:	f1b8 0f00 	cmp.w	r8, #0
    cf10:	d14b      	bne.n	cfaa <_svfprintf_r+0x1482>
    cf12:	f01b 0f01 	tst.w	fp, #1
    cf16:	d148      	bne.n	cfaa <_svfprintf_r+0x1482>
    cf18:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cf1c:	9208      	str	r2, [sp, #32]
    cf1e:	e604      	b.n	cb2a <_svfprintf_r+0x1002>
    cf20:	f01b 0f01 	tst.w	fp, #1
    cf24:	4647      	mov	r7, r8
    cf26:	d005      	beq.n	cf34 <_svfprintf_r+0x140c>
    cf28:	ae38      	add	r6, sp, #224	; 0xe0
    cf2a:	2330      	movs	r3, #48	; 0x30
    cf2c:	f806 3d41 	strb.w	r3, [r6, #-65]!
    cf30:	f7ff b956 	b.w	c1e0 <_svfprintf_r+0x6b8>
    cf34:	f8cd 8020 	str.w	r8, [sp, #32]
    cf38:	ae28      	add	r6, sp, #160	; 0xa0
    cf3a:	f7ff b954 	b.w	c1e6 <_svfprintf_r+0x6be>
    cf3e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
    cf42:	9709      	str	r7, [sp, #36]	; 0x24
    cf44:	9304      	str	r3, [sp, #16]
    cf46:	9508      	str	r5, [sp, #32]
    cf48:	4680      	mov	r8, r0
    cf4a:	900e      	str	r0, [sp, #56]	; 0x38
    cf4c:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    cf50:	f7fe bfdc 	b.w	bf0c <_svfprintf_r+0x3e4>
    cf54:	aa1b      	add	r2, sp, #108	; 0x6c
    cf56:	9903      	ldr	r1, [sp, #12]
    cf58:	9805      	ldr	r0, [sp, #20]
    cf5a:	f001 fc29 	bl	e7b0 <__ssprint_r>
    cf5e:	2800      	cmp	r0, #0
    cf60:	f47e aed8 	bne.w	bd14 <_svfprintf_r+0x1ec>
    cf64:	9c15      	ldr	r4, [sp, #84]	; 0x54
    cf66:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    cf68:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    cf6a:	f10d 09a0 	add.w	r9, sp, #160	; 0xa0
    cf6e:	e63d      	b.n	cbec <_svfprintf_r+0x10c4>
    cf70:	46a2      	mov	sl, r4
    cf72:	2500      	movs	r5, #0
    cf74:	f7fe be33 	b.w	bbde <_svfprintf_r+0xb6>
    cf78:	3330      	adds	r3, #48	; 0x30
    cf7a:	2230      	movs	r2, #48	; 0x30
    cf7c:	f88d 305f 	strb.w	r3, [sp, #95]	; 0x5f
    cf80:	f88d 205e 	strb.w	r2, [sp, #94]	; 0x5e
    cf84:	ab18      	add	r3, sp, #96	; 0x60
    cf86:	e71c      	b.n	cdc2 <_svfprintf_r+0x129a>
    cf88:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cf8a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cf8c:	4413      	add	r3, r2
    cf8e:	2267      	movs	r2, #103	; 0x67
    cf90:	9308      	str	r3, [sp, #32]
    cf92:	920c      	str	r2, [sp, #48]	; 0x30
    cf94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cf98:	e5c7      	b.n	cb2a <_svfprintf_r+0x1002>
    cf9a:	9b19      	ldr	r3, [sp, #100]	; 0x64
    cf9c:	e5a8      	b.n	caf0 <_svfprintf_r+0xfc8>
    cf9e:	4e3c      	ldr	r6, [pc, #240]	; (d090 <_svfprintf_r+0x1568>)
    cfa0:	4b3c      	ldr	r3, [pc, #240]	; (d094 <_svfprintf_r+0x156c>)
    cfa2:	f89d 704f 	ldrb.w	r7, [sp, #79]	; 0x4f
    cfa6:	f7fe bfa4 	b.w	bef2 <_svfprintf_r+0x3ca>
    cfaa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cfac:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
    cfae:	189d      	adds	r5, r3, r2
    cfb0:	eb05 0308 	add.w	r3, r5, r8
    cfb4:	9308      	str	r3, [sp, #32]
    cfb6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cfba:	e5b6      	b.n	cb2a <_svfprintf_r+0x1002>
    cfbc:	eeb5 ab40 	vcmp.f64	d10, #0.0
    cfc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    cfc4:	f43f ae6d 	beq.w	cca2 <_svfprintf_r+0x117a>
    cfc8:	f1c4 0401 	rsb	r4, r4, #1
    cfcc:	9415      	str	r4, [sp, #84]	; 0x54
    cfce:	4421      	add	r1, r4
    cfd0:	e57e      	b.n	cad0 <_svfprintf_r+0xfa8>
    cfd2:	f01b 0301 	ands.w	r3, fp, #1
    cfd6:	f47f aefd 	bne.w	cdd4 <_svfprintf_r+0x12ac>
    cfda:	930e      	str	r3, [sp, #56]	; 0x38
    cfdc:	9b08      	ldr	r3, [sp, #32]
    cfde:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    cfe2:	e5a2      	b.n	cb2a <_svfprintf_r+0x1002>
    cfe4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    cfe6:	9a08      	ldr	r2, [sp, #32]
    cfe8:	f1c3 0301 	rsb	r3, r3, #1
    cfec:	441a      	add	r2, r3
    cfee:	4613      	mov	r3, r2
    cff0:	9208      	str	r2, [sp, #32]
    cff2:	e771      	b.n	ced8 <_svfprintf_r+0x13b0>
    cff4:	f1b8 0f00 	cmp.w	r8, #0
    cff8:	d102      	bne.n	d000 <_svfprintf_r+0x14d8>
    cffa:	f01b 0f01 	tst.w	fp, #1
    cffe:	d007      	beq.n	d010 <_svfprintf_r+0x14e8>
    d000:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
    d002:	1c5d      	adds	r5, r3, #1
    d004:	eb05 0308 	add.w	r3, r5, r8
    d008:	9308      	str	r3, [sp, #32]
    d00a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    d00e:	e58c      	b.n	cb2a <_svfprintf_r+0x1002>
    d010:	2301      	movs	r3, #1
    d012:	9308      	str	r3, [sp, #32]
    d014:	e589      	b.n	cb2a <_svfprintf_r+0x1002>
    d016:	9809      	ldr	r0, [sp, #36]	; 0x24
    d018:	f89a 3001 	ldrb.w	r3, [sl, #1]
    d01c:	6805      	ldr	r5, [r0, #0]
    d01e:	3004      	adds	r0, #4
    d020:	2d00      	cmp	r5, #0
    d022:	9009      	str	r0, [sp, #36]	; 0x24
    d024:	46a2      	mov	sl, r4
    d026:	f6be add8 	bge.w	bbda <_svfprintf_r+0xb2>
    d02a:	f04f 35ff 	mov.w	r5, #4294967295
    d02e:	f7fe bdd4 	b.w	bbda <_svfprintf_r+0xb2>
    d032:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d036:	f7ff b98d 	b.w	c354 <_svfprintf_r+0x82c>
    d03a:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d03e:	f7ff b9cf 	b.w	c3e0 <_svfprintf_r+0x8b8>
    d042:	9a05      	ldr	r2, [sp, #20]
    d044:	230c      	movs	r3, #12
    d046:	6013      	str	r3, [r2, #0]
    d048:	f04f 30ff 	mov.w	r0, #4294967295
    d04c:	f7fe be6b 	b.w	bd26 <_svfprintf_r+0x1fe>
    d050:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d054:	f7ff b8d4 	b.w	c200 <_svfprintf_r+0x6d8>
    d058:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d05c:	f7ff b8a3 	b.w	c1a6 <_svfprintf_r+0x67e>
    d060:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d064:	f7ff b952 	b.w	c30c <_svfprintf_r+0x7e4>
    d068:	f10d 035e 	add.w	r3, sp, #94	; 0x5e
    d06c:	e6a9      	b.n	cdc2 <_svfprintf_r+0x129a>
    d06e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d072:	f7fe be62 	b.w	bd3a <_svfprintf_r+0x212>
    d076:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d07a:	f7ff b862 	b.w	c142 <_svfprintf_r+0x61a>
    d07e:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d082:	f7fe bf16 	b.w	beb2 <_svfprintf_r+0x38a>
    d086:	f88d 104f 	strb.w	r1, [sp, #79]	; 0x4f
    d08a:	f7fe bed0 	b.w	be2e <_svfprintf_r+0x306>
    d08e:	bf00      	nop
    d090:	20000d90 	.word	0x20000d90
    d094:	20000dec 	.word	0x20000dec

0000d098 <__ascii_wctomb>:
    d098:	b121      	cbz	r1, d0a4 <__ascii_wctomb+0xc>
    d09a:	2aff      	cmp	r2, #255	; 0xff
    d09c:	d804      	bhi.n	d0a8 <__ascii_wctomb+0x10>
    d09e:	700a      	strb	r2, [r1, #0]
    d0a0:	2001      	movs	r0, #1
    d0a2:	4770      	bx	lr
    d0a4:	4608      	mov	r0, r1
    d0a6:	4770      	bx	lr
    d0a8:	238a      	movs	r3, #138	; 0x8a
    d0aa:	6003      	str	r3, [r0, #0]
    d0ac:	f04f 30ff 	mov.w	r0, #4294967295
    d0b0:	4770      	bx	lr
    d0b2:	bf00      	nop

0000d0b4 <__register_exitproc>:
    d0b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    d0b8:	4c25      	ldr	r4, [pc, #148]	; (d150 <__register_exitproc+0x9c>)
    d0ba:	6825      	ldr	r5, [r4, #0]
    d0bc:	f8d5 4148 	ldr.w	r4, [r5, #328]	; 0x148
    d0c0:	4606      	mov	r6, r0
    d0c2:	4688      	mov	r8, r1
    d0c4:	4692      	mov	sl, r2
    d0c6:	4699      	mov	r9, r3
    d0c8:	b3c4      	cbz	r4, d13c <__register_exitproc+0x88>
    d0ca:	6860      	ldr	r0, [r4, #4]
    d0cc:	281f      	cmp	r0, #31
    d0ce:	dc17      	bgt.n	d100 <__register_exitproc+0x4c>
    d0d0:	1c43      	adds	r3, r0, #1
    d0d2:	b176      	cbz	r6, d0f2 <__register_exitproc+0x3e>
    d0d4:	eb04 0580 	add.w	r5, r4, r0, lsl #2
    d0d8:	2201      	movs	r2, #1
    d0da:	f8c5 a088 	str.w	sl, [r5, #136]	; 0x88
    d0de:	f8d4 1188 	ldr.w	r1, [r4, #392]	; 0x188
    d0e2:	4082      	lsls	r2, r0
    d0e4:	4311      	orrs	r1, r2
    d0e6:	2e02      	cmp	r6, #2
    d0e8:	f8c4 1188 	str.w	r1, [r4, #392]	; 0x188
    d0ec:	f8c5 9108 	str.w	r9, [r5, #264]	; 0x108
    d0f0:	d01e      	beq.n	d130 <__register_exitproc+0x7c>
    d0f2:	3002      	adds	r0, #2
    d0f4:	6063      	str	r3, [r4, #4]
    d0f6:	f844 8020 	str.w	r8, [r4, r0, lsl #2]
    d0fa:	2000      	movs	r0, #0
    d0fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d100:	4b14      	ldr	r3, [pc, #80]	; (d154 <__register_exitproc+0xa0>)
    d102:	b303      	cbz	r3, d146 <__register_exitproc+0x92>
    d104:	f44f 70c8 	mov.w	r0, #400	; 0x190
    d108:	f7fd fdc8 	bl	ac9c <malloc>
    d10c:	4604      	mov	r4, r0
    d10e:	b1d0      	cbz	r0, d146 <__register_exitproc+0x92>
    d110:	f8d5 3148 	ldr.w	r3, [r5, #328]	; 0x148
    d114:	2700      	movs	r7, #0
    d116:	e880 0088 	stmia.w	r0, {r3, r7}
    d11a:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    d11e:	4638      	mov	r0, r7
    d120:	2301      	movs	r3, #1
    d122:	f8c4 7188 	str.w	r7, [r4, #392]	; 0x188
    d126:	f8c4 718c 	str.w	r7, [r4, #396]	; 0x18c
    d12a:	2e00      	cmp	r6, #0
    d12c:	d0e1      	beq.n	d0f2 <__register_exitproc+0x3e>
    d12e:	e7d1      	b.n	d0d4 <__register_exitproc+0x20>
    d130:	f8d4 118c 	ldr.w	r1, [r4, #396]	; 0x18c
    d134:	430a      	orrs	r2, r1
    d136:	f8c4 218c 	str.w	r2, [r4, #396]	; 0x18c
    d13a:	e7da      	b.n	d0f2 <__register_exitproc+0x3e>
    d13c:	f505 74a6 	add.w	r4, r5, #332	; 0x14c
    d140:	f8c5 4148 	str.w	r4, [r5, #328]	; 0x148
    d144:	e7c1      	b.n	d0ca <__register_exitproc+0x16>
    d146:	f04f 30ff 	mov.w	r0, #4294967295
    d14a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    d14e:	bf00      	nop
    d150:	20000dc4 	.word	0x20000dc4
    d154:	0000ac9d 	.word	0x0000ac9d

0000d158 <quorem>:
    d158:	6902      	ldr	r2, [r0, #16]
    d15a:	690b      	ldr	r3, [r1, #16]
    d15c:	4293      	cmp	r3, r2
    d15e:	f300 808d 	bgt.w	d27c <quorem+0x124>
    d162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d166:	f103 38ff 	add.w	r8, r3, #4294967295
    d16a:	f101 0714 	add.w	r7, r1, #20
    d16e:	f100 0b14 	add.w	fp, r0, #20
    d172:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
    d176:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
    d17a:	ea4f 0488 	mov.w	r4, r8, lsl #2
    d17e:	b083      	sub	sp, #12
    d180:	3201      	adds	r2, #1
    d182:	fbb3 f9f2 	udiv	r9, r3, r2
    d186:	eb0b 0304 	add.w	r3, fp, r4
    d18a:	9400      	str	r4, [sp, #0]
    d18c:	eb07 0a04 	add.w	sl, r7, r4
    d190:	9301      	str	r3, [sp, #4]
    d192:	f1b9 0f00 	cmp.w	r9, #0
    d196:	d039      	beq.n	d20c <quorem+0xb4>
    d198:	2500      	movs	r5, #0
    d19a:	46bc      	mov	ip, r7
    d19c:	46de      	mov	lr, fp
    d19e:	462b      	mov	r3, r5
    d1a0:	f85c 6b04 	ldr.w	r6, [ip], #4
    d1a4:	f8de 2000 	ldr.w	r2, [lr]
    d1a8:	b2b4      	uxth	r4, r6
    d1aa:	fb09 5504 	mla	r5, r9, r4, r5
    d1ae:	0c36      	lsrs	r6, r6, #16
    d1b0:	0c2c      	lsrs	r4, r5, #16
    d1b2:	fb09 4406 	mla	r4, r9, r6, r4
    d1b6:	b2ad      	uxth	r5, r5
    d1b8:	1b5b      	subs	r3, r3, r5
    d1ba:	b2a6      	uxth	r6, r4
    d1bc:	fa13 f382 	uxtah	r3, r3, r2
    d1c0:	ebc6 4612 	rsb	r6, r6, r2, lsr #16
    d1c4:	eb06 4623 	add.w	r6, r6, r3, asr #16
    d1c8:	b29b      	uxth	r3, r3
    d1ca:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
    d1ce:	45e2      	cmp	sl, ip
    d1d0:	f84e 3b04 	str.w	r3, [lr], #4
    d1d4:	ea4f 4514 	mov.w	r5, r4, lsr #16
    d1d8:	ea4f 4326 	mov.w	r3, r6, asr #16
    d1dc:	d2e0      	bcs.n	d1a0 <quorem+0x48>
    d1de:	9b00      	ldr	r3, [sp, #0]
    d1e0:	f85b 3003 	ldr.w	r3, [fp, r3]
    d1e4:	b993      	cbnz	r3, d20c <quorem+0xb4>
    d1e6:	9c01      	ldr	r4, [sp, #4]
    d1e8:	1f23      	subs	r3, r4, #4
    d1ea:	459b      	cmp	fp, r3
    d1ec:	d20c      	bcs.n	d208 <quorem+0xb0>
    d1ee:	f854 3c04 	ldr.w	r3, [r4, #-4]
    d1f2:	b94b      	cbnz	r3, d208 <quorem+0xb0>
    d1f4:	f1a4 0308 	sub.w	r3, r4, #8
    d1f8:	e002      	b.n	d200 <quorem+0xa8>
    d1fa:	681a      	ldr	r2, [r3, #0]
    d1fc:	3b04      	subs	r3, #4
    d1fe:	b91a      	cbnz	r2, d208 <quorem+0xb0>
    d200:	459b      	cmp	fp, r3
    d202:	f108 38ff 	add.w	r8, r8, #4294967295
    d206:	d3f8      	bcc.n	d1fa <quorem+0xa2>
    d208:	f8c0 8010 	str.w	r8, [r0, #16]
    d20c:	4604      	mov	r4, r0
    d20e:	f001 f9c5 	bl	e59c <__mcmp>
    d212:	2800      	cmp	r0, #0
    d214:	db2e      	blt.n	d274 <quorem+0x11c>
    d216:	f109 0901 	add.w	r9, r9, #1
    d21a:	465d      	mov	r5, fp
    d21c:	2300      	movs	r3, #0
    d21e:	f857 1b04 	ldr.w	r1, [r7], #4
    d222:	6828      	ldr	r0, [r5, #0]
    d224:	b28a      	uxth	r2, r1
    d226:	1a9a      	subs	r2, r3, r2
    d228:	0c09      	lsrs	r1, r1, #16
    d22a:	fa12 f280 	uxtah	r2, r2, r0
    d22e:	ebc1 4310 	rsb	r3, r1, r0, lsr #16
    d232:	eb03 4322 	add.w	r3, r3, r2, asr #16
    d236:	b291      	uxth	r1, r2
    d238:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
    d23c:	45ba      	cmp	sl, r7
    d23e:	f845 1b04 	str.w	r1, [r5], #4
    d242:	ea4f 4323 	mov.w	r3, r3, asr #16
    d246:	d2ea      	bcs.n	d21e <quorem+0xc6>
    d248:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
    d24c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
    d250:	b982      	cbnz	r2, d274 <quorem+0x11c>
    d252:	1f1a      	subs	r2, r3, #4
    d254:	4593      	cmp	fp, r2
    d256:	d20b      	bcs.n	d270 <quorem+0x118>
    d258:	f853 2c04 	ldr.w	r2, [r3, #-4]
    d25c:	b942      	cbnz	r2, d270 <quorem+0x118>
    d25e:	3b08      	subs	r3, #8
    d260:	e002      	b.n	d268 <quorem+0x110>
    d262:	681a      	ldr	r2, [r3, #0]
    d264:	3b04      	subs	r3, #4
    d266:	b91a      	cbnz	r2, d270 <quorem+0x118>
    d268:	459b      	cmp	fp, r3
    d26a:	f108 38ff 	add.w	r8, r8, #4294967295
    d26e:	d3f8      	bcc.n	d262 <quorem+0x10a>
    d270:	f8c4 8010 	str.w	r8, [r4, #16]
    d274:	4648      	mov	r0, r9
    d276:	b003      	add	sp, #12
    d278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d27c:	2000      	movs	r0, #0
    d27e:	4770      	bx	lr

0000d280 <_dtoa_r>:
    d280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    d284:	ec57 6b10 	vmov	r6, r7, d0
    d288:	b093      	sub	sp, #76	; 0x4c
    d28a:	6c05      	ldr	r5, [r0, #64]	; 0x40
    d28c:	9101      	str	r1, [sp, #4]
    d28e:	4604      	mov	r4, r0
    d290:	4690      	mov	r8, r2
    d292:	9304      	str	r3, [sp, #16]
    d294:	ee10 aa10 	vmov	sl, s0
    d298:	46bb      	mov	fp, r7
    d29a:	b14d      	cbz	r5, d2b0 <_dtoa_r+0x30>
    d29c:	6c42      	ldr	r2, [r0, #68]	; 0x44
    d29e:	606a      	str	r2, [r5, #4]
    d2a0:	2301      	movs	r3, #1
    d2a2:	4093      	lsls	r3, r2
    d2a4:	60ab      	str	r3, [r5, #8]
    d2a6:	4629      	mov	r1, r5
    d2a8:	f000 ff96 	bl	e1d8 <_Bfree>
    d2ac:	2300      	movs	r3, #0
    d2ae:	6423      	str	r3, [r4, #64]	; 0x40
    d2b0:	f1bb 0f00 	cmp.w	fp, #0
    d2b4:	465e      	mov	r6, fp
    d2b6:	db34      	blt.n	d322 <_dtoa_r+0xa2>
    d2b8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d2ba:	2300      	movs	r3, #0
    d2bc:	6013      	str	r3, [r2, #0]
    d2be:	4bc4      	ldr	r3, [pc, #784]	; (d5d0 <_dtoa_r+0x350>)
    d2c0:	461a      	mov	r2, r3
    d2c2:	4033      	ands	r3, r6
    d2c4:	4293      	cmp	r3, r2
    d2c6:	d015      	beq.n	d2f4 <_dtoa_r+0x74>
    d2c8:	ec4b ab17 	vmov	d7, sl, fp
    d2cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    d2d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d2d4:	e9cd ab02 	strd	sl, fp, [sp, #8]
    d2d8:	d12a      	bne.n	d330 <_dtoa_r+0xb0>
    d2da:	9a04      	ldr	r2, [sp, #16]
    d2dc:	2301      	movs	r3, #1
    d2de:	6013      	str	r3, [r2, #0]
    d2e0:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d2e2:	2b00      	cmp	r3, #0
    d2e4:	f000 80b7 	beq.w	d456 <_dtoa_r+0x1d6>
    d2e8:	48ba      	ldr	r0, [pc, #744]	; (d5d4 <_dtoa_r+0x354>)
    d2ea:	6018      	str	r0, [r3, #0]
    d2ec:	3801      	subs	r0, #1
    d2ee:	b013      	add	sp, #76	; 0x4c
    d2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d2f4:	9a04      	ldr	r2, [sp, #16]
    d2f6:	f242 730f 	movw	r3, #9999	; 0x270f
    d2fa:	6013      	str	r3, [r2, #0]
    d2fc:	f1ba 0f00 	cmp.w	sl, #0
    d300:	f000 8092 	beq.w	d428 <_dtoa_r+0x1a8>
    d304:	48b4      	ldr	r0, [pc, #720]	; (d5d8 <_dtoa_r+0x358>)
    d306:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d308:	2b00      	cmp	r3, #0
    d30a:	d0f0      	beq.n	d2ee <_dtoa_r+0x6e>
    d30c:	78c3      	ldrb	r3, [r0, #3]
    d30e:	2b00      	cmp	r3, #0
    d310:	f000 80a3 	beq.w	d45a <_dtoa_r+0x1da>
    d314:	f100 0308 	add.w	r3, r0, #8
    d318:	9a1d      	ldr	r2, [sp, #116]	; 0x74
    d31a:	6013      	str	r3, [r2, #0]
    d31c:	b013      	add	sp, #76	; 0x4c
    d31e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d322:	9a1c      	ldr	r2, [sp, #112]	; 0x70
    d324:	2301      	movs	r3, #1
    d326:	f02b 4600 	bic.w	r6, fp, #2147483648	; 0x80000000
    d32a:	6013      	str	r3, [r2, #0]
    d32c:	46b3      	mov	fp, r6
    d32e:	e7c6      	b.n	d2be <_dtoa_r+0x3e>
    d330:	a911      	add	r1, sp, #68	; 0x44
    d332:	aa10      	add	r2, sp, #64	; 0x40
    d334:	ed9d 0b02 	vldr	d0, [sp, #8]
    d338:	4620      	mov	r0, r4
    d33a:	f001 f9db 	bl	e6f4 <__d2b>
    d33e:	0d31      	lsrs	r1, r6, #20
    d340:	9007      	str	r0, [sp, #28]
    d342:	d17a      	bne.n	d43a <_dtoa_r+0x1ba>
    d344:	9810      	ldr	r0, [sp, #64]	; 0x40
    d346:	9911      	ldr	r1, [sp, #68]	; 0x44
    d348:	4401      	add	r1, r0
    d34a:	f201 4332 	addw	r3, r1, #1074	; 0x432
    d34e:	2b20      	cmp	r3, #32
    d350:	f340 8241 	ble.w	d7d6 <_dtoa_r+0x556>
    d354:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
    d358:	f201 4212 	addw	r2, r1, #1042	; 0x412
    d35c:	409e      	lsls	r6, r3
    d35e:	fa2a f302 	lsr.w	r3, sl, r2
    d362:	4333      	orrs	r3, r6
    d364:	ee07 3a90 	vmov	s15, r3
    d368:	eeb8 7b67 	vcvt.f64.u32	d7, s15
    d36c:	2501      	movs	r5, #1
    d36e:	ec53 2b17 	vmov	r2, r3, d7
    d372:	3901      	subs	r1, #1
    d374:	f1a3 73f8 	sub.w	r3, r3, #32505856	; 0x1f00000
    d378:	950a      	str	r5, [sp, #40]	; 0x28
    d37a:	ec43 2b17 	vmov	d7, r2, r3
    d37e:	eeb7 6b08 	vmov.f64	d6, #120	; 0x3fc00000  1.5
    d382:	ed9f 4b8d 	vldr	d4, [pc, #564]	; d5b8 <_dtoa_r+0x338>
    d386:	ee37 6b46 	vsub.f64	d6, d7, d6
    d38a:	ed9f 7b8d 	vldr	d7, [pc, #564]	; d5c0 <_dtoa_r+0x340>
    d38e:	ed9f 5b8e 	vldr	d5, [pc, #568]	; d5c8 <_dtoa_r+0x348>
    d392:	eea6 7b04 	vfma.f64	d7, d6, d4
    d396:	ee06 1a90 	vmov	s13, r1
    d39a:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    d39e:	eea6 7b05 	vfma.f64	d7, d6, d5
    d3a2:	eefd 6bc7 	vcvt.s32.f64	s13, d7
    d3a6:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
    d3aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d3ae:	edcd 6a02 	vstr	s13, [sp, #8]
    d3b2:	f100 811c 	bmi.w	d5ee <_dtoa_r+0x36e>
    d3b6:	9d02      	ldr	r5, [sp, #8]
    d3b8:	2d16      	cmp	r5, #22
    d3ba:	f200 8115 	bhi.w	d5e8 <_dtoa_r+0x368>
    d3be:	4b87      	ldr	r3, [pc, #540]	; (d5dc <_dtoa_r+0x35c>)
    d3c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
    d3c4:	ed93 7b00 	vldr	d7, [r3]
    d3c8:	ec4b ab16 	vmov	d6, sl, fp
    d3cc:	eeb4 7bc6 	vcmpe.f64	d7, d6
    d3d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d3d4:	f340 8206 	ble.w	d7e4 <_dtoa_r+0x564>
    d3d8:	1e6b      	subs	r3, r5, #1
    d3da:	9302      	str	r3, [sp, #8]
    d3dc:	2300      	movs	r3, #0
    d3de:	930c      	str	r3, [sp, #48]	; 0x30
    d3e0:	1a41      	subs	r1, r0, r1
    d3e2:	f1b1 0901 	subs.w	r9, r1, #1
    d3e6:	f100 8117 	bmi.w	d618 <_dtoa_r+0x398>
    d3ea:	2300      	movs	r3, #0
    d3ec:	9306      	str	r3, [sp, #24]
    d3ee:	9b02      	ldr	r3, [sp, #8]
    d3f0:	2b00      	cmp	r3, #0
    d3f2:	f2c0 8108 	blt.w	d606 <_dtoa_r+0x386>
    d3f6:	4499      	add	r9, r3
    d3f8:	930b      	str	r3, [sp, #44]	; 0x2c
    d3fa:	2300      	movs	r3, #0
    d3fc:	9305      	str	r3, [sp, #20]
    d3fe:	9b01      	ldr	r3, [sp, #4]
    d400:	2b09      	cmp	r3, #9
    d402:	d82c      	bhi.n	d45e <_dtoa_r+0x1de>
    d404:	2b05      	cmp	r3, #5
    d406:	f340 855f 	ble.w	dec8 <_dtoa_r+0xc48>
    d40a:	3b04      	subs	r3, #4
    d40c:	9301      	str	r3, [sp, #4]
    d40e:	2300      	movs	r3, #0
    d410:	930e      	str	r3, [sp, #56]	; 0x38
    d412:	9b01      	ldr	r3, [sp, #4]
    d414:	3b02      	subs	r3, #2
    d416:	2b03      	cmp	r3, #3
    d418:	f200 855f 	bhi.w	deda <_dtoa_r+0xc5a>
    d41c:	e8df f013 	tbh	[pc, r3, lsl #1]
    d420:	01e502a9 	.word	0x01e502a9
    d424:	03c802b5 	.word	0x03c802b5
    d428:	4b6b      	ldr	r3, [pc, #428]	; (d5d8 <_dtoa_r+0x358>)
    d42a:	4a6d      	ldr	r2, [pc, #436]	; (d5e0 <_dtoa_r+0x360>)
    d42c:	f3c6 0013 	ubfx	r0, r6, #0, #20
    d430:	2800      	cmp	r0, #0
    d432:	bf14      	ite	ne
    d434:	4618      	movne	r0, r3
    d436:	4610      	moveq	r0, r2
    d438:	e765      	b.n	d306 <_dtoa_r+0x86>
    d43a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    d43e:	f3c3 0013 	ubfx	r0, r3, #0, #20
    d442:	f040 537f 	orr.w	r3, r0, #1069547520	; 0x3fc00000
    d446:	2500      	movs	r5, #0
    d448:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
    d44c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
    d450:	9810      	ldr	r0, [sp, #64]	; 0x40
    d452:	950a      	str	r5, [sp, #40]	; 0x28
    d454:	e791      	b.n	d37a <_dtoa_r+0xfa>
    d456:	4863      	ldr	r0, [pc, #396]	; (d5e4 <_dtoa_r+0x364>)
    d458:	e749      	b.n	d2ee <_dtoa_r+0x6e>
    d45a:	1cc3      	adds	r3, r0, #3
    d45c:	e75c      	b.n	d318 <_dtoa_r+0x98>
    d45e:	2100      	movs	r1, #0
    d460:	6461      	str	r1, [r4, #68]	; 0x44
    d462:	4620      	mov	r0, r4
    d464:	4688      	mov	r8, r1
    d466:	9101      	str	r1, [sp, #4]
    d468:	f000 fe90 	bl	e18c <_Balloc>
    d46c:	f04f 37ff 	mov.w	r7, #4294967295
    d470:	2301      	movs	r3, #1
    d472:	9008      	str	r0, [sp, #32]
    d474:	6420      	str	r0, [r4, #64]	; 0x40
    d476:	970d      	str	r7, [sp, #52]	; 0x34
    d478:	9309      	str	r3, [sp, #36]	; 0x24
    d47a:	9b11      	ldr	r3, [sp, #68]	; 0x44
    d47c:	2b00      	cmp	r3, #0
    d47e:	db7a      	blt.n	d576 <_dtoa_r+0x2f6>
    d480:	9a02      	ldr	r2, [sp, #8]
    d482:	2a0e      	cmp	r2, #14
    d484:	dc77      	bgt.n	d576 <_dtoa_r+0x2f6>
    d486:	4b55      	ldr	r3, [pc, #340]	; (d5dc <_dtoa_r+0x35c>)
    d488:	f1b8 0f00 	cmp.w	r8, #0
    d48c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    d490:	ed93 4b00 	vldr	d4, [r3]
    d494:	f2c0 8284 	blt.w	d9a0 <_dtoa_r+0x720>
    d498:	eeb1 2b44 	vneg.f64	d2, d4
    d49c:	ec4b ab17 	vmov	d7, sl, fp
    d4a0:	ee87 6b04 	vdiv.f64	d6, d7, d4
    d4a4:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    d4a8:	9a08      	ldr	r2, [sp, #32]
    d4aa:	ee16 3a10 	vmov	r3, s12
    d4ae:	2f01      	cmp	r7, #1
    d4b0:	f103 0330 	add.w	r3, r3, #48	; 0x30
    d4b4:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    d4b8:	f102 0b01 	add.w	fp, r2, #1
    d4bc:	7013      	strb	r3, [r2, #0]
    d4be:	eea2 7b05 	vfma.f64	d7, d2, d5
    d4c2:	d022      	beq.n	d50a <_dtoa_r+0x28a>
    d4c4:	eeb2 3b04 	vmov.f64	d3, #36	; 0x41200000  10.0
    d4c8:	ee27 7b03 	vmul.f64	d7, d7, d3
    d4cc:	eeb5 7b40 	vcmp.f64	d7, #0.0
    d4d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4d4:	d03a      	beq.n	d54c <_dtoa_r+0x2cc>
    d4d6:	9a08      	ldr	r2, [sp, #32]
    d4d8:	e006      	b.n	d4e8 <_dtoa_r+0x268>
    d4da:	ee27 7b03 	vmul.f64	d7, d7, d3
    d4de:	eeb5 7b40 	vcmp.f64	d7, #0.0
    d4e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d4e6:	d031      	beq.n	d54c <_dtoa_r+0x2cc>
    d4e8:	ee87 6b04 	vdiv.f64	d6, d7, d4
    d4ec:	eebd 6bc6 	vcvt.s32.f64	s12, d6
    d4f0:	ee16 3a10 	vmov	r3, s12
    d4f4:	3330      	adds	r3, #48	; 0x30
    d4f6:	f80b 3b01 	strb.w	r3, [fp], #1
    d4fa:	ebc2 030b 	rsb	r3, r2, fp
    d4fe:	42bb      	cmp	r3, r7
    d500:	eeb8 5bc6 	vcvt.f64.s32	d5, s12
    d504:	eea2 7b05 	vfma.f64	d7, d2, d5
    d508:	d1e7      	bne.n	d4da <_dtoa_r+0x25a>
    d50a:	ee37 7b07 	vadd.f64	d7, d7, d7
    d50e:	eeb4 4bc7 	vcmpe.f64	d4, d7
    d512:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d516:	d408      	bmi.n	d52a <_dtoa_r+0x2aa>
    d518:	eeb4 4b47 	vcmp.f64	d4, d7
    d51c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d520:	d114      	bne.n	d54c <_dtoa_r+0x2cc>
    d522:	ee16 3a10 	vmov	r3, s12
    d526:	07db      	lsls	r3, r3, #31
    d528:	d510      	bpl.n	d54c <_dtoa_r+0x2cc>
    d52a:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    d52e:	9a08      	ldr	r2, [sp, #32]
    d530:	f10b 33ff 	add.w	r3, fp, #4294967295
    d534:	e004      	b.n	d540 <_dtoa_r+0x2c0>
    d536:	429a      	cmp	r2, r3
    d538:	f000 83e5 	beq.w	dd06 <_dtoa_r+0xa86>
    d53c:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
    d540:	2839      	cmp	r0, #57	; 0x39
    d542:	f103 0b01 	add.w	fp, r3, #1
    d546:	d0f6      	beq.n	d536 <_dtoa_r+0x2b6>
    d548:	3001      	adds	r0, #1
    d54a:	7018      	strb	r0, [r3, #0]
    d54c:	9907      	ldr	r1, [sp, #28]
    d54e:	4620      	mov	r0, r4
    d550:	f000 fe42 	bl	e1d8 <_Bfree>
    d554:	2200      	movs	r2, #0
    d556:	9b02      	ldr	r3, [sp, #8]
    d558:	f88b 2000 	strb.w	r2, [fp]
    d55c:	9a04      	ldr	r2, [sp, #16]
    d55e:	3301      	adds	r3, #1
    d560:	6013      	str	r3, [r2, #0]
    d562:	9b1d      	ldr	r3, [sp, #116]	; 0x74
    d564:	2b00      	cmp	r3, #0
    d566:	f000 8366 	beq.w	dc36 <_dtoa_r+0x9b6>
    d56a:	9808      	ldr	r0, [sp, #32]
    d56c:	f8c3 b000 	str.w	fp, [r3]
    d570:	b013      	add	sp, #76	; 0x4c
    d572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    d576:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d578:	2a00      	cmp	r2, #0
    d57a:	d053      	beq.n	d624 <_dtoa_r+0x3a4>
    d57c:	9a01      	ldr	r2, [sp, #4]
    d57e:	2a01      	cmp	r2, #1
    d580:	f340 822e 	ble.w	d9e0 <_dtoa_r+0x760>
    d584:	9905      	ldr	r1, [sp, #20]
    d586:	1e7a      	subs	r2, r7, #1
    d588:	4291      	cmp	r1, r2
    d58a:	f2c0 8357 	blt.w	dc3c <_dtoa_r+0x9bc>
    d58e:	1a8b      	subs	r3, r1, r2
    d590:	930e      	str	r3, [sp, #56]	; 0x38
    d592:	2f00      	cmp	r7, #0
    d594:	9b06      	ldr	r3, [sp, #24]
    d596:	f2c0 8424 	blt.w	dde2 <_dtoa_r+0xb62>
    d59a:	930a      	str	r3, [sp, #40]	; 0x28
    d59c:	463b      	mov	r3, r7
    d59e:	9a06      	ldr	r2, [sp, #24]
    d5a0:	2101      	movs	r1, #1
    d5a2:	441a      	add	r2, r3
    d5a4:	4620      	mov	r0, r4
    d5a6:	9206      	str	r2, [sp, #24]
    d5a8:	4499      	add	r9, r3
    d5aa:	f000 fead 	bl	e308 <__i2b>
    d5ae:	4606      	mov	r6, r0
    d5b0:	e03d      	b.n	d62e <_dtoa_r+0x3ae>
    d5b2:	bf00      	nop
    d5b4:	f3af 8000 	nop.w
    d5b8:	636f4361 	.word	0x636f4361
    d5bc:	3fd287a7 	.word	0x3fd287a7
    d5c0:	8b60c8b3 	.word	0x8b60c8b3
    d5c4:	3fc68a28 	.word	0x3fc68a28
    d5c8:	509f79fb 	.word	0x509f79fb
    d5cc:	3fd34413 	.word	0x3fd34413
    d5d0:	7ff00000 	.word	0x7ff00000
    d5d4:	20000e21 	.word	0x20000e21
    d5d8:	20000f44 	.word	0x20000f44
    d5dc:	20000f48 	.word	0x20000f48
    d5e0:	20000f38 	.word	0x20000f38
    d5e4:	20000e20 	.word	0x20000e20
    d5e8:	2301      	movs	r3, #1
    d5ea:	930c      	str	r3, [sp, #48]	; 0x30
    d5ec:	e6f8      	b.n	d3e0 <_dtoa_r+0x160>
    d5ee:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    d5f2:	eeb4 7b46 	vcmp.f64	d7, d6
    d5f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d5fa:	f43f aedc 	beq.w	d3b6 <_dtoa_r+0x136>
    d5fe:	9b02      	ldr	r3, [sp, #8]
    d600:	3b01      	subs	r3, #1
    d602:	9302      	str	r3, [sp, #8]
    d604:	e6d7      	b.n	d3b6 <_dtoa_r+0x136>
    d606:	9a06      	ldr	r2, [sp, #24]
    d608:	9b02      	ldr	r3, [sp, #8]
    d60a:	1ad2      	subs	r2, r2, r3
    d60c:	425b      	negs	r3, r3
    d60e:	9305      	str	r3, [sp, #20]
    d610:	2300      	movs	r3, #0
    d612:	9206      	str	r2, [sp, #24]
    d614:	930b      	str	r3, [sp, #44]	; 0x2c
    d616:	e6f2      	b.n	d3fe <_dtoa_r+0x17e>
    d618:	f1c9 0300 	rsb	r3, r9, #0
    d61c:	9306      	str	r3, [sp, #24]
    d61e:	f04f 0900 	mov.w	r9, #0
    d622:	e6e4      	b.n	d3ee <_dtoa_r+0x16e>
    d624:	9b05      	ldr	r3, [sp, #20]
    d626:	930e      	str	r3, [sp, #56]	; 0x38
    d628:	9e09      	ldr	r6, [sp, #36]	; 0x24
    d62a:	9b06      	ldr	r3, [sp, #24]
    d62c:	930a      	str	r3, [sp, #40]	; 0x28
    d62e:	990a      	ldr	r1, [sp, #40]	; 0x28
    d630:	460b      	mov	r3, r1
    d632:	b161      	cbz	r1, d64e <_dtoa_r+0x3ce>
    d634:	f1b9 0f00 	cmp.w	r9, #0
    d638:	dd09      	ble.n	d64e <_dtoa_r+0x3ce>
    d63a:	4549      	cmp	r1, r9
    d63c:	9a06      	ldr	r2, [sp, #24]
    d63e:	bfa8      	it	ge
    d640:	464b      	movge	r3, r9
    d642:	1ad2      	subs	r2, r2, r3
    d644:	9206      	str	r2, [sp, #24]
    d646:	1aca      	subs	r2, r1, r3
    d648:	920a      	str	r2, [sp, #40]	; 0x28
    d64a:	ebc3 0909 	rsb	r9, r3, r9
    d64e:	9b05      	ldr	r3, [sp, #20]
    d650:	2b00      	cmp	r3, #0
    d652:	f340 8280 	ble.w	db56 <_dtoa_r+0x8d6>
    d656:	9a09      	ldr	r2, [sp, #36]	; 0x24
    d658:	2a00      	cmp	r2, #0
    d65a:	f000 819a 	beq.w	d992 <_dtoa_r+0x712>
    d65e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d660:	2a00      	cmp	r2, #0
    d662:	f000 8196 	beq.w	d992 <_dtoa_r+0x712>
    d666:	4631      	mov	r1, r6
    d668:	4620      	mov	r0, r4
    d66a:	f000 feef 	bl	e44c <__pow5mult>
    d66e:	9a07      	ldr	r2, [sp, #28]
    d670:	4601      	mov	r1, r0
    d672:	4606      	mov	r6, r0
    d674:	4620      	mov	r0, r4
    d676:	f000 fe51 	bl	e31c <__multiply>
    d67a:	9907      	ldr	r1, [sp, #28]
    d67c:	4605      	mov	r5, r0
    d67e:	4620      	mov	r0, r4
    d680:	f000 fdaa 	bl	e1d8 <_Bfree>
    d684:	9b05      	ldr	r3, [sp, #20]
    d686:	9a0e      	ldr	r2, [sp, #56]	; 0x38
    d688:	1a9b      	subs	r3, r3, r2
    d68a:	9305      	str	r3, [sp, #20]
    d68c:	f040 8180 	bne.w	d990 <_dtoa_r+0x710>
    d690:	2101      	movs	r1, #1
    d692:	4620      	mov	r0, r4
    d694:	f000 fe38 	bl	e308 <__i2b>
    d698:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    d69a:	9005      	str	r0, [sp, #20]
    d69c:	2b00      	cmp	r3, #0
    d69e:	f000 81ac 	beq.w	d9fa <_dtoa_r+0x77a>
    d6a2:	4601      	mov	r1, r0
    d6a4:	461a      	mov	r2, r3
    d6a6:	4620      	mov	r0, r4
    d6a8:	f000 fed0 	bl	e44c <__pow5mult>
    d6ac:	9b01      	ldr	r3, [sp, #4]
    d6ae:	9005      	str	r0, [sp, #20]
    d6b0:	2b01      	cmp	r3, #1
    d6b2:	f340 8280 	ble.w	dbb6 <_dtoa_r+0x936>
    d6b6:	2300      	movs	r3, #0
    d6b8:	9307      	str	r3, [sp, #28]
    d6ba:	9a05      	ldr	r2, [sp, #20]
    d6bc:	6913      	ldr	r3, [r2, #16]
    d6be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    d6c2:	6918      	ldr	r0, [r3, #16]
    d6c4:	f000 fdd2 	bl	e26c <__hi0bits>
    d6c8:	f1c0 0020 	rsb	r0, r0, #32
    d6cc:	4448      	add	r0, r9
    d6ce:	f010 001f 	ands.w	r0, r0, #31
    d6d2:	f000 8190 	beq.w	d9f6 <_dtoa_r+0x776>
    d6d6:	f1c0 0320 	rsb	r3, r0, #32
    d6da:	2b04      	cmp	r3, #4
    d6dc:	f340 83f8 	ble.w	ded0 <_dtoa_r+0xc50>
    d6e0:	f1c0 001c 	rsb	r0, r0, #28
    d6e4:	9b06      	ldr	r3, [sp, #24]
    d6e6:	4403      	add	r3, r0
    d6e8:	9306      	str	r3, [sp, #24]
    d6ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    d6ec:	4403      	add	r3, r0
    d6ee:	930a      	str	r3, [sp, #40]	; 0x28
    d6f0:	4481      	add	r9, r0
    d6f2:	9b06      	ldr	r3, [sp, #24]
    d6f4:	2b00      	cmp	r3, #0
    d6f6:	dd05      	ble.n	d704 <_dtoa_r+0x484>
    d6f8:	4629      	mov	r1, r5
    d6fa:	461a      	mov	r2, r3
    d6fc:	4620      	mov	r0, r4
    d6fe:	f000 fef5 	bl	e4ec <__lshift>
    d702:	4605      	mov	r5, r0
    d704:	f1b9 0f00 	cmp.w	r9, #0
    d708:	dd05      	ble.n	d716 <_dtoa_r+0x496>
    d70a:	464a      	mov	r2, r9
    d70c:	9905      	ldr	r1, [sp, #20]
    d70e:	4620      	mov	r0, r4
    d710:	f000 feec 	bl	e4ec <__lshift>
    d714:	9005      	str	r0, [sp, #20]
    d716:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d718:	2b00      	cmp	r3, #0
    d71a:	f040 8201 	bne.w	db20 <_dtoa_r+0x8a0>
    d71e:	2f00      	cmp	r7, #0
    d720:	f340 8220 	ble.w	db64 <_dtoa_r+0x8e4>
    d724:	9b09      	ldr	r3, [sp, #36]	; 0x24
    d726:	2b00      	cmp	r3, #0
    d728:	f040 817b 	bne.w	da22 <_dtoa_r+0x7a2>
    d72c:	f8dd b020 	ldr.w	fp, [sp, #32]
    d730:	f8dd a014 	ldr.w	sl, [sp, #20]
    d734:	46d8      	mov	r8, fp
    d736:	e002      	b.n	d73e <_dtoa_r+0x4be>
    d738:	f000 fd58 	bl	e1ec <__multadd>
    d73c:	4605      	mov	r5, r0
    d73e:	4651      	mov	r1, sl
    d740:	4628      	mov	r0, r5
    d742:	f7ff fd09 	bl	d158 <quorem>
    d746:	f100 0930 	add.w	r9, r0, #48	; 0x30
    d74a:	f808 9b01 	strb.w	r9, [r8], #1
    d74e:	ebcb 0308 	rsb	r3, fp, r8
    d752:	42bb      	cmp	r3, r7
    d754:	f04f 020a 	mov.w	r2, #10
    d758:	f04f 0300 	mov.w	r3, #0
    d75c:	4629      	mov	r1, r5
    d75e:	4620      	mov	r0, r4
    d760:	dbea      	blt.n	d738 <_dtoa_r+0x4b8>
    d762:	9b08      	ldr	r3, [sp, #32]
    d764:	2f01      	cmp	r7, #1
    d766:	bfac      	ite	ge
    d768:	19db      	addge	r3, r3, r7
    d76a:	3301      	addlt	r3, #1
    d76c:	469b      	mov	fp, r3
    d76e:	f04f 0a00 	mov.w	sl, #0
    d772:	4629      	mov	r1, r5
    d774:	2201      	movs	r2, #1
    d776:	4620      	mov	r0, r4
    d778:	f000 feb8 	bl	e4ec <__lshift>
    d77c:	9905      	ldr	r1, [sp, #20]
    d77e:	9007      	str	r0, [sp, #28]
    d780:	f000 ff0c 	bl	e59c <__mcmp>
    d784:	2800      	cmp	r0, #0
    d786:	f340 828c 	ble.w	dca2 <_dtoa_r+0xa22>
    d78a:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
    d78e:	9908      	ldr	r1, [sp, #32]
    d790:	f10b 33ff 	add.w	r3, fp, #4294967295
    d794:	e004      	b.n	d7a0 <_dtoa_r+0x520>
    d796:	428b      	cmp	r3, r1
    d798:	f000 8203 	beq.w	dba2 <_dtoa_r+0x922>
    d79c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
    d7a0:	2a39      	cmp	r2, #57	; 0x39
    d7a2:	f103 0b01 	add.w	fp, r3, #1
    d7a6:	d0f6      	beq.n	d796 <_dtoa_r+0x516>
    d7a8:	3201      	adds	r2, #1
    d7aa:	701a      	strb	r2, [r3, #0]
    d7ac:	9905      	ldr	r1, [sp, #20]
    d7ae:	4620      	mov	r0, r4
    d7b0:	f000 fd12 	bl	e1d8 <_Bfree>
    d7b4:	2e00      	cmp	r6, #0
    d7b6:	f43f aec9 	beq.w	d54c <_dtoa_r+0x2cc>
    d7ba:	f1ba 0f00 	cmp.w	sl, #0
    d7be:	d005      	beq.n	d7cc <_dtoa_r+0x54c>
    d7c0:	45b2      	cmp	sl, r6
    d7c2:	d003      	beq.n	d7cc <_dtoa_r+0x54c>
    d7c4:	4651      	mov	r1, sl
    d7c6:	4620      	mov	r0, r4
    d7c8:	f000 fd06 	bl	e1d8 <_Bfree>
    d7cc:	4631      	mov	r1, r6
    d7ce:	4620      	mov	r0, r4
    d7d0:	f000 fd02 	bl	e1d8 <_Bfree>
    d7d4:	e6ba      	b.n	d54c <_dtoa_r+0x2cc>
    d7d6:	f1c3 0320 	rsb	r3, r3, #32
    d7da:	fa0a f303 	lsl.w	r3, sl, r3
    d7de:	ee07 3a90 	vmov	s15, r3
    d7e2:	e5c1      	b.n	d368 <_dtoa_r+0xe8>
    d7e4:	2300      	movs	r3, #0
    d7e6:	930c      	str	r3, [sp, #48]	; 0x30
    d7e8:	e5fa      	b.n	d3e0 <_dtoa_r+0x160>
    d7ea:	2300      	movs	r3, #0
    d7ec:	9309      	str	r3, [sp, #36]	; 0x24
    d7ee:	9b02      	ldr	r3, [sp, #8]
    d7f0:	4443      	add	r3, r8
    d7f2:	1c5f      	adds	r7, r3, #1
    d7f4:	2f00      	cmp	r7, #0
    d7f6:	930d      	str	r3, [sp, #52]	; 0x34
    d7f8:	f340 822d 	ble.w	dc56 <_dtoa_r+0x9d6>
    d7fc:	463e      	mov	r6, r7
    d7fe:	463d      	mov	r5, r7
    d800:	2100      	movs	r1, #0
    d802:	2e17      	cmp	r6, #23
    d804:	6461      	str	r1, [r4, #68]	; 0x44
    d806:	d90a      	bls.n	d81e <_dtoa_r+0x59e>
    d808:	2201      	movs	r2, #1
    d80a:	2304      	movs	r3, #4
    d80c:	005b      	lsls	r3, r3, #1
    d80e:	f103 0014 	add.w	r0, r3, #20
    d812:	42b0      	cmp	r0, r6
    d814:	4611      	mov	r1, r2
    d816:	f102 0201 	add.w	r2, r2, #1
    d81a:	d9f7      	bls.n	d80c <_dtoa_r+0x58c>
    d81c:	6461      	str	r1, [r4, #68]	; 0x44
    d81e:	4620      	mov	r0, r4
    d820:	f000 fcb4 	bl	e18c <_Balloc>
    d824:	2d0e      	cmp	r5, #14
    d826:	9008      	str	r0, [sp, #32]
    d828:	6420      	str	r0, [r4, #64]	; 0x40
    d82a:	f63f ae26 	bhi.w	d47a <_dtoa_r+0x1fa>
    d82e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
    d830:	2b00      	cmp	r3, #0
    d832:	f43f ae22 	beq.w	d47a <_dtoa_r+0x1fa>
    d836:	9902      	ldr	r1, [sp, #8]
    d838:	2900      	cmp	r1, #0
    d83a:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
    d83e:	f340 8241 	ble.w	dcc4 <_dtoa_r+0xa44>
    d842:	4bc6      	ldr	r3, [pc, #792]	; (db5c <_dtoa_r+0x8dc>)
    d844:	f001 020f 	and.w	r2, r1, #15
    d848:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
    d84c:	110b      	asrs	r3, r1, #4
    d84e:	06de      	lsls	r6, r3, #27
    d850:	ed92 6b00 	vldr	d6, [r2]
    d854:	f140 81fb 	bpl.w	dc4e <_dtoa_r+0x9ce>
    d858:	4ac1      	ldr	r2, [pc, #772]	; (db60 <_dtoa_r+0x8e0>)
    d85a:	ed92 7b08 	vldr	d7, [r2, #32]
    d85e:	ec4b ab14 	vmov	d4, sl, fp
    d862:	f003 030f 	and.w	r3, r3, #15
    d866:	2103      	movs	r1, #3
    d868:	ee84 5b07 	vdiv.f64	d5, d4, d7
    d86c:	b15b      	cbz	r3, d886 <_dtoa_r+0x606>
    d86e:	4abc      	ldr	r2, [pc, #752]	; (db60 <_dtoa_r+0x8e0>)
    d870:	07dd      	lsls	r5, r3, #31
    d872:	d504      	bpl.n	d87e <_dtoa_r+0x5fe>
    d874:	ed92 7b00 	vldr	d7, [r2]
    d878:	3101      	adds	r1, #1
    d87a:	ee26 6b07 	vmul.f64	d6, d6, d7
    d87e:	105b      	asrs	r3, r3, #1
    d880:	f102 0208 	add.w	r2, r2, #8
    d884:	d1f4      	bne.n	d870 <_dtoa_r+0x5f0>
    d886:	ee85 4b06 	vdiv.f64	d4, d5, d6
    d88a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    d88c:	b13b      	cbz	r3, d89e <_dtoa_r+0x61e>
    d88e:	eeb7 7b00 	vmov.f64	d7, #112	; 0x3f800000  1.0
    d892:	eeb4 4bc7 	vcmpe.f64	d4, d7
    d896:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d89a:	f100 82b7 	bmi.w	de0c <_dtoa_r+0xb8c>
    d89e:	ee07 1a90 	vmov	s15, r1
    d8a2:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    d8a6:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    d8aa:	eea6 7b04 	vfma.f64	d7, d6, d4
    d8ae:	ec53 2b17 	vmov	r2, r3, d7
    d8b2:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    d8b6:	2f00      	cmp	r7, #0
    d8b8:	f000 81a6 	beq.w	dc08 <_dtoa_r+0x988>
    d8bc:	9e02      	ldr	r6, [sp, #8]
    d8be:	4639      	mov	r1, r7
    d8c0:	9809      	ldr	r0, [sp, #36]	; 0x24
    d8c2:	2800      	cmp	r0, #0
    d8c4:	f000 824d 	beq.w	dd62 <_dtoa_r+0xae2>
    d8c8:	eeb6 3b00 	vmov.f64	d3, #96	; 0x3f000000  0.5
    d8cc:	48a3      	ldr	r0, [pc, #652]	; (db5c <_dtoa_r+0x8dc>)
    d8ce:	9d08      	ldr	r5, [sp, #32]
    d8d0:	eb00 00c1 	add.w	r0, r0, r1, lsl #3
    d8d4:	ed10 6b02 	vldr	d6, [r0, #-8]
    d8d8:	eebd 7bc4 	vcvt.s32.f64	s14, d4
    d8dc:	ee83 5b06 	vdiv.f64	d5, d3, d6
    d8e0:	ee17 0a10 	vmov	r0, s14
    d8e4:	ec43 2b16 	vmov	d6, r2, r3
    d8e8:	3030      	adds	r0, #48	; 0x30
    d8ea:	b2c0      	uxtb	r0, r0
    d8ec:	ee35 5b46 	vsub.f64	d5, d5, d6
    d8f0:	eeb8 7bc7 	vcvt.f64.s32	d7, s14
    d8f4:	ee34 7b47 	vsub.f64	d7, d4, d7
    d8f8:	eeb4 5bc7 	vcmpe.f64	d5, d7
    d8fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d900:	7028      	strb	r0, [r5, #0]
    d902:	f105 0b01 	add.w	fp, r5, #1
    d906:	dc32      	bgt.n	d96e <_dtoa_r+0x6ee>
    d908:	eeb7 3b00 	vmov.f64	d3, #112	; 0x3f800000  1.0
    d90c:	ee33 6b47 	vsub.f64	d6, d3, d7
    d910:	eeb4 5bc6 	vcmpe.f64	d5, d6
    d914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d918:	f300 82ae 	bgt.w	de78 <_dtoa_r+0xbf8>
    d91c:	2901      	cmp	r1, #1
    d91e:	f340 81cd 	ble.w	dcbc <_dtoa_r+0xa3c>
    d922:	eeb2 4b04 	vmov.f64	d4, #36	; 0x41200000  10.0
    d926:	9b08      	ldr	r3, [sp, #32]
    d928:	4419      	add	r1, r3
    d92a:	e00a      	b.n	d942 <_dtoa_r+0x6c2>
    d92c:	ee33 6b47 	vsub.f64	d6, d3, d7
    d930:	eeb4 6bc5 	vcmpe.f64	d6, d5
    d934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d938:	f100 829e 	bmi.w	de78 <_dtoa_r+0xbf8>
    d93c:	458b      	cmp	fp, r1
    d93e:	f000 81bd 	beq.w	dcbc <_dtoa_r+0xa3c>
    d942:	ee27 7b04 	vmul.f64	d7, d7, d4
    d946:	ee25 5b04 	vmul.f64	d5, d5, d4
    d94a:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    d94e:	ee16 3a10 	vmov	r3, s12
    d952:	f103 0030 	add.w	r0, r3, #48	; 0x30
    d956:	b2c0      	uxtb	r0, r0
    d958:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    d95c:	ee37 7b46 	vsub.f64	d7, d7, d6
    d960:	eeb4 7bc5 	vcmpe.f64	d7, d5
    d964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d968:	f80b 0b01 	strb.w	r0, [fp], #1
    d96c:	d5de      	bpl.n	d92c <_dtoa_r+0x6ac>
    d96e:	9602      	str	r6, [sp, #8]
    d970:	e5ec      	b.n	d54c <_dtoa_r+0x2cc>
    d972:	2300      	movs	r3, #0
    d974:	9309      	str	r3, [sp, #36]	; 0x24
    d976:	f1b8 0f00 	cmp.w	r8, #0
    d97a:	f340 8170 	ble.w	dc5e <_dtoa_r+0x9de>
    d97e:	4646      	mov	r6, r8
    d980:	4645      	mov	r5, r8
    d982:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
    d986:	4647      	mov	r7, r8
    d988:	e73a      	b.n	d800 <_dtoa_r+0x580>
    d98a:	2301      	movs	r3, #1
    d98c:	9309      	str	r3, [sp, #36]	; 0x24
    d98e:	e7f2      	b.n	d976 <_dtoa_r+0x6f6>
    d990:	9507      	str	r5, [sp, #28]
    d992:	9a05      	ldr	r2, [sp, #20]
    d994:	9907      	ldr	r1, [sp, #28]
    d996:	4620      	mov	r0, r4
    d998:	f000 fd58 	bl	e44c <__pow5mult>
    d99c:	4605      	mov	r5, r0
    d99e:	e677      	b.n	d690 <_dtoa_r+0x410>
    d9a0:	2f00      	cmp	r7, #0
    d9a2:	f73f ad79 	bgt.w	d498 <_dtoa_r+0x218>
    d9a6:	f040 8142 	bne.w	dc2e <_dtoa_r+0x9ae>
    d9aa:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    d9ae:	ee24 4b07 	vmul.f64	d4, d4, d7
    d9b2:	ec4b ab17 	vmov	d7, sl, fp
    d9b6:	eeb4 4bc7 	vcmpe.f64	d4, d7
    d9ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    d9be:	463e      	mov	r6, r7
    d9c0:	9705      	str	r7, [sp, #20]
    d9c2:	f2c0 80e5 	blt.w	db90 <_dtoa_r+0x910>
    d9c6:	ea6f 0308 	mvn.w	r3, r8
    d9ca:	f8dd b020 	ldr.w	fp, [sp, #32]
    d9ce:	9302      	str	r3, [sp, #8]
    d9d0:	9905      	ldr	r1, [sp, #20]
    d9d2:	4620      	mov	r0, r4
    d9d4:	f000 fc00 	bl	e1d8 <_Bfree>
    d9d8:	2e00      	cmp	r6, #0
    d9da:	f43f adb7 	beq.w	d54c <_dtoa_r+0x2cc>
    d9de:	e6f5      	b.n	d7cc <_dtoa_r+0x54c>
    d9e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
    d9e2:	2a00      	cmp	r2, #0
    d9e4:	f000 8202 	beq.w	ddec <_dtoa_r+0xb6c>
    d9e8:	9a05      	ldr	r2, [sp, #20]
    d9ea:	920e      	str	r2, [sp, #56]	; 0x38
    d9ec:	9a06      	ldr	r2, [sp, #24]
    d9ee:	920a      	str	r2, [sp, #40]	; 0x28
    d9f0:	f203 4333 	addw	r3, r3, #1075	; 0x433
    d9f4:	e5d3      	b.n	d59e <_dtoa_r+0x31e>
    d9f6:	201c      	movs	r0, #28
    d9f8:	e674      	b.n	d6e4 <_dtoa_r+0x464>
    d9fa:	9b01      	ldr	r3, [sp, #4]
    d9fc:	2b01      	cmp	r3, #1
    d9fe:	f340 8240 	ble.w	de82 <_dtoa_r+0xc02>
    da02:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    da04:	9307      	str	r3, [sp, #28]
    da06:	2001      	movs	r0, #1
    da08:	e660      	b.n	d6cc <_dtoa_r+0x44c>
    da0a:	4631      	mov	r1, r6
    da0c:	2300      	movs	r3, #0
    da0e:	220a      	movs	r2, #10
    da10:	4620      	mov	r0, r4
    da12:	f000 fbeb 	bl	e1ec <__multadd>
    da16:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    da18:	2b00      	cmp	r3, #0
    da1a:	4606      	mov	r6, r0
    da1c:	f340 824d 	ble.w	deba <_dtoa_r+0xc3a>
    da20:	461f      	mov	r7, r3
    da22:	9b0a      	ldr	r3, [sp, #40]	; 0x28
    da24:	2b00      	cmp	r3, #0
    da26:	dd05      	ble.n	da34 <_dtoa_r+0x7b4>
    da28:	4631      	mov	r1, r6
    da2a:	461a      	mov	r2, r3
    da2c:	4620      	mov	r0, r4
    da2e:	f000 fd5d 	bl	e4ec <__lshift>
    da32:	4606      	mov	r6, r0
    da34:	9b07      	ldr	r3, [sp, #28]
    da36:	2b00      	cmp	r3, #0
    da38:	f040 816e 	bne.w	dd18 <_dtoa_r+0xa98>
    da3c:	46b0      	mov	r8, r6
    da3e:	9b08      	ldr	r3, [sp, #32]
    da40:	3f01      	subs	r7, #1
    da42:	19da      	adds	r2, r3, r7
    da44:	9209      	str	r2, [sp, #36]	; 0x24
    da46:	f00a 0201 	and.w	r2, sl, #1
    da4a:	920a      	str	r2, [sp, #40]	; 0x28
    da4c:	461f      	mov	r7, r3
    da4e:	f8dd b014 	ldr.w	fp, [sp, #20]
    da52:	4628      	mov	r0, r5
    da54:	4659      	mov	r1, fp
    da56:	f7ff fb7f 	bl	d158 <quorem>
    da5a:	4631      	mov	r1, r6
    da5c:	4682      	mov	sl, r0
    da5e:	4628      	mov	r0, r5
    da60:	f000 fd9c 	bl	e59c <__mcmp>
    da64:	4642      	mov	r2, r8
    da66:	4659      	mov	r1, fp
    da68:	4681      	mov	r9, r0
    da6a:	4620      	mov	r0, r4
    da6c:	f000 fdb8 	bl	e5e0 <__mdiff>
    da70:	68c3      	ldr	r3, [r0, #12]
    da72:	4683      	mov	fp, r0
    da74:	f10a 0230 	add.w	r2, sl, #48	; 0x30
    da78:	2b00      	cmp	r3, #0
    da7a:	d149      	bne.n	db10 <_dtoa_r+0x890>
    da7c:	4601      	mov	r1, r0
    da7e:	4628      	mov	r0, r5
    da80:	9207      	str	r2, [sp, #28]
    da82:	f000 fd8b 	bl	e59c <__mcmp>
    da86:	4659      	mov	r1, fp
    da88:	9006      	str	r0, [sp, #24]
    da8a:	4620      	mov	r0, r4
    da8c:	f000 fba4 	bl	e1d8 <_Bfree>
    da90:	9b06      	ldr	r3, [sp, #24]
    da92:	9a07      	ldr	r2, [sp, #28]
    da94:	b92b      	cbnz	r3, daa2 <_dtoa_r+0x822>
    da96:	9901      	ldr	r1, [sp, #4]
    da98:	b919      	cbnz	r1, daa2 <_dtoa_r+0x822>
    da9a:	990a      	ldr	r1, [sp, #40]	; 0x28
    da9c:	2900      	cmp	r1, #0
    da9e:	f000 81f5 	beq.w	de8c <_dtoa_r+0xc0c>
    daa2:	f1b9 0f00 	cmp.w	r9, #0
    daa6:	f2c0 80df 	blt.w	dc68 <_dtoa_r+0x9e8>
    daaa:	d105      	bne.n	dab8 <_dtoa_r+0x838>
    daac:	9901      	ldr	r1, [sp, #4]
    daae:	b919      	cbnz	r1, dab8 <_dtoa_r+0x838>
    dab0:	990a      	ldr	r1, [sp, #40]	; 0x28
    dab2:	2900      	cmp	r1, #0
    dab4:	f000 80d8 	beq.w	dc68 <_dtoa_r+0x9e8>
    dab8:	2b00      	cmp	r3, #0
    daba:	f300 8141 	bgt.w	dd40 <_dtoa_r+0xac0>
    dabe:	9b09      	ldr	r3, [sp, #36]	; 0x24
    dac0:	703a      	strb	r2, [r7, #0]
    dac2:	f107 0901 	add.w	r9, r7, #1
    dac6:	429f      	cmp	r7, r3
    dac8:	46cb      	mov	fp, r9
    daca:	f000 8146 	beq.w	dd5a <_dtoa_r+0xada>
    dace:	4629      	mov	r1, r5
    dad0:	2300      	movs	r3, #0
    dad2:	220a      	movs	r2, #10
    dad4:	4620      	mov	r0, r4
    dad6:	f000 fb89 	bl	e1ec <__multadd>
    dada:	4546      	cmp	r6, r8
    dadc:	4605      	mov	r5, r0
    dade:	4631      	mov	r1, r6
    dae0:	f04f 0300 	mov.w	r3, #0
    dae4:	f04f 020a 	mov.w	r2, #10
    dae8:	4620      	mov	r0, r4
    daea:	d00b      	beq.n	db04 <_dtoa_r+0x884>
    daec:	f000 fb7e 	bl	e1ec <__multadd>
    daf0:	4641      	mov	r1, r8
    daf2:	4606      	mov	r6, r0
    daf4:	2300      	movs	r3, #0
    daf6:	220a      	movs	r2, #10
    daf8:	4620      	mov	r0, r4
    dafa:	f000 fb77 	bl	e1ec <__multadd>
    dafe:	464f      	mov	r7, r9
    db00:	4680      	mov	r8, r0
    db02:	e7a4      	b.n	da4e <_dtoa_r+0x7ce>
    db04:	f000 fb72 	bl	e1ec <__multadd>
    db08:	464f      	mov	r7, r9
    db0a:	4606      	mov	r6, r0
    db0c:	4680      	mov	r8, r0
    db0e:	e79e      	b.n	da4e <_dtoa_r+0x7ce>
    db10:	4601      	mov	r1, r0
    db12:	4620      	mov	r0, r4
    db14:	9206      	str	r2, [sp, #24]
    db16:	f000 fb5f 	bl	e1d8 <_Bfree>
    db1a:	2301      	movs	r3, #1
    db1c:	9a06      	ldr	r2, [sp, #24]
    db1e:	e7c0      	b.n	daa2 <_dtoa_r+0x822>
    db20:	9905      	ldr	r1, [sp, #20]
    db22:	4628      	mov	r0, r5
    db24:	f000 fd3a 	bl	e59c <__mcmp>
    db28:	2800      	cmp	r0, #0
    db2a:	f6bf adf8 	bge.w	d71e <_dtoa_r+0x49e>
    db2e:	4629      	mov	r1, r5
    db30:	9d02      	ldr	r5, [sp, #8]
    db32:	2300      	movs	r3, #0
    db34:	3d01      	subs	r5, #1
    db36:	220a      	movs	r2, #10
    db38:	4620      	mov	r0, r4
    db3a:	9502      	str	r5, [sp, #8]
    db3c:	f000 fb56 	bl	e1ec <__multadd>
    db40:	9b09      	ldr	r3, [sp, #36]	; 0x24
    db42:	4605      	mov	r5, r0
    db44:	2b00      	cmp	r3, #0
    db46:	f47f af60 	bne.w	da0a <_dtoa_r+0x78a>
    db4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    db4c:	2b00      	cmp	r3, #0
    db4e:	f340 81ad 	ble.w	deac <_dtoa_r+0xc2c>
    db52:	461f      	mov	r7, r3
    db54:	e5ea      	b.n	d72c <_dtoa_r+0x4ac>
    db56:	9d07      	ldr	r5, [sp, #28]
    db58:	e59a      	b.n	d690 <_dtoa_r+0x410>
    db5a:	bf00      	nop
    db5c:	20000f48 	.word	0x20000f48
    db60:	20001010 	.word	0x20001010
    db64:	9b01      	ldr	r3, [sp, #4]
    db66:	2b02      	cmp	r3, #2
    db68:	f77f addc 	ble.w	d724 <_dtoa_r+0x4a4>
    db6c:	2f00      	cmp	r7, #0
    db6e:	f040 8169 	bne.w	de44 <_dtoa_r+0xbc4>
    db72:	463b      	mov	r3, r7
    db74:	9905      	ldr	r1, [sp, #20]
    db76:	2205      	movs	r2, #5
    db78:	4620      	mov	r0, r4
    db7a:	f000 fb37 	bl	e1ec <__multadd>
    db7e:	4601      	mov	r1, r0
    db80:	9005      	str	r0, [sp, #20]
    db82:	4628      	mov	r0, r5
    db84:	f000 fd0a 	bl	e59c <__mcmp>
    db88:	2800      	cmp	r0, #0
    db8a:	9507      	str	r5, [sp, #28]
    db8c:	f77f af1b 	ble.w	d9c6 <_dtoa_r+0x746>
    db90:	9a02      	ldr	r2, [sp, #8]
    db92:	9908      	ldr	r1, [sp, #32]
    db94:	2331      	movs	r3, #49	; 0x31
    db96:	3201      	adds	r2, #1
    db98:	9202      	str	r2, [sp, #8]
    db9a:	700b      	strb	r3, [r1, #0]
    db9c:	f101 0b01 	add.w	fp, r1, #1
    dba0:	e716      	b.n	d9d0 <_dtoa_r+0x750>
    dba2:	9a02      	ldr	r2, [sp, #8]
    dba4:	3201      	adds	r2, #1
    dba6:	9202      	str	r2, [sp, #8]
    dba8:	9a08      	ldr	r2, [sp, #32]
    dbaa:	2331      	movs	r3, #49	; 0x31
    dbac:	7013      	strb	r3, [r2, #0]
    dbae:	e5fd      	b.n	d7ac <_dtoa_r+0x52c>
    dbb0:	2301      	movs	r3, #1
    dbb2:	9309      	str	r3, [sp, #36]	; 0x24
    dbb4:	e61b      	b.n	d7ee <_dtoa_r+0x56e>
    dbb6:	f1ba 0f00 	cmp.w	sl, #0
    dbba:	f47f ad7c 	bne.w	d6b6 <_dtoa_r+0x436>
    dbbe:	f3cb 0313 	ubfx	r3, fp, #0, #20
    dbc2:	2b00      	cmp	r3, #0
    dbc4:	f040 811b 	bne.w	ddfe <_dtoa_r+0xb7e>
    dbc8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
    dbcc:	0d1b      	lsrs	r3, r3, #20
    dbce:	051b      	lsls	r3, r3, #20
    dbd0:	2b00      	cmp	r3, #0
    dbd2:	f000 8154 	beq.w	de7e <_dtoa_r+0xbfe>
    dbd6:	9b06      	ldr	r3, [sp, #24]
    dbd8:	3301      	adds	r3, #1
    dbda:	9306      	str	r3, [sp, #24]
    dbdc:	2301      	movs	r3, #1
    dbde:	f109 0901 	add.w	r9, r9, #1
    dbe2:	9307      	str	r3, [sp, #28]
    dbe4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
    dbe6:	2001      	movs	r0, #1
    dbe8:	2b00      	cmp	r3, #0
    dbea:	f43f ad6f 	beq.w	d6cc <_dtoa_r+0x44c>
    dbee:	e564      	b.n	d6ba <_dtoa_r+0x43a>
    dbf0:	ee07 1a90 	vmov	s15, r1
    dbf4:	eeb8 6be7 	vcvt.f64.s32	d6, s15
    dbf8:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    dbfc:	eea4 7b06 	vfma.f64	d7, d4, d6
    dc00:	ec53 2b17 	vmov	r2, r3, d7
    dc04:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    dc08:	ec43 2b16 	vmov	d6, r2, r3
    dc0c:	eeb1 7b04 	vmov.f64	d7, #20	; 0x40a00000  5.0
    dc10:	ee34 7b47 	vsub.f64	d7, d4, d7
    dc14:	eeb4 7bc6 	vcmpe.f64	d7, d6
    dc18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc1c:	f300 80dd 	bgt.w	ddda <_dtoa_r+0xb5a>
    dc20:	eeb1 6b46 	vneg.f64	d6, d6
    dc24:	eeb4 7bc6 	vcmpe.f64	d7, d6
    dc28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    dc2c:	d546      	bpl.n	dcbc <_dtoa_r+0xa3c>
    dc2e:	2300      	movs	r3, #0
    dc30:	9305      	str	r3, [sp, #20]
    dc32:	461e      	mov	r6, r3
    dc34:	e6c7      	b.n	d9c6 <_dtoa_r+0x746>
    dc36:	9808      	ldr	r0, [sp, #32]
    dc38:	f7ff bb59 	b.w	d2ee <_dtoa_r+0x6e>
    dc3c:	9b05      	ldr	r3, [sp, #20]
    dc3e:	990b      	ldr	r1, [sp, #44]	; 0x2c
    dc40:	9205      	str	r2, [sp, #20]
    dc42:	1ad3      	subs	r3, r2, r3
    dc44:	4419      	add	r1, r3
    dc46:	2300      	movs	r3, #0
    dc48:	910b      	str	r1, [sp, #44]	; 0x2c
    dc4a:	930e      	str	r3, [sp, #56]	; 0x38
    dc4c:	e4a1      	b.n	d592 <_dtoa_r+0x312>
    dc4e:	ed9d 5b0e 	vldr	d5, [sp, #56]	; 0x38
    dc52:	2102      	movs	r1, #2
    dc54:	e60a      	b.n	d86c <_dtoa_r+0x5ec>
    dc56:	463d      	mov	r5, r7
    dc58:	2100      	movs	r1, #0
    dc5a:	6461      	str	r1, [r4, #68]	; 0x44
    dc5c:	e5df      	b.n	d81e <_dtoa_r+0x59e>
    dc5e:	2501      	movs	r5, #1
    dc60:	950d      	str	r5, [sp, #52]	; 0x34
    dc62:	462f      	mov	r7, r5
    dc64:	46a8      	mov	r8, r5
    dc66:	e7f7      	b.n	dc58 <_dtoa_r+0x9d8>
    dc68:	2b00      	cmp	r3, #0
    dc6a:	4691      	mov	r9, r2
    dc6c:	dd11      	ble.n	dc92 <_dtoa_r+0xa12>
    dc6e:	4629      	mov	r1, r5
    dc70:	2201      	movs	r2, #1
    dc72:	4620      	mov	r0, r4
    dc74:	f000 fc3a 	bl	e4ec <__lshift>
    dc78:	9905      	ldr	r1, [sp, #20]
    dc7a:	4605      	mov	r5, r0
    dc7c:	f000 fc8e 	bl	e59c <__mcmp>
    dc80:	2800      	cmp	r0, #0
    dc82:	f340 810c 	ble.w	de9e <_dtoa_r+0xc1e>
    dc86:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
    dc8a:	f000 80dd 	beq.w	de48 <_dtoa_r+0xbc8>
    dc8e:	f10a 0931 	add.w	r9, sl, #49	; 0x31
    dc92:	46b2      	mov	sl, r6
    dc94:	f887 9000 	strb.w	r9, [r7]
    dc98:	f107 0b01 	add.w	fp, r7, #1
    dc9c:	4646      	mov	r6, r8
    dc9e:	9507      	str	r5, [sp, #28]
    dca0:	e584      	b.n	d7ac <_dtoa_r+0x52c>
    dca2:	d104      	bne.n	dcae <_dtoa_r+0xa2e>
    dca4:	f019 0f01 	tst.w	r9, #1
    dca8:	d001      	beq.n	dcae <_dtoa_r+0xa2e>
    dcaa:	e56e      	b.n	d78a <_dtoa_r+0x50a>
    dcac:	4693      	mov	fp, r2
    dcae:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    dcb2:	2b30      	cmp	r3, #48	; 0x30
    dcb4:	f10b 32ff 	add.w	r2, fp, #4294967295
    dcb8:	d0f8      	beq.n	dcac <_dtoa_r+0xa2c>
    dcba:	e577      	b.n	d7ac <_dtoa_r+0x52c>
    dcbc:	e9dd ab0e 	ldrd	sl, fp, [sp, #56]	; 0x38
    dcc0:	f7ff bbdb 	b.w	d47a <_dtoa_r+0x1fa>
    dcc4:	9b02      	ldr	r3, [sp, #8]
    dcc6:	425b      	negs	r3, r3
    dcc8:	2b00      	cmp	r3, #0
    dcca:	f000 809b 	beq.w	de04 <_dtoa_r+0xb84>
    dcce:	4a8b      	ldr	r2, [pc, #556]	; (defc <_dtoa_r+0xc7c>)
    dcd0:	f003 010f 	and.w	r1, r3, #15
    dcd4:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
    dcd8:	ed92 7b00 	vldr	d7, [r2]
    dcdc:	ed9d 6b0e 	vldr	d6, [sp, #56]	; 0x38
    dce0:	111b      	asrs	r3, r3, #4
    dce2:	ee26 4b07 	vmul.f64	d4, d6, d7
    dce6:	f000 80e6 	beq.w	deb6 <_dtoa_r+0xc36>
    dcea:	4a85      	ldr	r2, [pc, #532]	; (df00 <_dtoa_r+0xc80>)
    dcec:	2102      	movs	r1, #2
    dcee:	07d8      	lsls	r0, r3, #31
    dcf0:	d504      	bpl.n	dcfc <_dtoa_r+0xa7c>
    dcf2:	ed92 7b00 	vldr	d7, [r2]
    dcf6:	3101      	adds	r1, #1
    dcf8:	ee24 4b07 	vmul.f64	d4, d4, d7
    dcfc:	105b      	asrs	r3, r3, #1
    dcfe:	f102 0208 	add.w	r2, r2, #8
    dd02:	d1f4      	bne.n	dcee <_dtoa_r+0xa6e>
    dd04:	e5c1      	b.n	d88a <_dtoa_r+0x60a>
    dd06:	9908      	ldr	r1, [sp, #32]
    dd08:	2230      	movs	r2, #48	; 0x30
    dd0a:	700a      	strb	r2, [r1, #0]
    dd0c:	9a02      	ldr	r2, [sp, #8]
    dd0e:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    dd12:	3201      	adds	r2, #1
    dd14:	9202      	str	r2, [sp, #8]
    dd16:	e417      	b.n	d548 <_dtoa_r+0x2c8>
    dd18:	6871      	ldr	r1, [r6, #4]
    dd1a:	4620      	mov	r0, r4
    dd1c:	f000 fa36 	bl	e18c <_Balloc>
    dd20:	6933      	ldr	r3, [r6, #16]
    dd22:	1c9a      	adds	r2, r3, #2
    dd24:	4680      	mov	r8, r0
    dd26:	0092      	lsls	r2, r2, #2
    dd28:	f106 010c 	add.w	r1, r6, #12
    dd2c:	300c      	adds	r0, #12
    dd2e:	f7fa fe91 	bl	8a54 <memcpy>
    dd32:	4641      	mov	r1, r8
    dd34:	2201      	movs	r2, #1
    dd36:	4620      	mov	r0, r4
    dd38:	f000 fbd8 	bl	e4ec <__lshift>
    dd3c:	4680      	mov	r8, r0
    dd3e:	e67e      	b.n	da3e <_dtoa_r+0x7be>
    dd40:	2a39      	cmp	r2, #57	; 0x39
    dd42:	f000 8081 	beq.w	de48 <_dtoa_r+0xbc8>
    dd46:	f102 0901 	add.w	r9, r2, #1
    dd4a:	46b2      	mov	sl, r6
    dd4c:	f887 9000 	strb.w	r9, [r7]
    dd50:	f107 0b01 	add.w	fp, r7, #1
    dd54:	4646      	mov	r6, r8
    dd56:	9507      	str	r5, [sp, #28]
    dd58:	e528      	b.n	d7ac <_dtoa_r+0x52c>
    dd5a:	46b2      	mov	sl, r6
    dd5c:	4691      	mov	r9, r2
    dd5e:	4646      	mov	r6, r8
    dd60:	e507      	b.n	d772 <_dtoa_r+0x4f2>
    dd62:	4866      	ldr	r0, [pc, #408]	; (defc <_dtoa_r+0xc7c>)
    dd64:	eebd 6bc4 	vcvt.s32.f64	s12, d4
    dd68:	1e4d      	subs	r5, r1, #1
    dd6a:	eb00 00c5 	add.w	r0, r0, r5, lsl #3
    dd6e:	ec43 2b17 	vmov	d7, r2, r3
    dd72:	ed90 3b00 	vldr	d3, [r0]
    dd76:	ee16 3a10 	vmov	r3, s12
    dd7a:	ee23 3b07 	vmul.f64	d3, d3, d7
    dd7e:	9808      	ldr	r0, [sp, #32]
    dd80:	3330      	adds	r3, #48	; 0x30
    dd82:	2901      	cmp	r1, #1
    dd84:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    dd88:	7003      	strb	r3, [r0, #0]
    dd8a:	f100 0b01 	add.w	fp, r0, #1
    dd8e:	ee34 7b46 	vsub.f64	d7, d4, d6
    dd92:	d014      	beq.n	ddbe <_dtoa_r+0xb3e>
    dd94:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    dd98:	9b08      	ldr	r3, [sp, #32]
    dd9a:	4419      	add	r1, r3
    dd9c:	465b      	mov	r3, fp
    dd9e:	ee27 7b05 	vmul.f64	d7, d7, d5
    dda2:	eebd 6bc7 	vcvt.s32.f64	s12, d7
    dda6:	ee16 2a10 	vmov	r2, s12
    ddaa:	3230      	adds	r2, #48	; 0x30
    ddac:	f803 2b01 	strb.w	r2, [r3], #1
    ddb0:	4299      	cmp	r1, r3
    ddb2:	eeb8 6bc6 	vcvt.f64.s32	d6, s12
    ddb6:	ee37 7b46 	vsub.f64	d7, d7, d6
    ddba:	d1f0      	bne.n	dd9e <_dtoa_r+0xb1e>
    ddbc:	44ab      	add	fp, r5
    ddbe:	eeb6 6b00 	vmov.f64	d6, #96	; 0x3f000000  0.5
    ddc2:	ee33 5b06 	vadd.f64	d5, d3, d6
    ddc6:	eeb4 5bc7 	vcmpe.f64	d5, d7
    ddca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    ddce:	d543      	bpl.n	de58 <_dtoa_r+0xbd8>
    ddd0:	9602      	str	r6, [sp, #8]
    ddd2:	f81b 0c01 	ldrb.w	r0, [fp, #-1]
    ddd6:	f7ff bbaa 	b.w	d52e <_dtoa_r+0x2ae>
    ddda:	2300      	movs	r3, #0
    dddc:	9305      	str	r3, [sp, #20]
    ddde:	461e      	mov	r6, r3
    dde0:	e6d6      	b.n	db90 <_dtoa_r+0x910>
    dde2:	1bdb      	subs	r3, r3, r7
    dde4:	930a      	str	r3, [sp, #40]	; 0x28
    dde6:	2300      	movs	r3, #0
    dde8:	f7ff bbd9 	b.w	d59e <_dtoa_r+0x31e>
    ddec:	9a05      	ldr	r2, [sp, #20]
    ddee:	9b10      	ldr	r3, [sp, #64]	; 0x40
    ddf0:	920e      	str	r2, [sp, #56]	; 0x38
    ddf2:	9a06      	ldr	r2, [sp, #24]
    ddf4:	920a      	str	r2, [sp, #40]	; 0x28
    ddf6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
    ddfa:	f7ff bbd0 	b.w	d59e <_dtoa_r+0x31e>
    ddfe:	2300      	movs	r3, #0
    de00:	9307      	str	r3, [sp, #28]
    de02:	e6ef      	b.n	dbe4 <_dtoa_r+0x964>
    de04:	ed9d 4b0e 	vldr	d4, [sp, #56]	; 0x38
    de08:	2102      	movs	r1, #2
    de0a:	e53e      	b.n	d88a <_dtoa_r+0x60a>
    de0c:	2f00      	cmp	r7, #0
    de0e:	f43f aeef 	beq.w	dbf0 <_dtoa_r+0x970>
    de12:	980d      	ldr	r0, [sp, #52]	; 0x34
    de14:	2800      	cmp	r0, #0
    de16:	f77f af51 	ble.w	dcbc <_dtoa_r+0xa3c>
    de1a:	eeb2 5b04 	vmov.f64	d5, #36	; 0x41200000  10.0
    de1e:	eeb1 7b0c 	vmov.f64	d7, #28	; 0x40e00000  7.0
    de22:	3101      	adds	r1, #1
    de24:	ee06 1a90 	vmov	s13, r1
    de28:	ee24 4b05 	vmul.f64	d4, d4, d5
    de2c:	9b02      	ldr	r3, [sp, #8]
    de2e:	eeb8 6be6 	vcvt.f64.s32	d6, s13
    de32:	1e5e      	subs	r6, r3, #1
    de34:	eea4 7b06 	vfma.f64	d7, d4, d6
    de38:	ec53 2b17 	vmov	r2, r3, d7
    de3c:	4601      	mov	r1, r0
    de3e:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
    de42:	e53d      	b.n	d8c0 <_dtoa_r+0x640>
    de44:	9507      	str	r5, [sp, #28]
    de46:	e5be      	b.n	d9c6 <_dtoa_r+0x746>
    de48:	2239      	movs	r2, #57	; 0x39
    de4a:	46b2      	mov	sl, r6
    de4c:	9507      	str	r5, [sp, #28]
    de4e:	4646      	mov	r6, r8
    de50:	703a      	strb	r2, [r7, #0]
    de52:	f107 0b01 	add.w	fp, r7, #1
    de56:	e49a      	b.n	d78e <_dtoa_r+0x50e>
    de58:	ee36 6b43 	vsub.f64	d6, d6, d3
    de5c:	eeb4 6bc7 	vcmpe.f64	d6, d7
    de60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    de64:	dc01      	bgt.n	de6a <_dtoa_r+0xbea>
    de66:	e729      	b.n	dcbc <_dtoa_r+0xa3c>
    de68:	4693      	mov	fp, r2
    de6a:	f81b 3c01 	ldrb.w	r3, [fp, #-1]
    de6e:	2b30      	cmp	r3, #48	; 0x30
    de70:	f10b 32ff 	add.w	r2, fp, #4294967295
    de74:	d0f8      	beq.n	de68 <_dtoa_r+0xbe8>
    de76:	e57a      	b.n	d96e <_dtoa_r+0x6ee>
    de78:	9602      	str	r6, [sp, #8]
    de7a:	f7ff bb58 	b.w	d52e <_dtoa_r+0x2ae>
    de7e:	9307      	str	r3, [sp, #28]
    de80:	e6b0      	b.n	dbe4 <_dtoa_r+0x964>
    de82:	f1ba 0f00 	cmp.w	sl, #0
    de86:	f47f adbc 	bne.w	da02 <_dtoa_r+0x782>
    de8a:	e698      	b.n	dbbe <_dtoa_r+0x93e>
    de8c:	2a39      	cmp	r2, #57	; 0x39
    de8e:	46cb      	mov	fp, r9
    de90:	4691      	mov	r9, r2
    de92:	d0d9      	beq.n	de48 <_dtoa_r+0xbc8>
    de94:	f1bb 0f00 	cmp.w	fp, #0
    de98:	f73f aef9 	bgt.w	dc8e <_dtoa_r+0xa0e>
    de9c:	e6f9      	b.n	dc92 <_dtoa_r+0xa12>
    de9e:	f47f aef8 	bne.w	dc92 <_dtoa_r+0xa12>
    dea2:	f019 0f01 	tst.w	r9, #1
    dea6:	f43f aef4 	beq.w	dc92 <_dtoa_r+0xa12>
    deaa:	e6ec      	b.n	dc86 <_dtoa_r+0xa06>
    deac:	9b01      	ldr	r3, [sp, #4]
    deae:	2b02      	cmp	r3, #2
    deb0:	dc08      	bgt.n	dec4 <_dtoa_r+0xc44>
    deb2:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    deb4:	e43a      	b.n	d72c <_dtoa_r+0x4ac>
    deb6:	2102      	movs	r1, #2
    deb8:	e4e7      	b.n	d88a <_dtoa_r+0x60a>
    deba:	9b01      	ldr	r3, [sp, #4]
    debc:	2b02      	cmp	r3, #2
    debe:	dc01      	bgt.n	dec4 <_dtoa_r+0xc44>
    dec0:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    dec2:	e5ae      	b.n	da22 <_dtoa_r+0x7a2>
    dec4:	9f0d      	ldr	r7, [sp, #52]	; 0x34
    dec6:	e651      	b.n	db6c <_dtoa_r+0x8ec>
    dec8:	2301      	movs	r3, #1
    deca:	930e      	str	r3, [sp, #56]	; 0x38
    decc:	f7ff baa1 	b.w	d412 <_dtoa_r+0x192>
    ded0:	f43f ac0f 	beq.w	d6f2 <_dtoa_r+0x472>
    ded4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
    ded8:	e404      	b.n	d6e4 <_dtoa_r+0x464>
    deda:	2500      	movs	r5, #0
    dedc:	6465      	str	r5, [r4, #68]	; 0x44
    dede:	4629      	mov	r1, r5
    dee0:	4620      	mov	r0, r4
    dee2:	f000 f953 	bl	e18c <_Balloc>
    dee6:	f04f 37ff 	mov.w	r7, #4294967295
    deea:	2301      	movs	r3, #1
    deec:	9008      	str	r0, [sp, #32]
    deee:	46a8      	mov	r8, r5
    def0:	6420      	str	r0, [r4, #64]	; 0x40
    def2:	970d      	str	r7, [sp, #52]	; 0x34
    def4:	9309      	str	r3, [sp, #36]	; 0x24
    def6:	f7ff bac0 	b.w	d47a <_dtoa_r+0x1fa>
    defa:	bf00      	nop
    defc:	20000f48 	.word	0x20000f48
    df00:	20001010 	.word	0x20001010

0000df04 <_malloc_trim_r>:
    df04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    df06:	4f23      	ldr	r7, [pc, #140]	; (df94 <_malloc_trim_r+0x90>)
    df08:	460c      	mov	r4, r1
    df0a:	4606      	mov	r6, r0
    df0c:	f7fd fadc 	bl	b4c8 <__malloc_lock>
    df10:	68bb      	ldr	r3, [r7, #8]
    df12:	685d      	ldr	r5, [r3, #4]
    df14:	f025 0503 	bic.w	r5, r5, #3
    df18:	1b29      	subs	r1, r5, r4
    df1a:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
    df1e:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
    df22:	f021 010f 	bic.w	r1, r1, #15
    df26:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
    df2a:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
    df2e:	db07      	blt.n	df40 <_malloc_trim_r+0x3c>
    df30:	2100      	movs	r1, #0
    df32:	4630      	mov	r0, r6
    df34:	f7fd fcbc 	bl	b8b0 <_sbrk_r>
    df38:	68bb      	ldr	r3, [r7, #8]
    df3a:	442b      	add	r3, r5
    df3c:	4298      	cmp	r0, r3
    df3e:	d004      	beq.n	df4a <_malloc_trim_r+0x46>
    df40:	4630      	mov	r0, r6
    df42:	f7fd fac3 	bl	b4cc <__malloc_unlock>
    df46:	2000      	movs	r0, #0
    df48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df4a:	4261      	negs	r1, r4
    df4c:	4630      	mov	r0, r6
    df4e:	f7fd fcaf 	bl	b8b0 <_sbrk_r>
    df52:	3001      	adds	r0, #1
    df54:	d00d      	beq.n	df72 <_malloc_trim_r+0x6e>
    df56:	4b10      	ldr	r3, [pc, #64]	; (df98 <_malloc_trim_r+0x94>)
    df58:	68ba      	ldr	r2, [r7, #8]
    df5a:	6819      	ldr	r1, [r3, #0]
    df5c:	1b2d      	subs	r5, r5, r4
    df5e:	f045 0501 	orr.w	r5, r5, #1
    df62:	4630      	mov	r0, r6
    df64:	1b09      	subs	r1, r1, r4
    df66:	6055      	str	r5, [r2, #4]
    df68:	6019      	str	r1, [r3, #0]
    df6a:	f7fd faaf 	bl	b4cc <__malloc_unlock>
    df6e:	2001      	movs	r0, #1
    df70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    df72:	2100      	movs	r1, #0
    df74:	4630      	mov	r0, r6
    df76:	f7fd fc9b 	bl	b8b0 <_sbrk_r>
    df7a:	68ba      	ldr	r2, [r7, #8]
    df7c:	1a83      	subs	r3, r0, r2
    df7e:	2b0f      	cmp	r3, #15
    df80:	ddde      	ble.n	df40 <_malloc_trim_r+0x3c>
    df82:	4c06      	ldr	r4, [pc, #24]	; (df9c <_malloc_trim_r+0x98>)
    df84:	4904      	ldr	r1, [pc, #16]	; (df98 <_malloc_trim_r+0x94>)
    df86:	6824      	ldr	r4, [r4, #0]
    df88:	f043 0301 	orr.w	r3, r3, #1
    df8c:	1b00      	subs	r0, r0, r4
    df8e:	6053      	str	r3, [r2, #4]
    df90:	6008      	str	r0, [r1, #0]
    df92:	e7d5      	b.n	df40 <_malloc_trim_r+0x3c>
    df94:	20001710 	.word	0x20001710
    df98:	20036f00 	.word	0x20036f00
    df9c:	20001b1c 	.word	0x20001b1c

0000dfa0 <_free_r>:
    dfa0:	2900      	cmp	r1, #0
    dfa2:	d045      	beq.n	e030 <_free_r+0x90>
    dfa4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    dfa8:	460d      	mov	r5, r1
    dfaa:	4680      	mov	r8, r0
    dfac:	f7fd fa8c 	bl	b4c8 <__malloc_lock>
    dfb0:	f855 7c04 	ldr.w	r7, [r5, #-4]
    dfb4:	496a      	ldr	r1, [pc, #424]	; (e160 <_free_r+0x1c0>)
    dfb6:	f027 0301 	bic.w	r3, r7, #1
    dfba:	f1a5 0408 	sub.w	r4, r5, #8
    dfbe:	18e2      	adds	r2, r4, r3
    dfc0:	688e      	ldr	r6, [r1, #8]
    dfc2:	6850      	ldr	r0, [r2, #4]
    dfc4:	42b2      	cmp	r2, r6
    dfc6:	f020 0003 	bic.w	r0, r0, #3
    dfca:	d062      	beq.n	e092 <_free_r+0xf2>
    dfcc:	07fe      	lsls	r6, r7, #31
    dfce:	6050      	str	r0, [r2, #4]
    dfd0:	d40b      	bmi.n	dfea <_free_r+0x4a>
    dfd2:	f855 7c08 	ldr.w	r7, [r5, #-8]
    dfd6:	1be4      	subs	r4, r4, r7
    dfd8:	f101 0e08 	add.w	lr, r1, #8
    dfdc:	68a5      	ldr	r5, [r4, #8]
    dfde:	4575      	cmp	r5, lr
    dfe0:	443b      	add	r3, r7
    dfe2:	d06f      	beq.n	e0c4 <_free_r+0x124>
    dfe4:	68e7      	ldr	r7, [r4, #12]
    dfe6:	60ef      	str	r7, [r5, #12]
    dfe8:	60bd      	str	r5, [r7, #8]
    dfea:	1815      	adds	r5, r2, r0
    dfec:	686d      	ldr	r5, [r5, #4]
    dfee:	07ed      	lsls	r5, r5, #31
    dff0:	d542      	bpl.n	e078 <_free_r+0xd8>
    dff2:	f043 0201 	orr.w	r2, r3, #1
    dff6:	6062      	str	r2, [r4, #4]
    dff8:	50e3      	str	r3, [r4, r3]
    dffa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
    dffe:	d218      	bcs.n	e032 <_free_r+0x92>
    e000:	08db      	lsrs	r3, r3, #3
    e002:	1c5a      	adds	r2, r3, #1
    e004:	684d      	ldr	r5, [r1, #4]
    e006:	f851 7032 	ldr.w	r7, [r1, r2, lsl #3]
    e00a:	60a7      	str	r7, [r4, #8]
    e00c:	2001      	movs	r0, #1
    e00e:	109b      	asrs	r3, r3, #2
    e010:	fa00 f303 	lsl.w	r3, r0, r3
    e014:	eb01 00c2 	add.w	r0, r1, r2, lsl #3
    e018:	431d      	orrs	r5, r3
    e01a:	3808      	subs	r0, #8
    e01c:	60e0      	str	r0, [r4, #12]
    e01e:	604d      	str	r5, [r1, #4]
    e020:	f841 4032 	str.w	r4, [r1, r2, lsl #3]
    e024:	60fc      	str	r4, [r7, #12]
    e026:	4640      	mov	r0, r8
    e028:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e02c:	f7fd ba4e 	b.w	b4cc <__malloc_unlock>
    e030:	4770      	bx	lr
    e032:	0a5a      	lsrs	r2, r3, #9
    e034:	2a04      	cmp	r2, #4
    e036:	d853      	bhi.n	e0e0 <_free_r+0x140>
    e038:	099a      	lsrs	r2, r3, #6
    e03a:	f102 0739 	add.w	r7, r2, #57	; 0x39
    e03e:	007f      	lsls	r7, r7, #1
    e040:	f102 0538 	add.w	r5, r2, #56	; 0x38
    e044:	eb01 0087 	add.w	r0, r1, r7, lsl #2
    e048:	f851 2027 	ldr.w	r2, [r1, r7, lsl #2]
    e04c:	4944      	ldr	r1, [pc, #272]	; (e160 <_free_r+0x1c0>)
    e04e:	3808      	subs	r0, #8
    e050:	4290      	cmp	r0, r2
    e052:	d04d      	beq.n	e0f0 <_free_r+0x150>
    e054:	6851      	ldr	r1, [r2, #4]
    e056:	f021 0103 	bic.w	r1, r1, #3
    e05a:	428b      	cmp	r3, r1
    e05c:	d202      	bcs.n	e064 <_free_r+0xc4>
    e05e:	6892      	ldr	r2, [r2, #8]
    e060:	4290      	cmp	r0, r2
    e062:	d1f7      	bne.n	e054 <_free_r+0xb4>
    e064:	68d0      	ldr	r0, [r2, #12]
    e066:	60e0      	str	r0, [r4, #12]
    e068:	60a2      	str	r2, [r4, #8]
    e06a:	6084      	str	r4, [r0, #8]
    e06c:	60d4      	str	r4, [r2, #12]
    e06e:	4640      	mov	r0, r8
    e070:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    e074:	f7fd ba2a 	b.w	b4cc <__malloc_unlock>
    e078:	6895      	ldr	r5, [r2, #8]
    e07a:	4f3a      	ldr	r7, [pc, #232]	; (e164 <_free_r+0x1c4>)
    e07c:	42bd      	cmp	r5, r7
    e07e:	4403      	add	r3, r0
    e080:	d03f      	beq.n	e102 <_free_r+0x162>
    e082:	68d0      	ldr	r0, [r2, #12]
    e084:	60e8      	str	r0, [r5, #12]
    e086:	f043 0201 	orr.w	r2, r3, #1
    e08a:	6085      	str	r5, [r0, #8]
    e08c:	6062      	str	r2, [r4, #4]
    e08e:	50e3      	str	r3, [r4, r3]
    e090:	e7b3      	b.n	dffa <_free_r+0x5a>
    e092:	07ff      	lsls	r7, r7, #31
    e094:	4403      	add	r3, r0
    e096:	d407      	bmi.n	e0a8 <_free_r+0x108>
    e098:	f855 2c08 	ldr.w	r2, [r5, #-8]
    e09c:	1aa4      	subs	r4, r4, r2
    e09e:	4413      	add	r3, r2
    e0a0:	68a0      	ldr	r0, [r4, #8]
    e0a2:	68e2      	ldr	r2, [r4, #12]
    e0a4:	60c2      	str	r2, [r0, #12]
    e0a6:	6090      	str	r0, [r2, #8]
    e0a8:	4a2f      	ldr	r2, [pc, #188]	; (e168 <_free_r+0x1c8>)
    e0aa:	6812      	ldr	r2, [r2, #0]
    e0ac:	f043 0001 	orr.w	r0, r3, #1
    e0b0:	4293      	cmp	r3, r2
    e0b2:	6060      	str	r0, [r4, #4]
    e0b4:	608c      	str	r4, [r1, #8]
    e0b6:	d3b6      	bcc.n	e026 <_free_r+0x86>
    e0b8:	4b2c      	ldr	r3, [pc, #176]	; (e16c <_free_r+0x1cc>)
    e0ba:	4640      	mov	r0, r8
    e0bc:	6819      	ldr	r1, [r3, #0]
    e0be:	f7ff ff21 	bl	df04 <_malloc_trim_r>
    e0c2:	e7b0      	b.n	e026 <_free_r+0x86>
    e0c4:	1811      	adds	r1, r2, r0
    e0c6:	6849      	ldr	r1, [r1, #4]
    e0c8:	07c9      	lsls	r1, r1, #31
    e0ca:	d444      	bmi.n	e156 <_free_r+0x1b6>
    e0cc:	6891      	ldr	r1, [r2, #8]
    e0ce:	68d2      	ldr	r2, [r2, #12]
    e0d0:	60ca      	str	r2, [r1, #12]
    e0d2:	4403      	add	r3, r0
    e0d4:	f043 0001 	orr.w	r0, r3, #1
    e0d8:	6091      	str	r1, [r2, #8]
    e0da:	6060      	str	r0, [r4, #4]
    e0dc:	50e3      	str	r3, [r4, r3]
    e0de:	e7a2      	b.n	e026 <_free_r+0x86>
    e0e0:	2a14      	cmp	r2, #20
    e0e2:	d817      	bhi.n	e114 <_free_r+0x174>
    e0e4:	f102 075c 	add.w	r7, r2, #92	; 0x5c
    e0e8:	007f      	lsls	r7, r7, #1
    e0ea:	f102 055b 	add.w	r5, r2, #91	; 0x5b
    e0ee:	e7a9      	b.n	e044 <_free_r+0xa4>
    e0f0:	10aa      	asrs	r2, r5, #2
    e0f2:	684b      	ldr	r3, [r1, #4]
    e0f4:	2501      	movs	r5, #1
    e0f6:	fa05 f202 	lsl.w	r2, r5, r2
    e0fa:	4313      	orrs	r3, r2
    e0fc:	604b      	str	r3, [r1, #4]
    e0fe:	4602      	mov	r2, r0
    e100:	e7b1      	b.n	e066 <_free_r+0xc6>
    e102:	f043 0201 	orr.w	r2, r3, #1
    e106:	614c      	str	r4, [r1, #20]
    e108:	610c      	str	r4, [r1, #16]
    e10a:	60e5      	str	r5, [r4, #12]
    e10c:	60a5      	str	r5, [r4, #8]
    e10e:	6062      	str	r2, [r4, #4]
    e110:	50e3      	str	r3, [r4, r3]
    e112:	e788      	b.n	e026 <_free_r+0x86>
    e114:	2a54      	cmp	r2, #84	; 0x54
    e116:	d806      	bhi.n	e126 <_free_r+0x186>
    e118:	0b1a      	lsrs	r2, r3, #12
    e11a:	f102 076f 	add.w	r7, r2, #111	; 0x6f
    e11e:	007f      	lsls	r7, r7, #1
    e120:	f102 056e 	add.w	r5, r2, #110	; 0x6e
    e124:	e78e      	b.n	e044 <_free_r+0xa4>
    e126:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
    e12a:	d806      	bhi.n	e13a <_free_r+0x19a>
    e12c:	0bda      	lsrs	r2, r3, #15
    e12e:	f102 0778 	add.w	r7, r2, #120	; 0x78
    e132:	007f      	lsls	r7, r7, #1
    e134:	f102 0577 	add.w	r5, r2, #119	; 0x77
    e138:	e784      	b.n	e044 <_free_r+0xa4>
    e13a:	f240 5054 	movw	r0, #1364	; 0x554
    e13e:	4282      	cmp	r2, r0
    e140:	d806      	bhi.n	e150 <_free_r+0x1b0>
    e142:	0c9a      	lsrs	r2, r3, #18
    e144:	f102 077d 	add.w	r7, r2, #125	; 0x7d
    e148:	007f      	lsls	r7, r7, #1
    e14a:	f102 057c 	add.w	r5, r2, #124	; 0x7c
    e14e:	e779      	b.n	e044 <_free_r+0xa4>
    e150:	27fe      	movs	r7, #254	; 0xfe
    e152:	257e      	movs	r5, #126	; 0x7e
    e154:	e776      	b.n	e044 <_free_r+0xa4>
    e156:	f043 0201 	orr.w	r2, r3, #1
    e15a:	6062      	str	r2, [r4, #4]
    e15c:	50e3      	str	r3, [r4, r3]
    e15e:	e762      	b.n	e026 <_free_r+0x86>
    e160:	20001710 	.word	0x20001710
    e164:	20001718 	.word	0x20001718
    e168:	20001b18 	.word	0x20001b18
    e16c:	20036efc 	.word	0x20036efc

0000e170 <_localeconv_r>:
    e170:	4a04      	ldr	r2, [pc, #16]	; (e184 <_localeconv_r+0x14>)
    e172:	4b05      	ldr	r3, [pc, #20]	; (e188 <_localeconv_r+0x18>)
    e174:	6812      	ldr	r2, [r2, #0]
    e176:	6b50      	ldr	r0, [r2, #52]	; 0x34
    e178:	2800      	cmp	r0, #0
    e17a:	bf08      	it	eq
    e17c:	4618      	moveq	r0, r3
    e17e:	30f0      	adds	r0, #240	; 0xf0
    e180:	4770      	bx	lr
    e182:	bf00      	nop
    e184:	200015a0 	.word	0x200015a0
    e188:	200015a4 	.word	0x200015a4

0000e18c <_Balloc>:
    e18c:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    e18e:	b570      	push	{r4, r5, r6, lr}
    e190:	4605      	mov	r5, r0
    e192:	460c      	mov	r4, r1
    e194:	b14b      	cbz	r3, e1aa <_Balloc+0x1e>
    e196:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
    e19a:	b180      	cbz	r0, e1be <_Balloc+0x32>
    e19c:	6802      	ldr	r2, [r0, #0]
    e19e:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
    e1a2:	2300      	movs	r3, #0
    e1a4:	6103      	str	r3, [r0, #16]
    e1a6:	60c3      	str	r3, [r0, #12]
    e1a8:	bd70      	pop	{r4, r5, r6, pc}
    e1aa:	2221      	movs	r2, #33	; 0x21
    e1ac:	2104      	movs	r1, #4
    e1ae:	f000 fb7f 	bl	e8b0 <_calloc_r>
    e1b2:	64e8      	str	r0, [r5, #76]	; 0x4c
    e1b4:	4603      	mov	r3, r0
    e1b6:	2800      	cmp	r0, #0
    e1b8:	d1ed      	bne.n	e196 <_Balloc+0xa>
    e1ba:	2000      	movs	r0, #0
    e1bc:	bd70      	pop	{r4, r5, r6, pc}
    e1be:	2101      	movs	r1, #1
    e1c0:	fa01 f604 	lsl.w	r6, r1, r4
    e1c4:	1d72      	adds	r2, r6, #5
    e1c6:	4628      	mov	r0, r5
    e1c8:	0092      	lsls	r2, r2, #2
    e1ca:	f000 fb71 	bl	e8b0 <_calloc_r>
    e1ce:	2800      	cmp	r0, #0
    e1d0:	d0f3      	beq.n	e1ba <_Balloc+0x2e>
    e1d2:	6044      	str	r4, [r0, #4]
    e1d4:	6086      	str	r6, [r0, #8]
    e1d6:	e7e4      	b.n	e1a2 <_Balloc+0x16>

0000e1d8 <_Bfree>:
    e1d8:	b131      	cbz	r1, e1e8 <_Bfree+0x10>
    e1da:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
    e1dc:	684a      	ldr	r2, [r1, #4]
    e1de:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
    e1e2:	6008      	str	r0, [r1, #0]
    e1e4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    e1e8:	4770      	bx	lr
    e1ea:	bf00      	nop

0000e1ec <__multadd>:
    e1ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    e1ee:	690c      	ldr	r4, [r1, #16]
    e1f0:	b083      	sub	sp, #12
    e1f2:	460d      	mov	r5, r1
    e1f4:	4606      	mov	r6, r0
    e1f6:	f101 0e14 	add.w	lr, r1, #20
    e1fa:	2700      	movs	r7, #0
    e1fc:	f8de 0000 	ldr.w	r0, [lr]
    e200:	b281      	uxth	r1, r0
    e202:	fb02 3101 	mla	r1, r2, r1, r3
    e206:	0c0b      	lsrs	r3, r1, #16
    e208:	0c00      	lsrs	r0, r0, #16
    e20a:	fb02 3300 	mla	r3, r2, r0, r3
    e20e:	b289      	uxth	r1, r1
    e210:	3701      	adds	r7, #1
    e212:	eb01 4103 	add.w	r1, r1, r3, lsl #16
    e216:	42bc      	cmp	r4, r7
    e218:	f84e 1b04 	str.w	r1, [lr], #4
    e21c:	ea4f 4313 	mov.w	r3, r3, lsr #16
    e220:	dcec      	bgt.n	e1fc <__multadd+0x10>
    e222:	b13b      	cbz	r3, e234 <__multadd+0x48>
    e224:	68aa      	ldr	r2, [r5, #8]
    e226:	4294      	cmp	r4, r2
    e228:	da07      	bge.n	e23a <__multadd+0x4e>
    e22a:	eb05 0284 	add.w	r2, r5, r4, lsl #2
    e22e:	3401      	adds	r4, #1
    e230:	6153      	str	r3, [r2, #20]
    e232:	612c      	str	r4, [r5, #16]
    e234:	4628      	mov	r0, r5
    e236:	b003      	add	sp, #12
    e238:	bdf0      	pop	{r4, r5, r6, r7, pc}
    e23a:	6869      	ldr	r1, [r5, #4]
    e23c:	9301      	str	r3, [sp, #4]
    e23e:	3101      	adds	r1, #1
    e240:	4630      	mov	r0, r6
    e242:	f7ff ffa3 	bl	e18c <_Balloc>
    e246:	692a      	ldr	r2, [r5, #16]
    e248:	3202      	adds	r2, #2
    e24a:	f105 010c 	add.w	r1, r5, #12
    e24e:	4607      	mov	r7, r0
    e250:	0092      	lsls	r2, r2, #2
    e252:	300c      	adds	r0, #12
    e254:	f7fa fbfe 	bl	8a54 <memcpy>
    e258:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
    e25a:	6869      	ldr	r1, [r5, #4]
    e25c:	9b01      	ldr	r3, [sp, #4]
    e25e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
    e262:	6028      	str	r0, [r5, #0]
    e264:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
    e268:	463d      	mov	r5, r7
    e26a:	e7de      	b.n	e22a <__multadd+0x3e>

0000e26c <__hi0bits>:
    e26c:	0c03      	lsrs	r3, r0, #16
    e26e:	041b      	lsls	r3, r3, #16
    e270:	b9b3      	cbnz	r3, e2a0 <__hi0bits+0x34>
    e272:	0400      	lsls	r0, r0, #16
    e274:	2310      	movs	r3, #16
    e276:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
    e27a:	bf04      	itt	eq
    e27c:	0200      	lsleq	r0, r0, #8
    e27e:	3308      	addeq	r3, #8
    e280:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
    e284:	bf04      	itt	eq
    e286:	0100      	lsleq	r0, r0, #4
    e288:	3304      	addeq	r3, #4
    e28a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
    e28e:	bf04      	itt	eq
    e290:	0080      	lsleq	r0, r0, #2
    e292:	3302      	addeq	r3, #2
    e294:	2800      	cmp	r0, #0
    e296:	db07      	blt.n	e2a8 <__hi0bits+0x3c>
    e298:	0042      	lsls	r2, r0, #1
    e29a:	d403      	bmi.n	e2a4 <__hi0bits+0x38>
    e29c:	2020      	movs	r0, #32
    e29e:	4770      	bx	lr
    e2a0:	2300      	movs	r3, #0
    e2a2:	e7e8      	b.n	e276 <__hi0bits+0xa>
    e2a4:	1c58      	adds	r0, r3, #1
    e2a6:	4770      	bx	lr
    e2a8:	4618      	mov	r0, r3
    e2aa:	4770      	bx	lr

0000e2ac <__lo0bits>:
    e2ac:	6803      	ldr	r3, [r0, #0]
    e2ae:	f013 0207 	ands.w	r2, r3, #7
    e2b2:	d007      	beq.n	e2c4 <__lo0bits+0x18>
    e2b4:	07d9      	lsls	r1, r3, #31
    e2b6:	d420      	bmi.n	e2fa <__lo0bits+0x4e>
    e2b8:	079a      	lsls	r2, r3, #30
    e2ba:	d420      	bmi.n	e2fe <__lo0bits+0x52>
    e2bc:	089b      	lsrs	r3, r3, #2
    e2be:	6003      	str	r3, [r0, #0]
    e2c0:	2002      	movs	r0, #2
    e2c2:	4770      	bx	lr
    e2c4:	b299      	uxth	r1, r3
    e2c6:	b909      	cbnz	r1, e2cc <__lo0bits+0x20>
    e2c8:	0c1b      	lsrs	r3, r3, #16
    e2ca:	2210      	movs	r2, #16
    e2cc:	f013 0fff 	tst.w	r3, #255	; 0xff
    e2d0:	bf04      	itt	eq
    e2d2:	0a1b      	lsreq	r3, r3, #8
    e2d4:	3208      	addeq	r2, #8
    e2d6:	0719      	lsls	r1, r3, #28
    e2d8:	bf04      	itt	eq
    e2da:	091b      	lsreq	r3, r3, #4
    e2dc:	3204      	addeq	r2, #4
    e2de:	0799      	lsls	r1, r3, #30
    e2e0:	bf04      	itt	eq
    e2e2:	089b      	lsreq	r3, r3, #2
    e2e4:	3202      	addeq	r2, #2
    e2e6:	07d9      	lsls	r1, r3, #31
    e2e8:	d404      	bmi.n	e2f4 <__lo0bits+0x48>
    e2ea:	085b      	lsrs	r3, r3, #1
    e2ec:	d101      	bne.n	e2f2 <__lo0bits+0x46>
    e2ee:	2020      	movs	r0, #32
    e2f0:	4770      	bx	lr
    e2f2:	3201      	adds	r2, #1
    e2f4:	6003      	str	r3, [r0, #0]
    e2f6:	4610      	mov	r0, r2
    e2f8:	4770      	bx	lr
    e2fa:	2000      	movs	r0, #0
    e2fc:	4770      	bx	lr
    e2fe:	085b      	lsrs	r3, r3, #1
    e300:	6003      	str	r3, [r0, #0]
    e302:	2001      	movs	r0, #1
    e304:	4770      	bx	lr
    e306:	bf00      	nop

0000e308 <__i2b>:
    e308:	b510      	push	{r4, lr}
    e30a:	460c      	mov	r4, r1
    e30c:	2101      	movs	r1, #1
    e30e:	f7ff ff3d 	bl	e18c <_Balloc>
    e312:	2201      	movs	r2, #1
    e314:	6144      	str	r4, [r0, #20]
    e316:	6102      	str	r2, [r0, #16]
    e318:	bd10      	pop	{r4, pc}
    e31a:	bf00      	nop

0000e31c <__multiply>:
    e31c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e320:	690d      	ldr	r5, [r1, #16]
    e322:	6917      	ldr	r7, [r2, #16]
    e324:	42bd      	cmp	r5, r7
    e326:	b083      	sub	sp, #12
    e328:	460c      	mov	r4, r1
    e32a:	4616      	mov	r6, r2
    e32c:	da04      	bge.n	e338 <__multiply+0x1c>
    e32e:	462a      	mov	r2, r5
    e330:	4634      	mov	r4, r6
    e332:	463d      	mov	r5, r7
    e334:	460e      	mov	r6, r1
    e336:	4617      	mov	r7, r2
    e338:	68a3      	ldr	r3, [r4, #8]
    e33a:	6861      	ldr	r1, [r4, #4]
    e33c:	eb05 0807 	add.w	r8, r5, r7
    e340:	4598      	cmp	r8, r3
    e342:	bfc8      	it	gt
    e344:	3101      	addgt	r1, #1
    e346:	f7ff ff21 	bl	e18c <_Balloc>
    e34a:	f100 0c14 	add.w	ip, r0, #20
    e34e:	eb0c 0988 	add.w	r9, ip, r8, lsl #2
    e352:	45cc      	cmp	ip, r9
    e354:	9000      	str	r0, [sp, #0]
    e356:	d205      	bcs.n	e364 <__multiply+0x48>
    e358:	4663      	mov	r3, ip
    e35a:	2100      	movs	r1, #0
    e35c:	f843 1b04 	str.w	r1, [r3], #4
    e360:	4599      	cmp	r9, r3
    e362:	d8fb      	bhi.n	e35c <__multiply+0x40>
    e364:	f106 0214 	add.w	r2, r6, #20
    e368:	eb02 0a87 	add.w	sl, r2, r7, lsl #2
    e36c:	f104 0314 	add.w	r3, r4, #20
    e370:	4552      	cmp	r2, sl
    e372:	eb03 0e85 	add.w	lr, r3, r5, lsl #2
    e376:	d254      	bcs.n	e422 <__multiply+0x106>
    e378:	f8cd 9004 	str.w	r9, [sp, #4]
    e37c:	4699      	mov	r9, r3
    e37e:	f852 3b04 	ldr.w	r3, [r2], #4
    e382:	fa1f fb83 	uxth.w	fp, r3
    e386:	f1bb 0f00 	cmp.w	fp, #0
    e38a:	d020      	beq.n	e3ce <__multiply+0xb2>
    e38c:	2000      	movs	r0, #0
    e38e:	464f      	mov	r7, r9
    e390:	4666      	mov	r6, ip
    e392:	4605      	mov	r5, r0
    e394:	e000      	b.n	e398 <__multiply+0x7c>
    e396:	461e      	mov	r6, r3
    e398:	f857 4b04 	ldr.w	r4, [r7], #4
    e39c:	6830      	ldr	r0, [r6, #0]
    e39e:	b2a1      	uxth	r1, r4
    e3a0:	b283      	uxth	r3, r0
    e3a2:	fb0b 3101 	mla	r1, fp, r1, r3
    e3a6:	0c24      	lsrs	r4, r4, #16
    e3a8:	0c00      	lsrs	r0, r0, #16
    e3aa:	194b      	adds	r3, r1, r5
    e3ac:	fb0b 0004 	mla	r0, fp, r4, r0
    e3b0:	eb00 4013 	add.w	r0, r0, r3, lsr #16
    e3b4:	b299      	uxth	r1, r3
    e3b6:	4633      	mov	r3, r6
    e3b8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
    e3bc:	45be      	cmp	lr, r7
    e3be:	ea4f 4510 	mov.w	r5, r0, lsr #16
    e3c2:	f843 1b04 	str.w	r1, [r3], #4
    e3c6:	d8e6      	bhi.n	e396 <__multiply+0x7a>
    e3c8:	6075      	str	r5, [r6, #4]
    e3ca:	f852 3c04 	ldr.w	r3, [r2, #-4]
    e3ce:	ea5f 4b13 	movs.w	fp, r3, lsr #16
    e3d2:	d020      	beq.n	e416 <__multiply+0xfa>
    e3d4:	f8dc 3000 	ldr.w	r3, [ip]
    e3d8:	4667      	mov	r7, ip
    e3da:	4618      	mov	r0, r3
    e3dc:	464d      	mov	r5, r9
    e3de:	2100      	movs	r1, #0
    e3e0:	e000      	b.n	e3e4 <__multiply+0xc8>
    e3e2:	4637      	mov	r7, r6
    e3e4:	882c      	ldrh	r4, [r5, #0]
    e3e6:	0c00      	lsrs	r0, r0, #16
    e3e8:	fb0b 0004 	mla	r0, fp, r4, r0
    e3ec:	4401      	add	r1, r0
    e3ee:	b29c      	uxth	r4, r3
    e3f0:	463e      	mov	r6, r7
    e3f2:	ea44 4301 	orr.w	r3, r4, r1, lsl #16
    e3f6:	f846 3b04 	str.w	r3, [r6], #4
    e3fa:	6878      	ldr	r0, [r7, #4]
    e3fc:	f855 4b04 	ldr.w	r4, [r5], #4
    e400:	b283      	uxth	r3, r0
    e402:	0c24      	lsrs	r4, r4, #16
    e404:	fb0b 3404 	mla	r4, fp, r4, r3
    e408:	eb04 4311 	add.w	r3, r4, r1, lsr #16
    e40c:	45ae      	cmp	lr, r5
    e40e:	ea4f 4113 	mov.w	r1, r3, lsr #16
    e412:	d8e6      	bhi.n	e3e2 <__multiply+0xc6>
    e414:	607b      	str	r3, [r7, #4]
    e416:	4592      	cmp	sl, r2
    e418:	f10c 0c04 	add.w	ip, ip, #4
    e41c:	d8af      	bhi.n	e37e <__multiply+0x62>
    e41e:	f8dd 9004 	ldr.w	r9, [sp, #4]
    e422:	f1b8 0f00 	cmp.w	r8, #0
    e426:	dd0b      	ble.n	e440 <__multiply+0x124>
    e428:	f859 3c04 	ldr.w	r3, [r9, #-4]
    e42c:	f1a9 0904 	sub.w	r9, r9, #4
    e430:	b11b      	cbz	r3, e43a <__multiply+0x11e>
    e432:	e005      	b.n	e440 <__multiply+0x124>
    e434:	f859 3d04 	ldr.w	r3, [r9, #-4]!
    e438:	b913      	cbnz	r3, e440 <__multiply+0x124>
    e43a:	f1b8 0801 	subs.w	r8, r8, #1
    e43e:	d1f9      	bne.n	e434 <__multiply+0x118>
    e440:	9800      	ldr	r0, [sp, #0]
    e442:	f8c0 8010 	str.w	r8, [r0, #16]
    e446:	b003      	add	sp, #12
    e448:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e44c <__pow5mult>:
    e44c:	f012 0303 	ands.w	r3, r2, #3
    e450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    e454:	4614      	mov	r4, r2
    e456:	4607      	mov	r7, r0
    e458:	d12e      	bne.n	e4b8 <__pow5mult+0x6c>
    e45a:	460e      	mov	r6, r1
    e45c:	10a4      	asrs	r4, r4, #2
    e45e:	d01c      	beq.n	e49a <__pow5mult+0x4e>
    e460:	6cbd      	ldr	r5, [r7, #72]	; 0x48
    e462:	b395      	cbz	r5, e4ca <__pow5mult+0x7e>
    e464:	07e3      	lsls	r3, r4, #31
    e466:	f04f 0800 	mov.w	r8, #0
    e46a:	d406      	bmi.n	e47a <__pow5mult+0x2e>
    e46c:	1064      	asrs	r4, r4, #1
    e46e:	d014      	beq.n	e49a <__pow5mult+0x4e>
    e470:	6828      	ldr	r0, [r5, #0]
    e472:	b1a8      	cbz	r0, e4a0 <__pow5mult+0x54>
    e474:	4605      	mov	r5, r0
    e476:	07e3      	lsls	r3, r4, #31
    e478:	d5f8      	bpl.n	e46c <__pow5mult+0x20>
    e47a:	462a      	mov	r2, r5
    e47c:	4631      	mov	r1, r6
    e47e:	4638      	mov	r0, r7
    e480:	f7ff ff4c 	bl	e31c <__multiply>
    e484:	b1b6      	cbz	r6, e4b4 <__pow5mult+0x68>
    e486:	6872      	ldr	r2, [r6, #4]
    e488:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    e48a:	1064      	asrs	r4, r4, #1
    e48c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e490:	6031      	str	r1, [r6, #0]
    e492:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e496:	4606      	mov	r6, r0
    e498:	d1ea      	bne.n	e470 <__pow5mult+0x24>
    e49a:	4630      	mov	r0, r6
    e49c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    e4a0:	462a      	mov	r2, r5
    e4a2:	4629      	mov	r1, r5
    e4a4:	4638      	mov	r0, r7
    e4a6:	f7ff ff39 	bl	e31c <__multiply>
    e4aa:	6028      	str	r0, [r5, #0]
    e4ac:	f8c0 8000 	str.w	r8, [r0]
    e4b0:	4605      	mov	r5, r0
    e4b2:	e7e0      	b.n	e476 <__pow5mult+0x2a>
    e4b4:	4606      	mov	r6, r0
    e4b6:	e7d9      	b.n	e46c <__pow5mult+0x20>
    e4b8:	1e5a      	subs	r2, r3, #1
    e4ba:	4d0b      	ldr	r5, [pc, #44]	; (e4e8 <__pow5mult+0x9c>)
    e4bc:	2300      	movs	r3, #0
    e4be:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    e4c2:	f7ff fe93 	bl	e1ec <__multadd>
    e4c6:	4606      	mov	r6, r0
    e4c8:	e7c8      	b.n	e45c <__pow5mult+0x10>
    e4ca:	2101      	movs	r1, #1
    e4cc:	4638      	mov	r0, r7
    e4ce:	f7ff fe5d 	bl	e18c <_Balloc>
    e4d2:	f240 2171 	movw	r1, #625	; 0x271
    e4d6:	2201      	movs	r2, #1
    e4d8:	2300      	movs	r3, #0
    e4da:	6141      	str	r1, [r0, #20]
    e4dc:	6102      	str	r2, [r0, #16]
    e4de:	4605      	mov	r5, r0
    e4e0:	64b8      	str	r0, [r7, #72]	; 0x48
    e4e2:	6003      	str	r3, [r0, #0]
    e4e4:	e7be      	b.n	e464 <__pow5mult+0x18>
    e4e6:	bf00      	nop
    e4e8:	20001038 	.word	0x20001038

0000e4ec <__lshift>:
    e4ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e4f0:	4691      	mov	r9, r2
    e4f2:	690a      	ldr	r2, [r1, #16]
    e4f4:	688b      	ldr	r3, [r1, #8]
    e4f6:	ea4f 1469 	mov.w	r4, r9, asr #5
    e4fa:	eb04 0802 	add.w	r8, r4, r2
    e4fe:	f108 0501 	add.w	r5, r8, #1
    e502:	429d      	cmp	r5, r3
    e504:	460e      	mov	r6, r1
    e506:	4682      	mov	sl, r0
    e508:	6849      	ldr	r1, [r1, #4]
    e50a:	dd04      	ble.n	e516 <__lshift+0x2a>
    e50c:	005b      	lsls	r3, r3, #1
    e50e:	429d      	cmp	r5, r3
    e510:	f101 0101 	add.w	r1, r1, #1
    e514:	dcfa      	bgt.n	e50c <__lshift+0x20>
    e516:	4650      	mov	r0, sl
    e518:	f7ff fe38 	bl	e18c <_Balloc>
    e51c:	2c00      	cmp	r4, #0
    e51e:	f100 0214 	add.w	r2, r0, #20
    e522:	dd38      	ble.n	e596 <__lshift+0xaa>
    e524:	eb02 0384 	add.w	r3, r2, r4, lsl #2
    e528:	2100      	movs	r1, #0
    e52a:	f842 1b04 	str.w	r1, [r2], #4
    e52e:	4293      	cmp	r3, r2
    e530:	d1fb      	bne.n	e52a <__lshift+0x3e>
    e532:	6934      	ldr	r4, [r6, #16]
    e534:	f106 0114 	add.w	r1, r6, #20
    e538:	f019 091f 	ands.w	r9, r9, #31
    e53c:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
    e540:	d021      	beq.n	e586 <__lshift+0x9a>
    e542:	f1c9 0220 	rsb	r2, r9, #32
    e546:	2400      	movs	r4, #0
    e548:	680f      	ldr	r7, [r1, #0]
    e54a:	fa07 fc09 	lsl.w	ip, r7, r9
    e54e:	ea4c 0404 	orr.w	r4, ip, r4
    e552:	469c      	mov	ip, r3
    e554:	f843 4b04 	str.w	r4, [r3], #4
    e558:	f851 4b04 	ldr.w	r4, [r1], #4
    e55c:	458e      	cmp	lr, r1
    e55e:	fa24 f402 	lsr.w	r4, r4, r2
    e562:	d8f1      	bhi.n	e548 <__lshift+0x5c>
    e564:	f8cc 4004 	str.w	r4, [ip, #4]
    e568:	b10c      	cbz	r4, e56e <__lshift+0x82>
    e56a:	f108 0502 	add.w	r5, r8, #2
    e56e:	f8da 304c 	ldr.w	r3, [sl, #76]	; 0x4c
    e572:	6872      	ldr	r2, [r6, #4]
    e574:	3d01      	subs	r5, #1
    e576:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
    e57a:	6105      	str	r5, [r0, #16]
    e57c:	6031      	str	r1, [r6, #0]
    e57e:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
    e582:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    e586:	3b04      	subs	r3, #4
    e588:	f851 2b04 	ldr.w	r2, [r1], #4
    e58c:	f843 2f04 	str.w	r2, [r3, #4]!
    e590:	458e      	cmp	lr, r1
    e592:	d8f9      	bhi.n	e588 <__lshift+0x9c>
    e594:	e7eb      	b.n	e56e <__lshift+0x82>
    e596:	4613      	mov	r3, r2
    e598:	e7cb      	b.n	e532 <__lshift+0x46>
    e59a:	bf00      	nop

0000e59c <__mcmp>:
    e59c:	6902      	ldr	r2, [r0, #16]
    e59e:	690b      	ldr	r3, [r1, #16]
    e5a0:	1ad2      	subs	r2, r2, r3
    e5a2:	d113      	bne.n	e5cc <__mcmp+0x30>
    e5a4:	009b      	lsls	r3, r3, #2
    e5a6:	3014      	adds	r0, #20
    e5a8:	3114      	adds	r1, #20
    e5aa:	4419      	add	r1, r3
    e5ac:	b410      	push	{r4}
    e5ae:	4403      	add	r3, r0
    e5b0:	e001      	b.n	e5b6 <__mcmp+0x1a>
    e5b2:	4298      	cmp	r0, r3
    e5b4:	d20c      	bcs.n	e5d0 <__mcmp+0x34>
    e5b6:	f853 4d04 	ldr.w	r4, [r3, #-4]!
    e5ba:	f851 2d04 	ldr.w	r2, [r1, #-4]!
    e5be:	4294      	cmp	r4, r2
    e5c0:	d0f7      	beq.n	e5b2 <__mcmp+0x16>
    e5c2:	d309      	bcc.n	e5d8 <__mcmp+0x3c>
    e5c4:	2001      	movs	r0, #1
    e5c6:	f85d 4b04 	ldr.w	r4, [sp], #4
    e5ca:	4770      	bx	lr
    e5cc:	4610      	mov	r0, r2
    e5ce:	4770      	bx	lr
    e5d0:	2000      	movs	r0, #0
    e5d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    e5d6:	4770      	bx	lr
    e5d8:	f04f 30ff 	mov.w	r0, #4294967295
    e5dc:	e7f3      	b.n	e5c6 <__mcmp+0x2a>
    e5de:	bf00      	nop

0000e5e0 <__mdiff>:
    e5e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    e5e4:	690b      	ldr	r3, [r1, #16]
    e5e6:	460f      	mov	r7, r1
    e5e8:	6911      	ldr	r1, [r2, #16]
    e5ea:	1a5b      	subs	r3, r3, r1
    e5ec:	2b00      	cmp	r3, #0
    e5ee:	4690      	mov	r8, r2
    e5f0:	d117      	bne.n	e622 <__mdiff+0x42>
    e5f2:	0089      	lsls	r1, r1, #2
    e5f4:	f107 0214 	add.w	r2, r7, #20
    e5f8:	f108 0514 	add.w	r5, r8, #20
    e5fc:	1853      	adds	r3, r2, r1
    e5fe:	4429      	add	r1, r5
    e600:	e001      	b.n	e606 <__mdiff+0x26>
    e602:	429a      	cmp	r2, r3
    e604:	d25e      	bcs.n	e6c4 <__mdiff+0xe4>
    e606:	f853 6d04 	ldr.w	r6, [r3, #-4]!
    e60a:	f851 4d04 	ldr.w	r4, [r1, #-4]!
    e60e:	42a6      	cmp	r6, r4
    e610:	d0f7      	beq.n	e602 <__mdiff+0x22>
    e612:	d260      	bcs.n	e6d6 <__mdiff+0xf6>
    e614:	463b      	mov	r3, r7
    e616:	4614      	mov	r4, r2
    e618:	4647      	mov	r7, r8
    e61a:	f04f 0901 	mov.w	r9, #1
    e61e:	4698      	mov	r8, r3
    e620:	e006      	b.n	e630 <__mdiff+0x50>
    e622:	db5d      	blt.n	e6e0 <__mdiff+0x100>
    e624:	f107 0514 	add.w	r5, r7, #20
    e628:	f102 0414 	add.w	r4, r2, #20
    e62c:	f04f 0900 	mov.w	r9, #0
    e630:	6879      	ldr	r1, [r7, #4]
    e632:	f7ff fdab 	bl	e18c <_Balloc>
    e636:	f8d8 3010 	ldr.w	r3, [r8, #16]
    e63a:	693e      	ldr	r6, [r7, #16]
    e63c:	f8c0 900c 	str.w	r9, [r0, #12]
    e640:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
    e644:	46a6      	mov	lr, r4
    e646:	eb05 0786 	add.w	r7, r5, r6, lsl #2
    e64a:	f100 0414 	add.w	r4, r0, #20
    e64e:	2300      	movs	r3, #0
    e650:	f85e 1b04 	ldr.w	r1, [lr], #4
    e654:	f855 8b04 	ldr.w	r8, [r5], #4
    e658:	b28a      	uxth	r2, r1
    e65a:	fa13 f388 	uxtah	r3, r3, r8
    e65e:	0c09      	lsrs	r1, r1, #16
    e660:	1a9a      	subs	r2, r3, r2
    e662:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
    e666:	eb03 4322 	add.w	r3, r3, r2, asr #16
    e66a:	b292      	uxth	r2, r2
    e66c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e670:	45f4      	cmp	ip, lr
    e672:	f844 2b04 	str.w	r2, [r4], #4
    e676:	ea4f 4323 	mov.w	r3, r3, asr #16
    e67a:	d8e9      	bhi.n	e650 <__mdiff+0x70>
    e67c:	42af      	cmp	r7, r5
    e67e:	d917      	bls.n	e6b0 <__mdiff+0xd0>
    e680:	46a4      	mov	ip, r4
    e682:	4629      	mov	r1, r5
    e684:	f851 eb04 	ldr.w	lr, [r1], #4
    e688:	fa13 f28e 	uxtah	r2, r3, lr
    e68c:	1413      	asrs	r3, r2, #16
    e68e:	eb03 431e 	add.w	r3, r3, lr, lsr #16
    e692:	b292      	uxth	r2, r2
    e694:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
    e698:	428f      	cmp	r7, r1
    e69a:	f84c 2b04 	str.w	r2, [ip], #4
    e69e:	ea4f 4323 	mov.w	r3, r3, asr #16
    e6a2:	d8ef      	bhi.n	e684 <__mdiff+0xa4>
    e6a4:	43ed      	mvns	r5, r5
    e6a6:	443d      	add	r5, r7
    e6a8:	f025 0503 	bic.w	r5, r5, #3
    e6ac:	3504      	adds	r5, #4
    e6ae:	442c      	add	r4, r5
    e6b0:	3c04      	subs	r4, #4
    e6b2:	b922      	cbnz	r2, e6be <__mdiff+0xde>
    e6b4:	f854 3d04 	ldr.w	r3, [r4, #-4]!
    e6b8:	3e01      	subs	r6, #1
    e6ba:	2b00      	cmp	r3, #0
    e6bc:	d0fa      	beq.n	e6b4 <__mdiff+0xd4>
    e6be:	6106      	str	r6, [r0, #16]
    e6c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e6c4:	2100      	movs	r1, #0
    e6c6:	f7ff fd61 	bl	e18c <_Balloc>
    e6ca:	2201      	movs	r2, #1
    e6cc:	2300      	movs	r3, #0
    e6ce:	6102      	str	r2, [r0, #16]
    e6d0:	6143      	str	r3, [r0, #20]
    e6d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    e6d6:	462c      	mov	r4, r5
    e6d8:	f04f 0900 	mov.w	r9, #0
    e6dc:	4615      	mov	r5, r2
    e6de:	e7a7      	b.n	e630 <__mdiff+0x50>
    e6e0:	463b      	mov	r3, r7
    e6e2:	f107 0414 	add.w	r4, r7, #20
    e6e6:	f108 0514 	add.w	r5, r8, #20
    e6ea:	4647      	mov	r7, r8
    e6ec:	f04f 0901 	mov.w	r9, #1
    e6f0:	4698      	mov	r8, r3
    e6f2:	e79d      	b.n	e630 <__mdiff+0x50>

0000e6f4 <__d2b>:
    e6f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    e6f8:	ec57 6b10 	vmov	r6, r7, d0
    e6fc:	b083      	sub	sp, #12
    e6fe:	4688      	mov	r8, r1
    e700:	2101      	movs	r1, #1
    e702:	463c      	mov	r4, r7
    e704:	f3c7 550a 	ubfx	r5, r7, #20, #11
    e708:	4617      	mov	r7, r2
    e70a:	f7ff fd3f 	bl	e18c <_Balloc>
    e70e:	f3c4 0413 	ubfx	r4, r4, #0, #20
    e712:	4681      	mov	r9, r0
    e714:	b10d      	cbz	r5, e71a <__d2b+0x26>
    e716:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
    e71a:	9401      	str	r4, [sp, #4]
    e71c:	b31e      	cbz	r6, e766 <__d2b+0x72>
    e71e:	a802      	add	r0, sp, #8
    e720:	f840 6d08 	str.w	r6, [r0, #-8]!
    e724:	f7ff fdc2 	bl	e2ac <__lo0bits>
    e728:	2800      	cmp	r0, #0
    e72a:	d134      	bne.n	e796 <__d2b+0xa2>
    e72c:	e89d 000c 	ldmia.w	sp, {r2, r3}
    e730:	f8c9 2014 	str.w	r2, [r9, #20]
    e734:	2b00      	cmp	r3, #0
    e736:	bf0c      	ite	eq
    e738:	2101      	moveq	r1, #1
    e73a:	2102      	movne	r1, #2
    e73c:	f8c9 3018 	str.w	r3, [r9, #24]
    e740:	f8c9 1010 	str.w	r1, [r9, #16]
    e744:	b9dd      	cbnz	r5, e77e <__d2b+0x8a>
    e746:	eb09 0381 	add.w	r3, r9, r1, lsl #2
    e74a:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
    e74e:	f8c8 0000 	str.w	r0, [r8]
    e752:	6918      	ldr	r0, [r3, #16]
    e754:	f7ff fd8a 	bl	e26c <__hi0bits>
    e758:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
    e75c:	6038      	str	r0, [r7, #0]
    e75e:	4648      	mov	r0, r9
    e760:	b003      	add	sp, #12
    e762:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e766:	a801      	add	r0, sp, #4
    e768:	f7ff fda0 	bl	e2ac <__lo0bits>
    e76c:	9b01      	ldr	r3, [sp, #4]
    e76e:	f8c9 3014 	str.w	r3, [r9, #20]
    e772:	2101      	movs	r1, #1
    e774:	3020      	adds	r0, #32
    e776:	f8c9 1010 	str.w	r1, [r9, #16]
    e77a:	2d00      	cmp	r5, #0
    e77c:	d0e3      	beq.n	e746 <__d2b+0x52>
    e77e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
    e782:	4405      	add	r5, r0
    e784:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
    e788:	f8c8 5000 	str.w	r5, [r8]
    e78c:	6038      	str	r0, [r7, #0]
    e78e:	4648      	mov	r0, r9
    e790:	b003      	add	sp, #12
    e792:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    e796:	e89d 000c 	ldmia.w	sp, {r2, r3}
    e79a:	f1c0 0120 	rsb	r1, r0, #32
    e79e:	fa03 f101 	lsl.w	r1, r3, r1
    e7a2:	430a      	orrs	r2, r1
    e7a4:	40c3      	lsrs	r3, r0
    e7a6:	9301      	str	r3, [sp, #4]
    e7a8:	f8c9 2014 	str.w	r2, [r9, #20]
    e7ac:	e7c2      	b.n	e734 <__d2b+0x40>
    e7ae:	bf00      	nop

0000e7b0 <__ssprint_r>:
    e7b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e7b4:	6893      	ldr	r3, [r2, #8]
    e7b6:	b083      	sub	sp, #12
    e7b8:	4690      	mov	r8, r2
    e7ba:	2b00      	cmp	r3, #0
    e7bc:	d072      	beq.n	e8a4 <__ssprint_r+0xf4>
    e7be:	4683      	mov	fp, r0
    e7c0:	f04f 0900 	mov.w	r9, #0
    e7c4:	6816      	ldr	r6, [r2, #0]
    e7c6:	6808      	ldr	r0, [r1, #0]
    e7c8:	688b      	ldr	r3, [r1, #8]
    e7ca:	460d      	mov	r5, r1
    e7cc:	464c      	mov	r4, r9
    e7ce:	2c00      	cmp	r4, #0
    e7d0:	d045      	beq.n	e85e <__ssprint_r+0xae>
    e7d2:	429c      	cmp	r4, r3
    e7d4:	461f      	mov	r7, r3
    e7d6:	469a      	mov	sl, r3
    e7d8:	d346      	bcc.n	e868 <__ssprint_r+0xb8>
    e7da:	89ab      	ldrh	r3, [r5, #12]
    e7dc:	f413 6f90 	tst.w	r3, #1152	; 0x480
    e7e0:	d02d      	beq.n	e83e <__ssprint_r+0x8e>
    e7e2:	696f      	ldr	r7, [r5, #20]
    e7e4:	6929      	ldr	r1, [r5, #16]
    e7e6:	eb07 0747 	add.w	r7, r7, r7, lsl #1
    e7ea:	ebc1 0a00 	rsb	sl, r1, r0
    e7ee:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
    e7f2:	1c60      	adds	r0, r4, #1
    e7f4:	107f      	asrs	r7, r7, #1
    e7f6:	4450      	add	r0, sl
    e7f8:	42b8      	cmp	r0, r7
    e7fa:	463a      	mov	r2, r7
    e7fc:	bf84      	itt	hi
    e7fe:	4607      	movhi	r7, r0
    e800:	463a      	movhi	r2, r7
    e802:	055b      	lsls	r3, r3, #21
    e804:	d533      	bpl.n	e86e <__ssprint_r+0xbe>
    e806:	4611      	mov	r1, r2
    e808:	4658      	mov	r0, fp
    e80a:	f7fc fa57 	bl	acbc <_malloc_r>
    e80e:	2800      	cmp	r0, #0
    e810:	d037      	beq.n	e882 <__ssprint_r+0xd2>
    e812:	4652      	mov	r2, sl
    e814:	6929      	ldr	r1, [r5, #16]
    e816:	9001      	str	r0, [sp, #4]
    e818:	f7fa f91c 	bl	8a54 <memcpy>
    e81c:	89aa      	ldrh	r2, [r5, #12]
    e81e:	9b01      	ldr	r3, [sp, #4]
    e820:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
    e824:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    e828:	81aa      	strh	r2, [r5, #12]
    e82a:	ebca 0207 	rsb	r2, sl, r7
    e82e:	eb03 000a 	add.w	r0, r3, sl
    e832:	616f      	str	r7, [r5, #20]
    e834:	612b      	str	r3, [r5, #16]
    e836:	6028      	str	r0, [r5, #0]
    e838:	60aa      	str	r2, [r5, #8]
    e83a:	4627      	mov	r7, r4
    e83c:	46a2      	mov	sl, r4
    e83e:	4652      	mov	r2, sl
    e840:	4649      	mov	r1, r9
    e842:	f7fc fd8f 	bl	b364 <memmove>
    e846:	f8d8 2008 	ldr.w	r2, [r8, #8]
    e84a:	68ab      	ldr	r3, [r5, #8]
    e84c:	6828      	ldr	r0, [r5, #0]
    e84e:	1bdb      	subs	r3, r3, r7
    e850:	4450      	add	r0, sl
    e852:	1b14      	subs	r4, r2, r4
    e854:	60ab      	str	r3, [r5, #8]
    e856:	6028      	str	r0, [r5, #0]
    e858:	f8c8 4008 	str.w	r4, [r8, #8]
    e85c:	b314      	cbz	r4, e8a4 <__ssprint_r+0xf4>
    e85e:	f8d6 9000 	ldr.w	r9, [r6]
    e862:	6874      	ldr	r4, [r6, #4]
    e864:	3608      	adds	r6, #8
    e866:	e7b2      	b.n	e7ce <__ssprint_r+0x1e>
    e868:	4627      	mov	r7, r4
    e86a:	46a2      	mov	sl, r4
    e86c:	e7e7      	b.n	e83e <__ssprint_r+0x8e>
    e86e:	4658      	mov	r0, fp
    e870:	f7fc fe2e 	bl	b4d0 <_realloc_r>
    e874:	4603      	mov	r3, r0
    e876:	2800      	cmp	r0, #0
    e878:	d1d7      	bne.n	e82a <__ssprint_r+0x7a>
    e87a:	6929      	ldr	r1, [r5, #16]
    e87c:	4658      	mov	r0, fp
    e87e:	f7ff fb8f 	bl	dfa0 <_free_r>
    e882:	230c      	movs	r3, #12
    e884:	f8cb 3000 	str.w	r3, [fp]
    e888:	89ab      	ldrh	r3, [r5, #12]
    e88a:	2200      	movs	r2, #0
    e88c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    e890:	f04f 30ff 	mov.w	r0, #4294967295
    e894:	81ab      	strh	r3, [r5, #12]
    e896:	f8c8 2008 	str.w	r2, [r8, #8]
    e89a:	f8c8 2004 	str.w	r2, [r8, #4]
    e89e:	b003      	add	sp, #12
    e8a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    e8a4:	2000      	movs	r0, #0
    e8a6:	f8c8 0004 	str.w	r0, [r8, #4]
    e8aa:	b003      	add	sp, #12
    e8ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0000e8b0 <_calloc_r>:
    e8b0:	b510      	push	{r4, lr}
    e8b2:	fb02 f101 	mul.w	r1, r2, r1
    e8b6:	f7fc fa01 	bl	acbc <_malloc_r>
    e8ba:	4604      	mov	r4, r0
    e8bc:	b1d8      	cbz	r0, e8f6 <_calloc_r+0x46>
    e8be:	f850 2c04 	ldr.w	r2, [r0, #-4]
    e8c2:	f022 0203 	bic.w	r2, r2, #3
    e8c6:	3a04      	subs	r2, #4
    e8c8:	2a24      	cmp	r2, #36	; 0x24
    e8ca:	d818      	bhi.n	e8fe <_calloc_r+0x4e>
    e8cc:	2a13      	cmp	r2, #19
    e8ce:	d914      	bls.n	e8fa <_calloc_r+0x4a>
    e8d0:	2300      	movs	r3, #0
    e8d2:	2a1b      	cmp	r2, #27
    e8d4:	6003      	str	r3, [r0, #0]
    e8d6:	6043      	str	r3, [r0, #4]
    e8d8:	d916      	bls.n	e908 <_calloc_r+0x58>
    e8da:	2a24      	cmp	r2, #36	; 0x24
    e8dc:	6083      	str	r3, [r0, #8]
    e8de:	60c3      	str	r3, [r0, #12]
    e8e0:	bf11      	iteee	ne
    e8e2:	f100 0210 	addne.w	r2, r0, #16
    e8e6:	6103      	streq	r3, [r0, #16]
    e8e8:	6143      	streq	r3, [r0, #20]
    e8ea:	f100 0218 	addeq.w	r2, r0, #24
    e8ee:	2300      	movs	r3, #0
    e8f0:	6013      	str	r3, [r2, #0]
    e8f2:	6053      	str	r3, [r2, #4]
    e8f4:	6093      	str	r3, [r2, #8]
    e8f6:	4620      	mov	r0, r4
    e8f8:	bd10      	pop	{r4, pc}
    e8fa:	4602      	mov	r2, r0
    e8fc:	e7f7      	b.n	e8ee <_calloc_r+0x3e>
    e8fe:	2100      	movs	r1, #0
    e900:	f7fc fd94 	bl	b42c <memset>
    e904:	4620      	mov	r0, r4
    e906:	bd10      	pop	{r4, pc}
    e908:	f100 0208 	add.w	r2, r0, #8
    e90c:	e7ef      	b.n	e8ee <_calloc_r+0x3e>
    e90e:	bf00      	nop

0000e910 <___init_veneer>:
    e910:	f85f f000 	ldr.w	pc, [pc]	; e914 <___init_veneer+0x4>
    e914:	60001649 	.word	0x60001649
	...

Disassembly of section .fini:

0000e920 <_fini>:
    e920:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e922:	bf00      	nop

Disassembly of section .text.csf:

60011cb0 <hab_csf>:
	...
